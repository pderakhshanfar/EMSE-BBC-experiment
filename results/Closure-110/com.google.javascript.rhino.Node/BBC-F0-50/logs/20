* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12233
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 131228449
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:30:18.792 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:30:49.881 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:38:02.801 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 838
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 25385
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 318
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1525
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 838
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 691
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 693
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 1619
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 62
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 197
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1287
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 27482
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 197
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 197
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 1990
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 197
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 278
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 18320
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 197
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 132
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 7938
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 454: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 7895
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 563
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 456: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 838
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 455: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 5164
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 225
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 1986
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 712
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 225
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 2072
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 22378
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 64
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 225
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1198
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 454
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 31
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 13181
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 838
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4805
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 24493
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 512
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 441
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1473
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 53318
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3123
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3002
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 23264
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 454
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 3330
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 90
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 399
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 451
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 984
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 646
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6321
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 36651
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 6857
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 984
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 70
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 114200
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 13994
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 802
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 441
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 441
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1652
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 2072
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 984
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 2946
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 594
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 984
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 984
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 3896
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 21315
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 441
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 379
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 379
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 225
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 379
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1480
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 384
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 6802
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1480
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 6649
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 14582
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 3044
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 16165
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 114200
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 112428
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 31
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 84
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 723
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4641
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2162
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 165
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1074
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 1627
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 84
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 32802
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 984
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 70
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 984
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 164
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 20722
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 31042
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 114200
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 36654
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 441
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 45
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 72
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 45
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 1453
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 7529
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 2779
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 1460
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 12745
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 225
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 4343
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 112
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 62
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 13355
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 42595
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 787
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 563
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 1986
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 21117
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 132
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 2104
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 14100
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 45
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1593
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 2073
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 324
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 984
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 45
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 4614
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 45
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 2779
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 64585
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 13742
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 6802
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 3440
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 441
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 17871
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 190
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 1525
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 26494
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5927
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 13551
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1480
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1480
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 563
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 6751
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 3705
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 45
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 42595
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 114200
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 550
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 984
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 25116
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 2525
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 563
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 550
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 310
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 7567
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 327
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1363
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 95
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 563
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 426
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 3511
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 22348
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 2248
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 8009
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 7768
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 23928
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 59
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1194
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1593
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 9446
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 225
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 295
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 441
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 563
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 152
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 13846
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 76
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 225
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 3770
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1514
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 47
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 580
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 11197
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 17
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 6692
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 838
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 3330
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7529
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 38681
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 11841
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 41060
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 225
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7529
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 225
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 327
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 5104
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 76
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 984
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 342
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 17294
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 441
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 672
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 132
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 984
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 327
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 1619
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1593
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 71
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 787
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 76
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 76
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 1619
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 859
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 45
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 6463
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 11443
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 695
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 327
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 3511
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 7172
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4413
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 327
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 5215
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 31604
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 23829
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 331
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 13788
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 451
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 984
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 11950
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 10990
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 54
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 132
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 23746
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 25090
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 22619
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 20319
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 1593
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 327
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1736
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 225
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 132
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 4319
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 671
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 825
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 838
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 3857
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 4096
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 980
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 46032
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 632
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 6060
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 412
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 62
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 280
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 387
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 4904
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 5195
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 3511
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 1436
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 2248
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 17261
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 7820
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 775
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 23112
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 3511
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 15871
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 3408
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 536
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 956
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 580
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 16628
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2959
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 984
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 9156
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 3170
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 22605
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 124
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 387
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 7502
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 6279
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 321
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 5164
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 12012
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 384
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 15
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 15121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 417
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 7315
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 38203
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 62
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 132
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 14977
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 14977
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 225
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 132
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 298
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 29366
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 225
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 225
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 298
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 3170
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 7046
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 31604
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 658
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 327
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 1691
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1287
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 984
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 132
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 225
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 493
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4555
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 984
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 22861
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 45
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 441
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 116
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 8597
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 984
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 967
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7982
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 318
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 24290
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 7982
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1736
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6186
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1736
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 3145
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 3170
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 107
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 4319
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 22511
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 4280
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 197
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 2951
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 3705
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 7863
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2625
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 6241
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1629
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 18296
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 227
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 225
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 2248
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 441
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 3323
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 8220
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 22619
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 45
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 23174
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 838
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 2954
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 4556
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 132
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 27089
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 4244
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1291
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 1538
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 132
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1663
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 984
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 5928
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 132
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 225
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 498
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 17294
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 581
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4610
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 132
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 563
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 563
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 563
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 563
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 17294
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 563
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 2883
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 563
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 95
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 240
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 8597
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 699
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 984
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 4476
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 267
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 650
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 28131
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 980
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 28131
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 650
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 84
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 650
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 37935
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 45
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 838
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 2078
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 45
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 16298
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 838
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 16298
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 21447
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 11876
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 21552
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 58838
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 4839
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 60339
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 225
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 20653
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 112428
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 838
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 13177
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 64
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 19032
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 36888
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 25566
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 10059
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 695
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 695
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 7131
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 956
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 8404
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 838
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 225
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 3885
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 225
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 2954
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 643
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2954
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2652
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 563
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1167
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 110
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 327
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 197
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 13436
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 99
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 27883
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 2073
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 35899
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 4244
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 5215
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 838
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 4416
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 132
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 4282
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 36381
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 3896
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 2248
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 1302
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 45
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 45
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 13177
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 13973
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 610
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 225
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 35062
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 6463
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 132
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 132
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 132
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 1808
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 132
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 132
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 441
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 4696
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 132
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 17954
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 2427
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 537
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 441
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 11872
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 35062
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 5141
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 114200
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 12993
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 21
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 62
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 441
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 4096
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 225
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 10305
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1317
Number of times BBC is called in total: 6084370
* Search finished after 604s and 684 generations, 285024 statements, best individual has fitness: 2888.0
* Minimizing test suite
[MASTER] 10:41:34.072 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 805
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 627
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2145
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 582
* Generated 829 tests with total length 10016
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:42:39.885 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6703666666666667% of time used, but only 64/829 tests minimized), falling back to using all assertions
[MASTER] 10:42:59.832 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 10:43:09.660 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 10:43:20.849 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1628160200564/com/google/javascript/rhino/Node_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1628160200564/com/google/javascript/rhino/Node_121_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:20.849 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.849 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.853 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1370
[MASTER] 10:43:20.855 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1628160200564/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_121_tmp__ESTest extends Node_121_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0, (-1363), (-1363));
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(55, Node.INFERRED_FUNCTION);
25:       assertEquals(36, Node.QUOTED_PROP);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(43, Node.IS_CONSTANT_NAME);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(29, Node.JSDOC_INFO_PROP);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(8, Node.FLAG_NO_THROWS);
38:       assertEquals(39, Node.EMPTY_BLOCK);
39:       assertEquals(53, Node.INPUT_ID);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(46, Node.IS_NAMESPACE);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.isThis());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.hasOneChild());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.isEmpty());
81:       assertEquals((-1), node0.getCharno());
82:       assertFalse(node0.isSwitch());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isArrayLit());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isSetterDef());
90:       assertFalse(node0.isNull());
91:       assertFalse(node0.isParamList());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isAdd());
94:       assertFalse(node0.isVoid());
95:       assertFalse(node0.isTrue());
96:       assertFalse(node0.isBlock());
97:       assertFalse(node0.isTry());
98:       assertFalse(node0.isRegExp());
99:       assertFalse(node0.isWhile());
100:       assertFalse(node0.isCall());
101:       assertFalse(node0.hasMoreThanOneChild());
102:       assertEquals(39, node0.getType());
103:       assertFalse(node0.isName());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.isTypeOf());
106:       assertTrue(node0.isNumber());
107:       assertFalse(node0.isDec());
108:       assertEquals((-1), node0.getSourcePosition());
109:       assertEquals((-1), node0.getLineno());
110:       assertFalse(node0.hasChildren());
111:       assertFalse(node0.isIf());
112:       assertFalse(node0.isReturn());
113:       assertFalse(node0.isNE());
114:       assertFalse(node0.isIn());
115:       assertFalse(node0.isString());
116:       assertFalse(node0.isDebugger());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isInc());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isContinue());
122:       assertFalse(node0.isFalse());
123:       assertFalse(node0.isCast());
124:       assertNotNull(node0);
125:       
126:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(36, Node.QUOTED_PROP);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(43, Node.IS_CONSTANT_NAME);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(40, Node.ORIGINALNAME_PROP);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(29, Node.JSDOC_INFO_PROP);
138:       assertEquals(52, Node.LENGTH);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(39, Node.EMPTY_BLOCK);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(57, Node.LAST_PROP);
148:       assertEquals(12, Node.COLUMN_BITS);
149:       assertEquals(46, Node.IS_NAMESPACE);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertFalse(node0.isGetProp());
164:       assertFalse(node0.isThis());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isGetElem());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isFor());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isDo());
183:       assertFalse(node0.hasOneChild());
184:       assertFalse(node0.isGetterDef());
185:       assertFalse(node0.isEmpty());
186:       assertEquals((-1), node0.getCharno());
187:       assertFalse(node0.isSwitch());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isDefaultCase());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isArrayLit());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isSetterDef());
195:       assertFalse(node0.isNull());
196:       assertFalse(node0.isParamList());
197:       assertFalse(node0.isStringKey());
198:       assertFalse(node0.isAdd());
199:       assertFalse(node0.isVoid());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isBlock());
202:       assertFalse(node0.isTry());
203:       assertFalse(node0.isRegExp());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.isCall());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertEquals(39, node0.getType());
208:       assertFalse(node0.isName());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.isTypeOf());
211:       assertTrue(node0.isNumber());
212:       assertFalse(node0.isDec());
213:       assertEquals((-1), node0.getSourcePosition());
214:       assertEquals((-1), node0.getLineno());
215:       assertFalse(node0.hasChildren());
216:       assertFalse(node0.isIf());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.isNE());
219:       assertFalse(node0.isIn());
220:       assertFalse(node0.isString());
221:       assertFalse(node0.isDebugger());
222:       assertFalse(node0.isFunction());
223:       assertFalse(node0.isInc());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isThrow());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isCast());
229:       assertNull(staticSourceFile0);
230:       
231:       int int0 = node0.getType();
232:       assertEquals(39, int0);
233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(55, Node.INFERRED_FUNCTION);
236:       assertEquals(36, Node.QUOTED_PROP);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(29, Node.JSDOC_INFO_PROP);
244:       assertEquals(52, Node.LENGTH);
245:       assertEquals(47, Node.IS_DISPATCHER);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(8, Node.FLAG_NO_THROWS);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(12, Node.COLUMN_BITS);
255:       assertEquals(46, Node.IS_NAMESPACE);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
258:       assertEquals(37, Node.OPT_ARG_NAME);
259:       assertEquals(54, Node.SLASH_V);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(49, Node.DIRECT_EVAL);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertEquals(1, Node.DECR_FLAG);
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isThis());
271:       assertFalse(node0.isComma());
272:       assertFalse(node0.isObjectLit());
273:       assertFalse(node0.isNot());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isExprResult());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isGetElem());
278:       assertFalse(node0.isAssign());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isLabel());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isAssignAdd());
286:       assertFalse(node0.isFor());
287:       assertFalse(node0.isCase());
288:       assertFalse(node0.isDo());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isEmpty());
292:       assertEquals((-1), node0.getCharno());
293:       assertFalse(node0.isSwitch());
294:       assertFalse(node0.isNew());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isLabelName());
298:       assertFalse(node0.isArrayLit());
299:       assertEquals(0, node0.getChildCount());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isParamList());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isAdd());
305:       assertFalse(node0.isVoid());
306:       assertFalse(node0.isTrue());
307:       assertFalse(node0.isBlock());
308:       assertFalse(node0.isTry());
309:       assertFalse(node0.isRegExp());
310:       assertFalse(node0.isWhile());
311:       assertFalse(node0.isCall());
312:       assertFalse(node0.hasMoreThanOneChild());
313:       assertEquals(39, node0.getType());
314:       assertFalse(node0.isName());
315:       assertFalse(node0.isCatch());
316:       assertFalse(node0.isTypeOf());
317:       assertTrue(node0.isNumber());
318:       assertFalse(node0.isDec());
319:       assertEquals((-1), node0.getSourcePosition());
320:       assertEquals((-1), node0.getLineno());
321:       assertFalse(node0.hasChildren());
322:       assertFalse(node0.isIf());
323:       assertFalse(node0.isReturn());
324:       assertFalse(node0.isNE());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.isString());
327:       assertFalse(node0.isDebugger());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isInc());
330:       assertFalse(node0.isAnd());
331:       assertFalse(node0.isThrow());
332:       assertFalse(node0.isContinue());
333:       assertFalse(node0.isFalse());
334:       assertFalse(node0.isCast());
335:       
336:       boolean boolean0 = node0.isIn();
337:       assertFalse(boolean0);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(4095, Node.COLUMN_MASK);
340:       assertEquals(55, Node.INFERRED_FUNCTION);
341:       assertEquals(36, Node.QUOTED_PROP);
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(43, Node.IS_CONSTANT_NAME);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(48, Node.DIRECTIVES);
346:       assertEquals(40, Node.ORIGINALNAME_PROP);
347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
348:       assertEquals(29, Node.JSDOC_INFO_PROP);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(47, Node.IS_DISPATCHER);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(8, Node.FLAG_NO_THROWS);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(53, Node.INPUT_ID);
356:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(57, Node.LAST_PROP);
359:       assertEquals(12, Node.COLUMN_BITS);
360:       assertEquals(46, Node.IS_NAMESPACE);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
363:       assertEquals(37, Node.OPT_ARG_NAME);
364:       assertEquals(54, Node.SLASH_V);
365:       assertEquals(56, Node.CHANGE_TIME);
366:       assertEquals(49, Node.DIRECT_EVAL);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(50, Node.FREE_CALL);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(1, Node.DECR_FLAG);
374:       assertFalse(node0.isGetProp());
375:       assertFalse(node0.isThis());
376:       assertFalse(node0.isComma());
377:       assertFalse(node0.isObjectLit());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.isScript());
380:       assertFalse(node0.isExprResult());
381:       assertFalse(node0.isHook());
382:       assertFalse(node0.isGetElem());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isBreak());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isInstanceOf());
387:       assertFalse(node0.isLabel());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isFor());
392:       assertFalse(node0.isCase());
393:       assertFalse(node0.isDo());
394:       assertFalse(node0.hasOneChild());
395:       assertFalse(node0.isGetterDef());
396:       assertFalse(node0.isEmpty());
397:       assertEquals((-1), node0.getCharno());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isNew());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isVar());
402:       assertFalse(node0.isLabelName());
403:       assertFalse(node0.isArrayLit());
404:       assertEquals(0, node0.getChildCount());
405:       assertFalse(node0.isSetterDef());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isParamList());
408:       assertFalse(node0.isStringKey());
409:       assertFalse(node0.isAdd());
410:       assertFalse(node0.isVoid());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isBlock());
413:       assertFalse(node0.isTry());
414:       assertFalse(node0.isRegExp());
415:       assertFalse(node0.isWhile());
416:       assertFalse(node0.isCall());
417:       assertFalse(node0.hasMoreThanOneChild());
418:       assertEquals(39, node0.getType());
419:       assertFalse(node0.isName());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.isTypeOf());
422:       assertTrue(node0.isNumber());
423:       assertFalse(node0.isDec());
424:       assertEquals((-1), node0.getSourcePosition());
425:       assertEquals((-1), node0.getLineno());
426:       assertFalse(node0.hasChildren());
427:       assertFalse(node0.isIf());
428:       assertFalse(node0.isReturn());
429:       assertFalse(node0.isNE());
430:       assertFalse(node0.isIn());
431:       assertFalse(node0.isString());
432:       assertFalse(node0.isDebugger());
433:       assertFalse(node0.isFunction());
434:       assertFalse(node0.isInc());
435:       assertFalse(node0.isAnd());
436:       assertFalse(node0.isThrow());
437:       assertFalse(node0.isContinue());
438:       assertFalse(node0.isFalse());
439:       assertFalse(node0.isCast());
440:       
441:       node0.removeProp((-3995));
442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
443:       assertEquals(4095, Node.COLUMN_MASK);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(29, Node.JSDOC_INFO_PROP);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(12, Node.COLUMN_BITS);
464:       assertEquals(46, Node.IS_NAMESPACE);
465:       assertEquals(30, Node.VAR_ARGS_NAME);
466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
467:       assertEquals(37, Node.OPT_ARG_NAME);
468:       assertEquals(54, Node.SLASH_V);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(49, Node.DIRECT_EVAL);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertFalse(node0.isGetProp());
479:       assertFalse(node0.isThis());
480:       assertFalse(node0.isComma());
481:       assertFalse(node0.isObjectLit());
482:       assertFalse(node0.isNot());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isExprResult());
485:       assertFalse(node0.isHook());
486:       assertFalse(node0.isGetElem());
487:       assertFalse(node0.isAssign());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isWith());
490:       assertFalse(node0.isInstanceOf());
491:       assertFalse(node0.isLabel());
492:       assertFalse(node0.isOr());
493:       assertFalse(node0.isDelProp());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isFor());
496:       assertFalse(node0.isCase());
497:       assertFalse(node0.isDo());
498:       assertFalse(node0.hasOneChild());
499:       assertFalse(node0.isGetterDef());
500:       assertFalse(node0.isEmpty());
501:       assertEquals((-1), node0.getCharno());
502:       assertFalse(node0.isSwitch());
503:       assertFalse(node0.isNew());
504:       assertFalse(node0.isDefaultCase());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isLabelName());
507:       assertFalse(node0.isArrayLit());
508:       assertEquals(0, node0.getChildCount());
509:       assertFalse(node0.isSetterDef());
510:       assertFalse(node0.isNull());
511:       assertFalse(node0.isParamList());
512:       assertFalse(node0.isStringKey());
513:       assertFalse(node0.isAdd());
514:       assertFalse(node0.isVoid());
515:       assertFalse(node0.isTrue());
516:       assertFalse(node0.isBlock());
517:       assertFalse(node0.isTry());
518:       assertFalse(node0.isRegExp());
519:       assertFalse(node0.isWhile());
520:       assertFalse(node0.isCall());
521:       assertFalse(node0.hasMoreThanOneChild());
522:       assertEquals(39, node0.getType());
523:       assertFalse(node0.isName());
524:       assertFalse(node0.isCatch());
525:       assertFalse(node0.isTypeOf());
526:       assertTrue(node0.isNumber());
527:       assertFalse(node0.isDec());
528:       assertEquals((-1), node0.getSourcePosition());
529:       assertEquals((-1), node0.getLineno());
530:       assertFalse(node0.hasChildren());
531:       assertFalse(node0.isIf());
532:       assertFalse(node0.isReturn());
533:       assertFalse(node0.isNE());
534:       assertFalse(node0.isIn());
535:       assertFalse(node0.isString());
536:       assertFalse(node0.isDebugger());
537:       assertFalse(node0.isFunction());
538:       assertFalse(node0.isInc());
539:       assertFalse(node0.isAnd());
540:       assertFalse(node0.isThrow());
541:       assertFalse(node0.isContinue());
542:       assertFalse(node0.isFalse());
543:       assertFalse(node0.isCast());
544:       
545:       Node node1 = Node.newString((-2099), "com.google.common.base.CharMatcher$2", 49, 15);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       assertEquals(12, Node.COLUMN_BITS);
549:       assertEquals(2, Node.POST_FLAG);
550:       assertEquals(30, Node.VAR_ARGS_NAME);
551:       assertEquals(56, Node.CHANGE_TIME);
552:       assertEquals(54, Node.SLASH_V);
553:       assertEquals(37, Node.OPT_ARG_NAME);
554:       assertEquals(49, Node.DIRECT_EVAL);
555:       assertEquals(40, Node.ORIGINALNAME_PROP);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(29, Node.JSDOC_INFO_PROP);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(39, Node.EMPTY_BLOCK);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(8, Node.FLAG_NO_THROWS);
570:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(36, Node.QUOTED_PROP);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
575:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertFalse(node1.equals((Object)node0));
583:       assertFalse(node1.isNumber());
584:       assertFalse(node1.isDec());
585:       assertFalse(node1.hasChildren());
586:       assertFalse(node1.isLabelName());
587:       assertFalse(node1.isAssign());
588:       assertFalse(node1.isTypeOf());
589:       assertFalse(node1.isLabel());
590:       assertFalse(node1.isReturn());
591:       assertFalse(node1.hasOneChild());
592:       assertFalse(node1.isOr());
593:       assertFalse(node1.isAssignAdd());
594:       assertFalse(node1.isScript());
595:       assertFalse(node1.isWhile());
596:       assertFalse(node1.isWith());
597:       assertEquals(200719, node1.getSourcePosition());
598:       assertFalse(node1.isBlock());
599:       assertFalse(node1.isInstanceOf());
600:       assertFalse(node1.hasMoreThanOneChild());
601:       assertFalse(node1.isCall());
602:       assertFalse(node1.isExprResult());
603:       assertFalse(node1.isGetElem());
604:       assertFalse(node1.isBreak());
605:       assertFalse(node1.isName());
606:       assertFalse(node1.isStringKey());
607:       assertFalse(node1.isParamList());
608:       assertFalse(node1.isVar());
609:       assertFalse(node1.isThis());
610:       assertFalse(node1.isNull());
611:       assertFalse(node1.isNew());
612:       assertFalse(node1.isAdd());
613:       assertFalse(node1.isDefaultCase());
614:       assertFalse(node1.isSwitch());
615:       assertFalse(node1.isDo());
616:       assertEquals(0, node1.getChildCount());
617:       assertFalse(node1.isArrayLit());
618:       assertFalse(node1.isIf());
619:       assertFalse(node1.isDelProp());
620:       assertFalse(node1.isGetterDef());
621:       assertEquals(15, node1.getCharno());
622:       assertFalse(node1.isNE());
623:       assertFalse(node1.isFor());
624:       assertFalse(node1.isIn());
625:       assertFalse(node1.isTry());
626:       assertFalse(node1.isCase());
627:       assertFalse(node1.isEmpty());
628:       assertFalse(node1.isRegExp());
629:       assertFalse(node1.isTrue());
630:       assertFalse(node1.isHook());
631:       assertFalse(node1.isVoid());
632:       assertFalse(node1.isCatch());
633:       assertFalse(node1.isComma());
634:       assertFalse(node1.isThrow());
635:       assertEquals((-2099), node1.getType());
636:       assertFalse(node1.isObjectLit());
637:       assertFalse(node1.isGetProp());
638:       assertFalse(node1.isSetterDef());
639:       assertFalse(node1.isInc());
640:       assertEquals(49, node1.getLineno());
641:       assertFalse(node1.isString());
642:       assertFalse(node1.isNot());
643:       assertFalse(node1.isFunction());
644:       assertFalse(node1.isAnd());
645:       assertFalse(node1.isDebugger());
646:       assertFalse(node1.isFalse());
647:       assertFalse(node1.isContinue());
648:       assertFalse(node1.isCast());
649:       assertNotNull(node1);
650:       
651:       Node node2 = Node.newNumber((double) 38);
652:       assertEquals(52, Node.LENGTH);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(49, Node.DIRECT_EVAL);
658:       assertEquals(50, Node.FREE_CALL);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(57, Node.REFLECTED_OBJECT);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(54, Node.SLASH_V);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(32, Node.INCRDECR_PROP);
665:       assertEquals(48, Node.DIRECTIVES);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(4095, Node.COLUMN_MASK);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(1, Node.DECR_FLAG);
670:       assertEquals(12, Node.COLUMN_BITS);
671:       assertEquals(53, Node.INPUT_ID);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
674:       assertEquals(43, Node.IS_CONSTANT_NAME);
675:       assertEquals(56, Node.CHANGE_TIME);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
678:       assertEquals(8, Node.FLAG_NO_THROWS);
679:       assertEquals(2, Node.POST_FLAG);
680:       assertEquals(39, Node.EMPTY_BLOCK);
681:       assertEquals(55, Node.INFERRED_FUNCTION);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
684:       assertEquals(30, Node.VAR_ARGS_NAME);
685:       assertEquals(57, Node.LAST_PROP);
686:       assertEquals(47, Node.IS_DISPATCHER);
687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
688:       assertFalse(node2.equals((Object)node1));
689:       assertFalse(node2.equals((Object)node0));
690:       assertNotSame(node2, node0);
691:       assertEquals(39, node2.getType());
692:       assertFalse(node2.isContinue());
693:       assertFalse(node2.isWhile());
694:       assertFalse(node2.hasMoreThanOneChild());
695:       assertFalse(node2.isOr());
696:       assertFalse(node2.isBlock());
697:       assertFalse(node2.isAdd());
698:       assertFalse(node2.isNew());
699:       assertFalse(node2.isLabel());
700:       assertFalse(node2.isAssignAdd());
701:       assertFalse(node2.isReturn());
702:       assertFalse(node2.isDo());
703:       assertFalse(node2.isStringKey());
704:       assertFalse(node2.isCast());
705:       assertFalse(node2.isVar());
706:       assertEquals((-1), node2.getSourcePosition());
707:       assertFalse(node2.isParamList());
708:       assertFalse(node2.isLabelName());
709:       assertFalse(node2.isWith());
710:       assertFalse(node2.isCatch());
711:       assertFalse(node2.isInstanceOf());
712:       assertFalse(node2.isRegExp());
713:       assertFalse(node2.isFunction());
714:       assertFalse(node2.isThis());
715:       assertFalse(node2.isScript());
716:       assertFalse(node2.hasOneChild());
717:       assertFalse(node2.isSetterDef());
718:       assertFalse(node2.isTry());
719:       assertFalse(node2.isFor());
720:       assertFalse(node2.isHook());
721:       assertFalse(node2.isNE());
722:       assertFalse(node2.isIf());
723:       assertEquals((-1), node2.getLineno());
724:       assertFalse(node2.isCase());
725:       assertFalse(node2.isString());
726:       assertFalse(node2.isIn());
727:       assertFalse(node2.isInc());
728:       assertTrue(node2.isNumber());
729:       assertFalse(node2.isFalse());
730:       assertFalse(node2.isThrow());
731:       assertFalse(node2.isGetterDef());
732:       assertEquals((-1), node2.getCharno());
733:       assertFalse(node2.isArrayLit());
734:       assertFalse(node2.isSwitch());
735:       assertFalse(node2.isAnd());
736:       assertFalse(node2.isObjectLit());
737:       assertFalse(node2.isDebugger());
738:       assertFalse(node2.isNot());
739:       assertEquals(0, node2.getChildCount());
740:       assertFalse(node2.isGetProp());
741:       assertFalse(node2.isDefaultCase());
742:       assertFalse(node2.isGetElem());
743:       assertFalse(node2.isName());
744:       assertFalse(node2.isCall());
745:       assertFalse(node2.isEmpty());
746:       assertFalse(node2.isTypeOf());
747:       assertFalse(node2.isNull());
748:       assertFalse(node2.hasChildren());
749:       assertFalse(node2.isComma());
750:       assertFalse(node2.isAssign());
751:       assertFalse(node2.isDec());
752:       assertFalse(node2.isExprResult());
753:       assertFalse(node2.isTrue());
754:       assertFalse(node2.isBreak());
755:       assertFalse(node2.isDelProp());
756:       assertFalse(node2.isVoid());
757:       assertNotNull(node2);
758:       
759:       node0.setSourceEncodedPosition(131072);
760:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(36, Node.QUOTED_PROP);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(43, Node.IS_CONSTANT_NAME);
766:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
770:       assertEquals(29, Node.JSDOC_INFO_PROP);
771:       assertEquals(52, Node.LENGTH);
772:       assertEquals(47, Node.IS_DISPATCHER);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(2, Node.POST_FLAG);
775:       assertEquals(8, Node.FLAG_NO_THROWS);
776:       assertEquals(39, Node.EMPTY_BLOCK);
777:       assertEquals(53, Node.INPUT_ID);
778:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(12, Node.COLUMN_BITS);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(30, Node.VAR_ARGS_NAME);
784:       assertEquals(51, Node.STATIC_SOURCE_FILE);
785:       assertEquals(37, Node.OPT_ARG_NAME);
786:       assertEquals(54, Node.SLASH_V);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(49, Node.DIRECT_EVAL);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
793:       assertEquals(32, Node.INCRDECR_PROP);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(1, Node.DECR_FLAG);
796:       assertFalse(node0.equals((Object)node1));
797:       assertFalse(node0.equals((Object)node2));
798:       assertNotSame(node0, node2);
799:       assertFalse(node0.isGetProp());
800:       assertFalse(node0.isThis());
801:       assertFalse(node0.isComma());
802:       assertEquals(131072, node0.getSourcePosition());
803:       assertFalse(node0.isObjectLit());
804:       assertFalse(node0.isNot());
805:       assertFalse(node0.isScript());
806:       assertFalse(node0.isExprResult());
807:       assertEquals(0, node0.getCharno());
808:       assertFalse(node0.isHook());
809:       assertFalse(node0.isGetElem());
810:       assertFalse(node0.isAssign());
811:       assertFalse(node0.isBreak());
812:       assertFalse(node0.isWith());
813:       assertFalse(node0.isInstanceOf());
814:       assertFalse(node0.isLabel());
815:       assertFalse(node0.isOr());
816:       assertFalse(node0.isDelProp());
817:       assertFalse(node0.isAssignAdd());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isCase());
820:       assertFalse(node0.isDo());
821:       assertFalse(node0.hasOneChild());
822:       assertFalse(node0.isGetterDef());
823:       assertFalse(node0.isEmpty());
824:       assertFalse(node0.isSwitch());
825:       assertFalse(node0.isNew());
826:       assertFalse(node0.isDefaultCase());
827:       assertFalse(node0.isVar());
828:       assertFalse(node0.isLabelName());
829:       assertFalse(node0.isArrayLit());
830:       assertEquals(0, node0.getChildCount());
831:       assertFalse(node0.isSetterDef());
832:       assertFalse(node0.isNull());
833:       assertFalse(node0.isParamList());
834:       assertFalse(node0.isStringKey());
835:       assertFalse(node0.isAdd());
836:       assertFalse(node0.isVoid());
837:       assertFalse(node0.isTrue());
838:       assertFalse(node0.isBlock());
839:       assertFalse(node0.isTry());
840:       assertFalse(node0.isRegExp());
841:       assertFalse(node0.isWhile());
842:       assertFalse(node0.isCall());
843:       assertFalse(node0.hasMoreThanOneChild());
844:       assertEquals(39, node0.getType());
845:       assertFalse(node0.isName());
846:       assertFalse(node0.isCatch());
847:       assertFalse(node0.isTypeOf());
848:       assertEquals(32, node0.getLineno());
849:       assertTrue(node0.isNumber());
850:       assertFalse(node0.isDec());
851:       assertFalse(node0.hasChildren());
852:       assertFalse(node0.isIf());
853:       assertFalse(node0.isReturn());
854:       assertFalse(node0.isNE());
855:       assertFalse(node0.isIn());
856:       assertFalse(node0.isString());
857:       assertFalse(node0.isDebugger());
858:       assertFalse(node0.isFunction());
859:       assertFalse(node0.isInc());
860:       assertFalse(node0.isAnd());
861:       assertFalse(node0.isThrow());
862:       assertFalse(node0.isContinue());
863:       assertFalse(node0.isFalse());
864:       assertFalse(node0.isCast());
865:       
866:       boolean boolean1 = node0.mayMutateArguments();
867:       assertTrue(boolean1);
868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(55, Node.INFERRED_FUNCTION);
871:       assertEquals(36, Node.QUOTED_PROP);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
875:       assertEquals(48, Node.DIRECTIVES);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(52, Node.LENGTH);
880:       assertEquals(47, Node.IS_DISPATCHER);
881:       assertEquals(57, Node.REFLECTED_OBJECT);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(8, Node.FLAG_NO_THROWS);
884:       assertEquals(39, Node.EMPTY_BLOCK);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
887:       assertEquals(15, Node.NO_SIDE_EFFECTS);
888:       assertEquals(57, Node.LAST_PROP);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(46, Node.IS_NAMESPACE);
891:       assertEquals(30, Node.VAR_ARGS_NAME);
892:       assertEquals(51, Node.STATIC_SOURCE_FILE);
893:       assertEquals(37, Node.OPT_ARG_NAME);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(56, Node.CHANGE_TIME);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertEquals(50, Node.FREE_CALL);
900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(1, Node.DECR_FLAG);
904:       assertFalse(node0.equals((Object)node1));
905:       assertFalse(node0.equals((Object)node2));
906:       assertFalse(boolean1 == boolean0);
907:       assertNotSame(node0, node2);
908:       assertFalse(node0.isGetProp());
909:       assertFalse(node0.isThis());
910:       assertFalse(node0.isComma());
911:       assertEquals(131072, node0.getSourcePosition());
912:       assertFalse(node0.isObjectLit());
913:       assertFalse(node0.isNot());
914:       assertFalse(node0.isScript());
915:       assertFalse(node0.isExprResult());
916:       assertEquals(0, node0.getCharno());
917:       assertFalse(node0.isHook());
918:       assertFalse(node0.isGetElem());
919:       assertFalse(node0.isAssign());
920:       assertFalse(node0.isBreak());
921:       assertFalse(node0.isWith());
922:       assertFalse(node0.isInstanceOf());
923:       assertFalse(node0.isLabel());
924:       assertFalse(node0.isOr());
925:       assertFalse(node0.isDelProp());
926:       assertFalse(node0.isAssignAdd());
927:       assertFalse(node0.isFor());
928:       assertFalse(node0.isCase());
929:       assertFalse(node0.isDo());
930:       assertFalse(node0.hasOneChild());
931:       assertFalse(node0.isGetterDef());
932:       assertFalse(node0.isEmpty());
933:       assertFalse(node0.isSwitch());
934:       assertFalse(node0.isNew());
935:       assertFalse(node0.isDefaultCase());
936:       assertFalse(node0.isVar());
937:       assertFalse(node0.isLabelName());
938:       assertFalse(node0.isArrayLit());
939:       assertEquals(0, node0.getChildCount());
940:       assertFalse(node0.isSetterDef());
941:       assertFalse(node0.isNull());
942:       assertFalse(node0.isParamList());
943:       assertFalse(node0.isStringKey());
944:       assertFalse(node0.isAdd());
945:       assertFalse(node0.isVoid());
946:       assertFalse(node0.isTrue());
947:       assertFalse(node0.isBlock());
948:       assertFalse(node0.isTry());
949:       assertFalse(node0.isRegExp());
950:       assertFalse(node0.isWhile());
951:       assertFalse(node0.isCall());
952:       assertFalse(node0.hasMoreThanOneChild());
953:       assertEquals(39, node0.getType());
954:       assertFalse(node0.isName());
955:       assertFalse(node0.isCatch());
956:       assertFalse(node0.isTypeOf());
957:       assertEquals(32, node0.getLineno());
958:       assertTrue(node0.isNumber());
959:       assertFalse(node0.isDec());
960:       assertFalse(node0.hasChildren());
961:       assertFalse(node0.isIf());
962:       assertFalse(node0.isReturn());
963:       assertFalse(node0.isNE());
964:       assertFalse(node0.isIn());
965:       assertFalse(node0.isString());
966:       assertFalse(node0.isDebugger());
967:       assertFalse(node0.isFunction());
968:       assertFalse(node0.isInc());
969:       assertFalse(node0.isAnd());
970:       assertFalse(node0.isThrow());
971:       assertFalse(node0.isContinue());
972:       assertFalse(node0.isFalse());
973:       assertFalse(node0.isCast());
974:       
975:       Node node3 = node2.getAncestor(0);
976:       assertEquals(52, Node.LENGTH);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       assertEquals(15, Node.NO_SIDE_EFFECTS);
979:       assertEquals(40, Node.ORIGINALNAME_PROP);
980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
981:       assertEquals(49, Node.DIRECT_EVAL);
982:       assertEquals(50, Node.FREE_CALL);
983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
984:       assertEquals(57, Node.REFLECTED_OBJECT);
985:       assertEquals(46, Node.IS_NAMESPACE);
986:       assertEquals(54, Node.SLASH_V);
987:       assertEquals(37, Node.OPT_ARG_NAME);
988:       assertEquals(32, Node.INCRDECR_PROP);
989:       assertEquals(48, Node.DIRECTIVES);
990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
991:       assertEquals(4095, Node.COLUMN_MASK);
992:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(12, Node.COLUMN_BITS);
995:       assertEquals(53, Node.INPUT_ID);
996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(43, Node.IS_CONSTANT_NAME);
999:       assertEquals(56, Node.CHANGE_TIME);
1000:       assertEquals(36, Node.QUOTED_PROP);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(8, Node.FLAG_NO_THROWS);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(39, Node.EMPTY_BLOCK);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(29, Node.JSDOC_INFO_PROP);
1007:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1008:       assertEquals(30, Node.VAR_ARGS_NAME);
1009:       assertEquals(57, Node.LAST_PROP);
1010:       assertEquals(47, Node.IS_DISPATCHER);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(47, Node.IS_DISPATCHER);
1013:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1014:       assertEquals(56, Node.CHANGE_TIME);
1015:       assertEquals(29, Node.JSDOC_INFO_PROP);
1016:       assertEquals(37, Node.OPT_ARG_NAME);
1017:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1018:       assertEquals(32, Node.INCRDECR_PROP);
1019:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1020:       assertEquals(12, Node.COLUMN_BITS);
1021:       assertEquals(2, Node.POST_FLAG);
1022:       assertEquals(30, Node.VAR_ARGS_NAME);
1023:       assertEquals(43, Node.IS_CONSTANT_NAME);
1024:       assertEquals(1, Node.DECR_FLAG);
1025:       assertEquals(46, Node.IS_NAMESPACE);
1026:       assertEquals(54, Node.SLASH_V);
1027:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1028:       assertEquals(50, Node.FREE_CALL);
1029:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1031:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1032:       assertEquals(40, Node.ORIGINALNAME_PROP);
1033:       assertEquals(39, Node.EMPTY_BLOCK);
1034:       assertEquals(48, Node.DIRECTIVES);
1035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1036:       assertEquals(4095, Node.COLUMN_MASK);
1037:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1038:       assertEquals(57, Node.LAST_PROP);
1039:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1040:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1041:       assertEquals(49, Node.DIRECT_EVAL);
1042:       assertEquals(52, Node.LENGTH);
1043:       assertEquals(53, Node.INPUT_ID);
1044:       assertEquals(57, Node.REFLECTED_OBJECT);
1045:       assertEquals(55, Node.INFERRED_FUNCTION);
1046:       assertEquals(8, Node.FLAG_NO_THROWS);
1047:       assertEquals(36, Node.QUOTED_PROP);
1048:       assertFalse(node2.equals((Object)node1));
1049:       assertFalse(node2.equals((Object)node0));
1050:       assertFalse(node3.equals((Object)node1));
1051:       assertFalse(node3.equals((Object)node0));
1052:       assertSame(node2, node3);
1053:       assertNotSame(node2, node0);
1054:       assertSame(node3, node2);
1055:       assertNotSame(node3, node0);
1056:       assertEquals(39, node2.getType());
1057:       assertFalse(node2.isContinue());
1058:       assertFalse(node2.isWhile());
1059:       assertFalse(node2.hasMoreThanOneChild());
1060:       assertFalse(node2.isOr());
1061:       assertFalse(node2.isBlock());
1062:       assertFalse(node2.isAdd());
1063:       assertFalse(node2.isNew());
1064:       assertFalse(node2.isLabel());
1065:       assertFalse(node2.isAssignAdd());
1066:       assertFalse(node2.isReturn());
1067:       assertFalse(node2.isDo());
1068:       assertFalse(node2.isStringKey());
1069:       assertFalse(node2.isCast());
1070:       assertFalse(node2.isVar());
1071:       assertEquals((-1), node2.getSourcePosition());
1072:       assertFalse(node2.isParamList());
1073:       assertFalse(node2.isLabelName());
1074:       assertFalse(node2.isWith());
1075:       assertFalse(node2.isCatch());
1076:       assertFalse(node2.isInstanceOf());
1077:       assertFalse(node2.isRegExp());
1078:       assertFalse(node2.isFunction());
1079:       assertFalse(node2.isThis());
1080:       assertFalse(node2.isScript());
1081:       assertFalse(node2.hasOneChild());
1082:       assertFalse(node2.isSetterDef());
1083:       assertFalse(node2.isTry());
1084:       assertFalse(node2.isFor());
1085:       assertFalse(node2.isHook());
1086:       assertFalse(node2.isNE());
1087:       assertFalse(node2.isIf());
1088:       assertEquals((-1), node2.getLineno());
1089:       assertFalse(node2.isCase());
1090:       assertFalse(node2.isString());
1091:       assertFalse(node2.isIn());
1092:       assertFalse(node2.isInc());
1093:       assertTrue(node2.isNumber());
1094:       assertFalse(node2.isFalse());
1095:       assertFalse(node2.isThrow());
1096:       assertFalse(node2.isGetterDef());
1097:       assertEquals((-1), node2.getCharno());
1098:       assertFalse(node2.isArrayLit());
1099:       assertFalse(node2.isSwitch());
1100:       assertFalse(node2.isAnd());
1101:       assertFalse(node2.isObjectLit());
1102:       assertFalse(node2.isDebugger());
1103:       assertFalse(node2.isNot());
1104:       assertEquals(0, node2.getChildCount());
1105:       assertFalse(node2.isGetProp());
1106:       assertFalse(node2.isDefaultCase());
1107:       assertFalse(node2.isGetElem());
1108:       assertFalse(node2.isName());
1109:       assertFalse(node2.isCall());
1110:       assertFalse(node2.isEmpty());
1111:       assertFalse(node2.isTypeOf());
1112:       assertFalse(node2.isNull());
1113:       assertFalse(node2.hasChildren());
1114:       assertFalse(node2.isComma());
1115:       assertFalse(node2.isAssign());
1116:       assertFalse(node2.isDec());
1117:       assertFalse(node2.isExprResult());
1118:       assertFalse(node2.isTrue());
1119:       assertFalse(node2.isBreak());
1120:       assertFalse(node2.isDelProp());
1121:       assertFalse(node2.isVoid());
1122:       assertFalse(node3.isArrayLit());
1123:       assertFalse(node3.isTry());
1124:       assertFalse(node3.isVoid());
1125:       assertFalse(node3.isFunction());
1126:       assertFalse(node3.isEmpty());
1127:       assertFalse(node3.isDelProp());
1128:       assertFalse(node3.isGetterDef());
1129:       assertFalse(node3.isIf());
1130:       assertFalse(node3.isDebugger());
1131:       assertFalse(node3.isTrue());
1132:       assertFalse(node3.isNE());
1133:       assertFalse(node3.isIn());
1134:       assertEquals(0, node3.getChildCount());
1135:       assertFalse(node3.isSetterDef());
1136:       assertFalse(node3.isDefaultCase());
1137:       assertFalse(node3.isVar());
1138:       assertFalse(node3.isHook());
1139:       assertFalse(node3.isInc());
1140:       assertFalse(node3.isParamList());
1141:       assertFalse(node3.isSwitch());
1142:       assertEquals((-1), node3.getCharno());
1143:       assertFalse(node3.isStringKey());
1144:       assertEquals((-1), node3.getLineno());
1145:       assertFalse(node3.hasMoreThanOneChild());
1146:       assertFalse(node3.isCatch());
1147:       assertFalse(node3.isInstanceOf());
1148:       assertFalse(node3.isWith());
1149:       assertEquals(39, node3.getType());
1150:       assertFalse(node3.isCase());
1151:       assertFalse(node3.isRegExp());
1152:       assertFalse(node3.isThis());
1153:       assertFalse(node3.isBlock());
1154:       assertFalse(node3.isFor());
1155:       assertFalse(node3.hasOneChild());
1156:       assertFalse(node3.isExprResult());
1157:       assertFalse(node3.isScript());
1158:       assertFalse(node3.isGetElem());
1159:       assertFalse(node3.isCast());
1160:       assertEquals((-1), node3.getSourcePosition());
1161:       assertFalse(node3.isLabelName());
1162:       assertFalse(node3.isNot());
1163:       assertFalse(node3.isAnd());
1164:       assertFalse(node3.isLabel());
1165:       assertFalse(node3.isAssignAdd());
1166:       assertFalse(node3.isOr());
1167:       assertFalse(node3.isContinue());
1168:       assertFalse(node3.isDo());
1169:       assertFalse(node3.isThrow());
1170:       assertFalse(node3.isNew());
1171:       assertFalse(node3.isCall());
1172:       assertFalse(node3.isFalse());
1173:       assertFalse(node3.isAdd());
1174:       assertFalse(node3.isString());
1175:       assertFalse(node3.isBreak());
1176:       assertFalse(node3.isName());
1177:       assertFalse(node3.isNull());
1178:       assertFalse(node3.isReturn());
1179:       assertTrue(node3.isNumber());
1180:       assertFalse(node3.isObjectLit());
1181:       assertFalse(node3.isGetProp());
1182:       assertFalse(node3.isWhile());
1183:       assertFalse(node3.hasChildren());
1184:       assertFalse(node3.isTypeOf());
1185:       assertFalse(node3.isAssign());
1186:       assertFalse(node3.isDec());
1187:       assertFalse(node3.isComma());
1188:       assertNotNull(node3);
1189:       
1190:       node1.type = 131072;
1191:       assertFalse(node1.isNumber());
1192:       assertFalse(node1.isDec());
1193:       assertFalse(node1.hasChildren());
1194:       assertFalse(node1.isLabelName());
1195:       assertFalse(node1.isAssign());
1196:       assertFalse(node1.isTypeOf());
1197:       assertFalse(node1.isLabel());
1198:       assertFalse(node1.isReturn());
1199:       assertFalse(node1.hasOneChild());
1200:       assertFalse(node1.isOr());
1201:       assertFalse(node1.isAssignAdd());
1202:       assertFalse(node1.isScript());
1203:       assertFalse(node1.isWhile());
1204:       assertFalse(node1.isWith());
1205:       assertEquals(200719, node1.getSourcePosition());
1206:       assertFalse(node1.isBlock());
1207:       assertFalse(node1.isInstanceOf());
1208:       assertEquals(131072, node1.getType());
1209:       assertFalse(node1.hasMoreThanOneChild());
1210:       assertFalse(node1.isCall());
1211:       assertFalse(node1.isExprResult());
1212:       assertFalse(node1.isGetElem());
1213:       assertFalse(node1.isBreak());
1214:       assertFalse(node1.isName());
1215:       assertFalse(node1.isStringKey());
1216:       assertFalse(node1.isParamList());
1217:       assertFalse(node1.isVar());
1218:       assertFalse(node1.isThis());
1219:       assertFalse(node1.isNull());
1220:       assertFalse(node1.isNew());
1221:       assertFalse(node1.isAdd());
1222:       assertFalse(node1.isDefaultCase());
1223:       assertFalse(node1.isSwitch());
1224:       assertFalse(node1.isDo());
1225:       assertEquals(0, node1.getChildCount());
1226:       assertFalse(node1.isArrayLit());
1227:       assertFalse(node1.isIf());
1228:       assertFalse(node1.isDelProp());
1229:       assertFalse(node1.isGetterDef());
1230:       assertEquals(15, node1.getCharno());
1231:       assertFalse(node1.isNE());
1232:       assertFalse(node1.isFor());
1233:       assertFalse(node1.isIn());
1234:       assertFalse(node1.isTry());
1235:       assertFalse(node1.isCase());
1236:       assertFalse(node1.isEmpty());
1237:       assertFalse(node1.isRegExp());
1238:       assertFalse(node1.isTrue());
1239:       assertFalse(node1.isHook());
1240:       assertFalse(node1.isVoid());
1241:       assertFalse(node1.isCatch());
1242:       assertFalse(node1.isComma());
1243:       assertFalse(node1.isThrow());
1244:       assertFalse(node1.isObjectLit());
1245:       assertFalse(node1.isGetProp());
1246:       assertFalse(node1.isSetterDef());
1247:       assertFalse(node1.isInc());
1248:       assertEquals(49, node1.getLineno());
1249:       assertFalse(node1.isString());
1250:       assertFalse(node1.isNot());
1251:       assertFalse(node1.isFunction());
1252:       assertFalse(node1.isAnd());
1253:       assertFalse(node1.isDebugger());
1254:       assertFalse(node1.isFalse());
1255:       assertFalse(node1.isContinue());
1256:       assertFalse(node1.isCast());
1257:       
1258:       int int1 = node0.getSourcePosition();
1259:       assertEquals(131072, int1);
1260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1261:       assertEquals(4095, Node.COLUMN_MASK);
1262:       assertEquals(55, Node.INFERRED_FUNCTION);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1265:       assertEquals(43, Node.IS_CONSTANT_NAME);
1266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1267:       assertEquals(48, Node.DIRECTIVES);
1268:       assertEquals(40, Node.ORIGINALNAME_PROP);
1269:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1270:       assertEquals(29, Node.JSDOC_INFO_PROP);
1271:       assertEquals(52, Node.LENGTH);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(57, Node.REFLECTED_OBJECT);
1274:       assertEquals(2, Node.POST_FLAG);
1275:       assertEquals(8, Node.FLAG_NO_THROWS);
1276:       assertEquals(39, Node.EMPTY_BLOCK);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1280:       assertEquals(57, Node.LAST_PROP);
1281:       assertEquals(12, Node.COLUMN_BITS);
1282:       assertEquals(46, Node.IS_NAMESPACE);
1283:       assertEquals(30, Node.VAR_ARGS_NAME);
1284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1285:       assertEquals(37, Node.OPT_ARG_NAME);
1286:       assertEquals(54, Node.SLASH_V);
1287:       assertEquals(56, Node.CHANGE_TIME);
1288:       assertEquals(49, Node.DIRECT_EVAL);
1289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(50, Node.FREE_CALL);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(32, Node.INCRDECR_PROP);
1294:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1295:       assertEquals(1, Node.DECR_FLAG);
1296:       assertFalse(node0.equals((Object)node3));
1297:       assertFalse(node0.equals((Object)node1));
1298:       assertFalse(node0.equals((Object)node2));
1299:       assertFalse(int1 == int0);
1300:       assertNotSame(node0, node3);
1301:       assertNotSame(node0, node2);
1302:       assertFalse(node0.isGetProp());
1303:       assertFalse(node0.isThis());
1304:       assertFalse(node0.isComma());
1305:       assertEquals(131072, node0.getSourcePosition());
1306:       assertFalse(node0.isObjectLit());
1307:       assertFalse(node0.isNot());
1308:       assertFalse(node0.isScript());
1309:       assertFalse(node0.isExprResult());
1310:       assertEquals(0, node0.getCharno());
1311:       assertFalse(node0.isHook());
1312:       assertFalse(node0.isGetElem());
1313:       assertFalse(node0.isAssign());
1314:       assertFalse(node0.isBreak());
1315:       assertFalse(node0.isWith());
1316:       assertFalse(node0.isInstanceOf());
1317:       assertFalse(node0.isLabel());
1318:       assertFalse(node0.isOr());
1319:       assertFalse(node0.isDelProp());
1320:       assertFalse(node0.isAssignAdd());
1321:       assertFalse(node0.isFor());
1322:       assertFalse(node0.isCase());
1323:       assertFalse(node0.isDo());
1324:       assertFalse(node0.hasOneChild());
1325:       assertFalse(node0.isGetterDef());
1326:       assertFalse(node0.isEmpty());
1327:       assertFalse(node0.isSwitch());
1328:       assertFalse(node0.isNew());
1329:       assertFalse(node0.isDefaultCase());
1330:       assertFalse(node0.isVar());
1331:       assertFalse(node0.isLabelName());
1332:       assertFalse(node0.isArrayLit());
1333:       assertEquals(0, node0.getChildCount());
1334:       assertFalse(node0.isSetterDef());
1335:       assertFalse(node0.isNull());
1336:       assertFalse(node0.isParamList());
1337:       assertFalse(node0.isStringKey());
1338:       assertFalse(node0.isAdd());
1339:       assertFalse(node0.isVoid());
1340:       assertFalse(node0.isTrue());
1341:       assertFalse(node0.isBlock());
1342:       assertFalse(node0.isTry());
1343:       assertFalse(node0.isRegExp());
1344:       assertFalse(node0.isWhile());
1345:       assertFalse(node0.isCall());
1346:       assertFalse(node0.hasMoreThanOneChild());
1347:       assertEquals(39, node0.getType());
1348:       assertFalse(node0.isName());
1349:       assertFalse(node0.isCatch());
1350:       assertFalse(node0.isTypeOf());
1351:       assertEquals(32, node0.getLineno());
1352:       assertTrue(node0.isNumber());
1353:       assertFalse(node0.isDec());
1354:       assertFalse(node0.hasChildren());
1355:       assertFalse(node0.isIf());
1356:       assertFalse(node0.isReturn());
1357:       assertFalse(node0.isNE());
1358:       assertFalse(node0.isIn());
1359:       assertFalse(node0.isString());
1360:       assertFalse(node0.isDebugger());
1361:       assertFalse(node0.isFunction());
1362:       assertFalse(node0.isInc());
1363:       assertFalse(node0.isAnd());
1364:       assertFalse(node0.isThrow());
1365:       assertFalse(node0.isContinue());
1366:       assertFalse(node0.isFalse());
1367:       assertFalse(node0.isCast());
1368:       
1369:       Iterable<Node> iterable0 = node3.children();
1370:       assertFalse(iterable0.contains(node2));
1371:       assertEquals(52, Node.LENGTH);
1372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(40, Node.ORIGINALNAME_PROP);
1375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1379:       assertEquals(57, Node.REFLECTED_OBJECT);
1380:       assertEquals(46, Node.IS_NAMESPACE);
1381:       assertEquals(54, Node.SLASH_V);
1382:       assertEquals(37, Node.OPT_ARG_NAME);
1383:       assertEquals(32, Node.INCRDECR_PROP);
1384:       assertEquals(48, Node.DIRECTIVES);
1385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1386:       assertEquals(4095, Node.COLUMN_MASK);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(1, Node.DECR_FLAG);
1389:       assertEquals(12, Node.COLUMN_BITS);
1390:       assertEquals(53, Node.INPUT_ID);
1391:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1393:       assertEquals(43, Node.IS_CONSTANT_NAME);
1394:       assertEquals(56, Node.CHANGE_TIME);
1395:       assertEquals(36, Node.QUOTED_PROP);
1396:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1397:       assertEquals(8, Node.FLAG_NO_THROWS);
1398:       assertEquals(2, Node.POST_FLAG);
1399:       assertEquals(39, Node.EMPTY_BLOCK);
1400:       assertEquals(55, Node.INFERRED_FUNCTION);
1401:       assertEquals(29, Node.JSDOC_INFO_PROP);
1402:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1403:       assertEquals(30, Node.VAR_ARGS_NAME);
1404:       assertEquals(57, Node.LAST_PROP);
1405:       assertEquals(47, Node.IS_DISPATCHER);
1406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1407:       assertEquals(47, Node.IS_DISPATCHER);
1408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1409:       assertEquals(56, Node.CHANGE_TIME);
1410:       assertEquals(29, Node.JSDOC_INFO_PROP);
1411:       assertEquals(37, Node.OPT_ARG_NAME);
1412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1413:       assertEquals(32, Node.INCRDECR_PROP);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(2, Node.POST_FLAG);
1417:       assertEquals(30, Node.VAR_ARGS_NAME);
1418:       assertEquals(43, Node.IS_CONSTANT_NAME);
1419:       assertEquals(1, Node.DECR_FLAG);
1420:       assertEquals(46, Node.IS_NAMESPACE);
1421:       assertEquals(54, Node.SLASH_V);
1422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1423:       assertEquals(50, Node.FREE_CALL);
1424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1427:       assertEquals(40, Node.ORIGINALNAME_PROP);
1428:       assertEquals(39, Node.EMPTY_BLOCK);
1429:       assertEquals(48, Node.DIRECTIVES);
1430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1431:       assertEquals(4095, Node.COLUMN_MASK);
1432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1433:       assertEquals(57, Node.LAST_PROP);
1434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1436:       assertEquals(49, Node.DIRECT_EVAL);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(53, Node.INPUT_ID);
1439:       assertEquals(57, Node.REFLECTED_OBJECT);
1440:       assertEquals(55, Node.INFERRED_FUNCTION);
1441:       assertEquals(8, Node.FLAG_NO_THROWS);
1442:       assertEquals(36, Node.QUOTED_PROP);
1443:       assertFalse(node2.equals((Object)node1));
1444:       assertFalse(node2.equals((Object)node0));
1445:       assertFalse(node3.equals((Object)node1));
1446:       assertFalse(node3.equals((Object)node0));
1447:       assertSame(node2, node3);
1448:       assertNotSame(node2, node0);
1449:       assertSame(node3, node2);
1450:       assertNotSame(node3, node0);
1451:       assertEquals(39, node2.getType());
1452:       assertFalse(node2.isContinue());
1453:       assertFalse(node2.isWhile());
1454:       assertFalse(node2.hasMoreThanOneChild());
1455:       assertFalse(node2.isOr());
1456:       assertFalse(node2.isBlock());
1457:       assertFalse(node2.isAdd());
1458:       assertFalse(node2.isNew());
1459:       assertFalse(node2.isLabel());
1460:       assertFalse(node2.isAssignAdd());
1461:       assertFalse(node2.isReturn());
1462:       assertFalse(node2.isDo());
1463:       assertFalse(node2.isStringKey());
1464:       assertFalse(node2.isCast());
1465:       assertFalse(node2.isVar());
1466:       assertEquals((-1), node2.getSourcePosition());
1467:       assertFalse(node2.isParamList());
1468:       assertFalse(node2.isLabelName());
1469:       assertFalse(node2.isWith());
1470:       assertFalse(node2.isCatch());
1471:       assertFalse(node2.isInstanceOf());
1472:       assertFalse(node2.isRegExp());
1473:       assertFalse(node2.isFunction());
1474:       assertFalse(node2.isThis());
1475:       assertFalse(node2.isScript());
1476:       assertFalse(node2.hasOneChild());
1477:       assertFalse(node2.isSetterDef());
1478:       assertFalse(node2.isTry());
1479:       assertFalse(node2.isFor());
1480:       assertFalse(node2.isHook());
1481:       assertFalse(node2.isNE());
1482:       assertFalse(node2.isIf());
1483:       assertEquals((-1), node2.getLineno());
1484:       assertFalse(node2.isCase());
1485:       assertFalse(node2.isString());
1486:       assertFalse(node2.isIn());
1487:       assertFalse(node2.isInc());
1488:       assertTrue(node2.isNumber());
1489:       assertFalse(node2.isFalse());
1490:       assertFalse(node2.isThrow());
1491:       assertFalse(node2.isGetterDef());
1492:       assertEquals((-1), node2.getCharno());
1493:       assertFalse(node2.isArrayLit());
1494:       assertFalse(node2.isSwitch());
1495:       assertFalse(node2.isAnd());
1496:       assertFalse(node2.isObjectLit());
1497:       assertFalse(node2.isDebugger());
1498:       assertFalse(node2.isNot());
1499:       assertEquals(0, node2.getChildCount());
1500:       assertFalse(node2.isGetProp());
1501:       assertFalse(node2.isDefaultCase());
1502:       assertFalse(node2.isGetElem());
1503:       assertFalse(node2.isName());
1504:       assertFalse(node2.isCall());
1505:       assertFalse(node2.isEmpty());
1506:       assertFalse(node2.isTypeOf());
1507:       assertFalse(node2.isNull());
1508:       assertFalse(node2.hasChildren());
1509:       assertFalse(node2.isComma());
1510:       assertFalse(node2.isAssign());
1511:       assertFalse(node2.isDec());
1512:       assertFalse(node2.isExprResult());
1513:       assertFalse(node2.isTrue());
1514:       assertFalse(node2.isBreak());
1515:       assertFalse(node2.isDelProp());
1516:       assertFalse(node2.isVoid());
1517:       assertFalse(node3.isArrayLit());
1518:       assertFalse(node3.isTry());
1519:       assertFalse(node3.isVoid());
1520:       assertFalse(node3.isFunction());
1521:       assertFalse(node3.isEmpty());
1522:       assertFalse(node3.isDelProp());
1523:       assertFalse(node3.isGetterDef());
1524:       assertFalse(node3.isIf());
1525:       assertFalse(node3.isDebugger());
1526:       assertFalse(node3.isTrue());
1527:       assertFalse(node3.isNE());
1528:       assertFalse(node3.isIn());
1529:       assertEquals(0, node3.getChildCount());
1530:       assertFalse(node3.isSetterDef());
1531:       assertFalse(node3.isDefaultCase());
1532:       assertFalse(node3.isVar());
1533:       assertFalse(node3.isHook());
1534:       assertFalse(node3.isInc());
1535:       assertFalse(node3.isParamList());
1536:       assertFalse(node3.isSwitch());
1537:       assertEquals((-1), node3.getCharno());
1538:       assertFalse(node3.isStringKey());
1539:       assertEquals((-1), node3.getLineno());
1540:       assertFalse(node3.hasMoreThanOneChild());
1541:       assertFalse(node3.isCatch());
1542:       assertFalse(node3.isInstanceOf());
1543:       assertFalse(node3.isWith());
1544:       assertEquals(39, node3.getType());
1545:       assertFalse(node3.isCase());
1546:       assertFalse(node3.isRegExp());
1547:       assertFalse(node3.isThis());
1548:       assertFalse(node3.isBlock());
1549:       assertFalse(node3.isFor());
1550:       assertFalse(node3.hasOneChild());
1551:       assertFalse(node3.isExprResult());
1552:       assertFalse(node3.isScript());
1553:       assertFalse(node3.isGetElem());
1554:       assertFalse(node3.isCast());
1555:       assertEquals((-1), node3.getSourcePosition());
1556:       assertFalse(node3.isLabelName());
1557:       assertFalse(node3.isNot());
1558:       assertFalse(node3.isAnd());
1559:       assertFalse(node3.isLabel());
1560:       assertFalse(node3.isAssignAdd());
1561:       assertFalse(node3.isOr());
1562:       assertFalse(node3.isContinue());
1563:       assertFalse(node3.isDo());
1564:       assertFalse(node3.isThrow());
1565:       assertFalse(node3.isNew());
1566:       assertFalse(node3.isCall());
1567:       assertFalse(node3.isFalse());
1568:       assertFalse(node3.isAdd());
1569:       assertFalse(node3.isString());
1570:       assertFalse(node3.isBreak());
1571:       assertFalse(node3.isName());
1572:       assertFalse(node3.isNull());
1573:       assertFalse(node3.isReturn());
1574:       assertTrue(node3.isNumber());
1575:       assertFalse(node3.isObjectLit());
1576:       assertFalse(node3.isGetProp());
1577:       assertFalse(node3.isWhile());
1578:       assertFalse(node3.hasChildren());
1579:       assertFalse(node3.isTypeOf());
1580:       assertFalse(node3.isAssign());
1581:       assertFalse(node3.isDec());
1582:       assertFalse(node3.isComma());
1583:       assertNotNull(iterable0);
1584:       
1585:       boolean boolean2 = node1.wasEmptyNode();
1586:       assertFalse(boolean2);
1587:       assertEquals(46, Node.IS_NAMESPACE);
1588:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       assertEquals(2, Node.POST_FLAG);
1591:       assertEquals(30, Node.VAR_ARGS_NAME);
1592:       assertEquals(56, Node.CHANGE_TIME);
1593:       assertEquals(54, Node.SLASH_V);
1594:       assertEquals(37, Node.OPT_ARG_NAME);
1595:       assertEquals(49, Node.DIRECT_EVAL);
1596:       assertEquals(40, Node.ORIGINALNAME_PROP);
1597:       assertEquals(53, Node.INPUT_ID);
1598:       assertEquals(57, Node.REFLECTED_OBJECT);
1599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1600:       assertEquals(52, Node.LENGTH);
1601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1602:       assertEquals(57, Node.LAST_PROP);
1603:       assertEquals(47, Node.IS_DISPATCHER);
1604:       assertEquals(29, Node.JSDOC_INFO_PROP);
1605:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1606:       assertEquals(39, Node.EMPTY_BLOCK);
1607:       assertEquals(4095, Node.COLUMN_MASK);
1608:       assertEquals(55, Node.INFERRED_FUNCTION);
1609:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1610:       assertEquals(8, Node.FLAG_NO_THROWS);
1611:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1612:       assertEquals(43, Node.IS_CONSTANT_NAME);
1613:       assertEquals(36, Node.QUOTED_PROP);
1614:       assertEquals(48, Node.DIRECTIVES);
1615:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1617:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1619:       assertEquals(50, Node.FREE_CALL);
1620:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1621:       assertEquals(1, Node.DECR_FLAG);
1622:       assertEquals(32, Node.INCRDECR_PROP);
1623:       assertFalse(node1.equals((Object)node0));
1624:       assertFalse(node1.equals((Object)node2));
1625:       assertFalse(node1.equals((Object)node3));
1626:       assertFalse(boolean2 == boolean1);
1627:       assertTrue(boolean2 == boolean0);
1628:       assertFalse(node1.isNumber());
1629:       assertFalse(node1.isDec());
1630:       assertFalse(node1.hasChildren());
1631:       assertFalse(node1.isLabelName());
1632:       assertFalse(node1.isAssign());
1633:       assertFalse(node1.isTypeOf());
1634:       assertFalse(node1.isLabel());
1635:       assertFalse(node1.isReturn());
1636:       assertFalse(node1.hasOneChild());
1637:       assertFalse(node1.isOr());
1638:       assertFalse(node1.isAssignAdd());
1639:       assertFalse(node1.isScript());
1640:       assertFalse(node1.isWhile());
1641:       assertFalse(node1.isWith());
1642:       assertEquals(200719, node1.getSourcePosition());
1643:       assertFalse(node1.isBlock());
1644:       assertFalse(node1.isInstanceOf());
1645:       assertEquals(131072, node1.getType());
1646:       assertFalse(node1.hasMoreThanOneChild());
1647:       assertFalse(node1.isCall());
1648:       assertFalse(node1.isExprResult());
1649:       assertFalse(node1.isGetElem());
1650:       assertFalse(node1.isBreak());
1651:       assertFalse(node1.isName());
1652:       assertFalse(node1.isStringKey());
1653:       assertFalse(node1.isParamList());
1654:       assertFalse(node1.isVar());
1655:       assertFalse(node1.isThis());
1656:       assertFalse(node1.isNull());
1657:       assertFalse(node1.isNew());
1658:       assertFalse(node1.isAdd());
1659:       assertFalse(node1.isDefaultCase());
1660:       assertFalse(node1.isSwitch());
1661:       assertFalse(node1.isDo());
1662:       assertEquals(0, node1.getChildCount());
1663:       assertFalse(node1.isArrayLit());
1664:       assertFalse(node1.isIf());
1665:       assertFalse(node1.isDelProp());
1666:       assertFalse(node1.isGetterDef());
1667:       assertEquals(15, node1.getCharno());
1668:       assertFalse(node1.isNE());
1669:       assertFalse(node1.isFor());
1670:       assertFalse(node1.isIn());
1671:       assertFalse(node1.isTry());
1672:       assertFalse(node1.isCase());
1673:       assertFalse(node1.isEmpty());
1674:       assertFalse(node1.isRegExp());
1675:       assertFalse(node1.isTrue());
1676:       assertFalse(node1.isHook());
1677:       assertFalse(node1.isVoid());
1678:       assertFalse(node1.isCatch());
1679:       assertFalse(node1.isComma());
1680:       assertFalse(node1.isThrow());
1681:       assertFalse(node1.isObjectLit());
1682:       assertFalse(node1.isGetProp());
1683:       assertFalse(node1.isSetterDef());
1684:       assertFalse(node1.isInc());
1685:       assertEquals(49, node1.getLineno());
1686:       assertFalse(node1.isString());
1687:       assertFalse(node1.isNot());
1688:       assertFalse(node1.isFunction());
1689:       assertFalse(node1.isAnd());
1690:       assertFalse(node1.isDebugger());
1691:       assertFalse(node1.isFalse());
1692:       assertFalse(node1.isContinue());
1693:       assertFalse(node1.isCast());
1694:       
1695:       boolean boolean3 = node3.isCall();
1696:       assertFalse(boolean3);
1697:       assertEquals(52, Node.LENGTH);
1698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1700:       assertEquals(40, Node.ORIGINALNAME_PROP);
1701:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1702:       assertEquals(49, Node.DIRECT_EVAL);
1703:       assertEquals(50, Node.FREE_CALL);
1704:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1705:       assertEquals(57, Node.REFLECTED_OBJECT);
1706:       assertEquals(46, Node.IS_NAMESPACE);
1707:       assertEquals(54, Node.SLASH_V);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(32, Node.INCRDECR_PROP);
1710:       assertEquals(48, Node.DIRECTIVES);
1711:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1712:       assertEquals(4095, Node.COLUMN_MASK);
1713:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1714:       assertEquals(1, Node.DECR_FLAG);
1715:       assertEquals(12, Node.COLUMN_BITS);
1716:       assertEquals(53, Node.INPUT_ID);
1717:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1719:       assertEquals(43, Node.IS_CONSTANT_NAME);
1720:       assertEquals(56, Node.CHANGE_TIME);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1723:       assertEquals(8, Node.FLAG_NO_THROWS);
1724:       assertEquals(2, Node.POST_FLAG);
1725:       assertEquals(39, Node.EMPTY_BLOCK);
1726:       assertEquals(55, Node.INFERRED_FUNCTION);
1727:       assertEquals(29, Node.JSDOC_INFO_PROP);
1728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1729:       assertEquals(30, Node.VAR_ARGS_NAME);
1730:       assertEquals(57, Node.LAST_PROP);
1731:       assertEquals(47, Node.IS_DISPATCHER);
1732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1733:       assertEquals(47, Node.IS_DISPATCHER);
1734:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1735:       assertEquals(56, Node.CHANGE_TIME);
1736:       assertEquals(29, Node.JSDOC_INFO_PROP);
1737:       assertEquals(37, Node.OPT_ARG_NAME);
1738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1739:       assertEquals(32, Node.INCRDECR_PROP);
1740:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1741:       assertEquals(12, Node.COLUMN_BITS);
1742:       assertEquals(2, Node.POST_FLAG);
1743:       assertEquals(30, Node.VAR_ARGS_NAME);
1744:       assertEquals(43, Node.IS_CONSTANT_NAME);
1745:       assertEquals(1, Node.DECR_FLAG);
1746:       assertEquals(46, Node.IS_NAMESPACE);
1747:       assertEquals(54, Node.SLASH_V);
1748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1749:       assertEquals(50, Node.FREE_CALL);
1750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1752:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(39, Node.EMPTY_BLOCK);
1755:       assertEquals(48, Node.DIRECTIVES);
1756:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1757:       assertEquals(4095, Node.COLUMN_MASK);
1758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1759:       assertEquals(57, Node.LAST_PROP);
1760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(49, Node.DIRECT_EVAL);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(53, Node.INPUT_ID);
1765:       assertEquals(57, Node.REFLECTED_OBJECT);
1766:       assertEquals(55, Node.INFERRED_FUNCTION);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(36, Node.QUOTED_PROP);
1769:       assertFalse(node2.equals((Object)node1));
1770:       assertFalse(node2.equals((Object)node0));
1771:       assertFalse(node3.equals((Object)node1));
1772:       assertFalse(node3.equals((Object)node0));
1773:       assertTrue(boolean3 == boolean0);
1774:       assertFalse(boolean3 == boolean1);
1775:       assertTrue(boolean3 == boolean2);
1776:       assertSame(node2, node3);
1777:       assertNotSame(node2, node0);
1778:       assertSame(node3, node2);
1779:       assertNotSame(node3, node0);
1780:       assertEquals(39, node2.getType());
1781:       assertFalse(node2.isContinue());
1782:       assertFalse(node2.isWhile());
1783:       assertFalse(node2.hasMoreThanOneChild());
1784:       assertFalse(node2.isOr());
1785:       assertFalse(node2.isBlock());
1786:       assertFalse(node2.isAdd());
1787:       assertFalse(node2.isNew());
1788:       assertFalse(node2.isLabel());
1789:       assertFalse(node2.isAssignAdd());
1790:       assertFalse(node2.isReturn());
1791:       assertFalse(node2.isDo());
1792:       assertFalse(node2.isStringKey());
1793:       assertFalse(node2.isCast());
1794:       assertFalse(node2.isVar());
1795:       assertEquals((-1), node2.getSourcePosition());
1796:       assertFalse(node2.isParamList());
1797:       assertFalse(node2.isLabelName());
1798:       assertFalse(node2.isWith());
1799:       assertFalse(node2.isCatch());
1800:       assertFalse(node2.isInstanceOf());
1801:       assertFalse(node2.isRegExp());
1802:       assertFalse(node2.isFunction());
1803:       assertFalse(node2.isThis());
1804:       assertFalse(node2.isScript());
1805:       assertFalse(node2.hasOneChild());
1806:       assertFalse(node2.isSetterDef());
1807:       assertFalse(node2.isTry());
1808:       assertFalse(node2.isFor());
1809:       assertFalse(node2.isHook());
1810:       assertFalse(node2.isNE());
1811:       assertFalse(node2.isIf());
1812:       assertEquals((-1), node2.getLineno());
1813:       assertFalse(node2.isCase());
1814:       assertFalse(node2.isString());
1815:       assertFalse(node2.isIn());
1816:       assertFalse(node2.isInc());
1817:       assertTrue(node2.isNumber());
1818:       assertFalse(node2.isFalse());
1819:       assertFalse(node2.isThrow());
1820:       assertFalse(node2.isGetterDef());
1821:       assertEquals((-1), node2.getCharno());
1822:       assertFalse(node2.isArrayLit());
1823:       assertFalse(node2.isSwitch());
1824:       assertFalse(node2.isAnd());
1825:       assertFalse(node2.isObjectLit());
1826:       assertFalse(node2.isDebugger());
1827:       assertFalse(node2.isNot());
1828:       assertEquals(0, node2.getChildCount());
1829:       assertFalse(node2.isGetProp());
1830:       assertFalse(node2.isDefaultCase());
1831:       assertFalse(node2.isGetElem());
1832:       assertFalse(node2.isName());
1833:       assertFalse(node2.isCall());
1834:       assertFalse(node2.isEmpty());
1835:       assertFalse(node2.isTypeOf());
1836:       assertFalse(node2.isNull());
1837:       assertFalse(node2.hasChildren());
1838:       assertFalse(node2.isComma());
1839:       assertFalse(node2.isAssign());
1840:       assertFalse(node2.isDec());
1841:       assertFalse(node2.isExprResult());
1842:       assertFalse(node2.isTrue());
1843:       assertFalse(node2.isBreak());
1844:       assertFalse(node2.isDelProp());
1845:       assertFalse(node2.isVoid());
1846:       assertFalse(node3.isArrayLit());
1847:       assertFalse(node3.isTry());
1848:       assertFalse(node3.isVoid());
1849:       assertFalse(node3.isFunction());
1850:       assertFalse(node3.isEmpty());
1851:       assertFalse(node3.isDelProp());
1852:       assertFalse(node3.isGetterDef());
1853:       assertFalse(node3.isIf());
1854:       assertFalse(node3.isDebugger());
1855:       assertFalse(node3.isTrue());
1856:       assertFalse(node3.isNE());
1857:       assertFalse(node3.isIn());
1858:       assertEquals(0, node3.getChildCount());
1859:       assertFalse(node3.isSetterDef());
1860:       assertFalse(node3.isDefaultCase());
1861:       assertFalse(node3.isVar());
1862:       assertFalse(node3.isHook());
1863:       assertFalse(node3.isInc());
1864:       assertFalse(node3.isParamList());
1865:       assertFalse(node3.isSwitch());
1866:       assertEquals((-1), node3.getCharno());
1867:       assertFalse(node3.isStringKey());
1868:       assertEquals((-1), node3.getLineno());
1869:       assertFalse(node3.hasMoreThanOneChild());
1870:       assertFalse(node3.isCatch());
1871:       assertFalse(node3.isInstanceOf());
1872:       assertFalse(node3.isWith());
1873:       assertEquals(39, node3.getType());
1874:       assertFalse(node3.isCase());
1875:       assertFalse(node3.isRegExp());
1876:       assertFalse(node3.isThis());
1877:       assertFalse(node3.isBlock());
1878:       assertFalse(node3.isFor());
1879:       assertFalse(node3.hasOneChild());
1880:       assertFalse(node3.isExprResult());
1881:       assertFalse(node3.isScript());
1882:       assertFalse(node3.isGetElem());
1883:       assertFalse(node3.isCast());
1884:       assertEquals((-1), node3.getSourcePosition());
1885:       assertFalse(node3.isLabelName());
1886:       assertFalse(node3.isNot());
1887:       assertFalse(node3.isAnd());
1888:       assertFalse(node3.isLabel());
1889:       assertFalse(node3.isAssignAdd());
1890:       assertFalse(node3.isOr());
1891:       assertFalse(node3.isContinue());
1892:       assertFalse(node3.isDo());
1893:       assertFalse(node3.isThrow());
1894:       assertFalse(node3.isNew());
1895:       assertFalse(node3.isCall());
1896:       assertFalse(node3.isFalse());
1897:       assertFalse(node3.isAdd());
1898:       assertFalse(node3.isString());
1899:       assertFalse(node3.isBreak());
1900:       assertFalse(node3.isName());
1901:       assertFalse(node3.isNull());
1902:       assertFalse(node3.isReturn());
1903:       assertTrue(node3.isNumber());
1904:       assertFalse(node3.isObjectLit());
1905:       assertFalse(node3.isGetProp());
1906:       assertFalse(node3.isWhile());
1907:       assertFalse(node3.hasChildren());
1908:       assertFalse(node3.isTypeOf());
1909:       assertFalse(node3.isAssign());
1910:       assertFalse(node3.isDec());
1911:       assertFalse(node3.isComma());
1912:       
1913:       boolean boolean4 = node3.isSwitch();
1914:       assertFalse(boolean4);
1915:       assertEquals(52, Node.LENGTH);
1916:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1918:       assertEquals(40, Node.ORIGINALNAME_PROP);
1919:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1920:       assertEquals(49, Node.DIRECT_EVAL);
1921:       assertEquals(50, Node.FREE_CALL);
1922:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1923:       assertEquals(57, Node.REFLECTED_OBJECT);
1924:       assertEquals(46, Node.IS_NAMESPACE);
1925:       assertEquals(54, Node.SLASH_V);
1926:       assertEquals(37, Node.OPT_ARG_NAME);
1927:       assertEquals(32, Node.INCRDECR_PROP);
1928:       assertEquals(48, Node.DIRECTIVES);
1929:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1930:       assertEquals(4095, Node.COLUMN_MASK);
1931:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1932:       assertEquals(1, Node.DECR_FLAG);
1933:       assertEquals(12, Node.COLUMN_BITS);
1934:       assertEquals(53, Node.INPUT_ID);
1935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1937:       assertEquals(43, Node.IS_CONSTANT_NAME);
1938:       assertEquals(56, Node.CHANGE_TIME);
1939:       assertEquals(36, Node.QUOTED_PROP);
1940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1941:       assertEquals(8, Node.FLAG_NO_THROWS);
1942:       assertEquals(2, Node.POST_FLAG);
1943:       assertEquals(39, Node.EMPTY_BLOCK);
1944:       assertEquals(55, Node.INFERRED_FUNCTION);
1945:       assertEquals(29, Node.JSDOC_INFO_PROP);
1946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1947:       assertEquals(30, Node.VAR_ARGS_NAME);
1948:       assertEquals(57, Node.LAST_PROP);
1949:       assertEquals(47, Node.IS_DISPATCHER);
1950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1951:       assertEquals(47, Node.IS_DISPATCHER);
1952:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1953:       assertEquals(56, Node.CHANGE_TIME);
1954:       assertEquals(29, Node.JSDOC_INFO_PROP);
1955:       assertEquals(37, Node.OPT_ARG_NAME);
1956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1957:       assertEquals(32, Node.INCRDECR_PROP);
1958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1959:       assertEquals(12, Node.COLUMN_BITS);
1960:       assertEquals(2, Node.POST_FLAG);
1961:       assertEquals(30, Node.VAR_ARGS_NAME);
1962:       assertEquals(43, Node.IS_CONSTANT_NAME);
1963:       assertEquals(1, Node.DECR_FLAG);
1964:       assertEquals(46, Node.IS_NAMESPACE);
1965:       assertEquals(54, Node.SLASH_V);
1966:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1967:       assertEquals(50, Node.FREE_CALL);
1968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1969:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1971:       assertEquals(40, Node.ORIGINALNAME_PROP);
1972:       assertEquals(39, Node.EMPTY_BLOCK);
1973:       assertEquals(48, Node.DIRECTIVES);
1974:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1975:       assertEquals(4095, Node.COLUMN_MASK);
1976:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1977:       assertEquals(57, Node.LAST_PROP);
1978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1979:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1980:       assertEquals(49, Node.DIRECT_EVAL);
1981:       assertEquals(52, Node.LENGTH);
1982:       assertEquals(53, Node.INPUT_ID);
1983:       assertEquals(57, Node.REFLECTED_OBJECT);
1984:       assertEquals(55, Node.INFERRED_FUNCTION);
1985:       assertEquals(8, Node.FLAG_NO_THROWS);
1986:       assertEquals(36, Node.QUOTED_PROP);
1987:       assertFalse(node2.equals((Object)node1));
1988:       assertFalse(node2.equals((Object)node0));
1989:       assertFalse(node3.equals((Object)node1));
1990:       assertFalse(node3.equals((Object)node0));
1991:       assertTrue(boolean4 == boolean0);
1992:       assertTrue(boolean4 == boolean3);
1993:       assertFalse(boolean4 == boolean1);
1994:       assertTrue(boolean4 == boolean2);
1995:       assertSame(node2, node3);
1996:       assertNotSame(node2, node0);
1997:       assertSame(node3, node2);
1998:       assertNotSame(node3, node0);
1999:       assertEquals(39, node2.getType());
2000:       assertFalse(node2.isContinue());
2001:       assertFalse(node2.isWhile());
2002:       assertFalse(node2.hasMoreThanOneChild());
2003:       assertFalse(node2.isOr());
2004:       assertFalse(node2.isBlock());
2005:       assertFalse(node2.isAdd());
2006:       assertFalse(node2.isNew());
2007:       assertFalse(node2.isLabel());
2008:       assertFalse(node2.isAssignAdd());
2009:       assertFalse(node2.isReturn());
2010:       assertFalse(node2.isDo());
2011:       assertFalse(node2.isStringKey());
2012:       assertFalse(node2.isCast());
2013:       assertFalse(node2.isVar());
2014:       assertEquals((-1), node2.getSourcePosition());
2015:       assertFalse(node2.isParamList());
2016:       assertFalse(node2.isLabelName());
2017:       assertFalse(node2.isWith());
2018:       assertFalse(node2.isCatch());
2019:       assertFalse(node2.isInstanceOf());
2020:       assertFalse(node2.isRegExp());
2021:       assertFalse(node2.isFunction());
2022:       assertFalse(node2.isThis());
2023:       assertFalse(node2.isScript());
2024:       assertFalse(node2.hasOneChild());
2025:       assertFalse(node2.isSetterDef());
2026:       assertFalse(node2.isTry());
2027:       assertFalse(node2.isFor());
2028:       assertFalse(node2.isHook());
2029:       assertFalse(node2.isNE());
2030:       assertFalse(node2.isIf());
2031:       assertEquals((-1), node2.getLineno());
2032:       assertFalse(node2.isCase());
2033:       assertFalse(node2.isString());
2034:       assertFalse(node2.isIn());
2035:       assertFalse(node2.isInc());
2036:       assertTrue(node2.isNumber());
2037:       assertFalse(node2.isFalse());
2038:       assertFalse(node2.isThrow());
2039:       assertFalse(node2.isGetterDef());
2040:       assertEquals((-1), node2.getCharno());
2041:       assertFalse(node2.isArrayLit());
2042:       assertFalse(node2.isSwitch());
2043:       assertFalse(node2.isAnd());
2044:       assertFalse(node2.isObjectLit());
2045:       assertFalse(node2.isDebugger());
2046:       assertFalse(node2.isNot());
2047:       assertEquals(0, node2.getChildCount());
2048:       assertFalse(node2.isGetProp());
2049:       assertFalse(node2.isDefaultCase());
2050:       assertFalse(node2.isGetElem());
2051:       assertFalse(node2.isName());
2052:       assertFalse(node2.isCall());
2053:       assertFalse(node2.isEmpty());
2054:       assertFalse(node2.isTypeOf());
2055:       assertFalse(node2.isNull());
2056:       assertFalse(node2.hasChildren());
2057:       assertFalse(node2.isComma());
2058:       assertFalse(node2.isAssign());
2059:       assertFalse(node2.isDec());
2060:       assertFalse(node2.isExprResult());
2061:       assertFalse(node2.isTrue());
2062:       assertFalse(node2.isBreak());
2063:       assertFalse(node2.isDelProp());
2064:       assertFalse(node2.isVoid());
2065:       assertFalse(node3.isArrayLit());
2066:       assertFalse(node3.isTry());
2067:       assertFalse(node3.isVoid());
2068:       assertFalse(node3.isFunction());
2069:       assertFalse(node3.isEmpty());
2070:       assertFalse(node3.isDelProp());
2071:       assertFalse(node3.isGetterDef());
2072:       assertFalse(node3.isIf());
2073:       assertFalse(node3.isDebugger());
2074:       assertFalse(node3.isTrue());
2075:       assertFalse(node3.isNE());
2076:       assertFalse(node3.isIn());
2077:       assertEquals(0, node3.getChildCount());
2078:       assertFalse(node3.isSetterDef());
2079:       assertFalse(node3.isDefaultCase());
2080:       assertFalse(node3.isVar());
2081:       assertFalse(node3.isHook());
2082:       assertFalse(node3.isInc());
2083:       assertFalse(node3.isParamList());
2084:       assertFalse(node3.isSwitch());
2085:       assertEquals((-1), node3.getCharno());
2086:       assertFalse(node3.isStringKey());
2087:       assertEquals((-1), node3.getLineno());
2088:       assertFalse(node3.hasMoreThanOneChild());
2089:       assertFalse(node3.isCatch());
2090:       assertFalse(node3.isInstanceOf());
2091:       assertFalse(node3.isWith());
2092:       assertEquals(39, node3.getType());
2093:       assertFalse(node3.isCase());
2094:       assertFalse(node3.isRegExp());
2095:       assertFalse(node3.isThis());
2096:       assertFalse(node3.isBlock());
2097:       assertFalse(node3.isFor());
2098:       assertFalse(node3.hasOneChild());
2099:       assertFalse(node3.isExprResult());
2100:       assertFalse(node3.isScript());
2101:       assertFalse(node3.isGetElem());
2102:       assertFalse(node3.isCast());
2103:       assertEquals((-1), node3.getSourcePosition());
2104:       assertFalse(node3.isLabelName());
2105:       assertFalse(node3.isNot());
2106:       assertFalse(node3.isAnd());
2107:       assertFalse(node3.isLabel());
2108:       assertFalse(node3.isAssignAdd());
2109:       assertFalse(node3.isOr());
2110:       assertFalse(node3.isContinue());
2111:       assertFalse(node3.isDo());
2112:       assertFalse(node3.isThrow());
2113:       assertFalse(node3.isNew());
2114:       assertFalse(node3.isCall());
2115:       assertFalse(node3.isFalse());
2116:       assertFalse(node3.isAdd());
2117:       assertFalse(node3.isString());
2118:       assertFalse(node3.isBreak());
2119:       assertFalse(node3.isName());
2120:       assertFalse(node3.isNull());
2121:       assertFalse(node3.isReturn());
2122:       assertTrue(node3.isNumber());
2123:       assertFalse(node3.isObjectLit());
2124:       assertFalse(node3.isGetProp());
2125:       assertFalse(node3.isWhile());
2126:       assertFalse(node3.hasChildren());
2127:       assertFalse(node3.isTypeOf());
2128:       assertFalse(node3.isAssign());
2129:       assertFalse(node3.isDec());
2130:       assertFalse(node3.isComma());
2131:       
2132:       boolean boolean5 = node0.isNull();
2133:       assertFalse(boolean5);
2134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2135:       assertEquals(4095, Node.COLUMN_MASK);
2136:       assertEquals(55, Node.INFERRED_FUNCTION);
2137:       assertEquals(36, Node.QUOTED_PROP);
2138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2139:       assertEquals(43, Node.IS_CONSTANT_NAME);
2140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2141:       assertEquals(48, Node.DIRECTIVES);
2142:       assertEquals(40, Node.ORIGINALNAME_PROP);
2143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2144:       assertEquals(29, Node.JSDOC_INFO_PROP);
2145:       assertEquals(52, Node.LENGTH);
2146:       assertEquals(47, Node.IS_DISPATCHER);
2147:       assertEquals(57, Node.REFLECTED_OBJECT);
2148:       assertEquals(2, Node.POST_FLAG);
2149:       assertEquals(8, Node.FLAG_NO_THROWS);
2150:       assertEquals(39, Node.EMPTY_BLOCK);
2151:       assertEquals(53, Node.INPUT_ID);
2152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(12, Node.COLUMN_BITS);
2156:       assertEquals(46, Node.IS_NAMESPACE);
2157:       assertEquals(30, Node.VAR_ARGS_NAME);
2158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2159:       assertEquals(37, Node.OPT_ARG_NAME);
2160:       assertEquals(54, Node.SLASH_V);
2161:       assertEquals(56, Node.CHANGE_TIME);
2162:       assertEquals(49, Node.DIRECT_EVAL);
2163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2165:       assertEquals(50, Node.FREE_CALL);
2166:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2167:       assertEquals(32, Node.INCRDECR_PROP);
2168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2169:       assertEquals(1, Node.DECR_FLAG);
2170:       assertTrue(boolean5 == boolean4);
2171:       assertFalse(boolean5 == boolean1);
2172:       assertTrue(boolean5 == boolean3);
2173:       assertTrue(boolean5 == boolean0);
2174:       assertTrue(boolean5 == boolean2);
2175:       assertFalse(node0.equals((Object)node3));
2176:       assertFalse(node0.equals((Object)node1));
2177:       assertFalse(node0.equals((Object)node2));
2178:       assertNotSame(node0, node3);
2179:       assertNotSame(node0, node2);
2180:       assertFalse(node0.isGetProp());
2181:       assertFalse(node0.isThis());
2182:       assertFalse(node0.isComma());
2183:       assertEquals(131072, node0.getSourcePosition());
2184:       assertFalse(node0.isObjectLit());
2185:       assertFalse(node0.isNot());
2186:       assertFalse(node0.isScript());
2187:       assertFalse(node0.isExprResult());
2188:       assertEquals(0, node0.getCharno());
2189:       assertFalse(node0.isHook());
2190:       assertFalse(node0.isGetElem());
2191:       assertFalse(node0.isAssign());
2192:       assertFalse(node0.isBreak());
2193:       assertFalse(node0.isWith());
2194:       assertFalse(node0.isInstanceOf());
2195:       assertFalse(node0.isLabel());
2196:       assertFalse(node0.isOr());
2197:       assertFalse(node0.isDelProp());
2198:       assertFalse(node0.isAssignAdd());
2199:       assertFalse(node0.isFor());
2200:       assertFalse(node0.isCase());
2201:       assertFalse(node0.isDo());
2202:       assertFalse(node0.hasOneChild());
2203:       assertFalse(node0.isGetterDef());
2204:       assertFalse(node0.isEmpty());
2205:       assertFalse(node0.isSwitch());
2206:       assertFalse(node0.isNew());
2207:       assertFalse(node0.isDefaultCase());
2208:       assertFalse(node0.isVar());
2209:       assertFalse(node0.isLabelName());
2210:       assertFalse(node0.isArrayLit());
2211:       assertEquals(0, node0.getChildCount());
2212:       assertFalse(node0.isSetterDef());
2213:       assertFalse(node0.isNull());
2214:       assertFalse(node0.isParamList());
2215:       assertFalse(node0.isStringKey());
2216:       assertFalse(node0.isAdd());
2217:       assertFalse(node0.isVoid());
2218:       assertFalse(node0.isTrue());
2219:       assertFalse(node0.isBlock());
2220:       assertFalse(node0.isTry());
2221:       assertFalse(node0.isRegExp());
2222:       assertFalse(node0.isWhile());
2223:       assertFalse(node0.isCall());
2224:       assertFalse(node0.hasMoreThanOneChild());
2225:       assertEquals(39, node0.getType());
2226:       assertFalse(node0.isName());
2227:       assertFalse(node0.isCatch());
2228:       assertFalse(node0.isTypeOf());
2229:       assertEquals(32, node0.getLineno());
2230:       assertTrue(node0.isNumber());
2231:       assertFalse(node0.isDec());
2232:       assertFalse(node0.hasChildren());
2233:       assertFalse(node0.isIf());
2234:       assertFalse(node0.isReturn());
2235:       assertFalse(node0.isNE());
2236:       assertFalse(node0.isIn());
2237:       assertFalse(node0.isString());
2238:       assertFalse(node0.isDebugger());
2239:       assertFalse(node0.isFunction());
2240:       assertFalse(node0.isInc());
2241:       assertFalse(node0.isAnd());
2242:       assertFalse(node0.isThrow());
2243:       assertFalse(node0.isContinue());
2244:       assertFalse(node0.isFalse());
2245:       assertFalse(node0.isCast());
2246:   }
2247: }
RegularFileObject[/tmp/EvoSuite_121_1628160200564/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_121_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.common.collect.Platform",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.FluentIterable",
354:       "com.google.common.collect.Iterables$2",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 10:43:21.048 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, (-1363), (-1363));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(node0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNull(staticSourceFile0);

int int0 = node0.getType();
assertEquals(39, int0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

boolean boolean0 = node0.isIn();
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

node0.removeProp((-3995));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

Node node1 = Node.newString((-2099), "com.google.common.base.CharMatcher$2", 49, 15);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(200719, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(15, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertEquals((-2099), node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertNotNull(node1);

Node node2 = Node.newNumber((double) 38);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertNotNull(node2);

node0.setSourceEncodedPosition(131072);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node2);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(131072, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertEquals(32, node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

boolean boolean1 = node0.mayMutateArguments();
assertTrue(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean1 == boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(131072, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertEquals(32, node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

Node node3 = node2.getAncestor(0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertNotNull(node3);

node1.type = 131072;
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(200719, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertEquals(131072, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(15, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

int int1 = node0.getSourcePosition();
assertEquals(131072, int1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(int1 == int0);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(131072, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertEquals(32, node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node2));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertNotNull(iterable0);

boolean boolean2 = node1.wasEmptyNode();
assertFalse(boolean2);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(200719, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertEquals(131072, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(15, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

boolean boolean3 = node3.isCall();
assertFalse(boolean3);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());

boolean boolean4 = node3.isSwitch();
assertFalse(boolean4);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());

boolean boolean5 = node0.isNull();
assertFalse(boolean5);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(131072, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertEquals(32, node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());


[MASTER] 10:43:21.277 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1628160201049/com/google/javascript/rhino/Node_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1628160201049/com/google/javascript/rhino/Node_122_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:21.277 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:21.277 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:21.277 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 134
[MASTER] 10:43:21.280 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1628160201049/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.FunctionType;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.ModificationVisitor;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.testdata.EvoSuiteFile;
20: import org.evosuite.runtime.testdata.FileSystemHandling;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class Node_122_tmp__ESTest extends Node_122_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Node node0 = Node.newNumber(2302.336151346, 1837, 1837);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(55, Node.INFERRED_FUNCTION);
33:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(36, Node.QUOTED_PROP);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(54, Node.SLASH_V);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(57, Node.LAST_PROP);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(40, Node.ORIGINALNAME_PROP);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(2, Node.POST_FLAG);
48:       assertEquals(30, Node.VAR_ARGS_NAME);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(56, Node.CHANGE_TIME);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(29, Node.JSDOC_INFO_PROP);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
59:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
60:       assertEquals(49, Node.DIRECT_EVAL);
61:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
62:       assertEquals(12, Node.COLUMN_BITS);
63:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
64:       assertEquals(4095, Node.COLUMN_MASK);
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isAdd());
70:       assertFalse(node0.isNew());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isWhile());
73:       assertEquals(1837, node0.getLineno());
74:       assertEquals(39, node0.getType());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.isOr());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isCast());
88:       assertTrue(node0.isNumber());
89:       assertFalse(node0.isFunction());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.hasChildren());
93:       assertFalse(node0.isReturn());
94:       assertFalse(node0.isAnd());
95:       assertFalse(node0.isContinue());
96:       assertFalse(node0.isNot());
97:       assertFalse(node0.isObjectLit());
98:       assertEquals(7526189, node0.getSourcePosition());
99:       assertFalse(node0.isString());
100:       assertFalse(node0.isDebugger());
101:       assertFalse(node0.isThrow());
102:       assertFalse(node0.isFalse());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isGetProp());
105:       assertEquals(1837, node0.getCharno());
106:       assertFalse(node0.isComma());
107:       assertFalse(node0.isHook());
108:       assertFalse(node0.isThis());
109:       assertFalse(node0.isWith());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isIn());
112:       assertFalse(node0.isInc());
113:       assertFalse(node0.isExprResult());
114:       assertFalse(node0.isIf());
115:       assertFalse(node0.isNE());
116:       assertFalse(node0.isLabelName());
117:       assertFalse(node0.isGetterDef());
118:       assertFalse(node0.hasOneChild());
119:       assertFalse(node0.isArrayLit());
120:       assertFalse(node0.isEmpty());
121:       assertFalse(node0.isLabel());
122:       assertFalse(node0.isAssignAdd());
123:       assertFalse(node0.isTry());
124:       assertFalse(node0.isRegExp());
125:       assertFalse(node0.isDefaultCase());
126:       assertFalse(node0.isFor());
127:       assertFalse(node0.isCase());
128:       assertFalse(node0.isScript());
129:       assertFalse(node0.isParamList());
130:       assertFalse(node0.isSwitch());
131:       assertNotNull(node0);
132:       
133:       Iterable<Node> iterable0 = node0.children();
134:       assertFalse(iterable0.contains(node0));
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(55, Node.INFERRED_FUNCTION);
139:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(54, Node.SLASH_V);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(40, Node.ORIGINALNAME_PROP);
152:       assertEquals(47, Node.IS_DISPATCHER);
153:       assertEquals(2, Node.POST_FLAG);
154:       assertEquals(30, Node.VAR_ARGS_NAME);
155:       assertEquals(37, Node.OPT_ARG_NAME);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(29, Node.JSDOC_INFO_PROP);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
166:       assertEquals(49, Node.DIRECT_EVAL);
167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
168:       assertEquals(12, Node.COLUMN_BITS);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(4095, Node.COLUMN_MASK);
171:       assertFalse(node0.isStringKey());
172:       assertFalse(node0.isName());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isCall());
175:       assertFalse(node0.isAdd());
176:       assertFalse(node0.isNew());
177:       assertEquals(0, node0.getChildCount());
178:       assertFalse(node0.isWhile());
179:       assertEquals(1837, node0.getLineno());
180:       assertEquals(39, node0.getType());
181:       assertFalse(node0.isBlock());
182:       assertFalse(node0.isVar());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.isOr());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isTrue());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isCast());
194:       assertTrue(node0.isNumber());
195:       assertFalse(node0.isFunction());
196:       assertFalse(node0.isTypeOf());
197:       assertFalse(node0.isDec());
198:       assertFalse(node0.hasChildren());
199:       assertFalse(node0.isReturn());
200:       assertFalse(node0.isAnd());
201:       assertFalse(node0.isContinue());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isObjectLit());
204:       assertEquals(7526189, node0.getSourcePosition());
205:       assertFalse(node0.isString());
206:       assertFalse(node0.isDebugger());
207:       assertFalse(node0.isThrow());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.isBreak());
210:       assertFalse(node0.isGetProp());
211:       assertEquals(1837, node0.getCharno());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isHook());
214:       assertFalse(node0.isThis());
215:       assertFalse(node0.isWith());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isIn());
218:       assertFalse(node0.isInc());
219:       assertFalse(node0.isExprResult());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isNE());
222:       assertFalse(node0.isLabelName());
223:       assertFalse(node0.isGetterDef());
224:       assertFalse(node0.hasOneChild());
225:       assertFalse(node0.isArrayLit());
226:       assertFalse(node0.isEmpty());
227:       assertFalse(node0.isLabel());
228:       assertFalse(node0.isAssignAdd());
229:       assertFalse(node0.isTry());
230:       assertFalse(node0.isRegExp());
231:       assertFalse(node0.isDefaultCase());
232:       assertFalse(node0.isFor());
233:       assertFalse(node0.isCase());
234:       assertFalse(node0.isScript());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isSwitch());
237:       assertNotNull(iterable0);
238:       
239:       boolean boolean0 = node0.isParamList();
240:       assertFalse(boolean0);
241:       assertEquals(48, Node.DIRECTIVES);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(55, Node.INFERRED_FUNCTION);
245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(50, Node.FREE_CALL);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(43, Node.IS_CONSTANT_NAME);
257:       assertEquals(40, Node.ORIGINALNAME_PROP);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(2, Node.POST_FLAG);
260:       assertEquals(30, Node.VAR_ARGS_NAME);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(46, Node.IS_NAMESPACE);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(29, Node.JSDOC_INFO_PROP);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
272:       assertEquals(49, Node.DIRECT_EVAL);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(12, Node.COLUMN_BITS);
275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
276:       assertEquals(4095, Node.COLUMN_MASK);
277:       assertFalse(node0.isStringKey());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isSetterDef());
280:       assertFalse(node0.isCall());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isNew());
283:       assertEquals(0, node0.getChildCount());
284:       assertFalse(node0.isWhile());
285:       assertEquals(1837, node0.getLineno());
286:       assertEquals(39, node0.getType());
287:       assertFalse(node0.isBlock());
288:       assertFalse(node0.isVar());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isCatch());
292:       assertFalse(node0.isOr());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isNull());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isDelProp());
299:       assertFalse(node0.isCast());
300:       assertTrue(node0.isNumber());
301:       assertFalse(node0.isFunction());
302:       assertFalse(node0.isTypeOf());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.hasChildren());
305:       assertFalse(node0.isReturn());
306:       assertFalse(node0.isAnd());
307:       assertFalse(node0.isContinue());
308:       assertFalse(node0.isNot());
309:       assertFalse(node0.isObjectLit());
310:       assertEquals(7526189, node0.getSourcePosition());
311:       assertFalse(node0.isString());
312:       assertFalse(node0.isDebugger());
313:       assertFalse(node0.isThrow());
314:       assertFalse(node0.isFalse());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isGetProp());
317:       assertEquals(1837, node0.getCharno());
318:       assertFalse(node0.isComma());
319:       assertFalse(node0.isHook());
320:       assertFalse(node0.isThis());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isInstanceOf());
323:       assertFalse(node0.isIn());
324:       assertFalse(node0.isInc());
325:       assertFalse(node0.isExprResult());
326:       assertFalse(node0.isIf());
327:       assertFalse(node0.isNE());
328:       assertFalse(node0.isLabelName());
329:       assertFalse(node0.isGetterDef());
330:       assertFalse(node0.hasOneChild());
331:       assertFalse(node0.isArrayLit());
332:       assertFalse(node0.isEmpty());
333:       assertFalse(node0.isLabel());
334:       assertFalse(node0.isAssignAdd());
335:       assertFalse(node0.isTry());
336:       assertFalse(node0.isRegExp());
337:       assertFalse(node0.isDefaultCase());
338:       assertFalse(node0.isFor());
339:       assertFalse(node0.isCase());
340:       assertFalse(node0.isScript());
341:       assertFalse(node0.isParamList());
342:       assertFalse(node0.isSwitch());
343:       
344:       Node node1 = Node.newNumber((double) 47, 53, 48);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(57, Node.LAST_PROP);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(49, Node.DIRECT_EVAL);
349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(40, Node.ORIGINALNAME_PROP);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(8, Node.FLAG_NO_THROWS);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(37, Node.OPT_ARG_NAME);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
362:       assertEquals(57, Node.REFLECTED_OBJECT);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(29, Node.JSDOC_INFO_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
368:       assertEquals(55, Node.INFERRED_FUNCTION);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(43, Node.IS_CONSTANT_NAME);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
375:       assertEquals(46, Node.IS_NAMESPACE);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
381:       assertFalse(node1.equals((Object)node0));
382:       assertNotSame(node1, node0);
383:       assertEquals(217136, node1.getSourcePosition());
384:       assertFalse(node1.hasMoreThanOneChild());
385:       assertFalse(node1.isContinue());
386:       assertFalse(node1.isAssignAdd());
387:       assertFalse(node1.isDo());
388:       assertEquals(53, node1.getLineno());
389:       assertFalse(node1.isOr());
390:       assertFalse(node1.isCall());
391:       assertFalse(node1.isGetElem());
392:       assertFalse(node1.isName());
393:       assertFalse(node1.hasOneChild());
394:       assertFalse(node1.isTypeOf());
395:       assertFalse(node1.isExprResult());
396:       assertFalse(node1.isWhile());
397:       assertFalse(node1.isAssign());
398:       assertEquals(39, node1.getType());
399:       assertFalse(node1.isBlock());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.isReturn());
402:       assertFalse(node1.hasChildren());
403:       assertFalse(node1.isDec());
404:       assertFalse(node1.isAnd());
405:       assertFalse(node1.isCatch());
406:       assertFalse(node1.isInstanceOf());
407:       assertFalse(node1.isGetProp());
408:       assertFalse(node1.isSetterDef());
409:       assertFalse(node1.isNot());
410:       assertFalse(node1.isObjectLit());
411:       assertFalse(node1.isDebugger());
412:       assertFalse(node1.isCast());
413:       assertFalse(node1.isThrow());
414:       assertFalse(node1.isFunction());
415:       assertFalse(node1.isFalse());
416:       assertFalse(node1.isIn());
417:       assertTrue(node1.isNumber());
418:       assertFalse(node1.isCase());
419:       assertFalse(node1.isNE());
420:       assertFalse(node1.isInc());
421:       assertFalse(node1.isSwitch());
422:       assertFalse(node1.isIf());
423:       assertFalse(node1.isString());
424:       assertFalse(node1.isGetterDef());
425:       assertFalse(node1.isHook());
426:       assertFalse(node1.isTry());
427:       assertFalse(node1.isDelProp());
428:       assertFalse(node1.isVoid());
429:       assertFalse(node1.isBreak());
430:       assertFalse(node1.isRegExp());
431:       assertFalse(node1.isThis());
432:       assertFalse(node1.isFor());
433:       assertFalse(node1.isComma());
434:       assertFalse(node1.isScript());
435:       assertFalse(node1.isNull());
436:       assertFalse(node1.isTrue());
437:       assertFalse(node1.isParamList());
438:       assertFalse(node1.isArrayLit());
439:       assertFalse(node1.isVar());
440:       assertFalse(node1.isStringKey());
441:       assertFalse(node1.isLabelName());
442:       assertFalse(node1.isEmpty());
443:       assertFalse(node1.isAdd());
444:       assertFalse(node1.isNew());
445:       assertEquals(48, node1.getCharno());
446:       assertFalse(node1.isDefaultCase());
447:       assertFalse(node1.isLabel());
448:       assertEquals(0, node1.getChildCount());
449:       assertNotNull(node1);
450:       
451:       String string0 = node1.toStringTree();
452:       assertEquals("NUMBER 47.0 53\n", string0);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(49, Node.DIRECT_EVAL);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(54, Node.SLASH_V);
459:       assertEquals(12, Node.COLUMN_BITS);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(2, Node.POST_FLAG);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(47, Node.IS_DISPATCHER);
466:       assertEquals(37, Node.OPT_ARG_NAME);
467:       assertEquals(48, Node.DIRECTIVES);
468:       assertEquals(56, Node.CHANGE_TIME);
469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
472:       assertEquals(29, Node.JSDOC_INFO_PROP);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(52, Node.LENGTH);
475:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
476:       assertEquals(55, Node.INFERRED_FUNCTION);
477:       assertEquals(36, Node.QUOTED_PROP);
478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
479:       assertEquals(43, Node.IS_CONSTANT_NAME);
480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
481:       assertEquals(4095, Node.COLUMN_MASK);
482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
483:       assertEquals(46, Node.IS_NAMESPACE);
484:       assertEquals(32, Node.INCRDECR_PROP);
485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
489:       assertFalse(node1.equals((Object)node0));
490:       assertNotSame(node1, node0);
491:       assertEquals(217136, node1.getSourcePosition());
492:       assertFalse(node1.hasMoreThanOneChild());
493:       assertFalse(node1.isContinue());
494:       assertFalse(node1.isAssignAdd());
495:       assertFalse(node1.isDo());
496:       assertEquals(53, node1.getLineno());
497:       assertFalse(node1.isOr());
498:       assertFalse(node1.isCall());
499:       assertFalse(node1.isGetElem());
500:       assertFalse(node1.isName());
501:       assertFalse(node1.hasOneChild());
502:       assertFalse(node1.isTypeOf());
503:       assertFalse(node1.isExprResult());
504:       assertFalse(node1.isWhile());
505:       assertFalse(node1.isAssign());
506:       assertEquals(39, node1.getType());
507:       assertFalse(node1.isBlock());
508:       assertFalse(node1.isWith());
509:       assertFalse(node1.isReturn());
510:       assertFalse(node1.hasChildren());
511:       assertFalse(node1.isDec());
512:       assertFalse(node1.isAnd());
513:       assertFalse(node1.isCatch());
514:       assertFalse(node1.isInstanceOf());
515:       assertFalse(node1.isGetProp());
516:       assertFalse(node1.isSetterDef());
517:       assertFalse(node1.isNot());
518:       assertFalse(node1.isObjectLit());
519:       assertFalse(node1.isDebugger());
520:       assertFalse(node1.isCast());
521:       assertFalse(node1.isThrow());
522:       assertFalse(node1.isFunction());
523:       assertFalse(node1.isFalse());
524:       assertFalse(node1.isIn());
525:       assertTrue(node1.isNumber());
526:       assertFalse(node1.isCase());
527:       assertFalse(node1.isNE());
528:       assertFalse(node1.isInc());
529:       assertFalse(node1.isSwitch());
530:       assertFalse(node1.isIf());
531:       assertFalse(node1.isString());
532:       assertFalse(node1.isGetterDef());
533:       assertFalse(node1.isHook());
534:       assertFalse(node1.isTry());
535:       assertFalse(node1.isDelProp());
536:       assertFalse(node1.isVoid());
537:       assertFalse(node1.isBreak());
538:       assertFalse(node1.isRegExp());
539:       assertFalse(node1.isThis());
540:       assertFalse(node1.isFor());
541:       assertFalse(node1.isComma());
542:       assertFalse(node1.isScript());
543:       assertFalse(node1.isNull());
544:       assertFalse(node1.isTrue());
545:       assertFalse(node1.isParamList());
546:       assertFalse(node1.isArrayLit());
547:       assertFalse(node1.isVar());
548:       assertFalse(node1.isStringKey());
549:       assertFalse(node1.isLabelName());
550:       assertFalse(node1.isEmpty());
551:       assertFalse(node1.isAdd());
552:       assertFalse(node1.isNew());
553:       assertEquals(48, node1.getCharno());
554:       assertFalse(node1.isDefaultCase());
555:       assertFalse(node1.isLabel());
556:       assertEquals(0, node1.getChildCount());
557:       assertNotNull(string0);
558:       
559:       node0.addChildToFront(node1);
560:       assertEquals(48, Node.DIRECTIVES);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(39, Node.EMPTY_BLOCK);
563:       assertEquals(55, Node.INFERRED_FUNCTION);
564:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(36, Node.QUOTED_PROP);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(8, Node.FLAG_NO_THROWS);
570:       assertEquals(50, Node.FREE_CALL);
571:       assertEquals(53, Node.INPUT_ID);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
574:       assertEquals(57, Node.LAST_PROP);
575:       assertEquals(43, Node.IS_CONSTANT_NAME);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(2, Node.POST_FLAG);
579:       assertEquals(30, Node.VAR_ARGS_NAME);
580:       assertEquals(37, Node.OPT_ARG_NAME);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
584:       assertEquals(32, Node.INCRDECR_PROP);
585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(51, Node.STATIC_SOURCE_FILE);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
593:       assertEquals(12, Node.COLUMN_BITS);
594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
595:       assertEquals(4095, Node.COLUMN_MASK);
596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
597:       assertEquals(57, Node.LAST_PROP);
598:       assertEquals(30, Node.VAR_ARGS_NAME);
599:       assertEquals(49, Node.DIRECT_EVAL);
600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
601:       assertEquals(54, Node.SLASH_V);
602:       assertEquals(12, Node.COLUMN_BITS);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
605:       assertEquals(2, Node.POST_FLAG);
606:       assertEquals(8, Node.FLAG_NO_THROWS);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(47, Node.IS_DISPATCHER);
609:       assertEquals(37, Node.OPT_ARG_NAME);
610:       assertEquals(48, Node.DIRECTIVES);
611:       assertEquals(56, Node.CHANGE_TIME);
612:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
613:       assertEquals(57, Node.REFLECTED_OBJECT);
614:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
615:       assertEquals(29, Node.JSDOC_INFO_PROP);
616:       assertEquals(53, Node.INPUT_ID);
617:       assertEquals(52, Node.LENGTH);
618:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
619:       assertEquals(55, Node.INFERRED_FUNCTION);
620:       assertEquals(36, Node.QUOTED_PROP);
621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
622:       assertEquals(43, Node.IS_CONSTANT_NAME);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(4095, Node.COLUMN_MASK);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(46, Node.IS_NAMESPACE);
627:       assertEquals(32, Node.INCRDECR_PROP);
628:       assertEquals(51, Node.STATIC_SOURCE_FILE);
629:       assertEquals(1, Node.DECR_FLAG);
630:       assertEquals(50, Node.FREE_CALL);
631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
632:       assertFalse(node0.equals((Object)node1));
633:       assertFalse(node1.equals((Object)node0));
634:       assertNotSame(node0, node1);
635:       assertNotSame(node1, node0);
636:       assertFalse(node0.isStringKey());
637:       assertFalse(node0.isName());
638:       assertFalse(node0.isSetterDef());
639:       assertFalse(node0.isCall());
640:       assertFalse(node0.isAdd());
641:       assertFalse(node0.isNew());
642:       assertFalse(node0.isWhile());
643:       assertEquals(1837, node0.getLineno());
644:       assertEquals(39, node0.getType());
645:       assertFalse(node0.isBlock());
646:       assertFalse(node0.isVar());
647:       assertFalse(node0.hasMoreThanOneChild());
648:       assertFalse(node0.isDo());
649:       assertFalse(node0.isCatch());
650:       assertFalse(node0.isOr());
651:       assertFalse(node0.isVoid());
652:       assertFalse(node0.isNull());
653:       assertFalse(node0.isTrue());
654:       assertFalse(node0.isGetElem());
655:       assertFalse(node0.isAssign());
656:       assertFalse(node0.isDelProp());
657:       assertFalse(node0.isCast());
658:       assertTrue(node0.isNumber());
659:       assertFalse(node0.isFunction());
660:       assertFalse(node0.isTypeOf());
661:       assertFalse(node0.isDec());
662:       assertTrue(node0.hasOneChild());
663:       assertFalse(node0.isReturn());
664:       assertFalse(node0.isAnd());
665:       assertFalse(node0.isContinue());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isObjectLit());
668:       assertEquals(7526189, node0.getSourcePosition());
669:       assertFalse(node0.isString());
670:       assertFalse(node0.isDebugger());
671:       assertFalse(node0.isThrow());
672:       assertFalse(node0.isFalse());
673:       assertFalse(node0.isBreak());
674:       assertFalse(node0.isGetProp());
675:       assertEquals(1837, node0.getCharno());
676:       assertFalse(node0.isComma());
677:       assertFalse(node0.isHook());
678:       assertFalse(node0.isThis());
679:       assertFalse(node0.isWith());
680:       assertFalse(node0.isInstanceOf());
681:       assertFalse(node0.isIn());
682:       assertFalse(node0.isInc());
683:       assertFalse(node0.isExprResult());
684:       assertTrue(node0.hasChildren());
685:       assertFalse(node0.isIf());
686:       assertFalse(node0.isNE());
687:       assertFalse(node0.isLabelName());
688:       assertFalse(node0.isGetterDef());
689:       assertFalse(node0.isArrayLit());
690:       assertFalse(node0.isEmpty());
691:       assertFalse(node0.isLabel());
692:       assertFalse(node0.isAssignAdd());
693:       assertFalse(node0.isTry());
694:       assertFalse(node0.isRegExp());
695:       assertFalse(node0.isDefaultCase());
696:       assertEquals(1, node0.getChildCount());
697:       assertFalse(node0.isFor());
698:       assertFalse(node0.isCase());
699:       assertFalse(node0.isScript());
700:       assertFalse(node0.isParamList());
701:       assertFalse(node0.isSwitch());
702:       assertEquals(217136, node1.getSourcePosition());
703:       assertFalse(node1.hasMoreThanOneChild());
704:       assertFalse(node1.isContinue());
705:       assertFalse(node1.isAssignAdd());
706:       assertFalse(node1.isDo());
707:       assertEquals(53, node1.getLineno());
708:       assertFalse(node1.isOr());
709:       assertFalse(node1.isCall());
710:       assertFalse(node1.isGetElem());
711:       assertFalse(node1.isName());
712:       assertFalse(node1.hasOneChild());
713:       assertFalse(node1.isTypeOf());
714:       assertFalse(node1.isExprResult());
715:       assertFalse(node1.isWhile());
716:       assertFalse(node1.isAssign());
717:       assertEquals(39, node1.getType());
718:       assertFalse(node1.isBlock());
719:       assertFalse(node1.isWith());
720:       assertFalse(node1.isReturn());
721:       assertFalse(node1.hasChildren());
722:       assertFalse(node1.isDec());
723:       assertFalse(node1.isAnd());
724:       assertFalse(node1.isCatch());
725:       assertFalse(node1.isInstanceOf());
726:       assertFalse(node1.isGetProp());
727:       assertFalse(node1.isSetterDef());
728:       assertFalse(node1.isNot());
729:       assertFalse(node1.isObjectLit());
730:       assertFalse(node1.isDebugger());
731:       assertFalse(node1.isCast());
732:       assertFalse(node1.isThrow());
733:       assertFalse(node1.isFunction());
734:       assertFalse(node1.isFalse());
735:       assertFalse(node1.isIn());
736:       assertTrue(node1.isNumber());
737:       assertFalse(node1.isCase());
738:       assertFalse(node1.isNE());
739:       assertFalse(node1.isInc());
740:       assertFalse(node1.isSwitch());
741:       assertFalse(node1.isIf());
742:       assertFalse(node1.isString());
743:       assertFalse(node1.isGetterDef());
744:       assertFalse(node1.isHook());
745:       assertFalse(node1.isTry());
746:       assertFalse(node1.isDelProp());
747:       assertFalse(node1.isVoid());
748:       assertFalse(node1.isBreak());
749:       assertFalse(node1.isRegExp());
750:       assertFalse(node1.isThis());
751:       assertFalse(node1.isFor());
752:       assertFalse(node1.isComma());
753:       assertFalse(node1.isScript());
754:       assertFalse(node1.isNull());
755:       assertFalse(node1.isTrue());
756:       assertFalse(node1.isParamList());
757:       assertFalse(node1.isArrayLit());
758:       assertFalse(node1.isVar());
759:       assertFalse(node1.isStringKey());
760:       assertFalse(node1.isLabelName());
761:       assertFalse(node1.isEmpty());
762:       assertFalse(node1.isAdd());
763:       assertFalse(node1.isNew());
764:       assertEquals(48, node1.getCharno());
765:       assertFalse(node1.isDefaultCase());
766:       assertFalse(node1.isLabel());
767:       assertEquals(0, node1.getChildCount());
768:       
769:       Node node2 = node1.useSourceInfoIfMissingFrom(node0);
770:       assertEquals(48, Node.DIRECTIVES);
771:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
772:       assertEquals(39, Node.EMPTY_BLOCK);
773:       assertEquals(55, Node.INFERRED_FUNCTION);
774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(36, Node.QUOTED_PROP);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(52, Node.LENGTH);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(50, Node.FREE_CALL);
781:       assertEquals(53, Node.INPUT_ID);
782:       assertEquals(54, Node.SLASH_V);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(57, Node.LAST_PROP);
785:       assertEquals(43, Node.IS_CONSTANT_NAME);
786:       assertEquals(40, Node.ORIGINALNAME_PROP);
787:       assertEquals(47, Node.IS_DISPATCHER);
788:       assertEquals(2, Node.POST_FLAG);
789:       assertEquals(30, Node.VAR_ARGS_NAME);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(46, Node.IS_NAMESPACE);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(32, Node.INCRDECR_PROP);
795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
796:       assertEquals(1, Node.DECR_FLAG);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
801:       assertEquals(49, Node.DIRECT_EVAL);
802:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
803:       assertEquals(12, Node.COLUMN_BITS);
804:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
805:       assertEquals(4095, Node.COLUMN_MASK);
806:       assertEquals(15, Node.NO_SIDE_EFFECTS);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(30, Node.VAR_ARGS_NAME);
809:       assertEquals(49, Node.DIRECT_EVAL);
810:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
811:       assertEquals(54, Node.SLASH_V);
812:       assertEquals(12, Node.COLUMN_BITS);
813:       assertEquals(40, Node.ORIGINALNAME_PROP);
814:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(8, Node.FLAG_NO_THROWS);
817:       assertEquals(39, Node.EMPTY_BLOCK);
818:       assertEquals(47, Node.IS_DISPATCHER);
819:       assertEquals(37, Node.OPT_ARG_NAME);
820:       assertEquals(48, Node.DIRECTIVES);
821:       assertEquals(56, Node.CHANGE_TIME);
822:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
823:       assertEquals(57, Node.REFLECTED_OBJECT);
824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
825:       assertEquals(29, Node.JSDOC_INFO_PROP);
826:       assertEquals(53, Node.INPUT_ID);
827:       assertEquals(52, Node.LENGTH);
828:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
829:       assertEquals(55, Node.INFERRED_FUNCTION);
830:       assertEquals(36, Node.QUOTED_PROP);
831:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
834:       assertEquals(4095, Node.COLUMN_MASK);
835:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(32, Node.INCRDECR_PROP);
838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
839:       assertEquals(1, Node.DECR_FLAG);
840:       assertEquals(50, Node.FREE_CALL);
841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
842:       assertEquals(56, Node.CHANGE_TIME);
843:       assertEquals(2, Node.POST_FLAG);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(12, Node.COLUMN_BITS);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
849:       assertEquals(53, Node.INPUT_ID);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(1, Node.DECR_FLAG);
852:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(36, Node.QUOTED_PROP);
855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
858:       assertEquals(4095, Node.COLUMN_MASK);
859:       assertEquals(57, Node.REFLECTED_OBJECT);
860:       assertEquals(48, Node.DIRECTIVES);
861:       assertEquals(49, Node.DIRECT_EVAL);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
865:       assertEquals(8, Node.FLAG_NO_THROWS);
866:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(57, Node.LAST_PROP);
874:       assertEquals(30, Node.VAR_ARGS_NAME);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(40, Node.ORIGINALNAME_PROP);
878:       assertFalse(node0.equals((Object)node1));
879:       assertFalse(node1.equals((Object)node0));
880:       assertFalse(node2.equals((Object)node0));
881:       assertNotSame(node0, node2);
882:       assertNotSame(node0, node1);
883:       assertNotSame(node1, node0);
884:       assertSame(node1, node2);
885:       assertNotSame(node2, node0);
886:       assertSame(node2, node1);
887:       assertFalse(node0.isStringKey());
888:       assertFalse(node0.isName());
889:       assertFalse(node0.isSetterDef());
890:       assertFalse(node0.isCall());
891:       assertFalse(node0.isAdd());
892:       assertFalse(node0.isNew());
893:       assertFalse(node0.isWhile());
894:       assertEquals(1837, node0.getLineno());
895:       assertEquals(39, node0.getType());
896:       assertFalse(node0.isBlock());
897:       assertFalse(node0.isVar());
898:       assertFalse(node0.hasMoreThanOneChild());
899:       assertFalse(node0.isDo());
900:       assertFalse(node0.isCatch());
901:       assertFalse(node0.isOr());
902:       assertFalse(node0.isVoid());
903:       assertFalse(node0.isNull());
904:       assertFalse(node0.isTrue());
905:       assertFalse(node0.isGetElem());
906:       assertFalse(node0.isAssign());
907:       assertFalse(node0.isDelProp());
908:       assertFalse(node0.isCast());
909:       assertTrue(node0.isNumber());
910:       assertFalse(node0.isFunction());
911:       assertFalse(node0.isTypeOf());
912:       assertFalse(node0.isDec());
913:       assertTrue(node0.hasOneChild());
914:       assertFalse(node0.isReturn());
915:       assertFalse(node0.isAnd());
916:       assertFalse(node0.isContinue());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.isObjectLit());
919:       assertEquals(7526189, node0.getSourcePosition());
920:       assertFalse(node0.isString());
921:       assertFalse(node0.isDebugger());
922:       assertFalse(node0.isThrow());
923:       assertFalse(node0.isFalse());
924:       assertFalse(node0.isBreak());
925:       assertFalse(node0.isGetProp());
926:       assertEquals(1837, node0.getCharno());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isHook());
929:       assertFalse(node0.isThis());
930:       assertFalse(node0.isWith());
931:       assertFalse(node0.isInstanceOf());
932:       assertFalse(node0.isIn());
933:       assertFalse(node0.isInc());
934:       assertFalse(node0.isExprResult());
935:       assertTrue(node0.hasChildren());
936:       assertFalse(node0.isIf());
937:       assertFalse(node0.isNE());
938:       assertFalse(node0.isLabelName());
939:       assertFalse(node0.isGetterDef());
940:       assertFalse(node0.isArrayLit());
941:       assertFalse(node0.isEmpty());
942:       assertFalse(node0.isLabel());
943:       assertFalse(node0.isAssignAdd());
944:       assertFalse(node0.isTry());
945:       assertFalse(node0.isRegExp());
946:       assertFalse(node0.isDefaultCase());
947:       assertEquals(1, node0.getChildCount());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isCase());
950:       assertFalse(node0.isScript());
951:       assertFalse(node0.isParamList());
952:       assertFalse(node0.isSwitch());
953:       assertFalse(node1.hasMoreThanOneChild());
954:       assertFalse(node1.isContinue());
955:       assertFalse(node1.isAssignAdd());
956:       assertFalse(node1.isDo());
957:       assertFalse(node1.isOr());
958:       assertFalse(node1.isCall());
959:       assertFalse(node1.isGetElem());
960:       assertFalse(node1.isName());
961:       assertFalse(node1.hasOneChild());
962:       assertFalse(node1.isTypeOf());
963:       assertFalse(node1.isExprResult());
964:       assertFalse(node1.isWhile());
965:       assertFalse(node1.isAssign());
966:       assertEquals(39, node1.getType());
967:       assertFalse(node1.isBlock());
968:       assertFalse(node1.isWith());
969:       assertFalse(node1.isReturn());
970:       assertFalse(node1.hasChildren());
971:       assertFalse(node1.isDec());
972:       assertEquals(7526189, node1.getSourcePosition());
973:       assertFalse(node1.isAnd());
974:       assertFalse(node1.isCatch());
975:       assertFalse(node1.isInstanceOf());
976:       assertFalse(node1.isGetProp());
977:       assertFalse(node1.isSetterDef());
978:       assertFalse(node1.isNot());
979:       assertFalse(node1.isObjectLit());
980:       assertFalse(node1.isDebugger());
981:       assertFalse(node1.isCast());
982:       assertFalse(node1.isThrow());
983:       assertEquals(1837, node1.getLineno());
984:       assertFalse(node1.isFunction());
985:       assertFalse(node1.isFalse());
986:       assertFalse(node1.isIn());
987:       assertTrue(node1.isNumber());
988:       assertFalse(node1.isCase());
989:       assertFalse(node1.isNE());
990:       assertFalse(node1.isInc());
991:       assertFalse(node1.isSwitch());
992:       assertFalse(node1.isIf());
993:       assertFalse(node1.isString());
994:       assertFalse(node1.isGetterDef());
995:       assertFalse(node1.isHook());
996:       assertFalse(node1.isTry());
997:       assertFalse(node1.isDelProp());
998:       assertFalse(node1.isVoid());
999:       assertFalse(node1.isBreak());
1000:       assertFalse(node1.isRegExp());
1001:       assertFalse(node1.isThis());
1002:       assertFalse(node1.isFor());
1003:       assertEquals(1837, node1.getCharno());
1004:       assertFalse(node1.isComma());
1005:       assertFalse(node1.isScript());
1006:       assertFalse(node1.isNull());
1007:       assertFalse(node1.isTrue());
1008:       assertFalse(node1.isParamList());
1009:       assertFalse(node1.isArrayLit());
1010:       assertFalse(node1.isVar());
1011:       assertFalse(node1.isStringKey());
1012:       assertFalse(node1.isLabelName());
1013:       assertFalse(node1.isEmpty());
1014:       assertFalse(node1.isAdd());
1015:       assertFalse(node1.isNew());
1016:       assertFalse(node1.isDefaultCase());
1017:       assertFalse(node1.isLabel());
1018:       assertEquals(0, node1.getChildCount());
1019:       assertFalse(node2.hasOneChild());
1020:       assertFalse(node2.isCast());
1021:       assertFalse(node2.isLabelName());
1022:       assertFalse(node2.isTypeOf());
1023:       assertFalse(node2.isDec());
1024:       assertFalse(node2.isExprResult());
1025:       assertFalse(node2.hasChildren());
1026:       assertFalse(node2.isGetElem());
1027:       assertFalse(node2.isAssign());
1028:       assertFalse(node2.isWith());
1029:       assertFalse(node2.isReturn());
1030:       assertFalse(node2.isWhile());
1031:       assertFalse(node2.isAnd());
1032:       assertFalse(node2.isScript());
1033:       assertFalse(node2.isGetProp());
1034:       assertFalse(node2.isNot());
1035:       assertFalse(node2.isObjectLit());
1036:       assertFalse(node2.isVar());
1037:       assertFalse(node2.isCall());
1038:       assertFalse(node2.isName());
1039:       assertFalse(node2.isNew());
1040:       assertFalse(node2.isStringKey());
1041:       assertFalse(node2.isSwitch());
1042:       assertFalse(node2.isComma());
1043:       assertFalse(node2.isBreak());
1044:       assertEquals(0, node2.getChildCount());
1045:       assertFalse(node2.isLabel());
1046:       assertFalse(node2.isDo());
1047:       assertFalse(node2.isAssignAdd());
1048:       assertFalse(node2.isDefaultCase());
1049:       assertFalse(node2.isNull());
1050:       assertFalse(node2.isTrue());
1051:       assertFalse(node2.isAdd());
1052:       assertFalse(node2.isOr());
1053:       assertFalse(node2.isEmpty());
1054:       assertFalse(node2.isArrayLit());
1055:       assertFalse(node2.isFor());
1056:       assertFalse(node2.isTry());
1057:       assertFalse(node2.isVoid());
1058:       assertFalse(node2.isDelProp());
1059:       assertFalse(node2.isIf());
1060:       assertFalse(node2.isRegExp());
1061:       assertFalse(node2.isFunction());
1062:       assertFalse(node2.isCase());
1063:       assertTrue(node2.isNumber());
1064:       assertEquals(7526189, node2.getSourcePosition());
1065:       assertFalse(node2.isParamList());
1066:       assertFalse(node2.isDebugger());
1067:       assertFalse(node2.isGetterDef());
1068:       assertFalse(node2.isString());
1069:       assertFalse(node2.isHook());
1070:       assertFalse(node2.isBlock());
1071:       assertFalse(node2.isThrow());
1072:       assertEquals(1837, node2.getLineno());
1073:       assertFalse(node2.isThis());
1074:       assertEquals(39, node2.getType());
1075:       assertEquals(1837, node2.getCharno());
1076:       assertFalse(node2.isContinue());
1077:       assertFalse(node2.hasMoreThanOneChild());
1078:       assertFalse(node2.isFalse());
1079:       assertFalse(node2.isCatch());
1080:       assertFalse(node2.isInstanceOf());
1081:       assertFalse(node2.isNE());
1082:       assertFalse(node2.isInc());
1083:       assertFalse(node2.isSetterDef());
1084:       assertFalse(node2.isIn());
1085:       assertNotNull(node2);
1086:       
1087:       String string1 = node2.toString(false, false, true);
1088:       assertEquals("NUMBER 47.0", string1);
1089:       assertEquals(48, Node.DIRECTIVES);
1090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1091:       assertEquals(39, Node.EMPTY_BLOCK);
1092:       assertEquals(55, Node.INFERRED_FUNCTION);
1093:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1094:       assertEquals(57, Node.REFLECTED_OBJECT);
1095:       assertEquals(36, Node.QUOTED_PROP);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       assertEquals(52, Node.LENGTH);
1098:       assertEquals(8, Node.FLAG_NO_THROWS);
1099:       assertEquals(50, Node.FREE_CALL);
1100:       assertEquals(53, Node.INPUT_ID);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(43, Node.IS_CONSTANT_NAME);
1105:       assertEquals(40, Node.ORIGINALNAME_PROP);
1106:       assertEquals(47, Node.IS_DISPATCHER);
1107:       assertEquals(2, Node.POST_FLAG);
1108:       assertEquals(30, Node.VAR_ARGS_NAME);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1113:       assertEquals(32, Node.INCRDECR_PROP);
1114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       assertEquals(49, Node.DIRECT_EVAL);
1121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1122:       assertEquals(12, Node.COLUMN_BITS);
1123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1124:       assertEquals(4095, Node.COLUMN_MASK);
1125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1126:       assertEquals(57, Node.LAST_PROP);
1127:       assertEquals(30, Node.VAR_ARGS_NAME);
1128:       assertEquals(49, Node.DIRECT_EVAL);
1129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1130:       assertEquals(54, Node.SLASH_V);
1131:       assertEquals(12, Node.COLUMN_BITS);
1132:       assertEquals(40, Node.ORIGINALNAME_PROP);
1133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(8, Node.FLAG_NO_THROWS);
1136:       assertEquals(39, Node.EMPTY_BLOCK);
1137:       assertEquals(47, Node.IS_DISPATCHER);
1138:       assertEquals(37, Node.OPT_ARG_NAME);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(56, Node.CHANGE_TIME);
1141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1144:       assertEquals(29, Node.JSDOC_INFO_PROP);
1145:       assertEquals(53, Node.INPUT_ID);
1146:       assertEquals(52, Node.LENGTH);
1147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1148:       assertEquals(55, Node.INFERRED_FUNCTION);
1149:       assertEquals(36, Node.QUOTED_PROP);
1150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1151:       assertEquals(43, Node.IS_CONSTANT_NAME);
1152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1155:       assertEquals(46, Node.IS_NAMESPACE);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(50, Node.FREE_CALL);
1160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1161:       assertEquals(56, Node.CHANGE_TIME);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(32, Node.INCRDECR_PROP);
1167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1168:       assertEquals(53, Node.INPUT_ID);
1169:       assertEquals(29, Node.JSDOC_INFO_PROP);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(36, Node.QUOTED_PROP);
1174:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1175:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1176:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1177:       assertEquals(4095, Node.COLUMN_MASK);
1178:       assertEquals(57, Node.REFLECTED_OBJECT);
1179:       assertEquals(48, Node.DIRECTIVES);
1180:       assertEquals(49, Node.DIRECT_EVAL);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1183:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1184:       assertEquals(8, Node.FLAG_NO_THROWS);
1185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1186:       assertEquals(50, Node.FREE_CALL);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(52, Node.LENGTH);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(39, Node.EMPTY_BLOCK);
1191:       assertEquals(43, Node.IS_CONSTANT_NAME);
1192:       assertEquals(57, Node.LAST_PROP);
1193:       assertEquals(30, Node.VAR_ARGS_NAME);
1194:       assertEquals(54, Node.SLASH_V);
1195:       assertEquals(46, Node.IS_NAMESPACE);
1196:       assertEquals(40, Node.ORIGINALNAME_PROP);
1197:       assertFalse(node0.equals((Object)node2));
1198:       assertFalse(node0.equals((Object)node1));
1199:       assertFalse(node1.equals((Object)node0));
1200:       assertFalse(node2.equals((Object)node0));
1201:       assertFalse(string1.equals((Object)string0));
1202:       assertNotSame(node0, node2);
1203:       assertNotSame(node0, node1);
1204:       assertNotSame(node1, node0);
1205:       assertSame(node1, node2);
1206:       assertNotSame(node2, node0);
1207:       assertSame(node2, node1);
1208:       assertFalse(node0.isStringKey());
1209:       assertFalse(node0.isName());
1210:       assertFalse(node0.isSetterDef());
1211:       assertFalse(node0.isCall());
1212:       assertFalse(node0.isAdd());
1213:       assertFalse(node0.isNew());
1214:       assertFalse(node0.isWhile());
1215:       assertEquals(1837, node0.getLineno());
1216:       assertEquals(39, node0.getType());
1217:       assertFalse(node0.isBlock());
1218:       assertFalse(node0.isVar());
1219:       assertFalse(node0.hasMoreThanOneChild());
1220:       assertFalse(node0.isDo());
1221:       assertFalse(node0.isCatch());
1222:       assertFalse(node0.isOr());
1223:       assertFalse(node0.isVoid());
1224:       assertFalse(node0.isNull());
1225:       assertFalse(node0.isTrue());
1226:       assertFalse(node0.isGetElem());
1227:       assertFalse(node0.isAssign());
1228:       assertFalse(node0.isDelProp());
1229:       assertFalse(node0.isCast());
1230:       assertTrue(node0.isNumber());
1231:       assertFalse(node0.isFunction());
1232:       assertFalse(node0.isTypeOf());
1233:       assertFalse(node0.isDec());
1234:       assertTrue(node0.hasOneChild());
1235:       assertFalse(node0.isReturn());
1236:       assertFalse(node0.isAnd());
1237:       assertFalse(node0.isContinue());
1238:       assertFalse(node0.isNot());
1239:       assertFalse(node0.isObjectLit());
1240:       assertEquals(7526189, node0.getSourcePosition());
1241:       assertFalse(node0.isString());
1242:       assertFalse(node0.isDebugger());
1243:       assertFalse(node0.isThrow());
1244:       assertFalse(node0.isFalse());
1245:       assertFalse(node0.isBreak());
1246:       assertFalse(node0.isGetProp());
1247:       assertEquals(1837, node0.getCharno());
1248:       assertFalse(node0.isComma());
1249:       assertFalse(node0.isHook());
1250:       assertFalse(node0.isThis());
1251:       assertFalse(node0.isWith());
1252:       assertFalse(node0.isInstanceOf());
1253:       assertFalse(node0.isIn());
1254:       assertFalse(node0.isInc());
1255:       assertFalse(node0.isExprResult());
1256:       assertTrue(node0.hasChildren());
1257:       assertFalse(node0.isIf());
1258:       assertFalse(node0.isNE());
1259:       assertFalse(node0.isLabelName());
1260:       assertFalse(node0.isGetterDef());
1261:       assertFalse(node0.isArrayLit());
1262:       assertFalse(node0.isEmpty());
1263:       assertFalse(node0.isLabel());
1264:       assertFalse(node0.isAssignAdd());
1265:       assertFalse(node0.isTry());
1266:       assertFalse(node0.isRegExp());
1267:       assertFalse(node0.isDefaultCase());
1268:       assertEquals(1, node0.getChildCount());
1269:       assertFalse(node0.isFor());
1270:       assertFalse(node0.isCase());
1271:       assertFalse(node0.isScript());
1272:       assertFalse(node0.isParamList());
1273:       assertFalse(node0.isSwitch());
1274:       assertFalse(node1.hasMoreThanOneChild());
1275:       assertFalse(node1.isContinue());
1276:       assertFalse(node1.isAssignAdd());
1277:       assertFalse(node1.isDo());
1278:       assertFalse(node1.isOr());
1279:       assertFalse(node1.isCall());
1280:       assertFalse(node1.isGetElem());
1281:       assertFalse(node1.isName());
1282:       assertFalse(node1.hasOneChild());
1283:       assertFalse(node1.isTypeOf());
1284:       assertFalse(node1.isExprResult());
1285:       assertFalse(node1.isWhile());
1286:       assertFalse(node1.isAssign());
1287:       assertEquals(39, node1.getType());
1288:       assertFalse(node1.isBlock());
1289:       assertFalse(node1.isWith());
1290:       assertFalse(node1.isReturn());
1291:       assertFalse(node1.hasChildren());
1292:       assertFalse(node1.isDec());
1293:       assertEquals(7526189, node1.getSourcePosition());
1294:       assertFalse(node1.isAnd());
1295:       assertFalse(node1.isCatch());
1296:       assertFalse(node1.isInstanceOf());
1297:       assertFalse(node1.isGetProp());
1298:       assertFalse(node1.isSetterDef());
1299:       assertFalse(node1.isNot());
1300:       assertFalse(node1.isObjectLit());
1301:       assertFalse(node1.isDebugger());
1302:       assertFalse(node1.isCast());
1303:       assertFalse(node1.isThrow());
1304:       assertEquals(1837, node1.getLineno());
1305:       assertFalse(node1.isFunction());
1306:       assertFalse(node1.isFalse());
1307:       assertFalse(node1.isIn());
1308:       assertTrue(node1.isNumber());
1309:       assertFalse(node1.isCase());
1310:       assertFalse(node1.isNE());
1311:       assertFalse(node1.isInc());
1312:       assertFalse(node1.isSwitch());
1313:       assertFalse(node1.isIf());
1314:       assertFalse(node1.isString());
1315:       assertFalse(node1.isGetterDef());
1316:       assertFalse(node1.isHook());
1317:       assertFalse(node1.isTry());
1318:       assertFalse(node1.isDelProp());
1319:       assertFalse(node1.isVoid());
1320:       assertFalse(node1.isBreak());
1321:       assertFalse(node1.isRegExp());
1322:       assertFalse(node1.isThis());
1323:       assertFalse(node1.isFor());
1324:       assertEquals(1837, node1.getCharno());
1325:       assertFalse(node1.isComma());
1326:       assertFalse(node1.isScript());
1327:       assertFalse(node1.isNull());
1328:       assertFalse(node1.isTrue());
1329:       assertFalse(node1.isParamList());
1330:       assertFalse(node1.isArrayLit());
1331:       assertFalse(node1.isVar());
1332:       assertFalse(node1.isStringKey());
1333:       assertFalse(node1.isLabelName());
1334:       assertFalse(node1.isEmpty());
1335:       assertFalse(node1.isAdd());
1336:       assertFalse(node1.isNew());
1337:       assertFalse(node1.isDefaultCase());
1338:       assertFalse(node1.isLabel());
1339:       assertEquals(0, node1.getChildCount());
1340:       assertFalse(node2.hasOneChild());
1341:       assertFalse(node2.isCast());
1342:       assertFalse(node2.isLabelName());
1343:       assertFalse(node2.isTypeOf());
1344:       assertFalse(node2.isDec());
1345:       assertFalse(node2.isExprResult());
1346:       assertFalse(node2.hasChildren());
1347:       assertFalse(node2.isGetElem());
1348:       assertFalse(node2.isAssign());
1349:       assertFalse(node2.isWith());
1350:       assertFalse(node2.isReturn());
1351:       assertFalse(node2.isWhile());
1352:       assertFalse(node2.isAnd());
1353:       assertFalse(node2.isScript());
1354:       assertFalse(node2.isGetProp());
1355:       assertFalse(node2.isNot());
1356:       assertFalse(node2.isObjectLit());
1357:       assertFalse(node2.isVar());
1358:       assertFalse(node2.isCall());
1359:       assertFalse(node2.isName());
1360:       assertFalse(node2.isNew());
1361:       assertFalse(node2.isStringKey());
1362:       assertFalse(node2.isSwitch());
1363:       assertFalse(node2.isComma());
1364:       assertFalse(node2.isBreak());
1365:       assertEquals(0, node2.getChildCount());
1366:       assertFalse(node2.isLabel());
1367:       assertFalse(node2.isDo());
1368:       assertFalse(node2.isAssignAdd());
1369:       assertFalse(node2.isDefaultCase());
1370:       assertFalse(node2.isNull());
1371:       assertFalse(node2.isTrue());
1372:       assertFalse(node2.isAdd());
1373:       assertFalse(node2.isOr());
1374:       assertFalse(node2.isEmpty());
1375:       assertFalse(node2.isArrayLit());
1376:       assertFalse(node2.isFor());
1377:       assertFalse(node2.isTry());
1378:       assertFalse(node2.isVoid());
1379:       assertFalse(node2.isDelProp());
1380:       assertFalse(node2.isIf());
1381:       assertFalse(node2.isRegExp());
1382:       assertFalse(node2.isFunction());
1383:       assertFalse(node2.isCase());
1384:       assertTrue(node2.isNumber());
1385:       assertEquals(7526189, node2.getSourcePosition());
1386:       assertFalse(node2.isParamList());
1387:       assertFalse(node2.isDebugger());
1388:       assertFalse(node2.isGetterDef());
1389:       assertFalse(node2.isString());
1390:       assertFalse(node2.isHook());
1391:       assertFalse(node2.isBlock());
1392:       assertFalse(node2.isThrow());
1393:       assertEquals(1837, node2.getLineno());
1394:       assertFalse(node2.isThis());
1395:       assertEquals(39, node2.getType());
1396:       assertEquals(1837, node2.getCharno());
1397:       assertFalse(node2.isContinue());
1398:       assertFalse(node2.hasMoreThanOneChild());
1399:       assertFalse(node2.isFalse());
1400:       assertFalse(node2.isCatch());
1401:       assertFalse(node2.isInstanceOf());
1402:       assertFalse(node2.isNE());
1403:       assertFalse(node2.isInc());
1404:       assertFalse(node2.isSetterDef());
1405:       assertFalse(node2.isIn());
1406:       assertNotNull(string1);
1407:       
1408:       boolean boolean1 = node1.isRegExp();
1409:       assertFalse(boolean1);
1410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1411:       assertEquals(57, Node.LAST_PROP);
1412:       assertEquals(30, Node.VAR_ARGS_NAME);
1413:       assertEquals(49, Node.DIRECT_EVAL);
1414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1415:       assertEquals(54, Node.SLASH_V);
1416:       assertEquals(12, Node.COLUMN_BITS);
1417:       assertEquals(40, Node.ORIGINALNAME_PROP);
1418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1419:       assertEquals(2, Node.POST_FLAG);
1420:       assertEquals(8, Node.FLAG_NO_THROWS);
1421:       assertEquals(39, Node.EMPTY_BLOCK);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(37, Node.OPT_ARG_NAME);
1424:       assertEquals(48, Node.DIRECTIVES);
1425:       assertEquals(56, Node.CHANGE_TIME);
1426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1427:       assertEquals(57, Node.REFLECTED_OBJECT);
1428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1429:       assertEquals(29, Node.JSDOC_INFO_PROP);
1430:       assertEquals(53, Node.INPUT_ID);
1431:       assertEquals(52, Node.LENGTH);
1432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1433:       assertEquals(55, Node.INFERRED_FUNCTION);
1434:       assertEquals(36, Node.QUOTED_PROP);
1435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1436:       assertEquals(43, Node.IS_CONSTANT_NAME);
1437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1438:       assertEquals(4095, Node.COLUMN_MASK);
1439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1440:       assertEquals(46, Node.IS_NAMESPACE);
1441:       assertEquals(32, Node.INCRDECR_PROP);
1442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1443:       assertEquals(1, Node.DECR_FLAG);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1446:       assertFalse(node1.equals((Object)node0));
1447:       assertTrue(boolean1 == boolean0);
1448:       assertNotSame(node1, node0);
1449:       assertSame(node1, node2);
1450:       assertFalse(node1.hasMoreThanOneChild());
1451:       assertFalse(node1.isContinue());
1452:       assertFalse(node1.isAssignAdd());
1453:       assertFalse(node1.isDo());
1454:       assertFalse(node1.isOr());
1455:       assertFalse(node1.isCall());
1456:       assertFalse(node1.isGetElem());
1457:       assertFalse(node1.isName());
1458:       assertFalse(node1.hasOneChild());
1459:       assertFalse(node1.isTypeOf());
1460:       assertFalse(node1.isExprResult());
1461:       assertFalse(node1.isWhile());
1462:       assertFalse(node1.isAssign());
1463:       assertEquals(39, node1.getType());
1464:       assertFalse(node1.isBlock());
1465:       assertFalse(node1.isWith());
1466:       assertFalse(node1.isReturn());
1467:       assertFalse(node1.hasChildren());
1468:       assertFalse(node1.isDec());
1469:       assertEquals(7526189, node1.getSourcePosition());
1470:       assertFalse(node1.isAnd());
1471:       assertFalse(node1.isCatch());
1472:       assertFalse(node1.isInstanceOf());
1473:       assertFalse(node1.isGetProp());
1474:       assertFalse(node1.isSetterDef());
1475:       assertFalse(node1.isNot());
1476:       assertFalse(node1.isObjectLit());
1477:       assertFalse(node1.isDebugger());
1478:       assertFalse(node1.isCast());
1479:       assertFalse(node1.isThrow());
1480:       assertEquals(1837, node1.getLineno());
1481:       assertFalse(node1.isFunction());
1482:       assertFalse(node1.isFalse());
1483:       assertFalse(node1.isIn());
1484:       assertTrue(node1.isNumber());
1485:       assertFalse(node1.isCase());
1486:       assertFalse(node1.isNE());
1487:       assertFalse(node1.isInc());
1488:       assertFalse(node1.isSwitch());
1489:       assertFalse(node1.isIf());
1490:       assertFalse(node1.isString());
1491:       assertFalse(node1.isGetterDef());
1492:       assertFalse(node1.isHook());
1493:       assertFalse(node1.isTry());
1494:       assertFalse(node1.isDelProp());
1495:       assertFalse(node1.isVoid());
1496:       assertFalse(node1.isBreak());
1497:       assertFalse(node1.isRegExp());
1498:       assertFalse(node1.isThis());
1499:       assertFalse(node1.isFor());
1500:       assertEquals(1837, node1.getCharno());
1501:       assertFalse(node1.isComma());
1502:       assertFalse(node1.isScript());
1503:       assertFalse(node1.isNull());
1504:       assertFalse(node1.isTrue());
1505:       assertFalse(node1.isParamList());
1506:       assertFalse(node1.isArrayLit());
1507:       assertFalse(node1.isVar());
1508:       assertFalse(node1.isStringKey());
1509:       assertFalse(node1.isLabelName());
1510:       assertFalse(node1.isEmpty());
1511:       assertFalse(node1.isAdd());
1512:       assertFalse(node1.isNew());
1513:       assertFalse(node1.isDefaultCase());
1514:       assertFalse(node1.isLabel());
1515:       assertEquals(0, node1.getChildCount());
1516:       
1517:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
1518:       assertEquals(48, Node.DIRECTIVES);
1519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1520:       assertEquals(39, Node.EMPTY_BLOCK);
1521:       assertEquals(55, Node.INFERRED_FUNCTION);
1522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1523:       assertEquals(57, Node.REFLECTED_OBJECT);
1524:       assertEquals(36, Node.QUOTED_PROP);
1525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1526:       assertEquals(52, Node.LENGTH);
1527:       assertEquals(8, Node.FLAG_NO_THROWS);
1528:       assertEquals(50, Node.FREE_CALL);
1529:       assertEquals(53, Node.INPUT_ID);
1530:       assertEquals(54, Node.SLASH_V);
1531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1532:       assertEquals(57, Node.LAST_PROP);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(40, Node.ORIGINALNAME_PROP);
1535:       assertEquals(47, Node.IS_DISPATCHER);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(30, Node.VAR_ARGS_NAME);
1538:       assertEquals(37, Node.OPT_ARG_NAME);
1539:       assertEquals(46, Node.IS_NAMESPACE);
1540:       assertEquals(56, Node.CHANGE_TIME);
1541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1542:       assertEquals(32, Node.INCRDECR_PROP);
1543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1544:       assertEquals(1, Node.DECR_FLAG);
1545:       assertEquals(29, Node.JSDOC_INFO_PROP);
1546:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1549:       assertEquals(49, Node.DIRECT_EVAL);
1550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1551:       assertEquals(12, Node.COLUMN_BITS);
1552:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1553:       assertEquals(4095, Node.COLUMN_MASK);
1554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1555:       assertEquals(57, Node.LAST_PROP);
1556:       assertEquals(30, Node.VAR_ARGS_NAME);
1557:       assertEquals(49, Node.DIRECT_EVAL);
1558:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1559:       assertEquals(54, Node.SLASH_V);
1560:       assertEquals(12, Node.COLUMN_BITS);
1561:       assertEquals(40, Node.ORIGINALNAME_PROP);
1562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1563:       assertEquals(2, Node.POST_FLAG);
1564:       assertEquals(8, Node.FLAG_NO_THROWS);
1565:       assertEquals(39, Node.EMPTY_BLOCK);
1566:       assertEquals(47, Node.IS_DISPATCHER);
1567:       assertEquals(37, Node.OPT_ARG_NAME);
1568:       assertEquals(48, Node.DIRECTIVES);
1569:       assertEquals(56, Node.CHANGE_TIME);
1570:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1571:       assertEquals(57, Node.REFLECTED_OBJECT);
1572:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1573:       assertEquals(29, Node.JSDOC_INFO_PROP);
1574:       assertEquals(53, Node.INPUT_ID);
1575:       assertEquals(52, Node.LENGTH);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(55, Node.INFERRED_FUNCTION);
1578:       assertEquals(36, Node.QUOTED_PROP);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(43, Node.IS_CONSTANT_NAME);
1581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1582:       assertEquals(4095, Node.COLUMN_MASK);
1583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1584:       assertEquals(46, Node.IS_NAMESPACE);
1585:       assertEquals(32, Node.INCRDECR_PROP);
1586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1587:       assertEquals(1, Node.DECR_FLAG);
1588:       assertEquals(50, Node.FREE_CALL);
1589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1590:       assertFalse(node0.equals((Object)node2));
1591:       assertFalse(node0.equals((Object)node1));
1592:       assertFalse(node1.equals((Object)node0));
1593:       assertNotSame(node0, node2);
1594:       assertNotSame(node0, node1);
1595:       assertNotSame(node1, node0);
1596:       assertSame(node1, node2);
1597:       assertFalse(node0.isStringKey());
1598:       assertFalse(node0.isName());
1599:       assertFalse(node0.isSetterDef());
1600:       assertFalse(node0.isCall());
1601:       assertFalse(node0.isAdd());
1602:       assertFalse(node0.isNew());
1603:       assertFalse(node0.isWhile());
1604:       assertEquals(1837, node0.getLineno());
1605:       assertEquals(39, node0.getType());
1606:       assertFalse(node0.isBlock());
1607:       assertFalse(node0.isVar());
1608:       assertFalse(node0.hasMoreThanOneChild());
1609:       assertFalse(node0.isDo());
1610:       assertFalse(node0.isCatch());
1611:       assertFalse(node0.isOr());
1612:       assertFalse(node0.isVoid());
1613:       assertFalse(node0.isNull());
1614:       assertFalse(node0.isTrue());
1615:       assertFalse(node0.isGetElem());
1616:       assertFalse(node0.isAssign());
1617:       assertFalse(node0.isDelProp());
1618:       assertFalse(node0.isCast());
1619:       assertTrue(node0.isNumber());
1620:       assertFalse(node0.isFunction());
1621:       assertFalse(node0.isTypeOf());
1622:       assertFalse(node0.isDec());
1623:       assertTrue(node0.hasOneChild());
1624:       assertFalse(node0.isReturn());
1625:       assertFalse(node0.isAnd());
1626:       assertFalse(node0.isContinue());
1627:       assertFalse(node0.isNot());
1628:       assertFalse(node0.isObjectLit());
1629:       assertEquals(7526189, node0.getSourcePosition());
1630:       assertFalse(node0.isString());
1631:       assertFalse(node0.isDebugger());
1632:       assertFalse(node0.isThrow());
1633:       assertFalse(node0.isFalse());
1634:       assertFalse(node0.isBreak());
1635:       assertFalse(node0.isGetProp());
1636:       assertEquals(1837, node0.getCharno());
1637:       assertFalse(node0.isComma());
1638:       assertFalse(node0.isHook());
1639:       assertFalse(node0.isThis());
1640:       assertFalse(node0.isWith());
1641:       assertFalse(node0.isInstanceOf());
1642:       assertFalse(node0.isIn());
1643:       assertFalse(node0.isInc());
1644:       assertFalse(node0.isExprResult());
1645:       assertTrue(node0.hasChildren());
1646:       assertFalse(node0.isIf());
1647:       assertFalse(node0.isNE());
1648:       assertFalse(node0.isLabelName());
1649:       assertFalse(node0.isGetterDef());
1650:       assertFalse(node0.isArrayLit());
1651:       assertFalse(node0.isEmpty());
1652:       assertFalse(node0.isLabel());
1653:       assertFalse(node0.isAssignAdd());
1654:       assertFalse(node0.isTry());
1655:       assertFalse(node0.isRegExp());
1656:       assertFalse(node0.isDefaultCase());
1657:       assertEquals(1, node0.getChildCount());
1658:       assertFalse(node0.isFor());
1659:       assertFalse(node0.isCase());
1660:       assertFalse(node0.isScript());
1661:       assertFalse(node0.isParamList());
1662:       assertFalse(node0.isSwitch());
1663:       assertFalse(node1.hasMoreThanOneChild());
1664:       assertFalse(node1.isContinue());
1665:       assertFalse(node1.isAssignAdd());
1666:       assertFalse(node1.isDo());
1667:       assertFalse(node1.isOr());
1668:       assertFalse(node1.isCall());
1669:       assertFalse(node1.isGetElem());
1670:       assertFalse(node1.isName());
1671:       assertFalse(node1.hasOneChild());
1672:       assertFalse(node1.isTypeOf());
1673:       assertFalse(node1.isExprResult());
1674:       assertFalse(node1.isWhile());
1675:       assertFalse(node1.isAssign());
1676:       assertEquals(39, node1.getType());
1677:       assertFalse(node1.isBlock());
1678:       assertFalse(node1.isWith());
1679:       assertFalse(node1.isReturn());
1680:       assertFalse(node1.hasChildren());
1681:       assertFalse(node1.isDec());
1682:       assertEquals(7526189, node1.getSourcePosition());
1683:       assertFalse(node1.isAnd());
1684:       assertFalse(node1.isCatch());
1685:       assertFalse(node1.isInstanceOf());
1686:       assertFalse(node1.isGetProp());
1687:       assertFalse(node1.isSetterDef());
1688:       assertFalse(node1.isNot());
1689:       assertFalse(node1.isObjectLit());
1690:       assertFalse(node1.isDebugger());
1691:       assertFalse(node1.isCast());
1692:       assertFalse(node1.isThrow());
1693:       assertEquals(1837, node1.getLineno());
1694:       assertFalse(node1.isFunction());
1695:       assertFalse(node1.isFalse());
1696:       assertFalse(node1.isIn());
1697:       assertTrue(node1.isNumber());
1698:       assertFalse(node1.isCase());
1699:       assertFalse(node1.isNE());
1700:       assertFalse(node1.isInc());
1701:       assertFalse(node1.isSwitch());
1702:       assertFalse(node1.isIf());
1703:       assertFalse(node1.isString());
1704:       assertFalse(node1.isGetterDef());
1705:       assertFalse(node1.isHook());
1706:       assertFalse(node1.isTry());
1707:       assertFalse(node1.isDelProp());
1708:       assertFalse(node1.isVoid());
1709:       assertFalse(node1.isBreak());
1710:       assertFalse(node1.isRegExp());
1711:       assertFalse(node1.isThis());
1712:       assertFalse(node1.isFor());
1713:       assertEquals(1837, node1.getCharno());
1714:       assertFalse(node1.isComma());
1715:       assertFalse(node1.isScript());
1716:       assertFalse(node1.isNull());
1717:       assertFalse(node1.isTrue());
1718:       assertFalse(node1.isParamList());
1719:       assertFalse(node1.isArrayLit());
1720:       assertFalse(node1.isVar());
1721:       assertFalse(node1.isStringKey());
1722:       assertFalse(node1.isLabelName());
1723:       assertFalse(node1.isEmpty());
1724:       assertFalse(node1.isAdd());
1725:       assertFalse(node1.isNew());
1726:       assertFalse(node1.isDefaultCase());
1727:       assertFalse(node1.isLabel());
1728:       assertEquals(0, node1.getChildCount());
1729:       assertNotNull(node_NodeMismatch0);
1730:       
1731:       EvoSuiteFile evoSuiteFile0 = null;
1732:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1733:       assertNotNull(simpleErrorReporter0);
1734:       
1735:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1736:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1737:       assertNotNull(jSTypeRegistry0);
1738:       
1739:       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
1740:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1741:       assertNotNull(modificationVisitor0);
1742:       
1743:       // Undeclared exception!
1744:       try { 
1745:         modificationVisitor0.caseFunctionType((FunctionType) null);
1746:         fail("Expecting exception: NullPointerException");
1747:       
1748:       } catch(NullPointerException e) {
1749:          //
1750:          // no message in exception (getMessage() returned null)
1751:          //
1752:          verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
1753:       }
1754:   }
1755: }
RegularFileObject[/tmp/EvoSuite_122_1628160201049/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_122_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.common.collect.Platform",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.FluentIterable",
354:       "com.google.common.collect.Iterables$2",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 10:43:21.435 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2302.336151346, 1837, 1837);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertNotNull(iterable0);

boolean boolean0 = node0.isParamList();
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());

Node node1 = Node.newNumber((double) 47, 53, 48);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertEquals(217136, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals(53, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(48, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertNotNull(node1);

String string0 = node1.toStringTree();
assertEquals("NUMBER 47.0 53\n", string0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertEquals(217136, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals(53, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(48, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertNotNull(string0);

node0.addChildToFront(node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(217136, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals(53, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(48, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());

Node node2 = node1.useSourceInfoIfMissingFrom(node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(7526189, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertEquals(1837, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertEquals(7526189, node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThrow());
assertEquals(1837, node2.getLineno());
assertFalse(node2.isThis());
assertEquals(39, node2.getType());
assertEquals(1837, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isFalse());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertNotNull(node2);

String string1 = node2.toString(false, false, true);
assertEquals("NUMBER 47.0", string1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(string1.equals((Object)string0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(7526189, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertEquals(1837, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertEquals(7526189, node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThrow());
assertEquals(1837, node2.getLineno());
assertFalse(node2.isThis());
assertEquals(39, node2.getType());
assertEquals(1837, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isFalse());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertNotNull(string1);

boolean boolean1 = node1.isRegExp();
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(7526189, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertEquals(1837, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(1837, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(7526189, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(7526189, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertEquals(1837, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertNotNull(node_NodeMismatch0);

EvoSuiteFile evoSuiteFile0 = null;
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(modificationVisitor0);

modificationVisitor0.caseFunctionType((FunctionType) null);

[MASTER] 10:43:34.888 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_198_1628160214842/com/google/javascript/rhino/Node_198_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_198_1628160214842/com/google/javascript/rhino/Node_198_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:34.888 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:34.888 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:34.888 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 10:43:34.888 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_198_1628160214842/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_198_tmp__ESTest extends Node_198_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "/H8H<Q[";
22:       Node node0 = Node.newString(391, "/H8H<Q[");
23:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
24:       assertEquals(40, Node.ORIGINALNAME_PROP);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(48, Node.DIRECTIVES);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
29:       assertEquals(4095, Node.COLUMN_MASK);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(57, Node.REFLECTED_OBJECT);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(50, Node.FREE_CALL);
59:       assertEquals((-1), node0.getCharno());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isString());
62:       assertFalse(node0.isSwitch());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isComma());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isBreak());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isHook());
71:       assertFalse(node0.isThis());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isFunction());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isNot());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isIf());
80:       assertFalse(node0.isAnd());
81:       assertFalse(node0.isNE());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isFalse());
85:       assertEquals(391, node0.getType());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isThrow());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isName());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isStringKey());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isNumber());
98:       assertFalse(node0.isTypeOf());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isCatch());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isDec());
103:       assertFalse(node0.hasChildren());
104:       assertFalse(node0.isWhile());
105:       assertFalse(node0.isReturn());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isVoid());
108:       assertFalse(node0.isScript());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isArrayLit());
111:       assertFalse(node0.isExprResult());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isDelProp());
114:       assertFalse(node0.isLabelName());
115:       assertFalse(node0.isGetterDef());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isLabel());
118:       assertFalse(node0.isAssignAdd());
119:       assertFalse(node0.isOr());
120:       assertEquals(0, node0.getChildCount());
121:       assertFalse(node0.isEmpty());
122:       assertFalse(node0.isDo());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isVar());
125:       assertNotNull(node0);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(iterable0.contains(node0));
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(40, Node.ORIGINALNAME_PROP);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(30, Node.VAR_ARGS_NAME);
137:       assertEquals(55, Node.INFERRED_FUNCTION);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(57, Node.LAST_PROP);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(53, Node.INPUT_ID);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(57, Node.REFLECTED_OBJECT);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertEquals(50, Node.FREE_CALL);
165:       assertEquals((-1), node0.getCharno());
166:       assertFalse(node0.isInc());
167:       assertFalse(node0.isString());
168:       assertFalse(node0.isSwitch());
169:       assertFalse(node0.isGetProp());
170:       assertFalse(node0.isComma());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isFor());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isHook());
177:       assertFalse(node0.isThis());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.isFunction());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isObjectLit());
183:       assertFalse(node0.isNot());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isNE());
188:       assertFalse(node0.isSetterDef());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isFalse());
191:       assertEquals(391, node0.getType());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isThrow());
194:       assertFalse(node0.isBlock());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isCall());
198:       assertFalse(node0.isName());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isParamList());
201:       assertFalse(node0.isStringKey());
202:       assertEquals((-1), node0.getLineno());
203:       assertFalse(node0.isNumber());
204:       assertFalse(node0.isTypeOf());
205:       assertFalse(node0.hasMoreThanOneChild());
206:       assertFalse(node0.isCatch());
207:       assertFalse(node0.isAssign());
208:       assertFalse(node0.isDec());
209:       assertFalse(node0.hasChildren());
210:       assertFalse(node0.isWhile());
211:       assertFalse(node0.isReturn());
212:       assertFalse(node0.isTry());
213:       assertFalse(node0.isVoid());
214:       assertFalse(node0.isScript());
215:       assertFalse(node0.hasOneChild());
216:       assertFalse(node0.isArrayLit());
217:       assertFalse(node0.isExprResult());
218:       assertFalse(node0.isGetElem());
219:       assertFalse(node0.isDelProp());
220:       assertFalse(node0.isLabelName());
221:       assertFalse(node0.isGetterDef());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isLabel());
224:       assertFalse(node0.isAssignAdd());
225:       assertFalse(node0.isOr());
226:       assertEquals(0, node0.getChildCount());
227:       assertFalse(node0.isEmpty());
228:       assertFalse(node0.isDo());
229:       assertFalse(node0.isDefaultCase());
230:       assertFalse(node0.isVar());
231:       assertNotNull(iterable0);
232:       
233:       boolean boolean0 = node0.isParamList();
234:       assertFalse(boolean0);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(40, Node.ORIGINALNAME_PROP);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(30, Node.VAR_ARGS_NAME);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
246:       assertEquals(57, Node.LAST_PROP);
247:       assertEquals(49, Node.DIRECT_EVAL);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(36, Node.QUOTED_PROP);
253:       assertEquals(57, Node.REFLECTED_OBJECT);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(47, Node.IS_DISPATCHER);
263:       assertEquals(2, Node.POST_FLAG);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(50, Node.FREE_CALL);
271:       assertEquals((-1), node0.getCharno());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.isString());
274:       assertFalse(node0.isSwitch());
275:       assertFalse(node0.isGetProp());
276:       assertFalse(node0.isComma());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isBreak());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isWith());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isFunction());
286:       assertFalse(node0.isRegExp());
287:       assertFalse(node0.isCast());
288:       assertFalse(node0.isObjectLit());
289:       assertFalse(node0.isNot());
290:       assertEquals((-1), node0.getSourcePosition());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isAnd());
293:       assertFalse(node0.isNE());
294:       assertFalse(node0.isSetterDef());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isFalse());
297:       assertEquals(391, node0.getType());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isThrow());
300:       assertFalse(node0.isBlock());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isNew());
303:       assertFalse(node0.isCall());
304:       assertFalse(node0.isName());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isParamList());
307:       assertFalse(node0.isStringKey());
308:       assertEquals((-1), node0.getLineno());
309:       assertFalse(node0.isNumber());
310:       assertFalse(node0.isTypeOf());
311:       assertFalse(node0.hasMoreThanOneChild());
312:       assertFalse(node0.isCatch());
313:       assertFalse(node0.isAssign());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.hasChildren());
316:       assertFalse(node0.isWhile());
317:       assertFalse(node0.isReturn());
318:       assertFalse(node0.isTry());
319:       assertFalse(node0.isVoid());
320:       assertFalse(node0.isScript());
321:       assertFalse(node0.hasOneChild());
322:       assertFalse(node0.isArrayLit());
323:       assertFalse(node0.isExprResult());
324:       assertFalse(node0.isGetElem());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isLabelName());
327:       assertFalse(node0.isGetterDef());
328:       assertFalse(node0.isTrue());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isAssignAdd());
331:       assertFalse(node0.isOr());
332:       assertEquals(0, node0.getChildCount());
333:       assertFalse(node0.isEmpty());
334:       assertFalse(node0.isDo());
335:       assertFalse(node0.isDefaultCase());
336:       assertFalse(node0.isVar());
337:       
338:       // Undeclared exception!
339:       try { 
340:         node0.toStringTree();
341:         fail("Expecting exception: IllegalStateException");
342:       
343:       } catch(IllegalStateException e) {
344:          //
345:          // 391
346:          //
347:          verifyException("com.google.javascript.rhino.Token", e);
348:       }
349:   }
350: }
RegularFileObject[/tmp/EvoSuite_198_1628160214842/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_198_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_198_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_198_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.common.collect.Platform",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.FluentIterable",
354:       "com.google.common.collect.Iterables$2",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 10:43:34.891 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "/H8H<Q[";
Node node0 = Node.newString(391, "/H8H<Q[");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertEquals(391, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertEquals(391, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertNotNull(iterable0);

boolean boolean0 = node0.isParamList();
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertEquals(391, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

node0.toStringTree();

[MASTER] 10:43:41.016 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_225_1628160220969/com/google/javascript/rhino/Node_225_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_225_1628160220969/com/google/javascript/rhino/Node_225_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:41.016 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:41.016 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:41.016 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 551
[MASTER] 10:43:41.017 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_225_1628160220969/com/google/javascript/rhino/Node_225_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_225_tmp__ESTest extends Node_225_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-1906.9824));
21:       assertEquals(40, Node.ORIGINALNAME_PROP);
22:       assertEquals(57, Node.REFLECTED_OBJECT);
23:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
24:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(48, Node.DIRECTIVES);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(56, Node.CHANGE_TIME);
35:       assertEquals(36, Node.QUOTED_PROP);
36:       assertEquals(15, Node.NO_SIDE_EFFECTS);
37:       assertEquals(39, Node.EMPTY_BLOCK);
38:       assertEquals(53, Node.INPUT_ID);
39:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.POST_FLAG);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(51, Node.STATIC_SOURCE_FILE);
48:       assertEquals(46, Node.IS_NAMESPACE);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(1, Node.DECR_FLAG);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertFalse(node0.isDo());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isOr());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isNull());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isTypeOf());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isGetElem());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.hasOneChild());
73:       assertFalse(node0.isAssign());
74:       assertEquals(39, node0.getType());
75:       assertFalse(node0.isWhile());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isScript());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isEmpty());
89:       assertFalse(node0.isVar());
90:       assertEquals(0, node0.getChildCount());
91:       assertFalse(node0.isLabel());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isSwitch());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isCase());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isIn());
98:       assertEquals((-1), node0.getCharno());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isIf());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isGetterDef());
104:       assertTrue(node0.isNumber());
105:       assertFalse(node0.isInstanceOf());
106:       assertFalse(node0.isGetProp());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isFor());
109:       assertFalse(node0.isHook());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isDebugger());
112:       assertFalse(node0.isFunction());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isWith());
115:       assertFalse(node0.isAnd());
116:       assertFalse(node0.isObjectLit());
117:       assertFalse(node0.isNot());
118:       assertFalse(node0.isSetterDef());
119:       assertFalse(node0.isCast());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isThrow());
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(49, 2, 38);
126:       assertEquals(15, Node.NO_SIDE_EFFECTS);
127:       assertEquals(57, Node.LAST_PROP);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(57, Node.REFLECTED_OBJECT);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(47, Node.IS_DISPATCHER);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(2, Node.POST_FLAG);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(37, Node.OPT_ARG_NAME);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(4095, Node.COLUMN_MASK);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
162:       assertFalse(node1.equals((Object)node0));
163:       assertFalse(node1.hasMoreThanOneChild());
164:       assertFalse(node1.isOr());
165:       assertEquals(38, node1.getCharno());
166:       assertFalse(node1.isContinue());
167:       assertFalse(node1.isTypeOf());
168:       assertFalse(node1.isDec());
169:       assertFalse(node1.hasChildren());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isDo());
172:       assertFalse(node1.isBlock());
173:       assertFalse(node1.isLabel());
174:       assertFalse(node1.isAssignAdd());
175:       assertFalse(node1.isWhile());
176:       assertFalse(node1.isReturn());
177:       assertFalse(node1.isGetElem());
178:       assertFalse(node1.isNew());
179:       assertFalse(node1.isCall());
180:       assertFalse(node1.isExprResult());
181:       assertFalse(node1.isAdd());
182:       assertFalse(node1.isNull());
183:       assertFalse(node1.isName());
184:       assertFalse(node1.isObjectLit());
185:       assertFalse(node1.isGetProp());
186:       assertFalse(node1.isSetterDef());
187:       assertFalse(node1.isFunction());
188:       assertFalse(node1.isComma());
189:       assertFalse(node1.isFalse());
190:       assertFalse(node1.isCast());
191:       assertFalse(node1.isNot());
192:       assertFalse(node1.isAnd());
193:       assertFalse(node1.isDebugger());
194:       assertFalse(node1.isIn());
195:       assertFalse(node1.isCase());
196:       assertFalse(node1.isString());
197:       assertEquals(49, node1.getType());
198:       assertFalse(node1.isFor());
199:       assertFalse(node1.isHook());
200:       assertFalse(node1.isInc());
201:       assertFalse(node1.isEmpty());
202:       assertFalse(node1.isIf());
203:       assertFalse(node1.isBreak());
204:       assertFalse(node1.isDelProp());
205:       assertFalse(node1.isVoid());
206:       assertFalse(node1.isTrue());
207:       assertFalse(node1.isNE());
208:       assertFalse(node1.isInstanceOf());
209:       assertEquals(0, node1.getChildCount());
210:       assertFalse(node1.isCatch());
211:       assertEquals(2, node1.getLineno());
212:       assertTrue(node1.isThrow());
213:       assertFalse(node1.isDefaultCase());
214:       assertFalse(node1.isWith());
215:       assertFalse(node1.isRegExp());
216:       assertFalse(node1.isThis());
217:       assertFalse(node1.isVar());
218:       assertFalse(node1.hasOneChild());
219:       assertFalse(node1.isArrayLit());
220:       assertFalse(node1.isTry());
221:       assertFalse(node1.isScript());
222:       assertFalse(node1.isNumber());
223:       assertFalse(node1.isSwitch());
224:       assertFalse(node1.isLabelName());
225:       assertFalse(node1.isGetterDef());
226:       assertFalse(node1.isStringKey());
227:       assertFalse(node1.isParamList());
228:       assertEquals(8230, node1.getSourcePosition());
229:       assertNotNull(node1);
230:       
231:       boolean boolean0 = node0.isVar();
232:       assertFalse(boolean0);
233:       assertEquals(40, Node.ORIGINALNAME_PROP);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(55, Node.INFERRED_FUNCTION);
240:       assertEquals(4095, Node.COLUMN_MASK);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(48, Node.DIRECTIVES);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(29, Node.JSDOC_INFO_PROP);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
260:       assertEquals(46, Node.IS_NAMESPACE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(50, Node.FREE_CALL);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertFalse(node0.equals((Object)node1));
270:       assertFalse(node0.isDo());
271:       assertFalse(node0.isNew());
272:       assertFalse(node0.isAdd());
273:       assertFalse(node0.isName());
274:       assertFalse(node0.isOr());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isNull());
277:       assertEquals((-1), node0.getSourcePosition());
278:       assertFalse(node0.isDec());
279:       assertFalse(node0.isTypeOf());
280:       assertEquals((-1), node0.getLineno());
281:       assertFalse(node0.isCall());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.isCatch());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isAssign());
287:       assertEquals(39, node0.getType());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.hasChildren());
290:       assertFalse(node0.isBlock());
291:       assertFalse(node0.isReturn());
292:       assertFalse(node0.isVoid());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isTry());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isArrayLit());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isEmpty());
302:       assertFalse(node0.isVar());
303:       assertEquals(0, node0.getChildCount());
304:       assertFalse(node0.isLabel());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isSwitch());
307:       assertFalse(node0.isString());
308:       assertFalse(node0.isCase());
309:       assertFalse(node0.isInc());
310:       assertFalse(node0.isIn());
311:       assertEquals((-1), node0.getCharno());
312:       assertFalse(node0.isNE());
313:       assertFalse(node0.isComma());
314:       assertFalse(node0.isIf());
315:       assertFalse(node0.isDelProp());
316:       assertFalse(node0.isGetterDef());
317:       assertTrue(node0.isNumber());
318:       assertFalse(node0.isInstanceOf());
319:       assertFalse(node0.isGetProp());
320:       assertFalse(node0.isBreak());
321:       assertFalse(node0.isFor());
322:       assertFalse(node0.isHook());
323:       assertFalse(node0.isThis());
324:       assertFalse(node0.isDebugger());
325:       assertFalse(node0.isFunction());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isWith());
328:       assertFalse(node0.isAnd());
329:       assertFalse(node0.isObjectLit());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isSetterDef());
332:       assertFalse(node0.isCast());
333:       assertFalse(node0.isContinue());
334:       assertFalse(node0.isFalse());
335:       assertFalse(node0.isThrow());
336:       
337:       int int0 = node0.getSourcePosition();
338:       assertEquals((-1), int0);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(30, Node.VAR_ARGS_NAME);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(4095, Node.COLUMN_MASK);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(49, Node.DIRECT_EVAL);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(57, Node.LAST_PROP);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       assertEquals(56, Node.CHANGE_TIME);
353:       assertEquals(36, Node.QUOTED_PROP);
354:       assertEquals(15, Node.NO_SIDE_EFFECTS);
355:       assertEquals(39, Node.EMPTY_BLOCK);
356:       assertEquals(53, Node.INPUT_ID);
357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(52, Node.LENGTH);
360:       assertEquals(8, Node.FLAG_NO_THROWS);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(2, Node.POST_FLAG);
363:       assertEquals(37, Node.OPT_ARG_NAME);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       assertEquals(46, Node.IS_NAMESPACE);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(1, Node.DECR_FLAG);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(43, Node.IS_CONSTANT_NAME);
372:       assertEquals(54, Node.SLASH_V);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertFalse(node0.equals((Object)node1));
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isNew());
378:       assertFalse(node0.isAdd());
379:       assertFalse(node0.isName());
380:       assertFalse(node0.isOr());
381:       assertFalse(node0.isStringKey());
382:       assertFalse(node0.isNull());
383:       assertEquals((-1), node0.getSourcePosition());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isTypeOf());
386:       assertEquals((-1), node0.getLineno());
387:       assertFalse(node0.isCall());
388:       assertFalse(node0.isGetElem());
389:       assertFalse(node0.hasMoreThanOneChild());
390:       assertFalse(node0.isCatch());
391:       assertFalse(node0.hasOneChild());
392:       assertFalse(node0.isAssign());
393:       assertEquals(39, node0.getType());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.hasChildren());
396:       assertFalse(node0.isBlock());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isDefaultCase());
400:       assertFalse(node0.isTry());
401:       assertFalse(node0.isScript());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isArrayLit());
404:       assertFalse(node0.isTrue());
405:       assertFalse(node0.isParamList());
406:       assertFalse(node0.isLabelName());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.isVar());
409:       assertEquals(0, node0.getChildCount());
410:       assertFalse(node0.isLabel());
411:       assertFalse(node0.isAssignAdd());
412:       assertFalse(node0.isSwitch());
413:       assertFalse(node0.isString());
414:       assertFalse(node0.isCase());
415:       assertFalse(node0.isInc());
416:       assertFalse(node0.isIn());
417:       assertEquals((-1), node0.getCharno());
418:       assertFalse(node0.isNE());
419:       assertFalse(node0.isComma());
420:       assertFalse(node0.isIf());
421:       assertFalse(node0.isDelProp());
422:       assertFalse(node0.isGetterDef());
423:       assertTrue(node0.isNumber());
424:       assertFalse(node0.isInstanceOf());
425:       assertFalse(node0.isGetProp());
426:       assertFalse(node0.isBreak());
427:       assertFalse(node0.isFor());
428:       assertFalse(node0.isHook());
429:       assertFalse(node0.isThis());
430:       assertFalse(node0.isDebugger());
431:       assertFalse(node0.isFunction());
432:       assertFalse(node0.isRegExp());
433:       assertFalse(node0.isWith());
434:       assertFalse(node0.isAnd());
435:       assertFalse(node0.isObjectLit());
436:       assertFalse(node0.isNot());
437:       assertFalse(node0.isSetterDef());
438:       assertFalse(node0.isCast());
439:       assertFalse(node0.isContinue());
440:       assertFalse(node0.isFalse());
441:       assertFalse(node0.isThrow());
442:       
443:       boolean boolean1 = node1.isLabelName();
444:       assertFalse(boolean1);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(54, Node.SLASH_V);
448:       assertEquals(1, Node.DECR_FLAG);
449:       assertEquals(49, Node.DIRECT_EVAL);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(29, Node.JSDOC_INFO_PROP);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(43, Node.IS_CONSTANT_NAME);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(53, Node.INPUT_ID);
466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(56, Node.CHANGE_TIME);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(32, Node.INCRDECR_PROP);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(4095, Node.COLUMN_MASK);
479:       assertEquals(12, Node.COLUMN_BITS);
480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
481:       assertFalse(node1.equals((Object)node0));
482:       assertTrue(boolean1 == boolean0);
483:       assertFalse(node1.hasMoreThanOneChild());
484:       assertFalse(node1.isOr());
485:       assertEquals(38, node1.getCharno());
486:       assertFalse(node1.isContinue());
487:       assertFalse(node1.isTypeOf());
488:       assertFalse(node1.isDec());
489:       assertFalse(node1.hasChildren());
490:       assertFalse(node1.isAssign());
491:       assertFalse(node1.isDo());
492:       assertFalse(node1.isBlock());
493:       assertFalse(node1.isLabel());
494:       assertFalse(node1.isAssignAdd());
495:       assertFalse(node1.isWhile());
496:       assertFalse(node1.isReturn());
497:       assertFalse(node1.isGetElem());
498:       assertFalse(node1.isNew());
499:       assertFalse(node1.isCall());
500:       assertFalse(node1.isExprResult());
501:       assertFalse(node1.isAdd());
502:       assertFalse(node1.isNull());
503:       assertFalse(node1.isName());
504:       assertFalse(node1.isObjectLit());
505:       assertFalse(node1.isGetProp());
506:       assertFalse(node1.isSetterDef());
507:       assertFalse(node1.isFunction());
508:       assertFalse(node1.isComma());
509:       assertFalse(node1.isFalse());
510:       assertFalse(node1.isCast());
511:       assertFalse(node1.isNot());
512:       assertFalse(node1.isAnd());
513:       assertFalse(node1.isDebugger());
514:       assertFalse(node1.isIn());
515:       assertFalse(node1.isCase());
516:       assertFalse(node1.isString());
517:       assertEquals(49, node1.getType());
518:       assertFalse(node1.isFor());
519:       assertFalse(node1.isHook());
520:       assertFalse(node1.isInc());
521:       assertFalse(node1.isEmpty());
522:       assertFalse(node1.isIf());
523:       assertFalse(node1.isBreak());
524:       assertFalse(node1.isDelProp());
525:       assertFalse(node1.isVoid());
526:       assertFalse(node1.isTrue());
527:       assertFalse(node1.isNE());
528:       assertFalse(node1.isInstanceOf());
529:       assertEquals(0, node1.getChildCount());
530:       assertFalse(node1.isCatch());
531:       assertEquals(2, node1.getLineno());
532:       assertTrue(node1.isThrow());
533:       assertFalse(node1.isDefaultCase());
534:       assertFalse(node1.isWith());
535:       assertFalse(node1.isRegExp());
536:       assertFalse(node1.isThis());
537:       assertFalse(node1.isVar());
538:       assertFalse(node1.hasOneChild());
539:       assertFalse(node1.isArrayLit());
540:       assertFalse(node1.isTry());
541:       assertFalse(node1.isScript());
542:       assertFalse(node1.isNumber());
543:       assertFalse(node1.isSwitch());
544:       assertFalse(node1.isLabelName());
545:       assertFalse(node1.isGetterDef());
546:       assertFalse(node1.isStringKey());
547:       assertFalse(node1.isParamList());
548:       assertEquals(8230, node1.getSourcePosition());
549:       
550:       Iterable<Node> iterable0 = node0.children();
551:       assertFalse(iterable0.contains(node1));
552:       assertEquals(40, Node.ORIGINALNAME_PROP);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(57, Node.LAST_PROP);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(56, Node.CHANGE_TIME);
566:       assertEquals(36, Node.QUOTED_PROP);
567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(52, Node.LENGTH);
573:       assertEquals(8, Node.FLAG_NO_THROWS);
574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
575:       assertEquals(2, Node.POST_FLAG);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(1, Node.DECR_FLAG);
582:       assertEquals(32, Node.INCRDECR_PROP);
583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(50, Node.FREE_CALL);
587:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
588:       assertFalse(node0.equals((Object)node1));
589:       assertFalse(node0.isDo());
590:       assertFalse(node0.isNew());
591:       assertFalse(node0.isAdd());
592:       assertFalse(node0.isName());
593:       assertFalse(node0.isOr());
594:       assertFalse(node0.isStringKey());
595:       assertFalse(node0.isNull());
596:       assertEquals((-1), node0.getSourcePosition());
597:       assertFalse(node0.isDec());
598:       assertFalse(node0.isTypeOf());
599:       assertEquals((-1), node0.getLineno());
600:       assertFalse(node0.isCall());
601:       assertFalse(node0.isGetElem());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isCatch());
604:       assertFalse(node0.hasOneChild());
605:       assertFalse(node0.isAssign());
606:       assertEquals(39, node0.getType());
607:       assertFalse(node0.isWhile());
608:       assertFalse(node0.hasChildren());
609:       assertFalse(node0.isBlock());
610:       assertFalse(node0.isReturn());
611:       assertFalse(node0.isVoid());
612:       assertFalse(node0.isDefaultCase());
613:       assertFalse(node0.isTry());
614:       assertFalse(node0.isScript());
615:       assertFalse(node0.isExprResult());
616:       assertFalse(node0.isArrayLit());
617:       assertFalse(node0.isTrue());
618:       assertFalse(node0.isParamList());
619:       assertFalse(node0.isLabelName());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.isVar());
622:       assertEquals(0, node0.getChildCount());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isSwitch());
626:       assertFalse(node0.isString());
627:       assertFalse(node0.isCase());
628:       assertFalse(node0.isInc());
629:       assertFalse(node0.isIn());
630:       assertEquals((-1), node0.getCharno());
631:       assertFalse(node0.isNE());
632:       assertFalse(node0.isComma());
633:       assertFalse(node0.isIf());
634:       assertFalse(node0.isDelProp());
635:       assertFalse(node0.isGetterDef());
636:       assertTrue(node0.isNumber());
637:       assertFalse(node0.isInstanceOf());
638:       assertFalse(node0.isGetProp());
639:       assertFalse(node0.isBreak());
640:       assertFalse(node0.isFor());
641:       assertFalse(node0.isHook());
642:       assertFalse(node0.isThis());
643:       assertFalse(node0.isDebugger());
644:       assertFalse(node0.isFunction());
645:       assertFalse(node0.isRegExp());
646:       assertFalse(node0.isWith());
647:       assertFalse(node0.isAnd());
648:       assertFalse(node0.isObjectLit());
649:       assertFalse(node0.isNot());
650:       assertFalse(node0.isSetterDef());
651:       assertFalse(node0.isCast());
652:       assertFalse(node0.isContinue());
653:       assertFalse(node0.isFalse());
654:       assertFalse(node0.isThrow());
655:       assertNotNull(iterable0);
656:       
657:       Node node2 = node1.removeFirstChild();
658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
659:       assertEquals(57, Node.LAST_PROP);
660:       assertEquals(54, Node.SLASH_V);
661:       assertEquals(1, Node.DECR_FLAG);
662:       assertEquals(49, Node.DIRECT_EVAL);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(57, Node.REFLECTED_OBJECT);
665:       assertEquals(46, Node.IS_NAMESPACE);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(50, Node.FREE_CALL);
669:       assertEquals(47, Node.IS_DISPATCHER);
670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(29, Node.JSDOC_INFO_PROP);
673:       assertEquals(40, Node.ORIGINALNAME_PROP);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(43, Node.IS_CONSTANT_NAME);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
682:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
683:       assertEquals(8, Node.FLAG_NO_THROWS);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
687:       assertEquals(37, Node.OPT_ARG_NAME);
688:       assertEquals(48, Node.DIRECTIVES);
689:       assertEquals(32, Node.INCRDECR_PROP);
690:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
691:       assertEquals(4095, Node.COLUMN_MASK);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertFalse(node1.equals((Object)node0));
695:       assertFalse(node1.hasMoreThanOneChild());
696:       assertFalse(node1.isOr());
697:       assertEquals(38, node1.getCharno());
698:       assertFalse(node1.isContinue());
699:       assertFalse(node1.isTypeOf());
700:       assertFalse(node1.isDec());
701:       assertFalse(node1.hasChildren());
702:       assertFalse(node1.isAssign());
703:       assertFalse(node1.isDo());
704:       assertFalse(node1.isBlock());
705:       assertFalse(node1.isLabel());
706:       assertFalse(node1.isAssignAdd());
707:       assertFalse(node1.isWhile());
708:       assertFalse(node1.isReturn());
709:       assertFalse(node1.isGetElem());
710:       assertFalse(node1.isNew());
711:       assertFalse(node1.isCall());
712:       assertFalse(node1.isExprResult());
713:       assertFalse(node1.isAdd());
714:       assertFalse(node1.isNull());
715:       assertFalse(node1.isName());
716:       assertFalse(node1.isObjectLit());
717:       assertFalse(node1.isGetProp());
718:       assertFalse(node1.isSetterDef());
719:       assertFalse(node1.isFunction());
720:       assertFalse(node1.isComma());
721:       assertFalse(node1.isFalse());
722:       assertFalse(node1.isCast());
723:       assertFalse(node1.isNot());
724:       assertFalse(node1.isAnd());
725:       assertFalse(node1.isDebugger());
726:       assertFalse(node1.isIn());
727:       assertFalse(node1.isCase());
728:       assertFalse(node1.isString());
729:       assertEquals(49, node1.getType());
730:       assertFalse(node1.isFor());
731:       assertFalse(node1.isHook());
732:       assertFalse(node1.isInc());
733:       assertFalse(node1.isEmpty());
734:       assertFalse(node1.isIf());
735:       assertFalse(node1.isBreak());
736:       assertFalse(node1.isDelProp());
737:       assertFalse(node1.isVoid());
738:       assertFalse(node1.isTrue());
739:       assertFalse(node1.isNE());
740:       assertFalse(node1.isInstanceOf());
741:       assertEquals(0, node1.getChildCount());
742:       assertFalse(node1.isCatch());
743:       assertEquals(2, node1.getLineno());
744:       assertTrue(node1.isThrow());
745:       assertFalse(node1.isDefaultCase());
746:       assertFalse(node1.isWith());
747:       assertFalse(node1.isRegExp());
748:       assertFalse(node1.isThis());
749:       assertFalse(node1.isVar());
750:       assertFalse(node1.hasOneChild());
751:       assertFalse(node1.isArrayLit());
752:       assertFalse(node1.isTry());
753:       assertFalse(node1.isScript());
754:       assertFalse(node1.isNumber());
755:       assertFalse(node1.isSwitch());
756:       assertFalse(node1.isLabelName());
757:       assertFalse(node1.isGetterDef());
758:       assertFalse(node1.isStringKey());
759:       assertFalse(node1.isParamList());
760:       assertEquals(8230, node1.getSourcePosition());
761:       assertNull(node2);
762:   }
763: }
RegularFileObject[/tmp/EvoSuite_225_1628160220969/com/google/javascript/rhino/Node_225_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_225_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_225_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_225_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.common.collect.Platform",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.FluentIterable",
354:       "com.google.common.collect.Iterables$2",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 10:43:41.028 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1906.9824));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(node0);

Node node1 = new Node(49, 2, 38);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(2, node1.getLineno());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(8230, node1.getSourcePosition());
assertNotNull(node1);

boolean boolean0 = node0.isVar();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());

int int0 = node0.getSourcePosition();
assertEquals((-1), int0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());

boolean boolean1 = node1.isLabelName();
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(2, node1.getLineno());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(8230, node1.getSourcePosition());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(iterable0);

Node node2 = node1.removeFirstChild();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(2, node1.getLineno());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(8230, node1.getSourcePosition());
assertNull(node2);


[MASTER] 10:43:47.441 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_254_1628160227009/com/google/javascript/rhino/Node_254_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_254_1628160227009/com/google/javascript/rhino/Node_254_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:47.441 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:47.441 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:47.442 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1130
[MASTER] 10:43:47.443 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_254_1628160227009/com/google/javascript/rhino/Node_254_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_254_tmp__ESTest extends Node_254_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString((-571), "com.google.javascript.rhino.jstype.ArrowType");
21:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
22:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
23:       assertEquals(36, Node.QUOTED_PROP);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
29:       assertEquals(47, Node.IS_DISPATCHER);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(8, Node.FLAG_NO_THROWS);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
34:       assertEquals(55, Node.INFERRED_FUNCTION);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(15, Node.NO_SIDE_EFFECTS);
38:       assertEquals(39, Node.EMPTY_BLOCK);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(57, Node.REFLECTED_OBJECT);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(32, Node.INCRDECR_PROP);
49:       assertEquals(46, Node.IS_NAMESPACE);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertFalse(node0.isScript());
58:       assertFalse(node0.isAnd());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isInstanceOf());
69:       assertEquals((-1), node0.getLineno());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isExprResult());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isString());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isIn());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isSetterDef());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isCast());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isFalse());
89:       assertEquals((-571), node0.getType());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isTry());
93:       assertFalse(node0.isDefaultCase());
94:       assertFalse(node0.isDebugger());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isIf());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isFor());
99:       assertFalse(node0.isNull());
100:       assertFalse(node0.isName());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isCatch());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isNew());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isAdd());
110:       assertEquals((-1), node0.getCharno());
111:       assertFalse(node0.isOr());
112:       assertFalse(node0.isNumber());
113:       assertFalse(node0.isGetterDef());
114:       assertFalse(node0.isEmpty());
115:       assertFalse(node0.isParamList());
116:       assertFalse(node0.isStringKey());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isLabelName());
119:       assertEquals(0, node0.getChildCount());
120:       assertFalse(node0.isLabel());
121:       assertFalse(node0.isArrayLit());
122:       assertFalse(node0.isVar());
123:       
124:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
125:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
126:       assertEquals(52, node_SideEffectFlags0.valueOf());
127:       
128:       node_SideEffectFlags0.clearSideEffectFlags();
129:       assertEquals(63, node_SideEffectFlags0.valueOf());
130:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
131:       
132:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
133:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
134:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
135:       assertEquals(55, node_SideEffectFlags0.valueOf());
136:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
137:       assertEquals(55, node_SideEffectFlags1.valueOf());
138:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
139:       
140:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
141:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
143:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
144:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
145:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
146:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
147:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
148:       assertEquals(51, node_SideEffectFlags0.valueOf());
149:       assertEquals(51, node_SideEffectFlags1.valueOf());
150:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
151:       assertEquals(51, node_SideEffectFlags2.valueOf());
152:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
153:       
154:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
155:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
156:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
157:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
158:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
159:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
161:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
162:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
163:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
164:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
165:       assertEquals(49, node_SideEffectFlags0.valueOf());
166:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
167:       assertEquals(49, node_SideEffectFlags1.valueOf());
168:       assertEquals(49, node_SideEffectFlags3.valueOf());
169:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
170:       
171:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
172:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
173:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
174:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
175:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
176:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
177:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
178:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
179:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
180:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
181:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
182:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
183:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
184:       assertEquals(31, node_SideEffectFlags0.valueOf());
185:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
186:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
187:       assertEquals(31, node_SideEffectFlags1.valueOf());
188:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
189:       assertEquals(31, node_SideEffectFlags4.valueOf());
190:       
191:       boolean boolean0 = node0.mayMutateArguments();
192:       assertTrue(boolean0);
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(56, Node.CHANGE_TIME);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(47, Node.IS_DISPATCHER);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(30, Node.VAR_ARGS_NAME);
217:       assertEquals(49, Node.DIRECT_EVAL);
218:       assertEquals(40, Node.ORIGINALNAME_PROP);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(32, Node.INCRDECR_PROP);
221:       assertEquals(46, Node.IS_NAMESPACE);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(4095, Node.COLUMN_MASK);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
229:       assertFalse(node0.isScript());
230:       assertFalse(node0.isAnd());
231:       assertFalse(node0.hasOneChild());
232:       assertFalse(node0.isGetProp());
233:       assertFalse(node0.isObjectLit());
234:       assertFalse(node0.isNot());
235:       assertFalse(node0.hasChildren());
236:       assertFalse(node0.isBreak());
237:       assertFalse(node0.isDec());
238:       assertFalse(node0.isGetElem());
239:       assertFalse(node0.isThis());
240:       assertFalse(node0.isInstanceOf());
241:       assertEquals((-1), node0.getLineno());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isHook());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isComma());
246:       assertFalse(node0.isAssign());
247:       assertFalse(node0.isTypeOf());
248:       assertFalse(node0.hasMoreThanOneChild());
249:       assertFalse(node0.isWith());
250:       assertFalse(node0.isString());
251:       assertFalse(node0.isWhile());
252:       assertFalse(node0.isInc());
253:       assertFalse(node0.isIn());
254:       assertEquals((-1), node0.getSourcePosition());
255:       assertFalse(node0.isSetterDef());
256:       assertFalse(node0.isThrow());
257:       assertFalse(node0.isContinue());
258:       assertFalse(node0.isCast());
259:       assertFalse(node0.isFunction());
260:       assertFalse(node0.isFalse());
261:       assertEquals((-571), node0.getType());
262:       assertFalse(node0.isVoid());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isTry());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.isDebugger());
267:       assertFalse(node0.isDelProp());
268:       assertFalse(node0.isIf());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isName());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.isCall());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isNew());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.isSwitch());
281:       assertFalse(node0.isAdd());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isGetterDef());
286:       assertFalse(node0.isEmpty());
287:       assertFalse(node0.isParamList());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isAssignAdd());
290:       assertFalse(node0.isLabelName());
291:       assertEquals(0, node0.getChildCount());
292:       assertFalse(node0.isLabel());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isVar());
295:       
296:       Node node1 = node0.getAncestor(0);
297:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
299:       assertEquals(36, Node.QUOTED_PROP);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(56, Node.CHANGE_TIME);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(37, Node.OPT_ARG_NAME);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
310:       assertEquals(55, Node.INFERRED_FUNCTION);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(54, Node.SLASH_V);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(40, Node.ORIGINALNAME_PROP);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(12, Node.COLUMN_BITS);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(2, Node.POST_FLAG);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       assertEquals(46, Node.IS_NAMESPACE);
337:       assertEquals(47, Node.IS_DISPATCHER);
338:       assertEquals(56, Node.CHANGE_TIME);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(12, Node.COLUMN_BITS);
341:       assertEquals(1, Node.DECR_FLAG);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(36, Node.QUOTED_PROP);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(49, Node.DIRECT_EVAL);
353:       assertEquals(4095, Node.COLUMN_MASK);
354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(48, Node.DIRECTIVES);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(50, Node.FREE_CALL);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(39, Node.EMPTY_BLOCK);
364:       assertEquals(54, Node.SLASH_V);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(30, Node.VAR_ARGS_NAME);
368:       assertEquals(40, Node.ORIGINALNAME_PROP);
369:       assertSame(node0, node1);
370:       assertSame(node1, node0);
371:       assertFalse(node0.isScript());
372:       assertFalse(node0.isAnd());
373:       assertFalse(node0.hasOneChild());
374:       assertFalse(node0.isGetProp());
375:       assertFalse(node0.isObjectLit());
376:       assertFalse(node0.isNot());
377:       assertFalse(node0.hasChildren());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isDec());
380:       assertFalse(node0.isGetElem());
381:       assertFalse(node0.isThis());
382:       assertFalse(node0.isInstanceOf());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isReturn());
385:       assertFalse(node0.isHook());
386:       assertFalse(node0.isExprResult());
387:       assertFalse(node0.isComma());
388:       assertFalse(node0.isAssign());
389:       assertFalse(node0.isTypeOf());
390:       assertFalse(node0.hasMoreThanOneChild());
391:       assertFalse(node0.isWith());
392:       assertFalse(node0.isString());
393:       assertFalse(node0.isWhile());
394:       assertFalse(node0.isInc());
395:       assertFalse(node0.isIn());
396:       assertEquals((-1), node0.getSourcePosition());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isThrow());
399:       assertFalse(node0.isContinue());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isFunction());
402:       assertFalse(node0.isFalse());
403:       assertEquals((-571), node0.getType());
404:       assertFalse(node0.isVoid());
405:       assertFalse(node0.isTrue());
406:       assertFalse(node0.isTry());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isDebugger());
409:       assertFalse(node0.isDelProp());
410:       assertFalse(node0.isIf());
411:       assertFalse(node0.isNE());
412:       assertFalse(node0.isFor());
413:       assertFalse(node0.isNull());
414:       assertFalse(node0.isName());
415:       assertFalse(node0.isBlock());
416:       assertFalse(node0.isCall());
417:       assertFalse(node0.isCatch());
418:       assertFalse(node0.isRegExp());
419:       assertFalse(node0.isCase());
420:       assertFalse(node0.isNew());
421:       assertFalse(node0.isDo());
422:       assertFalse(node0.isSwitch());
423:       assertFalse(node0.isAdd());
424:       assertEquals((-1), node0.getCharno());
425:       assertFalse(node0.isOr());
426:       assertFalse(node0.isNumber());
427:       assertFalse(node0.isGetterDef());
428:       assertFalse(node0.isEmpty());
429:       assertFalse(node0.isParamList());
430:       assertFalse(node0.isStringKey());
431:       assertFalse(node0.isAssignAdd());
432:       assertFalse(node0.isLabelName());
433:       assertEquals(0, node0.getChildCount());
434:       assertFalse(node0.isLabel());
435:       assertFalse(node0.isArrayLit());
436:       assertFalse(node0.isVar());
437:       assertFalse(node1.isEmpty());
438:       assertFalse(node1.isFor());
439:       assertFalse(node1.isIf());
440:       assertFalse(node1.isArrayLit());
441:       assertFalse(node1.isTry());
442:       assertFalse(node1.isDelProp());
443:       assertFalse(node1.isVoid());
444:       assertEquals((-571), node1.getType());
445:       assertFalse(node1.isFunction());
446:       assertFalse(node1.isRegExp());
447:       assertFalse(node1.isCase());
448:       assertFalse(node1.isSwitch());
449:       assertEquals((-1), node1.getCharno());
450:       assertFalse(node1.isDebugger());
451:       assertFalse(node1.isParamList());
452:       assertFalse(node1.isString());
453:       assertFalse(node1.isGetterDef());
454:       assertFalse(node1.isThrow());
455:       assertFalse(node1.isFalse());
456:       assertFalse(node1.isHook());
457:       assertFalse(node1.isBlock());
458:       assertFalse(node1.isThis());
459:       assertFalse(node1.isInstanceOf());
460:       assertFalse(node1.isCatch());
461:       assertEquals((-1), node1.getLineno());
462:       assertFalse(node1.isSetterDef());
463:       assertFalse(node1.isNE());
464:       assertFalse(node1.isInc());
465:       assertFalse(node1.isIn());
466:       assertFalse(node1.isCast());
467:       assertFalse(node1.isGetElem());
468:       assertFalse(node1.hasOneChild());
469:       assertFalse(node1.isLabelName());
470:       assertFalse(node1.isLabel());
471:       assertFalse(node1.isExprResult());
472:       assertFalse(node1.isReturn());
473:       assertFalse(node1.isDec());
474:       assertFalse(node1.hasChildren());
475:       assertFalse(node1.isAssign());
476:       assertFalse(node1.hasMoreThanOneChild());
477:       assertFalse(node1.isWith());
478:       assertFalse(node1.isTypeOf());
479:       assertFalse(node1.isContinue());
480:       assertFalse(node1.isAnd());
481:       assertFalse(node1.isWhile());
482:       assertFalse(node1.isGetProp());
483:       assertFalse(node1.isScript());
484:       assertEquals((-1), node1.getSourcePosition());
485:       assertFalse(node1.isNot());
486:       assertFalse(node1.isNumber());
487:       assertFalse(node1.isObjectLit());
488:       assertFalse(node1.isStringKey());
489:       assertFalse(node1.isVar());
490:       assertFalse(node1.isCall());
491:       assertFalse(node1.isBreak());
492:       assertFalse(node1.isName());
493:       assertFalse(node1.isComma());
494:       assertEquals(0, node1.getChildCount());
495:       assertFalse(node1.isDefaultCase());
496:       assertFalse(node1.isAssignAdd());
497:       assertFalse(node1.isDo());
498:       assertFalse(node1.isNew());
499:       assertFalse(node1.isNull());
500:       assertFalse(node1.isTrue());
501:       assertFalse(node1.isAdd());
502:       assertFalse(node1.isOr());
503:       
504:       Node node2 = new Node((-571), node1, node0, 12, (-559));
505:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
507:       assertEquals(36, Node.QUOTED_PROP);
508:       assertEquals(43, Node.IS_CONSTANT_NAME);
509:       assertEquals(56, Node.CHANGE_TIME);
510:       assertEquals(2, Node.POST_FLAG);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
513:       assertEquals(47, Node.IS_DISPATCHER);
514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
515:       assertEquals(8, Node.FLAG_NO_THROWS);
516:       assertEquals(57, Node.LAST_PROP);
517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
518:       assertEquals(55, Node.INFERRED_FUNCTION);
519:       assertEquals(29, Node.JSDOC_INFO_PROP);
520:       assertEquals(53, Node.INPUT_ID);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(39, Node.EMPTY_BLOCK);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(54, Node.SLASH_V);
525:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(48, Node.DIRECTIVES);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(46, Node.IS_NAMESPACE);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
539:       assertEquals(1, Node.DECR_FLAG);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(37, Node.OPT_ARG_NAME);
542:       assertEquals(2, Node.POST_FLAG);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(46, Node.IS_NAMESPACE);
545:       assertEquals(47, Node.IS_DISPATCHER);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       assertEquals(12, Node.COLUMN_BITS);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(53, Node.INPUT_ID);
555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
557:       assertEquals(52, Node.LENGTH);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(49, Node.DIRECT_EVAL);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
564:       assertEquals(48, Node.DIRECTIVES);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(57, Node.LAST_PROP);
574:       assertEquals(43, Node.IS_CONSTANT_NAME);
575:       assertEquals(30, Node.VAR_ARGS_NAME);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(47, Node.IS_DISPATCHER);
580:       assertEquals(2, Node.POST_FLAG);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(4095, Node.COLUMN_MASK);
583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
584:       assertEquals(48, Node.DIRECTIVES);
585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:       assertEquals(56, Node.CHANGE_TIME);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(57, Node.LAST_PROP);
589:       assertEquals(36, Node.QUOTED_PROP);
590:       assertEquals(8, Node.FLAG_NO_THROWS);
591:       assertEquals(39, Node.EMPTY_BLOCK);
592:       assertEquals(15, Node.NO_SIDE_EFFECTS);
593:       assertEquals(53, Node.INPUT_ID);
594:       assertEquals(55, Node.INFERRED_FUNCTION);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
597:       assertEquals(52, Node.LENGTH);
598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
599:       assertEquals(57, Node.REFLECTED_OBJECT);
600:       assertEquals(54, Node.SLASH_V);
601:       assertEquals(30, Node.VAR_ARGS_NAME);
602:       assertEquals(49, Node.DIRECT_EVAL);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(32, Node.INCRDECR_PROP);
607:       assertEquals(12, Node.COLUMN_BITS);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(1, Node.DECR_FLAG);
610:       assertEquals(50, Node.FREE_CALL);
611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
612:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
613:       assertFalse(node2.equals((Object)node1));
614:       assertFalse(node2.equals((Object)node0));
615:       assertFalse(node0.isScript());
616:       assertFalse(node0.isAnd());
617:       assertFalse(node0.hasOneChild());
618:       assertFalse(node0.isGetProp());
619:       assertFalse(node0.isObjectLit());
620:       assertFalse(node0.isNot());
621:       assertFalse(node0.hasChildren());
622:       assertFalse(node0.isBreak());
623:       assertFalse(node0.isDec());
624:       assertFalse(node0.isGetElem());
625:       assertFalse(node0.isThis());
626:       assertFalse(node0.isInstanceOf());
627:       assertEquals((-1), node0.getLineno());
628:       assertFalse(node0.isReturn());
629:       assertFalse(node0.isHook());
630:       assertFalse(node0.isExprResult());
631:       assertFalse(node0.isComma());
632:       assertFalse(node0.isAssign());
633:       assertFalse(node0.isTypeOf());
634:       assertFalse(node0.hasMoreThanOneChild());
635:       assertFalse(node0.isWith());
636:       assertFalse(node0.isString());
637:       assertFalse(node0.isWhile());
638:       assertFalse(node0.isInc());
639:       assertFalse(node0.isIn());
640:       assertEquals((-1), node0.getSourcePosition());
641:       assertFalse(node0.isSetterDef());
642:       assertFalse(node0.isThrow());
643:       assertFalse(node0.isContinue());
644:       assertFalse(node0.isCast());
645:       assertFalse(node0.isFunction());
646:       assertFalse(node0.isFalse());
647:       assertEquals((-571), node0.getType());
648:       assertFalse(node0.isVoid());
649:       assertFalse(node0.isTrue());
650:       assertFalse(node0.isTry());
651:       assertFalse(node0.isDefaultCase());
652:       assertFalse(node0.isDebugger());
653:       assertFalse(node0.isDelProp());
654:       assertFalse(node0.isIf());
655:       assertFalse(node0.isNE());
656:       assertFalse(node0.isFor());
657:       assertFalse(node0.isNull());
658:       assertFalse(node0.isName());
659:       assertFalse(node0.isBlock());
660:       assertFalse(node0.isCall());
661:       assertFalse(node0.isCatch());
662:       assertFalse(node0.isRegExp());
663:       assertFalse(node0.isCase());
664:       assertFalse(node0.isNew());
665:       assertFalse(node0.isDo());
666:       assertFalse(node0.isSwitch());
667:       assertFalse(node0.isAdd());
668:       assertEquals((-1), node0.getCharno());
669:       assertFalse(node0.isOr());
670:       assertFalse(node0.isNumber());
671:       assertFalse(node0.isGetterDef());
672:       assertFalse(node0.isEmpty());
673:       assertFalse(node0.isParamList());
674:       assertFalse(node0.isStringKey());
675:       assertFalse(node0.isAssignAdd());
676:       assertFalse(node0.isLabelName());
677:       assertEquals(0, node0.getChildCount());
678:       assertFalse(node0.isLabel());
679:       assertFalse(node0.isArrayLit());
680:       assertFalse(node0.isVar());
681:       assertFalse(node1.isEmpty());
682:       assertFalse(node1.isFor());
683:       assertFalse(node1.isIf());
684:       assertFalse(node1.isArrayLit());
685:       assertFalse(node1.isTry());
686:       assertFalse(node1.isDelProp());
687:       assertFalse(node1.isVoid());
688:       assertEquals((-571), node1.getType());
689:       assertFalse(node1.isFunction());
690:       assertFalse(node1.isRegExp());
691:       assertFalse(node1.isCase());
692:       assertFalse(node1.isSwitch());
693:       assertEquals((-1), node1.getCharno());
694:       assertFalse(node1.isDebugger());
695:       assertFalse(node1.isParamList());
696:       assertFalse(node1.isString());
697:       assertFalse(node1.isGetterDef());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isFalse());
700:       assertFalse(node1.isHook());
701:       assertFalse(node1.isBlock());
702:       assertFalse(node1.isThis());
703:       assertFalse(node1.isInstanceOf());
704:       assertFalse(node1.isCatch());
705:       assertEquals((-1), node1.getLineno());
706:       assertFalse(node1.isSetterDef());
707:       assertFalse(node1.isNE());
708:       assertFalse(node1.isInc());
709:       assertFalse(node1.isIn());
710:       assertFalse(node1.isCast());
711:       assertFalse(node1.isGetElem());
712:       assertFalse(node1.hasOneChild());
713:       assertFalse(node1.isLabelName());
714:       assertFalse(node1.isLabel());
715:       assertFalse(node1.isExprResult());
716:       assertFalse(node1.isReturn());
717:       assertFalse(node1.isDec());
718:       assertFalse(node1.hasChildren());
719:       assertFalse(node1.isAssign());
720:       assertFalse(node1.hasMoreThanOneChild());
721:       assertFalse(node1.isWith());
722:       assertFalse(node1.isTypeOf());
723:       assertFalse(node1.isContinue());
724:       assertFalse(node1.isAnd());
725:       assertFalse(node1.isWhile());
726:       assertFalse(node1.isGetProp());
727:       assertFalse(node1.isScript());
728:       assertEquals((-1), node1.getSourcePosition());
729:       assertFalse(node1.isNot());
730:       assertFalse(node1.isNumber());
731:       assertFalse(node1.isObjectLit());
732:       assertFalse(node1.isStringKey());
733:       assertFalse(node1.isVar());
734:       assertFalse(node1.isCall());
735:       assertFalse(node1.isBreak());
736:       assertFalse(node1.isName());
737:       assertFalse(node1.isComma());
738:       assertEquals(0, node1.getChildCount());
739:       assertFalse(node1.isDefaultCase());
740:       assertFalse(node1.isAssignAdd());
741:       assertFalse(node1.isDo());
742:       assertFalse(node1.isNew());
743:       assertFalse(node1.isNull());
744:       assertFalse(node1.isTrue());
745:       assertFalse(node1.isAdd());
746:       assertFalse(node1.isOr());
747:       assertFalse(node2.isWith());
748:       assertFalse(node2.isScript());
749:       assertFalse(node2.isExprResult());
750:       assertFalse(node2.isAnd());
751:       assertFalse(node2.isObjectLit());
752:       assertFalse(node2.isNot());
753:       assertFalse(node2.isBreak());
754:       assertFalse(node2.isGetElem());
755:       assertFalse(node2.isGetProp());
756:       assertFalse(node2.isReturn());
757:       assertEquals((-1), node2.getLineno());
758:       assertFalse(node2.isInstanceOf());
759:       assertFalse(node2.isHook());
760:       assertFalse(node2.isComma());
761:       assertFalse(node2.isThis());
762:       assertFalse(node2.hasMoreThanOneChild());
763:       assertFalse(node2.isTypeOf());
764:       assertFalse(node2.isDec());
765:       assertFalse(node2.isAssign());
766:       assertFalse(node2.isSwitch());
767:       assertFalse(node2.isCase());
768:       assertFalse(node2.isNew());
769:       assertFalse(node2.isDo());
770:       assertFalse(node2.isAdd());
771:       assertEquals((-1), node2.getCharno());
772:       assertFalse(node2.isNumber());
773:       assertFalse(node2.isOr());
774:       assertFalse(node2.isGetterDef());
775:       assertFalse(node2.isStringKey());
776:       assertFalse(node2.isEmpty());
777:       assertFalse(node2.isParamList());
778:       assertFalse(node2.isArrayLit());
779:       assertFalse(node2.isLabelName());
780:       assertFalse(node2.isLabel());
781:       assertFalse(node2.isAssignAdd());
782:       assertFalse(node2.isVar());
783:       assertFalse(node2.isDefaultCase());
784:       assertFalse(node2.isTry());
785:       assertFalse(node2.isVoid());
786:       assertFalse(node2.isDebugger());
787:       assertFalse(node2.isTrue());
788:       assertTrue(node2.hasOneChild());
789:       assertFalse(node2.isIf());
790:       assertFalse(node2.isNull());
791:       assertFalse(node2.isNE());
792:       assertFalse(node2.isFor());
793:       assertFalse(node2.isCall());
794:       assertFalse(node2.isName());
795:       assertFalse(node2.isDelProp());
796:       assertEquals(1, node2.getChildCount());
797:       assertFalse(node2.isBlock());
798:       assertTrue(node2.hasChildren());
799:       assertFalse(node2.isCatch());
800:       assertFalse(node2.isRegExp());
801:       assertFalse(node2.isWhile());
802:       assertFalse(node2.isString());
803:       assertFalse(node2.isInc());
804:       assertFalse(node2.isIn());
805:       assertEquals((-1), node2.getSourcePosition());
806:       assertFalse(node2.isThrow());
807:       assertFalse(node2.isSetterDef());
808:       assertFalse(node2.isCast());
809:       assertFalse(node2.isFunction());
810:       assertFalse(node2.isContinue());
811:       assertFalse(node2.isFalse());
812:       assertEquals((-571), node2.getType());
813:       
814:       int int0 = node2.getSourcePosition();
815:       assertEquals((-1), int0);
816:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
818:       assertEquals(36, Node.QUOTED_PROP);
819:       assertEquals(43, Node.IS_CONSTANT_NAME);
820:       assertEquals(56, Node.CHANGE_TIME);
821:       assertEquals(2, Node.POST_FLAG);
822:       assertEquals(37, Node.OPT_ARG_NAME);
823:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
824:       assertEquals(47, Node.IS_DISPATCHER);
825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
826:       assertEquals(8, Node.FLAG_NO_THROWS);
827:       assertEquals(57, Node.LAST_PROP);
828:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
829:       assertEquals(55, Node.INFERRED_FUNCTION);
830:       assertEquals(29, Node.JSDOC_INFO_PROP);
831:       assertEquals(53, Node.INPUT_ID);
832:       assertEquals(15, Node.NO_SIDE_EFFECTS);
833:       assertEquals(39, Node.EMPTY_BLOCK);
834:       assertEquals(52, Node.LENGTH);
835:       assertEquals(54, Node.SLASH_V);
836:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
837:       assertEquals(57, Node.REFLECTED_OBJECT);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(30, Node.VAR_ARGS_NAME);
840:       assertEquals(49, Node.DIRECT_EVAL);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(48, Node.DIRECTIVES);
843:       assertEquals(32, Node.INCRDECR_PROP);
844:       assertEquals(46, Node.IS_NAMESPACE);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(4095, Node.COLUMN_MASK);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(50, Node.FREE_CALL);
849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
850:       assertEquals(1, Node.DECR_FLAG);
851:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(32, Node.INCRDECR_PROP);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(47, Node.IS_DISPATCHER);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(1, Node.DECR_FLAG);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(53, Node.INPUT_ID);
866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
867:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
868:       assertEquals(52, Node.LENGTH);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(49, Node.DIRECT_EVAL);
872:       assertEquals(4095, Node.COLUMN_MASK);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
875:       assertEquals(48, Node.DIRECTIVES);
876:       assertEquals(8, Node.FLAG_NO_THROWS);
877:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
878:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
879:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(55, Node.INFERRED_FUNCTION);
882:       assertEquals(39, Node.EMPTY_BLOCK);
883:       assertEquals(54, Node.SLASH_V);
884:       assertEquals(57, Node.LAST_PROP);
885:       assertEquals(43, Node.IS_CONSTANT_NAME);
886:       assertEquals(30, Node.VAR_ARGS_NAME);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
889:       assertEquals(43, Node.IS_CONSTANT_NAME);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(2, Node.POST_FLAG);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(4095, Node.COLUMN_MASK);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(48, Node.DIRECTIVES);
896:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
897:       assertEquals(56, Node.CHANGE_TIME);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(57, Node.LAST_PROP);
900:       assertEquals(36, Node.QUOTED_PROP);
901:       assertEquals(8, Node.FLAG_NO_THROWS);
902:       assertEquals(39, Node.EMPTY_BLOCK);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(53, Node.INPUT_ID);
905:       assertEquals(55, Node.INFERRED_FUNCTION);
906:       assertEquals(29, Node.JSDOC_INFO_PROP);
907:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(54, Node.SLASH_V);
912:       assertEquals(30, Node.VAR_ARGS_NAME);
913:       assertEquals(49, Node.DIRECT_EVAL);
914:       assertEquals(40, Node.ORIGINALNAME_PROP);
915:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
917:       assertEquals(32, Node.INCRDECR_PROP);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(46, Node.IS_NAMESPACE);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(50, Node.FREE_CALL);
922:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
924:       assertFalse(node0.equals((Object)node2));
925:       assertFalse(node1.equals((Object)node2));
926:       assertFalse(node2.equals((Object)node1));
927:       assertFalse(node2.equals((Object)node0));
928:       assertSame(node0, node1);
929:       assertSame(node1, node0);
930:       assertFalse(node0.isScript());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.hasOneChild());
933:       assertFalse(node0.isGetProp());
934:       assertFalse(node0.isObjectLit());
935:       assertFalse(node0.isNot());
936:       assertFalse(node0.hasChildren());
937:       assertFalse(node0.isBreak());
938:       assertFalse(node0.isDec());
939:       assertFalse(node0.isGetElem());
940:       assertFalse(node0.isThis());
941:       assertFalse(node0.isInstanceOf());
942:       assertEquals((-1), node0.getLineno());
943:       assertFalse(node0.isReturn());
944:       assertFalse(node0.isHook());
945:       assertFalse(node0.isExprResult());
946:       assertFalse(node0.isComma());
947:       assertFalse(node0.isAssign());
948:       assertFalse(node0.isTypeOf());
949:       assertFalse(node0.hasMoreThanOneChild());
950:       assertFalse(node0.isWith());
951:       assertFalse(node0.isString());
952:       assertFalse(node0.isWhile());
953:       assertFalse(node0.isInc());
954:       assertFalse(node0.isIn());
955:       assertEquals((-1), node0.getSourcePosition());
956:       assertFalse(node0.isSetterDef());
957:       assertFalse(node0.isThrow());
958:       assertFalse(node0.isContinue());
959:       assertFalse(node0.isCast());
960:       assertFalse(node0.isFunction());
961:       assertFalse(node0.isFalse());
962:       assertEquals((-571), node0.getType());
963:       assertFalse(node0.isVoid());
964:       assertFalse(node0.isTrue());
965:       assertFalse(node0.isTry());
966:       assertFalse(node0.isDefaultCase());
967:       assertFalse(node0.isDebugger());
968:       assertFalse(node0.isDelProp());
969:       assertFalse(node0.isIf());
970:       assertFalse(node0.isNE());
971:       assertFalse(node0.isFor());
972:       assertFalse(node0.isNull());
973:       assertFalse(node0.isName());
974:       assertFalse(node0.isBlock());
975:       assertFalse(node0.isCall());
976:       assertFalse(node0.isCatch());
977:       assertFalse(node0.isRegExp());
978:       assertFalse(node0.isCase());
979:       assertFalse(node0.isNew());
980:       assertFalse(node0.isDo());
981:       assertFalse(node0.isSwitch());
982:       assertFalse(node0.isAdd());
983:       assertEquals((-1), node0.getCharno());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isNumber());
986:       assertFalse(node0.isGetterDef());
987:       assertFalse(node0.isEmpty());
988:       assertFalse(node0.isParamList());
989:       assertFalse(node0.isStringKey());
990:       assertFalse(node0.isAssignAdd());
991:       assertFalse(node0.isLabelName());
992:       assertEquals(0, node0.getChildCount());
993:       assertFalse(node0.isLabel());
994:       assertFalse(node0.isArrayLit());
995:       assertFalse(node0.isVar());
996:       assertFalse(node1.isEmpty());
997:       assertFalse(node1.isFor());
998:       assertFalse(node1.isIf());
999:       assertFalse(node1.isArrayLit());
1000:       assertFalse(node1.isTry());
1001:       assertFalse(node1.isDelProp());
1002:       assertFalse(node1.isVoid());
1003:       assertEquals((-571), node1.getType());
1004:       assertFalse(node1.isFunction());
1005:       assertFalse(node1.isRegExp());
1006:       assertFalse(node1.isCase());
1007:       assertFalse(node1.isSwitch());
1008:       assertEquals((-1), node1.getCharno());
1009:       assertFalse(node1.isDebugger());
1010:       assertFalse(node1.isParamList());
1011:       assertFalse(node1.isString());
1012:       assertFalse(node1.isGetterDef());
1013:       assertFalse(node1.isThrow());
1014:       assertFalse(node1.isFalse());
1015:       assertFalse(node1.isHook());
1016:       assertFalse(node1.isBlock());
1017:       assertFalse(node1.isThis());
1018:       assertFalse(node1.isInstanceOf());
1019:       assertFalse(node1.isCatch());
1020:       assertEquals((-1), node1.getLineno());
1021:       assertFalse(node1.isSetterDef());
1022:       assertFalse(node1.isNE());
1023:       assertFalse(node1.isInc());
1024:       assertFalse(node1.isIn());
1025:       assertFalse(node1.isCast());
1026:       assertFalse(node1.isGetElem());
1027:       assertFalse(node1.hasOneChild());
1028:       assertFalse(node1.isLabelName());
1029:       assertFalse(node1.isLabel());
1030:       assertFalse(node1.isExprResult());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isDec());
1033:       assertFalse(node1.hasChildren());
1034:       assertFalse(node1.isAssign());
1035:       assertFalse(node1.hasMoreThanOneChild());
1036:       assertFalse(node1.isWith());
1037:       assertFalse(node1.isTypeOf());
1038:       assertFalse(node1.isContinue());
1039:       assertFalse(node1.isAnd());
1040:       assertFalse(node1.isWhile());
1041:       assertFalse(node1.isGetProp());
1042:       assertFalse(node1.isScript());
1043:       assertEquals((-1), node1.getSourcePosition());
1044:       assertFalse(node1.isNot());
1045:       assertFalse(node1.isNumber());
1046:       assertFalse(node1.isObjectLit());
1047:       assertFalse(node1.isStringKey());
1048:       assertFalse(node1.isVar());
1049:       assertFalse(node1.isCall());
1050:       assertFalse(node1.isBreak());
1051:       assertFalse(node1.isName());
1052:       assertFalse(node1.isComma());
1053:       assertEquals(0, node1.getChildCount());
1054:       assertFalse(node1.isDefaultCase());
1055:       assertFalse(node1.isAssignAdd());
1056:       assertFalse(node1.isDo());
1057:       assertFalse(node1.isNew());
1058:       assertFalse(node1.isNull());
1059:       assertFalse(node1.isTrue());
1060:       assertFalse(node1.isAdd());
1061:       assertFalse(node1.isOr());
1062:       assertFalse(node2.isWith());
1063:       assertFalse(node2.isScript());
1064:       assertFalse(node2.isExprResult());
1065:       assertFalse(node2.isAnd());
1066:       assertFalse(node2.isObjectLit());
1067:       assertFalse(node2.isNot());
1068:       assertFalse(node2.isBreak());
1069:       assertFalse(node2.isGetElem());
1070:       assertFalse(node2.isGetProp());
1071:       assertFalse(node2.isReturn());
1072:       assertEquals((-1), node2.getLineno());
1073:       assertFalse(node2.isInstanceOf());
1074:       assertFalse(node2.isHook());
1075:       assertFalse(node2.isComma());
1076:       assertFalse(node2.isThis());
1077:       assertFalse(node2.hasMoreThanOneChild());
1078:       assertFalse(node2.isTypeOf());
1079:       assertFalse(node2.isDec());
1080:       assertFalse(node2.isAssign());
1081:       assertFalse(node2.isSwitch());
1082:       assertFalse(node2.isCase());
1083:       assertFalse(node2.isNew());
1084:       assertFalse(node2.isDo());
1085:       assertFalse(node2.isAdd());
1086:       assertEquals((-1), node2.getCharno());
1087:       assertFalse(node2.isNumber());
1088:       assertFalse(node2.isOr());
1089:       assertFalse(node2.isGetterDef());
1090:       assertFalse(node2.isStringKey());
1091:       assertFalse(node2.isEmpty());
1092:       assertFalse(node2.isParamList());
1093:       assertFalse(node2.isArrayLit());
1094:       assertFalse(node2.isLabelName());
1095:       assertFalse(node2.isLabel());
1096:       assertFalse(node2.isAssignAdd());
1097:       assertFalse(node2.isVar());
1098:       assertFalse(node2.isDefaultCase());
1099:       assertFalse(node2.isTry());
1100:       assertFalse(node2.isVoid());
1101:       assertFalse(node2.isDebugger());
1102:       assertFalse(node2.isTrue());
1103:       assertTrue(node2.hasOneChild());
1104:       assertFalse(node2.isIf());
1105:       assertFalse(node2.isNull());
1106:       assertFalse(node2.isNE());
1107:       assertFalse(node2.isFor());
1108:       assertFalse(node2.isCall());
1109:       assertFalse(node2.isName());
1110:       assertFalse(node2.isDelProp());
1111:       assertEquals(1, node2.getChildCount());
1112:       assertFalse(node2.isBlock());
1113:       assertTrue(node2.hasChildren());
1114:       assertFalse(node2.isCatch());
1115:       assertFalse(node2.isRegExp());
1116:       assertFalse(node2.isWhile());
1117:       assertFalse(node2.isString());
1118:       assertFalse(node2.isInc());
1119:       assertFalse(node2.isIn());
1120:       assertEquals((-1), node2.getSourcePosition());
1121:       assertFalse(node2.isThrow());
1122:       assertFalse(node2.isSetterDef());
1123:       assertFalse(node2.isCast());
1124:       assertFalse(node2.isFunction());
1125:       assertFalse(node2.isContinue());
1126:       assertFalse(node2.isFalse());
1127:       assertEquals((-571), node2.getType());
1128:       
1129:       Iterable<Node> iterable0 = node1.children();
1130:       assertFalse(iterable0.contains(node2));
1131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1133:       assertEquals(36, Node.QUOTED_PROP);
1134:       assertEquals(43, Node.IS_CONSTANT_NAME);
1135:       assertEquals(56, Node.CHANGE_TIME);
1136:       assertEquals(2, Node.POST_FLAG);
1137:       assertEquals(37, Node.OPT_ARG_NAME);
1138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1139:       assertEquals(47, Node.IS_DISPATCHER);
1140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1141:       assertEquals(8, Node.FLAG_NO_THROWS);
1142:       assertEquals(57, Node.LAST_PROP);
1143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1144:       assertEquals(55, Node.INFERRED_FUNCTION);
1145:       assertEquals(29, Node.JSDOC_INFO_PROP);
1146:       assertEquals(53, Node.INPUT_ID);
1147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1148:       assertEquals(39, Node.EMPTY_BLOCK);
1149:       assertEquals(52, Node.LENGTH);
1150:       assertEquals(54, Node.SLASH_V);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(57, Node.REFLECTED_OBJECT);
1153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1154:       assertEquals(30, Node.VAR_ARGS_NAME);
1155:       assertEquals(49, Node.DIRECT_EVAL);
1156:       assertEquals(40, Node.ORIGINALNAME_PROP);
1157:       assertEquals(48, Node.DIRECTIVES);
1158:       assertEquals(32, Node.INCRDECR_PROP);
1159:       assertEquals(46, Node.IS_NAMESPACE);
1160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(12, Node.COLUMN_BITS);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1165:       assertEquals(1, Node.DECR_FLAG);
1166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1167:       assertEquals(37, Node.OPT_ARG_NAME);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(32, Node.INCRDECR_PROP);
1170:       assertEquals(46, Node.IS_NAMESPACE);
1171:       assertEquals(47, Node.IS_DISPATCHER);
1172:       assertEquals(56, Node.CHANGE_TIME);
1173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1174:       assertEquals(12, Node.COLUMN_BITS);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1179:       assertEquals(29, Node.JSDOC_INFO_PROP);
1180:       assertEquals(53, Node.INPUT_ID);
1181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1183:       assertEquals(52, Node.LENGTH);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertEquals(57, Node.REFLECTED_OBJECT);
1186:       assertEquals(49, Node.DIRECT_EVAL);
1187:       assertEquals(4095, Node.COLUMN_MASK);
1188:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(48, Node.DIRECTIVES);
1191:       assertEquals(8, Node.FLAG_NO_THROWS);
1192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1195:       assertEquals(50, Node.FREE_CALL);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(39, Node.EMPTY_BLOCK);
1198:       assertEquals(54, Node.SLASH_V);
1199:       assertEquals(57, Node.LAST_PROP);
1200:       assertEquals(43, Node.IS_CONSTANT_NAME);
1201:       assertEquals(30, Node.VAR_ARGS_NAME);
1202:       assertEquals(40, Node.ORIGINALNAME_PROP);
1203:       assertFalse(node0.equals((Object)node2));
1204:       assertFalse(node1.equals((Object)node2));
1205:       assertSame(node0, node1);
1206:       assertSame(node1, node0);
1207:       assertFalse(node0.isScript());
1208:       assertFalse(node0.isAnd());
1209:       assertFalse(node0.hasOneChild());
1210:       assertFalse(node0.isGetProp());
1211:       assertFalse(node0.isObjectLit());
1212:       assertFalse(node0.isNot());
1213:       assertFalse(node0.hasChildren());
1214:       assertFalse(node0.isBreak());
1215:       assertFalse(node0.isDec());
1216:       assertFalse(node0.isGetElem());
1217:       assertFalse(node0.isThis());
1218:       assertFalse(node0.isInstanceOf());
1219:       assertEquals((-1), node0.getLineno());
1220:       assertFalse(node0.isReturn());
1221:       assertFalse(node0.isHook());
1222:       assertFalse(node0.isExprResult());
1223:       assertFalse(node0.isComma());
1224:       assertFalse(node0.isAssign());
1225:       assertFalse(node0.isTypeOf());
1226:       assertFalse(node0.hasMoreThanOneChild());
1227:       assertFalse(node0.isWith());
1228:       assertFalse(node0.isString());
1229:       assertFalse(node0.isWhile());
1230:       assertFalse(node0.isInc());
1231:       assertFalse(node0.isIn());
1232:       assertEquals((-1), node0.getSourcePosition());
1233:       assertFalse(node0.isSetterDef());
1234:       assertFalse(node0.isThrow());
1235:       assertFalse(node0.isContinue());
1236:       assertFalse(node0.isCast());
1237:       assertFalse(node0.isFunction());
1238:       assertFalse(node0.isFalse());
1239:       assertEquals((-571), node0.getType());
1240:       assertFalse(node0.isVoid());
1241:       assertFalse(node0.isTrue());
1242:       assertFalse(node0.isTry());
1243:       assertFalse(node0.isDefaultCase());
1244:       assertFalse(node0.isDebugger());
1245:       assertFalse(node0.isDelProp());
1246:       assertFalse(node0.isIf());
1247:       assertFalse(node0.isNE());
1248:       assertFalse(node0.isFor());
1249:       assertFalse(node0.isNull());
1250:       assertFalse(node0.isName());
1251:       assertFalse(node0.isBlock());
1252:       assertFalse(node0.isCall());
1253:       assertFalse(node0.isCatch());
1254:       assertFalse(node0.isRegExp());
1255:       assertFalse(node0.isCase());
1256:       assertFalse(node0.isNew());
1257:       assertFalse(node0.isDo());
1258:       assertFalse(node0.isSwitch());
1259:       assertFalse(node0.isAdd());
1260:       assertEquals((-1), node0.getCharno());
1261:       assertFalse(node0.isOr());
1262:       assertFalse(node0.isNumber());
1263:       assertFalse(node0.isGetterDef());
1264:       assertFalse(node0.isEmpty());
1265:       assertFalse(node0.isParamList());
1266:       assertFalse(node0.isStringKey());
1267:       assertFalse(node0.isAssignAdd());
1268:       assertFalse(node0.isLabelName());
1269:       assertEquals(0, node0.getChildCount());
1270:       assertFalse(node0.isLabel());
1271:       assertFalse(node0.isArrayLit());
1272:       assertFalse(node0.isVar());
1273:       assertFalse(node1.isEmpty());
1274:       assertFalse(node1.isFor());
1275:       assertFalse(node1.isIf());
1276:       assertFalse(node1.isArrayLit());
1277:       assertFalse(node1.isTry());
1278:       assertFalse(node1.isDelProp());
1279:       assertFalse(node1.isVoid());
1280:       assertEquals((-571), node1.getType());
1281:       assertFalse(node1.isFunction());
1282:       assertFalse(node1.isRegExp());
1283:       assertFalse(node1.isCase());
1284:       assertFalse(node1.isSwitch());
1285:       assertEquals((-1), node1.getCharno());
1286:       assertFalse(node1.isDebugger());
1287:       assertFalse(node1.isParamList());
1288:       assertFalse(node1.isString());
1289:       assertFalse(node1.isGetterDef());
1290:       assertFalse(node1.isThrow());
1291:       assertFalse(node1.isFalse());
1292:       assertFalse(node1.isHook());
1293:       assertFalse(node1.isBlock());
1294:       assertFalse(node1.isThis());
1295:       assertFalse(node1.isInstanceOf());
1296:       assertFalse(node1.isCatch());
1297:       assertEquals((-1), node1.getLineno());
1298:       assertFalse(node1.isSetterDef());
1299:       assertFalse(node1.isNE());
1300:       assertFalse(node1.isInc());
1301:       assertFalse(node1.isIn());
1302:       assertFalse(node1.isCast());
1303:       assertFalse(node1.isGetElem());
1304:       assertFalse(node1.hasOneChild());
1305:       assertFalse(node1.isLabelName());
1306:       assertFalse(node1.isLabel());
1307:       assertFalse(node1.isExprResult());
1308:       assertFalse(node1.isReturn());
1309:       assertFalse(node1.isDec());
1310:       assertFalse(node1.hasChildren());
1311:       assertFalse(node1.isAssign());
1312:       assertFalse(node1.hasMoreThanOneChild());
1313:       assertFalse(node1.isWith());
1314:       assertFalse(node1.isTypeOf());
1315:       assertFalse(node1.isContinue());
1316:       assertFalse(node1.isAnd());
1317:       assertFalse(node1.isWhile());
1318:       assertFalse(node1.isGetProp());
1319:       assertFalse(node1.isScript());
1320:       assertEquals((-1), node1.getSourcePosition());
1321:       assertFalse(node1.isNot());
1322:       assertFalse(node1.isNumber());
1323:       assertFalse(node1.isObjectLit());
1324:       assertFalse(node1.isStringKey());
1325:       assertFalse(node1.isVar());
1326:       assertFalse(node1.isCall());
1327:       assertFalse(node1.isBreak());
1328:       assertFalse(node1.isName());
1329:       assertFalse(node1.isComma());
1330:       assertEquals(0, node1.getChildCount());
1331:       assertFalse(node1.isDefaultCase());
1332:       assertFalse(node1.isAssignAdd());
1333:       assertFalse(node1.isDo());
1334:       assertFalse(node1.isNew());
1335:       assertFalse(node1.isNull());
1336:       assertFalse(node1.isTrue());
1337:       assertFalse(node1.isAdd());
1338:       assertFalse(node1.isOr());
1339:       
1340:       boolean boolean1 = node0.wasEmptyNode();
1341:       assertFalse(boolean1);
1342:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1344:       assertEquals(36, Node.QUOTED_PROP);
1345:       assertEquals(43, Node.IS_CONSTANT_NAME);
1346:       assertEquals(56, Node.CHANGE_TIME);
1347:       assertEquals(2, Node.POST_FLAG);
1348:       assertEquals(37, Node.OPT_ARG_NAME);
1349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1350:       assertEquals(47, Node.IS_DISPATCHER);
1351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1352:       assertEquals(8, Node.FLAG_NO_THROWS);
1353:       assertEquals(57, Node.LAST_PROP);
1354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1355:       assertEquals(55, Node.INFERRED_FUNCTION);
1356:       assertEquals(29, Node.JSDOC_INFO_PROP);
1357:       assertEquals(53, Node.INPUT_ID);
1358:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1359:       assertEquals(39, Node.EMPTY_BLOCK);
1360:       assertEquals(52, Node.LENGTH);
1361:       assertEquals(54, Node.SLASH_V);
1362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1363:       assertEquals(57, Node.REFLECTED_OBJECT);
1364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1365:       assertEquals(30, Node.VAR_ARGS_NAME);
1366:       assertEquals(49, Node.DIRECT_EVAL);
1367:       assertEquals(40, Node.ORIGINALNAME_PROP);
1368:       assertEquals(48, Node.DIRECTIVES);
1369:       assertEquals(32, Node.INCRDECR_PROP);
1370:       assertEquals(46, Node.IS_NAMESPACE);
1371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1372:       assertEquals(4095, Node.COLUMN_MASK);
1373:       assertEquals(12, Node.COLUMN_BITS);
1374:       assertEquals(50, Node.FREE_CALL);
1375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1376:       assertEquals(1, Node.DECR_FLAG);
1377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1378:       assertFalse(node0.equals((Object)node2));
1379:       assertFalse(boolean1 == boolean0);
1380:       assertSame(node0, node1);
1381:       assertFalse(node0.isScript());
1382:       assertFalse(node0.isAnd());
1383:       assertFalse(node0.hasOneChild());
1384:       assertFalse(node0.isGetProp());
1385:       assertFalse(node0.isObjectLit());
1386:       assertFalse(node0.isNot());
1387:       assertFalse(node0.hasChildren());
1388:       assertFalse(node0.isBreak());
1389:       assertFalse(node0.isDec());
1390:       assertFalse(node0.isGetElem());
1391:       assertFalse(node0.isThis());
1392:       assertFalse(node0.isInstanceOf());
1393:       assertEquals((-1), node0.getLineno());
1394:       assertFalse(node0.isReturn());
1395:       assertFalse(node0.isHook());
1396:       assertFalse(node0.isExprResult());
1397:       assertFalse(node0.isComma());
1398:       assertFalse(node0.isAssign());
1399:       assertFalse(node0.isTypeOf());
1400:       assertFalse(node0.hasMoreThanOneChild());
1401:       assertFalse(node0.isWith());
1402:       assertFalse(node0.isString());
1403:       assertFalse(node0.isWhile());
1404:       assertFalse(node0.isInc());
1405:       assertFalse(node0.isIn());
1406:       assertEquals((-1), node0.getSourcePosition());
1407:       assertFalse(node0.isSetterDef());
1408:       assertFalse(node0.isThrow());
1409:       assertFalse(node0.isContinue());
1410:       assertFalse(node0.isCast());
1411:       assertFalse(node0.isFunction());
1412:       assertFalse(node0.isFalse());
1413:       assertEquals((-571), node0.getType());
1414:       assertFalse(node0.isVoid());
1415:       assertFalse(node0.isTrue());
1416:       assertFalse(node0.isTry());
1417:       assertFalse(node0.isDefaultCase());
1418:       assertFalse(node0.isDebugger());
1419:       assertFalse(node0.isDelProp());
1420:       assertFalse(node0.isIf());
1421:       assertFalse(node0.isNE());
1422:       assertFalse(node0.isFor());
1423:       assertFalse(node0.isNull());
1424:       assertFalse(node0.isName());
1425:       assertFalse(node0.isBlock());
1426:       assertFalse(node0.isCall());
1427:       assertFalse(node0.isCatch());
1428:       assertFalse(node0.isRegExp());
1429:       assertFalse(node0.isCase());
1430:       assertFalse(node0.isNew());
1431:       assertFalse(node0.isDo());
1432:       assertFalse(node0.isSwitch());
1433:       assertFalse(node0.isAdd());
1434:       assertEquals((-1), node0.getCharno());
1435:       assertFalse(node0.isOr());
1436:       assertFalse(node0.isNumber());
1437:       assertFalse(node0.isGetterDef());
1438:       assertFalse(node0.isEmpty());
1439:       assertFalse(node0.isParamList());
1440:       assertFalse(node0.isStringKey());
1441:       assertFalse(node0.isAssignAdd());
1442:       assertFalse(node0.isLabelName());
1443:       assertEquals(0, node0.getChildCount());
1444:       assertFalse(node0.isLabel());
1445:       assertFalse(node0.isArrayLit());
1446:       assertFalse(node0.isVar());
1447:       
1448:       boolean boolean2 = node2.isCall();
1449:       assertFalse(boolean2);
1450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1451:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1452:       assertEquals(36, Node.QUOTED_PROP);
1453:       assertEquals(43, Node.IS_CONSTANT_NAME);
1454:       assertEquals(56, Node.CHANGE_TIME);
1455:       assertEquals(2, Node.POST_FLAG);
1456:       assertEquals(37, Node.OPT_ARG_NAME);
1457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1458:       assertEquals(47, Node.IS_DISPATCHER);
1459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(57, Node.LAST_PROP);
1462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1463:       assertEquals(55, Node.INFERRED_FUNCTION);
1464:       assertEquals(29, Node.JSDOC_INFO_PROP);
1465:       assertEquals(53, Node.INPUT_ID);
1466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1467:       assertEquals(39, Node.EMPTY_BLOCK);
1468:       assertEquals(52, Node.LENGTH);
1469:       assertEquals(54, Node.SLASH_V);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(57, Node.REFLECTED_OBJECT);
1472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1473:       assertEquals(30, Node.VAR_ARGS_NAME);
1474:       assertEquals(49, Node.DIRECT_EVAL);
1475:       assertEquals(40, Node.ORIGINALNAME_PROP);
1476:       assertEquals(48, Node.DIRECTIVES);
1477:       assertEquals(32, Node.INCRDECR_PROP);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1480:       assertEquals(4095, Node.COLUMN_MASK);
1481:       assertEquals(12, Node.COLUMN_BITS);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(1, Node.DECR_FLAG);
1485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1486:       assertEquals(37, Node.OPT_ARG_NAME);
1487:       assertEquals(2, Node.POST_FLAG);
1488:       assertEquals(32, Node.INCRDECR_PROP);
1489:       assertEquals(46, Node.IS_NAMESPACE);
1490:       assertEquals(47, Node.IS_DISPATCHER);
1491:       assertEquals(56, Node.CHANGE_TIME);
1492:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1493:       assertEquals(12, Node.COLUMN_BITS);
1494:       assertEquals(1, Node.DECR_FLAG);
1495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1498:       assertEquals(29, Node.JSDOC_INFO_PROP);
1499:       assertEquals(53, Node.INPUT_ID);
1500:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1501:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1502:       assertEquals(52, Node.LENGTH);
1503:       assertEquals(36, Node.QUOTED_PROP);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(49, Node.DIRECT_EVAL);
1506:       assertEquals(4095, Node.COLUMN_MASK);
1507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1509:       assertEquals(48, Node.DIRECTIVES);
1510:       assertEquals(8, Node.FLAG_NO_THROWS);
1511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1514:       assertEquals(50, Node.FREE_CALL);
1515:       assertEquals(55, Node.INFERRED_FUNCTION);
1516:       assertEquals(39, Node.EMPTY_BLOCK);
1517:       assertEquals(54, Node.SLASH_V);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(43, Node.IS_CONSTANT_NAME);
1520:       assertEquals(30, Node.VAR_ARGS_NAME);
1521:       assertEquals(40, Node.ORIGINALNAME_PROP);
1522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1523:       assertEquals(43, Node.IS_CONSTANT_NAME);
1524:       assertEquals(47, Node.IS_DISPATCHER);
1525:       assertEquals(2, Node.POST_FLAG);
1526:       assertEquals(37, Node.OPT_ARG_NAME);
1527:       assertEquals(4095, Node.COLUMN_MASK);
1528:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1529:       assertEquals(48, Node.DIRECTIVES);
1530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1531:       assertEquals(56, Node.CHANGE_TIME);
1532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1533:       assertEquals(57, Node.LAST_PROP);
1534:       assertEquals(36, Node.QUOTED_PROP);
1535:       assertEquals(8, Node.FLAG_NO_THROWS);
1536:       assertEquals(39, Node.EMPTY_BLOCK);
1537:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1538:       assertEquals(53, Node.INPUT_ID);
1539:       assertEquals(55, Node.INFERRED_FUNCTION);
1540:       assertEquals(29, Node.JSDOC_INFO_PROP);
1541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1542:       assertEquals(52, Node.LENGTH);
1543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1544:       assertEquals(57, Node.REFLECTED_OBJECT);
1545:       assertEquals(54, Node.SLASH_V);
1546:       assertEquals(30, Node.VAR_ARGS_NAME);
1547:       assertEquals(49, Node.DIRECT_EVAL);
1548:       assertEquals(40, Node.ORIGINALNAME_PROP);
1549:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1551:       assertEquals(32, Node.INCRDECR_PROP);
1552:       assertEquals(12, Node.COLUMN_BITS);
1553:       assertEquals(46, Node.IS_NAMESPACE);
1554:       assertEquals(1, Node.DECR_FLAG);
1555:       assertEquals(50, Node.FREE_CALL);
1556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1558:       assertFalse(node0.equals((Object)node2));
1559:       assertFalse(node1.equals((Object)node2));
1560:       assertFalse(node2.equals((Object)node1));
1561:       assertFalse(node2.equals((Object)node0));
1562:       assertFalse(boolean2 == boolean0);
1563:       assertTrue(boolean2 == boolean1);
1564:       assertSame(node0, node1);
1565:       assertSame(node1, node0);
1566:       assertFalse(node0.isScript());
1567:       assertFalse(node0.isAnd());
1568:       assertFalse(node0.hasOneChild());
1569:       assertFalse(node0.isGetProp());
1570:       assertFalse(node0.isObjectLit());
1571:       assertFalse(node0.isNot());
1572:       assertFalse(node0.hasChildren());
1573:       assertFalse(node0.isBreak());
1574:       assertFalse(node0.isDec());
1575:       assertFalse(node0.isGetElem());
1576:       assertFalse(node0.isThis());
1577:       assertFalse(node0.isInstanceOf());
1578:       assertEquals((-1), node0.getLineno());
1579:       assertFalse(node0.isReturn());
1580:       assertFalse(node0.isHook());
1581:       assertFalse(node0.isExprResult());
1582:       assertFalse(node0.isComma());
1583:       assertFalse(node0.isAssign());
1584:       assertFalse(node0.isTypeOf());
1585:       assertFalse(node0.hasMoreThanOneChild());
1586:       assertFalse(node0.isWith());
1587:       assertFalse(node0.isString());
1588:       assertFalse(node0.isWhile());
1589:       assertFalse(node0.isInc());
1590:       assertFalse(node0.isIn());
1591:       assertEquals((-1), node0.getSourcePosition());
1592:       assertFalse(node0.isSetterDef());
1593:       assertFalse(node0.isThrow());
1594:       assertFalse(node0.isContinue());
1595:       assertFalse(node0.isCast());
1596:       assertFalse(node0.isFunction());
1597:       assertFalse(node0.isFalse());
1598:       assertEquals((-571), node0.getType());
1599:       assertFalse(node0.isVoid());
1600:       assertFalse(node0.isTrue());
1601:       assertFalse(node0.isTry());
1602:       assertFalse(node0.isDefaultCase());
1603:       assertFalse(node0.isDebugger());
1604:       assertFalse(node0.isDelProp());
1605:       assertFalse(node0.isIf());
1606:       assertFalse(node0.isNE());
1607:       assertFalse(node0.isFor());
1608:       assertFalse(node0.isNull());
1609:       assertFalse(node0.isName());
1610:       assertFalse(node0.isBlock());
1611:       assertFalse(node0.isCall());
1612:       assertFalse(node0.isCatch());
1613:       assertFalse(node0.isRegExp());
1614:       assertFalse(node0.isCase());
1615:       assertFalse(node0.isNew());
1616:       assertFalse(node0.isDo());
1617:       assertFalse(node0.isSwitch());
1618:       assertFalse(node0.isAdd());
1619:       assertEquals((-1), node0.getCharno());
1620:       assertFalse(node0.isOr());
1621:       assertFalse(node0.isNumber());
1622:       assertFalse(node0.isGetterDef());
1623:       assertFalse(node0.isEmpty());
1624:       assertFalse(node0.isParamList());
1625:       assertFalse(node0.isStringKey());
1626:       assertFalse(node0.isAssignAdd());
1627:       assertFalse(node0.isLabelName());
1628:       assertEquals(0, node0.getChildCount());
1629:       assertFalse(node0.isLabel());
1630:       assertFalse(node0.isArrayLit());
1631:       assertFalse(node0.isVar());
1632:       assertFalse(node1.isEmpty());
1633:       assertFalse(node1.isFor());
1634:       assertFalse(node1.isIf());
1635:       assertFalse(node1.isArrayLit());
1636:       assertFalse(node1.isTry());
1637:       assertFalse(node1.isDelProp());
1638:       assertFalse(node1.isVoid());
1639:       assertEquals((-571), node1.getType());
1640:       assertFalse(node1.isFunction());
1641:       assertFalse(node1.isRegExp());
1642:       assertFalse(node1.isCase());
1643:       assertFalse(node1.isSwitch());
1644:       assertEquals((-1), node1.getCharno());
1645:       assertFalse(node1.isDebugger());
1646:       assertFalse(node1.isParamList());
1647:       assertFalse(node1.isString());
1648:       assertFalse(node1.isGetterDef());
1649:       assertFalse(node1.isThrow());
1650:       assertFalse(node1.isFalse());
1651:       assertFalse(node1.isHook());
1652:       assertFalse(node1.isBlock());
1653:       assertFalse(node1.isThis());
1654:       assertFalse(node1.isInstanceOf());
1655:       assertFalse(node1.isCatch());
1656:       assertEquals((-1), node1.getLineno());
1657:       assertFalse(node1.isSetterDef());
1658:       assertFalse(node1.isNE());
1659:       assertFalse(node1.isInc());
1660:       assertFalse(node1.isIn());
1661:       assertFalse(node1.isCast());
1662:       assertFalse(node1.isGetElem());
1663:       assertFalse(node1.hasOneChild());
1664:       assertFalse(node1.isLabelName());
1665:       assertFalse(node1.isLabel());
1666:       assertFalse(node1.isExprResult());
1667:       assertFalse(node1.isReturn());
1668:       assertFalse(node1.isDec());
1669:       assertFalse(node1.hasChildren());
1670:       assertFalse(node1.isAssign());
1671:       assertFalse(node1.hasMoreThanOneChild());
1672:       assertFalse(node1.isWith());
1673:       assertFalse(node1.isTypeOf());
1674:       assertFalse(node1.isContinue());
1675:       assertFalse(node1.isAnd());
1676:       assertFalse(node1.isWhile());
1677:       assertFalse(node1.isGetProp());
1678:       assertFalse(node1.isScript());
1679:       assertEquals((-1), node1.getSourcePosition());
1680:       assertFalse(node1.isNot());
1681:       assertFalse(node1.isNumber());
1682:       assertFalse(node1.isObjectLit());
1683:       assertFalse(node1.isStringKey());
1684:       assertFalse(node1.isVar());
1685:       assertFalse(node1.isCall());
1686:       assertFalse(node1.isBreak());
1687:       assertFalse(node1.isName());
1688:       assertFalse(node1.isComma());
1689:       assertEquals(0, node1.getChildCount());
1690:       assertFalse(node1.isDefaultCase());
1691:       assertFalse(node1.isAssignAdd());
1692:       assertFalse(node1.isDo());
1693:       assertFalse(node1.isNew());
1694:       assertFalse(node1.isNull());
1695:       assertFalse(node1.isTrue());
1696:       assertFalse(node1.isAdd());
1697:       assertFalse(node1.isOr());
1698:       assertFalse(node2.isWith());
1699:       assertFalse(node2.isScript());
1700:       assertFalse(node2.isExprResult());
1701:       assertFalse(node2.isAnd());
1702:       assertFalse(node2.isObjectLit());
1703:       assertFalse(node2.isNot());
1704:       assertFalse(node2.isBreak());
1705:       assertFalse(node2.isGetElem());
1706:       assertFalse(node2.isGetProp());
1707:       assertFalse(node2.isReturn());
1708:       assertEquals((-1), node2.getLineno());
1709:       assertFalse(node2.isInstanceOf());
1710:       assertFalse(node2.isHook());
1711:       assertFalse(node2.isComma());
1712:       assertFalse(node2.isThis());
1713:       assertFalse(node2.hasMoreThanOneChild());
1714:       assertFalse(node2.isTypeOf());
1715:       assertFalse(node2.isDec());
1716:       assertFalse(node2.isAssign());
1717:       assertFalse(node2.isSwitch());
1718:       assertFalse(node2.isCase());
1719:       assertFalse(node2.isNew());
1720:       assertFalse(node2.isDo());
1721:       assertFalse(node2.isAdd());
1722:       assertEquals((-1), node2.getCharno());
1723:       assertFalse(node2.isNumber());
1724:       assertFalse(node2.isOr());
1725:       assertFalse(node2.isGetterDef());
1726:       assertFalse(node2.isStringKey());
1727:       assertFalse(node2.isEmpty());
1728:       assertFalse(node2.isParamList());
1729:       assertFalse(node2.isArrayLit());
1730:       assertFalse(node2.isLabelName());
1731:       assertFalse(node2.isLabel());
1732:       assertFalse(node2.isAssignAdd());
1733:       assertFalse(node2.isVar());
1734:       assertFalse(node2.isDefaultCase());
1735:       assertFalse(node2.isTry());
1736:       assertFalse(node2.isVoid());
1737:       assertFalse(node2.isDebugger());
1738:       assertFalse(node2.isTrue());
1739:       assertTrue(node2.hasOneChild());
1740:       assertFalse(node2.isIf());
1741:       assertFalse(node2.isNull());
1742:       assertFalse(node2.isNE());
1743:       assertFalse(node2.isFor());
1744:       assertFalse(node2.isCall());
1745:       assertFalse(node2.isName());
1746:       assertFalse(node2.isDelProp());
1747:       assertEquals(1, node2.getChildCount());
1748:       assertFalse(node2.isBlock());
1749:       assertTrue(node2.hasChildren());
1750:       assertFalse(node2.isCatch());
1751:       assertFalse(node2.isRegExp());
1752:       assertFalse(node2.isWhile());
1753:       assertFalse(node2.isString());
1754:       assertFalse(node2.isInc());
1755:       assertFalse(node2.isIn());
1756:       assertEquals((-1), node2.getSourcePosition());
1757:       assertFalse(node2.isThrow());
1758:       assertFalse(node2.isSetterDef());
1759:       assertFalse(node2.isCast());
1760:       assertFalse(node2.isFunction());
1761:       assertFalse(node2.isContinue());
1762:       assertFalse(node2.isFalse());
1763:       assertEquals((-571), node2.getType());
1764:       
1765:       boolean boolean3 = node2.isSwitch();
1766:       assertFalse(boolean3);
1767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1769:       assertEquals(36, Node.QUOTED_PROP);
1770:       assertEquals(43, Node.IS_CONSTANT_NAME);
1771:       assertEquals(56, Node.CHANGE_TIME);
1772:       assertEquals(2, Node.POST_FLAG);
1773:       assertEquals(37, Node.OPT_ARG_NAME);
1774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1775:       assertEquals(47, Node.IS_DISPATCHER);
1776:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1777:       assertEquals(8, Node.FLAG_NO_THROWS);
1778:       assertEquals(57, Node.LAST_PROP);
1779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1780:       assertEquals(55, Node.INFERRED_FUNCTION);
1781:       assertEquals(29, Node.JSDOC_INFO_PROP);
1782:       assertEquals(53, Node.INPUT_ID);
1783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1784:       assertEquals(39, Node.EMPTY_BLOCK);
1785:       assertEquals(52, Node.LENGTH);
1786:       assertEquals(54, Node.SLASH_V);
1787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1788:       assertEquals(57, Node.REFLECTED_OBJECT);
1789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1790:       assertEquals(30, Node.VAR_ARGS_NAME);
1791:       assertEquals(49, Node.DIRECT_EVAL);
1792:       assertEquals(40, Node.ORIGINALNAME_PROP);
1793:       assertEquals(48, Node.DIRECTIVES);
1794:       assertEquals(32, Node.INCRDECR_PROP);
1795:       assertEquals(46, Node.IS_NAMESPACE);
1796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1797:       assertEquals(4095, Node.COLUMN_MASK);
1798:       assertEquals(12, Node.COLUMN_BITS);
1799:       assertEquals(50, Node.FREE_CALL);
1800:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1801:       assertEquals(1, Node.DECR_FLAG);
1802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1803:       assertEquals(37, Node.OPT_ARG_NAME);
1804:       assertEquals(2, Node.POST_FLAG);
1805:       assertEquals(32, Node.INCRDECR_PROP);
1806:       assertEquals(46, Node.IS_NAMESPACE);
1807:       assertEquals(47, Node.IS_DISPATCHER);
1808:       assertEquals(56, Node.CHANGE_TIME);
1809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1810:       assertEquals(12, Node.COLUMN_BITS);
1811:       assertEquals(1, Node.DECR_FLAG);
1812:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1813:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1815:       assertEquals(29, Node.JSDOC_INFO_PROP);
1816:       assertEquals(53, Node.INPUT_ID);
1817:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1818:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1819:       assertEquals(52, Node.LENGTH);
1820:       assertEquals(36, Node.QUOTED_PROP);
1821:       assertEquals(57, Node.REFLECTED_OBJECT);
1822:       assertEquals(49, Node.DIRECT_EVAL);
1823:       assertEquals(4095, Node.COLUMN_MASK);
1824:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1825:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1826:       assertEquals(48, Node.DIRECTIVES);
1827:       assertEquals(8, Node.FLAG_NO_THROWS);
1828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1829:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1831:       assertEquals(50, Node.FREE_CALL);
1832:       assertEquals(55, Node.INFERRED_FUNCTION);
1833:       assertEquals(39, Node.EMPTY_BLOCK);
1834:       assertEquals(54, Node.SLASH_V);
1835:       assertEquals(57, Node.LAST_PROP);
1836:       assertEquals(43, Node.IS_CONSTANT_NAME);
1837:       assertEquals(30, Node.VAR_ARGS_NAME);
1838:       assertEquals(40, Node.ORIGINALNAME_PROP);
1839:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1840:       assertEquals(43, Node.IS_CONSTANT_NAME);
1841:       assertEquals(47, Node.IS_DISPATCHER);
1842:       assertEquals(2, Node.POST_FLAG);
1843:       assertEquals(37, Node.OPT_ARG_NAME);
1844:       assertEquals(4095, Node.COLUMN_MASK);
1845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1846:       assertEquals(48, Node.DIRECTIVES);
1847:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1848:       assertEquals(56, Node.CHANGE_TIME);
1849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1850:       assertEquals(57, Node.LAST_PROP);
1851:       assertEquals(36, Node.QUOTED_PROP);
1852:       assertEquals(8, Node.FLAG_NO_THROWS);
1853:       assertEquals(39, Node.EMPTY_BLOCK);
1854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1855:       assertEquals(53, Node.INPUT_ID);
1856:       assertEquals(55, Node.INFERRED_FUNCTION);
1857:       assertEquals(29, Node.JSDOC_INFO_PROP);
1858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1859:       assertEquals(52, Node.LENGTH);
1860:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1861:       assertEquals(57, Node.REFLECTED_OBJECT);
1862:       assertEquals(54, Node.SLASH_V);
1863:       assertEquals(30, Node.VAR_ARGS_NAME);
1864:       assertEquals(49, Node.DIRECT_EVAL);
1865:       assertEquals(40, Node.ORIGINALNAME_PROP);
1866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1867:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1868:       assertEquals(32, Node.INCRDECR_PROP);
1869:       assertEquals(12, Node.COLUMN_BITS);
1870:       assertEquals(46, Node.IS_NAMESPACE);
1871:       assertEquals(1, Node.DECR_FLAG);
1872:       assertEquals(50, Node.FREE_CALL);
1873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1875:       assertFalse(node0.equals((Object)node2));
1876:       assertFalse(node1.equals((Object)node2));
1877:       assertFalse(node2.equals((Object)node1));
1878:       assertFalse(node2.equals((Object)node0));
1879:       assertFalse(boolean3 == boolean0);
1880:       assertTrue(boolean3 == boolean2);
1881:       assertTrue(boolean3 == boolean1);
1882:       assertSame(node0, node1);
1883:       assertSame(node1, node0);
1884:       assertFalse(node0.isScript());
1885:       assertFalse(node0.isAnd());
1886:       assertFalse(node0.hasOneChild());
1887:       assertFalse(node0.isGetProp());
1888:       assertFalse(node0.isObjectLit());
1889:       assertFalse(node0.isNot());
1890:       assertFalse(node0.hasChildren());
1891:       assertFalse(node0.isBreak());
1892:       assertFalse(node0.isDec());
1893:       assertFalse(node0.isGetElem());
1894:       assertFalse(node0.isThis());
1895:       assertFalse(node0.isInstanceOf());
1896:       assertEquals((-1), node0.getLineno());
1897:       assertFalse(node0.isReturn());
1898:       assertFalse(node0.isHook());
1899:       assertFalse(node0.isExprResult());
1900:       assertFalse(node0.isComma());
1901:       assertFalse(node0.isAssign());
1902:       assertFalse(node0.isTypeOf());
1903:       assertFalse(node0.hasMoreThanOneChild());
1904:       assertFalse(node0.isWith());
1905:       assertFalse(node0.isString());
1906:       assertFalse(node0.isWhile());
1907:       assertFalse(node0.isInc());
1908:       assertFalse(node0.isIn());
1909:       assertEquals((-1), node0.getSourcePosition());
1910:       assertFalse(node0.isSetterDef());
1911:       assertFalse(node0.isThrow());
1912:       assertFalse(node0.isContinue());
1913:       assertFalse(node0.isCast());
1914:       assertFalse(node0.isFunction());
1915:       assertFalse(node0.isFalse());
1916:       assertEquals((-571), node0.getType());
1917:       assertFalse(node0.isVoid());
1918:       assertFalse(node0.isTrue());
1919:       assertFalse(node0.isTry());
1920:       assertFalse(node0.isDefaultCase());
1921:       assertFalse(node0.isDebugger());
1922:       assertFalse(node0.isDelProp());
1923:       assertFalse(node0.isIf());
1924:       assertFalse(node0.isNE());
1925:       assertFalse(node0.isFor());
1926:       assertFalse(node0.isNull());
1927:       assertFalse(node0.isName());
1928:       assertFalse(node0.isBlock());
1929:       assertFalse(node0.isCall());
1930:       assertFalse(node0.isCatch());
1931:       assertFalse(node0.isRegExp());
1932:       assertFalse(node0.isCase());
1933:       assertFalse(node0.isNew());
1934:       assertFalse(node0.isDo());
1935:       assertFalse(node0.isSwitch());
1936:       assertFalse(node0.isAdd());
1937:       assertEquals((-1), node0.getCharno());
1938:       assertFalse(node0.isOr());
1939:       assertFalse(node0.isNumber());
1940:       assertFalse(node0.isGetterDef());
1941:       assertFalse(node0.isEmpty());
1942:       assertFalse(node0.isParamList());
1943:       assertFalse(node0.isStringKey());
1944:       assertFalse(node0.isAssignAdd());
1945:       assertFalse(node0.isLabelName());
1946:       assertEquals(0, node0.getChildCount());
1947:       assertFalse(node0.isLabel());
1948:       assertFalse(node0.isArrayLit());
1949:       assertFalse(node0.isVar());
1950:       assertFalse(node1.isEmpty());
1951:       assertFalse(node1.isFor());
1952:       assertFalse(node1.isIf());
1953:       assertFalse(node1.isArrayLit());
1954:       assertFalse(node1.isTry());
1955:       assertFalse(node1.isDelProp());
1956:       assertFalse(node1.isVoid());
1957:       assertEquals((-571), node1.getType());
1958:       assertFalse(node1.isFunction());
1959:       assertFalse(node1.isRegExp());
1960:       assertFalse(node1.isCase());
1961:       assertFalse(node1.isSwitch());
1962:       assertEquals((-1), node1.getCharno());
1963:       assertFalse(node1.isDebugger());
1964:       assertFalse(node1.isParamList());
1965:       assertFalse(node1.isString());
1966:       assertFalse(node1.isGetterDef());
1967:       assertFalse(node1.isThrow());
1968:       assertFalse(node1.isFalse());
1969:       assertFalse(node1.isHook());
1970:       assertFalse(node1.isBlock());
1971:       assertFalse(node1.isThis());
1972:       assertFalse(node1.isInstanceOf());
1973:       assertFalse(node1.isCatch());
1974:       assertEquals((-1), node1.getLineno());
1975:       assertFalse(node1.isSetterDef());
1976:       assertFalse(node1.isNE());
1977:       assertFalse(node1.isInc());
1978:       assertFalse(node1.isIn());
1979:       assertFalse(node1.isCast());
1980:       assertFalse(node1.isGetElem());
1981:       assertFalse(node1.hasOneChild());
1982:       assertFalse(node1.isLabelName());
1983:       assertFalse(node1.isLabel());
1984:       assertFalse(node1.isExprResult());
1985:       assertFalse(node1.isReturn());
1986:       assertFalse(node1.isDec());
1987:       assertFalse(node1.hasChildren());
1988:       assertFalse(node1.isAssign());
1989:       assertFalse(node1.hasMoreThanOneChild());
1990:       assertFalse(node1.isWith());
1991:       assertFalse(node1.isTypeOf());
1992:       assertFalse(node1.isContinue());
1993:       assertFalse(node1.isAnd());
1994:       assertFalse(node1.isWhile());
1995:       assertFalse(node1.isGetProp());
1996:       assertFalse(node1.isScript());
1997:       assertEquals((-1), node1.getSourcePosition());
1998:       assertFalse(node1.isNot());
1999:       assertFalse(node1.isNumber());
2000:       assertFalse(node1.isObjectLit());
2001:       assertFalse(node1.isStringKey());
2002:       assertFalse(node1.isVar());
2003:       assertFalse(node1.isCall());
2004:       assertFalse(node1.isBreak());
2005:       assertFalse(node1.isName());
2006:       assertFalse(node1.isComma());
2007:       assertEquals(0, node1.getChildCount());
2008:       assertFalse(node1.isDefaultCase());
2009:       assertFalse(node1.isAssignAdd());
2010:       assertFalse(node1.isDo());
2011:       assertFalse(node1.isNew());
2012:       assertFalse(node1.isNull());
2013:       assertFalse(node1.isTrue());
2014:       assertFalse(node1.isAdd());
2015:       assertFalse(node1.isOr());
2016:       assertFalse(node2.isWith());
2017:       assertFalse(node2.isScript());
2018:       assertFalse(node2.isExprResult());
2019:       assertFalse(node2.isAnd());
2020:       assertFalse(node2.isObjectLit());
2021:       assertFalse(node2.isNot());
2022:       assertFalse(node2.isBreak());
2023:       assertFalse(node2.isGetElem());
2024:       assertFalse(node2.isGetProp());
2025:       assertFalse(node2.isReturn());
2026:       assertEquals((-1), node2.getLineno());
2027:       assertFalse(node2.isInstanceOf());
2028:       assertFalse(node2.isHook());
2029:       assertFalse(node2.isComma());
2030:       assertFalse(node2.isThis());
2031:       assertFalse(node2.hasMoreThanOneChild());
2032:       assertFalse(node2.isTypeOf());
2033:       assertFalse(node2.isDec());
2034:       assertFalse(node2.isAssign());
2035:       assertFalse(node2.isSwitch());
2036:       assertFalse(node2.isCase());
2037:       assertFalse(node2.isNew());
2038:       assertFalse(node2.isDo());
2039:       assertFalse(node2.isAdd());
2040:       assertEquals((-1), node2.getCharno());
2041:       assertFalse(node2.isNumber());
2042:       assertFalse(node2.isOr());
2043:       assertFalse(node2.isGetterDef());
2044:       assertFalse(node2.isStringKey());
2045:       assertFalse(node2.isEmpty());
2046:       assertFalse(node2.isParamList());
2047:       assertFalse(node2.isArrayLit());
2048:       assertFalse(node2.isLabelName());
2049:       assertFalse(node2.isLabel());
2050:       assertFalse(node2.isAssignAdd());
2051:       assertFalse(node2.isVar());
2052:       assertFalse(node2.isDefaultCase());
2053:       assertFalse(node2.isTry());
2054:       assertFalse(node2.isVoid());
2055:       assertFalse(node2.isDebugger());
2056:       assertFalse(node2.isTrue());
2057:       assertTrue(node2.hasOneChild());
2058:       assertFalse(node2.isIf());
2059:       assertFalse(node2.isNull());
2060:       assertFalse(node2.isNE());
2061:       assertFalse(node2.isFor());
2062:       assertFalse(node2.isCall());
2063:       assertFalse(node2.isName());
2064:       assertFalse(node2.isDelProp());
2065:       assertEquals(1, node2.getChildCount());
2066:       assertFalse(node2.isBlock());
2067:       assertTrue(node2.hasChildren());
2068:       assertFalse(node2.isCatch());
2069:       assertFalse(node2.isRegExp());
2070:       assertFalse(node2.isWhile());
2071:       assertFalse(node2.isString());
2072:       assertFalse(node2.isInc());
2073:       assertFalse(node2.isIn());
2074:       assertEquals((-1), node2.getSourcePosition());
2075:       assertFalse(node2.isThrow());
2076:       assertFalse(node2.isSetterDef());
2077:       assertFalse(node2.isCast());
2078:       assertFalse(node2.isFunction());
2079:       assertFalse(node2.isContinue());
2080:       assertFalse(node2.isFalse());
2081:       assertEquals((-571), node2.getType());
2082:       
2083:       boolean boolean4 = node2.isNull();
2084:       assertFalse(boolean4);
2085:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2087:       assertEquals(36, Node.QUOTED_PROP);
2088:       assertEquals(43, Node.IS_CONSTANT_NAME);
2089:       assertEquals(56, Node.CHANGE_TIME);
2090:       assertEquals(2, Node.POST_FLAG);
2091:       assertEquals(37, Node.OPT_ARG_NAME);
2092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2093:       assertEquals(47, Node.IS_DISPATCHER);
2094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2095:       assertEquals(8, Node.FLAG_NO_THROWS);
2096:       assertEquals(57, Node.LAST_PROP);
2097:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2098:       assertEquals(55, Node.INFERRED_FUNCTION);
2099:       assertEquals(29, Node.JSDOC_INFO_PROP);
2100:       assertEquals(53, Node.INPUT_ID);
2101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(52, Node.LENGTH);
2104:       assertEquals(54, Node.SLASH_V);
2105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2106:       assertEquals(57, Node.REFLECTED_OBJECT);
2107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2108:       assertEquals(30, Node.VAR_ARGS_NAME);
2109:       assertEquals(49, Node.DIRECT_EVAL);
2110:       assertEquals(40, Node.ORIGINALNAME_PROP);
2111:       assertEquals(48, Node.DIRECTIVES);
2112:       assertEquals(32, Node.INCRDECR_PROP);
2113:       assertEquals(46, Node.IS_NAMESPACE);
2114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2115:       assertEquals(4095, Node.COLUMN_MASK);
2116:       assertEquals(12, Node.COLUMN_BITS);
2117:       assertEquals(50, Node.FREE_CALL);
2118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2119:       assertEquals(1, Node.DECR_FLAG);
2120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2121:       assertEquals(37, Node.OPT_ARG_NAME);
2122:       assertEquals(2, Node.POST_FLAG);
2123:       assertEquals(32, Node.INCRDECR_PROP);
2124:       assertEquals(46, Node.IS_NAMESPACE);
2125:       assertEquals(47, Node.IS_DISPATCHER);
2126:       assertEquals(56, Node.CHANGE_TIME);
2127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2128:       assertEquals(12, Node.COLUMN_BITS);
2129:       assertEquals(1, Node.DECR_FLAG);
2130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2133:       assertEquals(29, Node.JSDOC_INFO_PROP);
2134:       assertEquals(53, Node.INPUT_ID);
2135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2137:       assertEquals(52, Node.LENGTH);
2138:       assertEquals(36, Node.QUOTED_PROP);
2139:       assertEquals(57, Node.REFLECTED_OBJECT);
2140:       assertEquals(49, Node.DIRECT_EVAL);
2141:       assertEquals(4095, Node.COLUMN_MASK);
2142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2144:       assertEquals(48, Node.DIRECTIVES);
2145:       assertEquals(8, Node.FLAG_NO_THROWS);
2146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2149:       assertEquals(50, Node.FREE_CALL);
2150:       assertEquals(55, Node.INFERRED_FUNCTION);
2151:       assertEquals(39, Node.EMPTY_BLOCK);
2152:       assertEquals(54, Node.SLASH_V);
2153:       assertEquals(57, Node.LAST_PROP);
2154:       assertEquals(43, Node.IS_CONSTANT_NAME);
2155:       assertEquals(30, Node.VAR_ARGS_NAME);
2156:       assertEquals(40, Node.ORIGINALNAME_PROP);
2157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2158:       assertEquals(43, Node.IS_CONSTANT_NAME);
2159:       assertEquals(47, Node.IS_DISPATCHER);
2160:       assertEquals(2, Node.POST_FLAG);
2161:       assertEquals(37, Node.OPT_ARG_NAME);
2162:       assertEquals(4095, Node.COLUMN_MASK);
2163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2164:       assertEquals(48, Node.DIRECTIVES);
2165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2166:       assertEquals(56, Node.CHANGE_TIME);
2167:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2168:       assertEquals(57, Node.LAST_PROP);
2169:       assertEquals(36, Node.QUOTED_PROP);
2170:       assertEquals(8, Node.FLAG_NO_THROWS);
2171:       assertEquals(39, Node.EMPTY_BLOCK);
2172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2173:       assertEquals(53, Node.INPUT_ID);
2174:       assertEquals(55, Node.INFERRED_FUNCTION);
2175:       assertEquals(29, Node.JSDOC_INFO_PROP);
2176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2177:       assertEquals(52, Node.LENGTH);
2178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2179:       assertEquals(57, Node.REFLECTED_OBJECT);
2180:       assertEquals(54, Node.SLASH_V);
2181:       assertEquals(30, Node.VAR_ARGS_NAME);
2182:       assertEquals(49, Node.DIRECT_EVAL);
2183:       assertEquals(40, Node.ORIGINALNAME_PROP);
2184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2185:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2186:       assertEquals(32, Node.INCRDECR_PROP);
2187:       assertEquals(12, Node.COLUMN_BITS);
2188:       assertEquals(46, Node.IS_NAMESPACE);
2189:       assertEquals(1, Node.DECR_FLAG);
2190:       assertEquals(50, Node.FREE_CALL);
2191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2193:       assertFalse(node0.equals((Object)node2));
2194:       assertFalse(node1.equals((Object)node2));
2195:       assertFalse(node2.equals((Object)node1));
2196:       assertFalse(node2.equals((Object)node0));
2197:       assertTrue(boolean4 == boolean2);
2198:       assertTrue(boolean4 == boolean3);
2199:       assertFalse(boolean4 == boolean0);
2200:       assertTrue(boolean4 == boolean1);
2201:       assertSame(node0, node1);
2202:       assertSame(node1, node0);
2203:       assertFalse(node0.isScript());
2204:       assertFalse(node0.isAnd());
2205:       assertFalse(node0.hasOneChild());
2206:       assertFalse(node0.isGetProp());
2207:       assertFalse(node0.isObjectLit());
2208:       assertFalse(node0.isNot());
2209:       assertFalse(node0.hasChildren());
2210:       assertFalse(node0.isBreak());
2211:       assertFalse(node0.isDec());
2212:       assertFalse(node0.isGetElem());
2213:       assertFalse(node0.isThis());
2214:       assertFalse(node0.isInstanceOf());
2215:       assertEquals((-1), node0.getLineno());
2216:       assertFalse(node0.isReturn());
2217:       assertFalse(node0.isHook());
2218:       assertFalse(node0.isExprResult());
2219:       assertFalse(node0.isComma());
2220:       assertFalse(node0.isAssign());
2221:       assertFalse(node0.isTypeOf());
2222:       assertFalse(node0.hasMoreThanOneChild());
2223:       assertFalse(node0.isWith());
2224:       assertFalse(node0.isString());
2225:       assertFalse(node0.isWhile());
2226:       assertFalse(node0.isInc());
2227:       assertFalse(node0.isIn());
2228:       assertEquals((-1), node0.getSourcePosition());
2229:       assertFalse(node0.isSetterDef());
2230:       assertFalse(node0.isThrow());
2231:       assertFalse(node0.isContinue());
2232:       assertFalse(node0.isCast());
2233:       assertFalse(node0.isFunction());
2234:       assertFalse(node0.isFalse());
2235:       assertEquals((-571), node0.getType());
2236:       assertFalse(node0.isVoid());
2237:       assertFalse(node0.isTrue());
2238:       assertFalse(node0.isTry());
2239:       assertFalse(node0.isDefaultCase());
2240:       assertFalse(node0.isDebugger());
2241:       assertFalse(node0.isDelProp());
2242:       assertFalse(node0.isIf());
2243:       assertFalse(node0.isNE());
2244:       assertFalse(node0.isFor());
2245:       assertFalse(node0.isNull());
2246:       assertFalse(node0.isName());
2247:       assertFalse(node0.isBlock());
2248:       assertFalse(node0.isCall());
2249:       assertFalse(node0.isCatch());
2250:       assertFalse(node0.isRegExp());
2251:       assertFalse(node0.isCase());
2252:       assertFalse(node0.isNew());
2253:       assertFalse(node0.isDo());
2254:       assertFalse(node0.isSwitch());
2255:       assertFalse(node0.isAdd());
2256:       assertEquals((-1), node0.getCharno());
2257:       assertFalse(node0.isOr());
2258:       assertFalse(node0.isNumber());
2259:       assertFalse(node0.isGetterDef());
2260:       assertFalse(node0.isEmpty());
2261:       assertFalse(node0.isParamList());
2262:       assertFalse(node0.isStringKey());
2263:       assertFalse(node0.isAssignAdd());
2264:       assertFalse(node0.isLabelName());
2265:       assertEquals(0, node0.getChildCount());
2266:       assertFalse(node0.isLabel());
2267:       assertFalse(node0.isArrayLit());
2268:       assertFalse(node0.isVar());
2269:       assertFalse(node1.isEmpty());
2270:       assertFalse(node1.isFor());
2271:       assertFalse(node1.isIf());
2272:       assertFalse(node1.isArrayLit());
2273:       assertFalse(node1.isTry());
2274:       assertFalse(node1.isDelProp());
2275:       assertFalse(node1.isVoid());
2276:       assertEquals((-571), node1.getType());
2277:       assertFalse(node1.isFunction());
2278:       assertFalse(node1.isRegExp());
2279:       assertFalse(node1.isCase());
2280:       assertFalse(node1.isSwitch());
2281:       assertEquals((-1), node1.getCharno());
2282:       assertFalse(node1.isDebugger());
2283:       assertFalse(node1.isParamList());
2284:       assertFalse(node1.isString());
2285:       assertFalse(node1.isGetterDef());
2286:       assertFalse(node1.isThrow());
2287:       assertFalse(node1.isFalse());
2288:       assertFalse(node1.isHook());
2289:       assertFalse(node1.isBlock());
2290:       assertFalse(node1.isThis());
2291:       assertFalse(node1.isInstanceOf());
2292:       assertFalse(node1.isCatch());
2293:       assertEquals((-1), node1.getLineno());
2294:       assertFalse(node1.isSetterDef());
2295:       assertFalse(node1.isNE());
2296:       assertFalse(node1.isInc());
2297:       assertFalse(node1.isIn());
2298:       assertFalse(node1.isCast());
2299:       assertFalse(node1.isGetElem());
2300:       assertFalse(node1.hasOneChild());
2301:       assertFalse(node1.isLabelName());
2302:       assertFalse(node1.isLabel());
2303:       assertFalse(node1.isExprResult());
2304:       assertFalse(node1.isReturn());
2305:       assertFalse(node1.isDec());
2306:       assertFalse(node1.hasChildren());
2307:       assertFalse(node1.isAssign());
2308:       assertFalse(node1.hasMoreThanOneChild());
2309:       assertFalse(node1.isWith());
2310:       assertFalse(node1.isTypeOf());
2311:       assertFalse(node1.isContinue());
2312:       assertFalse(node1.isAnd());
2313:       assertFalse(node1.isWhile());
2314:       assertFalse(node1.isGetProp());
2315:       assertFalse(node1.isScript());
2316:       assertEquals((-1), node1.getSourcePosition());
2317:       assertFalse(node1.isNot());
2318:       assertFalse(node1.isNumber());
2319:       assertFalse(node1.isObjectLit());
2320:       assertFalse(node1.isStringKey());
2321:       assertFalse(node1.isVar());
2322:       assertFalse(node1.isCall());
2323:       assertFalse(node1.isBreak());
2324:       assertFalse(node1.isName());
2325:       assertFalse(node1.isComma());
2326:       assertEquals(0, node1.getChildCount());
2327:       assertFalse(node1.isDefaultCase());
2328:       assertFalse(node1.isAssignAdd());
2329:       assertFalse(node1.isDo());
2330:       assertFalse(node1.isNew());
2331:       assertFalse(node1.isNull());
2332:       assertFalse(node1.isTrue());
2333:       assertFalse(node1.isAdd());
2334:       assertFalse(node1.isOr());
2335:       assertFalse(node2.isWith());
2336:       assertFalse(node2.isScript());
2337:       assertFalse(node2.isExprResult());
2338:       assertFalse(node2.isAnd());
2339:       assertFalse(node2.isObjectLit());
2340:       assertFalse(node2.isNot());
2341:       assertFalse(node2.isBreak());
2342:       assertFalse(node2.isGetElem());
2343:       assertFalse(node2.isGetProp());
2344:       assertFalse(node2.isReturn());
2345:       assertEquals((-1), node2.getLineno());
2346:       assertFalse(node2.isInstanceOf());
2347:       assertFalse(node2.isHook());
2348:       assertFalse(node2.isComma());
2349:       assertFalse(node2.isThis());
2350:       assertFalse(node2.hasMoreThanOneChild());
2351:       assertFalse(node2.isTypeOf());
2352:       assertFalse(node2.isDec());
2353:       assertFalse(node2.isAssign());
2354:       assertFalse(node2.isSwitch());
2355:       assertFalse(node2.isCase());
2356:       assertFalse(node2.isNew());
2357:       assertFalse(node2.isDo());
2358:       assertFalse(node2.isAdd());
2359:       assertEquals((-1), node2.getCharno());
2360:       assertFalse(node2.isNumber());
2361:       assertFalse(node2.isOr());
2362:       assertFalse(node2.isGetterDef());
2363:       assertFalse(node2.isStringKey());
2364:       assertFalse(node2.isEmpty());
2365:       assertFalse(node2.isParamList());
2366:       assertFalse(node2.isArrayLit());
2367:       assertFalse(node2.isLabelName());
2368:       assertFalse(node2.isLabel());
2369:       assertFalse(node2.isAssignAdd());
2370:       assertFalse(node2.isVar());
2371:       assertFalse(node2.isDefaultCase());
2372:       assertFalse(node2.isTry());
2373:       assertFalse(node2.isVoid());
2374:       assertFalse(node2.isDebugger());
2375:       assertFalse(node2.isTrue());
2376:       assertTrue(node2.hasOneChild());
2377:       assertFalse(node2.isIf());
2378:       assertFalse(node2.isNull());
2379:       assertFalse(node2.isNE());
2380:       assertFalse(node2.isFor());
2381:       assertFalse(node2.isCall());
2382:       assertFalse(node2.isName());
2383:       assertFalse(node2.isDelProp());
2384:       assertEquals(1, node2.getChildCount());
2385:       assertFalse(node2.isBlock());
2386:       assertTrue(node2.hasChildren());
2387:       assertFalse(node2.isCatch());
2388:       assertFalse(node2.isRegExp());
2389:       assertFalse(node2.isWhile());
2390:       assertFalse(node2.isString());
2391:       assertFalse(node2.isInc());
2392:       assertFalse(node2.isIn());
2393:       assertEquals((-1), node2.getSourcePosition());
2394:       assertFalse(node2.isThrow());
2395:       assertFalse(node2.isSetterDef());
2396:       assertFalse(node2.isCast());
2397:       assertFalse(node2.isFunction());
2398:       assertFalse(node2.isContinue());
2399:       assertFalse(node2.isFalse());
2400:       assertEquals((-571), node2.getType());
2401:       
2402:       boolean boolean5 = node1.isReturn();
2403:       assertFalse(boolean5);
2404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2406:       assertEquals(36, Node.QUOTED_PROP);
2407:       assertEquals(43, Node.IS_CONSTANT_NAME);
2408:       assertEquals(56, Node.CHANGE_TIME);
2409:       assertEquals(2, Node.POST_FLAG);
2410:       assertEquals(37, Node.OPT_ARG_NAME);
2411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2412:       assertEquals(47, Node.IS_DISPATCHER);
2413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2414:       assertEquals(8, Node.FLAG_NO_THROWS);
2415:       assertEquals(57, Node.LAST_PROP);
2416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2417:       assertEquals(55, Node.INFERRED_FUNCTION);
2418:       assertEquals(29, Node.JSDOC_INFO_PROP);
2419:       assertEquals(53, Node.INPUT_ID);
2420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2421:       assertEquals(39, Node.EMPTY_BLOCK);
2422:       assertEquals(52, Node.LENGTH);
2423:       assertEquals(54, Node.SLASH_V);
2424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2425:       assertEquals(57, Node.REFLECTED_OBJECT);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(30, Node.VAR_ARGS_NAME);
2428:       assertEquals(49, Node.DIRECT_EVAL);
2429:       assertEquals(40, Node.ORIGINALNAME_PROP);
2430:       assertEquals(48, Node.DIRECTIVES);
2431:       assertEquals(32, Node.INCRDECR_PROP);
2432:       assertEquals(46, Node.IS_NAMESPACE);
2433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2434:       assertEquals(4095, Node.COLUMN_MASK);
2435:       assertEquals(12, Node.COLUMN_BITS);
2436:       assertEquals(50, Node.FREE_CALL);
2437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2438:       assertEquals(1, Node.DECR_FLAG);
2439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2440:       assertEquals(37, Node.OPT_ARG_NAME);
2441:       assertEquals(2, Node.POST_FLAG);
2442:       assertEquals(32, Node.INCRDECR_PROP);
2443:       assertEquals(46, Node.IS_NAMESPACE);
2444:       assertEquals(47, Node.IS_DISPATCHER);
2445:       assertEquals(56, Node.CHANGE_TIME);
2446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2447:       assertEquals(12, Node.COLUMN_BITS);
2448:       assertEquals(1, Node.DECR_FLAG);
2449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2452:       assertEquals(29, Node.JSDOC_INFO_PROP);
2453:       assertEquals(53, Node.INPUT_ID);
2454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2456:       assertEquals(52, Node.LENGTH);
2457:       assertEquals(36, Node.QUOTED_PROP);
2458:       assertEquals(57, Node.REFLECTED_OBJECT);
2459:       assertEquals(49, Node.DIRECT_EVAL);
2460:       assertEquals(4095, Node.COLUMN_MASK);
2461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2463:       assertEquals(48, Node.DIRECTIVES);
2464:       assertEquals(8, Node.FLAG_NO_THROWS);
2465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2468:       assertEquals(50, Node.FREE_CALL);
2469:       assertEquals(55, Node.INFERRED_FUNCTION);
2470:       assertEquals(39, Node.EMPTY_BLOCK);
2471:       assertEquals(54, Node.SLASH_V);
2472:       assertEquals(57, Node.LAST_PROP);
2473:       assertEquals(43, Node.IS_CONSTANT_NAME);
2474:       assertEquals(30, Node.VAR_ARGS_NAME);
2475:       assertEquals(40, Node.ORIGINALNAME_PROP);
2476:       assertTrue(boolean5 == boolean1);
2477:       assertTrue(boolean5 == boolean4);
2478:       assertTrue(boolean5 == boolean2);
2479:       assertFalse(boolean5 == boolean0);
2480:       assertTrue(boolean5 == boolean3);
2481:       assertFalse(node0.equals((Object)node2));
2482:       assertFalse(node1.equals((Object)node2));
2483:       assertSame(node0, node1);
2484:       assertSame(node1, node0);
2485:       assertFalse(node0.isScript());
2486:       assertFalse(node0.isAnd());
2487:       assertFalse(node0.hasOneChild());
2488:       assertFalse(node0.isGetProp());
2489:       assertFalse(node0.isObjectLit());
2490:       assertFalse(node0.isNot());
2491:       assertFalse(node0.hasChildren());
2492:       assertFalse(node0.isBreak());
2493:       assertFalse(node0.isDec());
2494:       assertFalse(node0.isGetElem());
2495:       assertFalse(node0.isThis());
2496:       assertFalse(node0.isInstanceOf());
2497:       assertEquals((-1), node0.getLineno());
2498:       assertFalse(node0.isReturn());
2499:       assertFalse(node0.isHook());
2500:       assertFalse(node0.isExprResult());
2501:       assertFalse(node0.isComma());
2502:       assertFalse(node0.isAssign());
2503:       assertFalse(node0.isTypeOf());
2504:       assertFalse(node0.hasMoreThanOneChild());
2505:       assertFalse(node0.isWith());
2506:       assertFalse(node0.isString());
2507:       assertFalse(node0.isWhile());
2508:       assertFalse(node0.isInc());
2509:       assertFalse(node0.isIn());
2510:       assertEquals((-1), node0.getSourcePosition());
2511:       assertFalse(node0.isSetterDef());
2512:       assertFalse(node0.isThrow());
2513:       assertFalse(node0.isContinue());
2514:       assertFalse(node0.isCast());
2515:       assertFalse(node0.isFunction());
2516:       assertFalse(node0.isFalse());
2517:       assertEquals((-571), node0.getType());
2518:       assertFalse(node0.isVoid());
2519:       assertFalse(node0.isTrue());
2520:       assertFalse(node0.isTry());
2521:       assertFalse(node0.isDefaultCase());
2522:       assertFalse(node0.isDebugger());
2523:       assertFalse(node0.isDelProp());
2524:       assertFalse(node0.isIf());
2525:       assertFalse(node0.isNE());
2526:       assertFalse(node0.isFor());
2527:       assertFalse(node0.isNull());
2528:       assertFalse(node0.isName());
2529:       assertFalse(node0.isBlock());
2530:       assertFalse(node0.isCall());
2531:       assertFalse(node0.isCatch());
2532:       assertFalse(node0.isRegExp());
2533:       assertFalse(node0.isCase());
2534:       assertFalse(node0.isNew());
2535:       assertFalse(node0.isDo());
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_254_1628160227009/com/google/javascript/rhino/Node_254_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_254_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_254_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_254_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.common.collect.Platform",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.FluentIterable",
354:       "com.google.common.collect.Iterables$2",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 10:43:47.616 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-571), "com.google.javascript.rhino.jstype.ArrowType");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(52, node_SideEffectFlags0.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(63, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(55, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(55, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags0.valueOf());
assertEquals(51, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(49, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(49, node_SideEffectFlags1.valueOf());
assertEquals(49, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags4.valueOf());

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());

Node node1 = node0.getAncestor(0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());

Node node2 = new Node((-571), node1, node0, 12, (-559));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertEquals((-571), node2.getType());

int int0 = node2.getSourcePosition();
assertEquals((-1), int0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertEquals((-571), node2.getType());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());

boolean boolean1 = node0.wasEmptyNode();
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(boolean1 == boolean0);
assertSame(node0, node1);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());

boolean boolean2 = node2.isCall();
assertFalse(boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertEquals((-571), node2.getType());

boolean boolean3 = node2.isSwitch();
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertEquals((-571), node2.getType());

boolean boolean4 = node2.isNull();
assertFalse(boolean4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals((-571), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertEquals((-571), node2.getType());

boolean boolean5 = node1.isReturn();
assertFalse(boolean5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals((-571), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());


[MASTER] 10:43:58.034 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:58.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:58.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:58.806 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:59.020 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:00.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:00.263 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:00.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:00.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:00.851 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:01.037 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:01.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:01.443 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:01.719 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:01.906 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:02.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:02.318 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:02.515 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:02.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:02.894 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:03.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:03.343 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:03.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:03.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:03.962 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:04.150 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:04.380 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:04.568 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:04.748 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:05.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:05.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:05.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:06.165 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:06.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:06.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:44:06.828 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/20
* Done!

* Computation finished
