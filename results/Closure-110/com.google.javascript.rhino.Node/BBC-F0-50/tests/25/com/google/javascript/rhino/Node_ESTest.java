/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 04:57:31 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(3709, 3709, 3709);
      node0.isSyntheticBlock();
      Node node1 = new Node(3709, (Node) null, (Node) null, node0, node0);
      node1.getLastChild();
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.setQuotedString();
      node1.isSwitch();
      node1.getFirstChild();
      node1.isFalse();
      node2.addChildBefore(node0, node1);
      int int0 = (-357);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = new Node((-445), (-445), (-445));
      Node node1 = new Node((-445), node0);
      node1.getDouble();
      // Undeclared exception!
      try { 
        node1.isVoid();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -445
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      String string0 = "P+,,J=~/q^[v0jUl";
      node0.isUnscopedQualifiedName();
      int int0 = 0;
      node0.detachChildren();
      Node node1 = new Node(0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getDirectives();
      Node node3 = node0.getChildBefore(node1);
      node3.getSourceFileName();
      Node node4 = Node.newString(string0, node0.ORIGINALNAME_PROP, int0);
      node4.setType(node0.STATIC_SOURCE_FILE);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node4, node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isOnlyModifiesThisCall();
      node0.setType(35);
      Node.extractLineno(0);
      node0.isString();
      node0.getQualifiedName();
      node0.isNumber();
      Node node1 = new Node(30, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.removeChildAfter(node1);
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber((-2215.0), 2357, 2357);
      Node.newString(29, "(:RT>'oaK");
      node0.children();
      node0.isSwitch();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2357);
      charArrayWriter0.append((CharSequence) "(:RT>'oaK", (-536870912), 812);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-104);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3081);
      node0.isWith();
      node0.isString();
      node0.setCharno(3081);
      node0.isScript();
      Node node1 = new Node(2297, node0);
      node0.isEquivalentTo(node1, false, false, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-1735), 2245, (-2509));
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      Node node3 = new Node((-1735), node2, node2, 29, 1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("W(=:x1I<&TU('$44e");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newNumber((double) 0, 3455, 0);
      Node node1 = new Node(3455, node0, node0, node0);
      Node node2 = new Node(3455, node1, node0, node1, node0);
      node2.useSourceInfoFromForTree(node1);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      simpleErrorReporter0.error("", "Object#Element", 51, 0);
      node0.isQualifiedName();
      node0.isAdd();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      SimpleErrorReporter.getMessage("=\"<@&xKAYiz:)}?ND", objectArray0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      templateType0.getPropertyNames();
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(templateType0, templateType0.NOT_A_CLASS);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property =\"<@&xKAYiz:)}?ND
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 53);
      node0.putProp(256, "NUMBER 0.0\n");
      node1.isEquivalentToTyped(node0);
      node0.clonePropsFrom(node1);
      node1.isParamList();
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = 1089;
      Node node0 = Node.newString(0, "yt", 1089, 1089);
      Node node1 = new Node(37, node0, 0, 39);
      node0.addChildrenAfter(node1, node1);
      Node node2 = null;
      try {
        node2 = new Node(int1, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      Node node1 = new Node(2, nodeArray0, 48, 53);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.addChildBefore(node1, node2);
      StaticSourceFile staticSourceFile0 = null;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("4 >Wo@kI|JX_i`^s2O`", (-1111), (-1111));
      Node node1 = new Node((-1564), node0, (-862048943), (-4468));
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node((-1564), node1, node0, node0);
      node2.setQuotedString();
      node2.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node2.SIDE_EFFECTS_ALL);
      node_SideEffectFlags0.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node1.isAnd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newString((-96), "", 50, 0);
      Node node1 = Node.newString("");
      Node node2 = new Node(12, node0, node0, node1);
      node2.isVar();
      node2.siblings();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(638, (Node) null);
      double double0 = (-5484.0286);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString(1777, "$*j;h5x?0h-v");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString(4095, "");
      Node node2 = node0.getChildBefore(node1);
      node2.getSourceFileName();
      node0.getType();
      // Undeclared exception!
      try { 
        Node.extractCharno(node0.FREE_CALL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node((-939), (Node) null, (Node) null, (Node) null, (Node) null, 0, 0);
      node0.children();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(2848);
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node0.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((-464.909));
      Node node1 = new Node((-647), node0, node0, 1618, 2391);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setType(0);
      String string0 = "M!{^\"Ea)GH>9W";
      int int0 = 147;
      Node node1 = Node.newString((String) null, 48, 0);
      int int1 = 2240;
      node1.getBooleanProp(int1);
      String string1 = "first new child has existing sibling";
      // Undeclared exception!
      try { 
        node0.mayMutateArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(0, "K%Yqz'*y.[");
      node0.isQuotedString();
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isCatch();
      node0.getBooleanProp(0);
      node0.setType((-1433));
      node1.setChangeTime(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3967), nodeArray0);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("STRING_TYPE", "second new child has existing parent", 114, 114);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(114, node0);
      Node node2 = new Node((-633), node1, node1, (-99), 12);
      node1.getQualifiedName();
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      jSTypeRegistry0.createInterfaceType("second new child has existing parent", node0, immutableList0);
      node2.detachChildren();
      node2.isNE();
      boolean boolean0 = true;
      node0.setVarArgs(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(5614, nodeArray0);
      Node node1 = new Node(5614, node0);
      node1.copyInformationFromForTree(node0);
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node0.COLUMN_BITS);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber((-1287.36799));
      Node.newString("r");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.getDirectives();
      Node node1 = new Node((-2511), nodeArray0, 46, 50);
      node0.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node2 = Node.newNumber((-1.0));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      node0.replaceChild(node2, node0);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(36);
      Node node1 = new Node(0, node0);
      Node node2 = null;
      Node node3 = new Node(36, node1, (Node) null, node1);
      int int1 = 474;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-3068);
      Node node0 = null;
      Node node1 = new Node((-3068), (Node) null, 4578, (-5186));
      Node node2 = new Node(int0, node1);
      // Undeclared exception!
      try { 
        node2.getChangeTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "<Any Type>";
      Node node0 = Node.newString("<Any Type>");
      int int0 = 2803;
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(2803);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node((-453));
      node0.setString("|{D,");
      node0.isUnscopedQualifiedName();
      double double0 = (-228.601965);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(3101.3840158505);
      Node node1 = new Node(116, node0, node0, node0, 50, 65536);
      node1.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setQuotedString();
      node1.isSwitch();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("T;");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node((-1735), 2245, (-2509));
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      node2.getJsDocBuilderForNode();
      node0.getFirstChild();
      node1.isFalse();
      node2.addChildBefore((Node) null, (Node) null);
      double double0 = 0.0;
      int int0 = 6;
      int int1 = 751;
      Node.newNumber(double0, int0, int1);
      int int2 = 300;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = Node.newNumber((-968.86836432), 32, (-2510));
      node1.isQualifiedName();
      node0.getDirectives();
      node1.getAncestors();
      node1.siblings();
      node1.isScript();
      node1.isCatch();
      node0.getBooleanProp(52);
      node1.setType(52);
      Node.newString((-96), "");
      node1.setChangeTime((-2173));
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.setVarArgs(false);
      node0.removeProp(0);
      node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3081);
      node0.isWith();
      node0.isString();
      node0.setCharno(3081);
      node0.isScript();
      Node node1 = new Node(2297, node0);
      node0.isEquivalentTo(node1, false, false, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      Node node3 = new Node((-1735), node2, node2, 29, 1);
      node3.getJsDocBuilderForNode();
      node3.addSuppression("change_time");
      node3.putBooleanProp((-2914), true);
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("<Any Type>");
      Node node1 = Node.newString(2803, "<Any Type>");
      Node node2 = Node.newString((-1093), (String) null, 36, 0);
      node2.children();
      node2.isEquivalentTo(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      char[] charArray0 = new char[9];
      char char0 = '}';
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) simpleErrorReporter0;
      Node node0 = new Node(116);
      Node node1 = new Node(116, node0, node0, node0, node0);
      node1.getProp(524288);
      objectArray0[1] = null;
      SimpleErrorReporter.getMessage("Object#Element", objectArray0);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node((-1735), 2242, (-2509));
      Node node1 = new Node(50, node0, node0, node0, node0, (-1735), 1);
      Node node2 = new Node((-1735), node1);
      Node node3 = new Node((-1735), node2, node2, 29, 1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("W(=:x1I<&TU('$44e");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newNumber((double) (-1801), 347, (-1442));
      Node node1 = new Node((-1801), node0, node0, node0, node0);
      Node node2 = new Node(31, node0);
      Node node3 = new Node(node0.REFLECTED_OBJECT, node0, node1, node2, node2.MAX_COLUMN_NUMBER, node0.IS_NAMESPACE);
      node1.copyInformationFrom(node3);
      node1.getDouble();
      // Undeclared exception!
      try { 
        node1.isVoid();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = new Node((-445), (-445), (-445));
      Node node1 = new Node((-445), node0);
      Node node2 = Node.newString(57, "!FL[WOr/|t-V`yv-&4z", 4754, (-2397));
      Node node3 = Node.newString("!FL[WOr/|t-V`yv-&4z");
      Node node4 = new Node(49, node2, node3, node0);
      node1.isVar();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3103);
      node0.isInc();
      node0.isString();
      node0.toString(false, false, true);
      Node node1 = new Node((-453), node0, node0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3081);
      node0.isWith();
      node0.isString();
      node0.setCharno(3081);
      node0.isScript();
      Node node1 = new Node(2297, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node((-1735), 2245, (-2509));
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      String string0 = "";
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("!");
      node0.isEquivalentTo(node2, false, false, true);
      node2.isDefaultCase();
      node1.getDouble();
      node0.addSuppression(string0);
      node2.isAdd();
      Node.extractLineno(node2.INPUT_ID);
      node1.getDouble();
      node2.removeFirstChild();
      String string1 = "|TDS3Hs?Kvj";
      int int0 = 2452;
      // Undeclared exception!
      try { 
        Node.newString(node1.INPUT_ID, string1, node1.LAST_PROP, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1735
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, 0, (-297));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)5;
      byte byte0 = (byte) (-35);
      Node node0 = new Node((byte) (-104));
      Node node1 = new Node(7, node0);
      Node node2 = new Node((byte) (-35), node1, node1, node0, node1, 57, 16);
      node2.isDo();
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[3] = byte1;
      byte byte2 = (byte)27;
      byteArray0[4] = byte2;
      byte byte3 = (byte)0;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      String string0 = "T;";
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.setQuotedString();
      node1.isSwitch();
      node1.getFirstChild();
      node1.isFalse();
      node2.setLength(42);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-1735);
      Node node0 = new Node((-1735), 2245, (-2509));
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      node0.isEquivalentTo((Node) null, true, true, true);
      Node node2 = new Node(int0, node1);
      node2.getJsDocBuilderForNode();
      Node node3 = node0.getFirstChild();
      node1.isFalse();
      node2.addChildBefore(node3, node3);
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("$*j;h5x?0h-v", 1777, 118);
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node((-676));
      node0.isQualifiedName();
      node1.isAdd();
      SimpleErrorReporter.getMessage((String) null, (Object[]) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      templateType0.getPropertyNames();
      String string0 = ",UAwmvK";
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(templateType0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node((-1735), (-1735), (-2509));
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 46, 56, 30);
      Node node2 = new Node((-2647), node0, node0, node1, node0);
      node2.getDirectives();
      node2.siblings();
      node0.checkTreeEquals(node1);
      node0.isScript();
      node1.isEquivalentToTyped(node2);
      // Undeclared exception!
      try { 
        node0.isCatch();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1735
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(42, nodeArray0);
      Node node2 = new Node(15, node0, node1, node0, 16, 53);
      int int0 = 2160;
      Node node3 = new Node(int0, node1);
      Node node4 = new Node(node1.QUOTED_PROP, node2, node1, node3.DIRECTIVES, node0.LAST_PROP);
      node0.getJsDocBuilderForNode();
      String string0 = "change_time";
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.isFromExterns();
      boolean boolean0 = node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3081);
      node0.isWith();
      node0.isString();
      node0.setCharno(3081);
      node0.isScript();
      Node node1 = new Node(2297, node0);
      node1.addChildrenToFront(node0);
      boolean boolean1 = false;
      node0.isEquivalentTo(node1, boolean1, boolean0, boolean0);
      node1.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(49);
      node0.getInputId();
      node0.putProp(0, (Object) null);
      node0.removeProp(36);
      boolean boolean0 = node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition((-453));
      boolean boolean1 = node0.isWith();
      Node node1 = new Node(39, node0, node0, node0);
      node1.isString();
      Node node2 = new Node((-94), node1, node1, node0);
      node2.setCharno(node1.NO_SIDE_EFFECTS);
      node2.isScript();
      Node node3 = new Node(node1.DIRECTIVES, node0);
      boolean boolean2 = false;
      Node node4 = new Node(node3.CHANGE_TIME, node1, node0, node3, node0);
      node4.isEquivalentTo(node2, boolean0, boolean2, boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = new Node((-683), (-683), 2103);
      Node node1 = new Node(55, node0);
      Node node2 = Node.newString("tly;7JW1h5;[s");
      node2.getDouble();
      node2.isVoid();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.isDefaultCase();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING tly;7JW1h5;[s is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newString((-96), "", 50, 0);
      Node node1 = Node.newString("");
      Node node2 = new Node(12, node0, node0, node1);
      node2.isVar();
      node2.siblings();
      node0.isSwitch();
      node2.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = new Node(21);
      Node node1 = new Node(42, node0, node0, 50, 57);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setQuotedString();
      int int0 = 52;
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.isFromExterns();
      node0.isComma();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isAnd();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      node0.getIndexOfChild(node1);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.mayMutateArguments();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3093);
      node0.isInc();
      node0.isString();
      node0.toString(true, false, true);
      Node node1 = new Node((-453), node0, node0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = Node.newNumber((-968.86836432), 32, (-2510));
      node1.isQualifiedName();
      node0.getDirectives();
      node1.getAncestors();
      node1.siblings();
      node1.isScript();
      node1.isCatch();
      node0.getBooleanProp(52);
      node1.setType(52);
      Node node2 = Node.newString((-96), "");
      node1.isIf();
      node2.isCase();
      node0.setWasEmptyNode(true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isAnd();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      node0.getIndexOfChild(node1);
      node0.getLineno();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3093, 1678, 111);
      Node node1 = new Node(3093, node0, node0, node0, node0);
      Node node2 = new Node((-582), node1);
      Node node3 = new Node((-16), node2, 49, 57);
      node3.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(53, node_SideEffectFlags0);
      node0.removeProp(53);
      node0.isFromExterns();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition((-835));
      Node node1 = new Node(54, node0, node0, node0, node0);
      node1.isWith();
      node1.isString();
      Node node2 = new Node((-4028), node0, 49, 50);
      int int0 = 1349;
      node2.setCharno(int0);
      node0.isScript();
      Node node3 = new Node(node2.MAX_COLUMN_NUMBER, node1);
      boolean boolean0 = false;
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = new Node((-683), (-683), 2103);
      Node node1 = new Node(55, node0);
      Node node2 = Node.newString("tly;7JW1h5;[s");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.getDirectives();
      node1.setDirectives((Set<String>) null);
      node1.setSourceEncodedPosition(1);
      node0.isInc();
      node2.isString();
      node0.toString(true, false, false);
      int int0 = 2453;
      Node node4 = new Node(int0, node3, node1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-220));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("");
      node0.putProp(0, node_SideEffectFlags3);
      node0.removeProp((-2511));
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags((-1287));
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isAnd();
      Node node1 = Node.newString("");
      node0.getIndexOfChild(node1);
      node1.getLineno();
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = new Node(1678, 1372, 1256);
      node0.setSideEffectFlags((-1508));
      node0.toStringTree();
      node0.isVar();
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = true;
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = new Node(46, 46, 12);
      Node node1 = new Node(12, node0, node0, node0, 12, (-772));
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node1, "incrdecr");
      jSDocInfo0.setThisType(jSTypeExpression0);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.getCharno();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("incrdecr");
      node_FileLevelJsDocBuilder0.append("GEf<8");
      Node node3 = new Node((-222), node0, node1, 1948, 57);
      node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      String string0 = "";
      node_FileLevelJsDocBuilder1.append(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node1.setSourceFileForTesting((String) null);
      Node node2 = new Node(131072);
      node2.replaceChildAfter(node1, node0);
      node1.setLineno(node2.IS_DISPATCHER);
      node1.isSetterDef();
      node0.isVoid();
      String string0 = "?^GDfxTg+";
      int int0 = 46;
      Node.newString(string0, node2.DIRECTIVES, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isOnlyModifiesThisCall();
      node0.setType(35);
      Node.extractLineno(0);
      Node node1 = new Node(54);
      Node node2 = node1.clonePropsFrom(node0);
      node1.isUnscopedQualifiedName();
      Node node3 = Node.newString(1678, "kW| 9+)@R3;O!4", 31, 112);
      node3.isTypeOf();
      node3.setChangeTime(38);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node1.setSideEffectFlags(node_SideEffectFlags3);
      node0.isComma();
      node3.toStringTree();
      node2.isScript();
      node1.addChildAfter(node2, node3);
      node1.isGetElem();
      node3.removeChild(node1);
      // Undeclared exception!
      try { 
        node3.isContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node(92, 57, 2774);
      Node node2 = new Node(32, node0);
      Node.newString("");
      node2.getDouble();
      node2.isVoid();
      Node node3 = node1.removeFirstChild();
      node1.isDefaultCase();
      node3.getString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node0.setWasEmptyNode(false);
      node1.isQualifiedName();
      node0.setVarArgs(false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node1, "b~M1*1xg>2 O");
      jSDocInfo0.setThisType(jSTypeExpression0);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.getCharno();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("YE6Z%X(~mQl");
      node_FileLevelJsDocBuilder0.append("Named type with empty name component");
      Node node3 = new Node(2, node1, node2, 2, (-772));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append((String) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      Node node3 = new Node((-1735), node2, node2, 29, 1);
      node3.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node3.addSuppression("change_time");
      node3.isEquivalentTo(node0, true, true, true);
      node3.putBooleanProp((-2914), true);
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      node0.putProp(0, locale_FilteringMode0);
      node0.removeProp(65536);
      node0.mayMutateArguments();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString((-2146), "r[PtF");
      node1.isInc();
      Node node2 = new Node(4095, node1, node0);
      node2.isString();
      node0.toString(true, false, false);
      Node node3 = new Node(30, node0, node1);
      node0.isArrayLit();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(1089, "yt", 1372, 1372);
      Node node1 = new Node(57, node0, (-3123), 43);
      node1.addChildrenAfter(node0, node0);
      int int0 = 1256;
      Node node2 = new Node(int0, node0, node1, node1, node1);
      Node node3 = new Node(node0.OPT_ARG_NAME, node0, node2, node0);
      Node.SideEffectFlags node_SideEffectFlags1 = null;
      try {
        node_SideEffectFlags1 = new Node.SideEffectFlags(node2.DECR_FLAG);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.extractLineno(119);
      Node node0 = new Node((-1852), 0, 2230);
      boolean boolean0 = node0.isTry();
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      Node node2 = new Node(2230, nodeArray0, (-1852), 212);
      int int0 = 147;
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node0, node0, node2, nodeArray0[2], int0, node2.ORIGINALNAME_PROP);
      node0.isEquivalentTo(node3, boolean0, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(1768, 1768, 1768);
      Node node1 = new Node(923, node0);
      Node node2 = new Node(1768, node1, node0);
      node2.isVar();
      // Undeclared exception!
      try { 
        node2.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node((-1735), (-1735), (-2509));
      node0.addChildToBack((Node) null);
      node0.detachChildren();
      Node.newNumber((double) node0.IS_NAMESPACE, node0.CHANGE_TIME, node0.VAR_ARGS_NAME);
      int int0 = (-2647);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = new Node((-2261));
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("position (", (-864), 770);
      Node node1 = new Node(1302, 313, 2453);
      node1.isVarArgs();
      node0.toStringTree();
      node1.getBooleanProp(36);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-220));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("");
      node0.putProp(0, node_SideEffectFlags3);
      node0.removeProp((-2511));
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(47, nodeArray0, 305, 43);
      node1.isScript();
      node0.isCatch();
      int int0 = 1599;
      nodeArray0[1].getBooleanProp(int0);
      int int1 = (-4096);
      // Undeclared exception!
      try { 
        nodeArray0[0].setType(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node[] nodeArray0 = null;
      Node node0 = new Node((-676), (Node[]) null);
      int int0 = 512;
      Node node1 = null;
      try {
        node1 = new Node(int0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node((-1761), 2245, (-2509));
      Node node1 = new Node((-1761), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1761), node1);
      node1.getJsDocBuilderForNode();
      node2.isTypeOf();
      node1.setChangeTime(669);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.srcref(node1);
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node1.isTry();
      node1.toStringTree();
      node0.isScript();
      node2.addChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1761
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isOnlyModifiesThisCall();
      node0.setType(35);
      Node.extractLineno(0);
      Node node1 = new Node(54);
      Node node2 = node1.clonePropsFrom(node0);
      node1.isUnscopedQualifiedName();
      Node node3 = Node.newString(1678, "kW| 9+)@R3;O!4", 31, 112);
      String string0 = "!";
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("!");
      node2.isEquivalentTo(node3, false, false, false);
      node3.isDefaultCase();
      node0.getDouble();
      node0.addSuppression(string0);
      node0.clonePropsFrom(node1);
      node2.isAdd();
      Node.extractLineno(node0.FLAG_ARGUMENTS_UNMODIFIED);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node1.removeFirstChild();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETELEM is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(57, "");
      node0.setChangeTime(445);
      node0.isWith();
      node0.setOptionalArg(false);
      node0.removeChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node(3093, node0, node0, node0, node0);
      node0.isSwitch();
      node0.getFirstChild();
      node0.isFalse();
      node0.setLength(2);
      node1.addChildBefore((Node) null, (Node) null);
      String string0 = "com.google.common.collect.RegularImmutableTable$Values";
      int int0 = 32;
      // Undeclared exception!
      try { 
        Node.newString(string0, node1.REFLECTED_OBJECT, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node1.removeChild(node0);
      node0.isContinue();
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-220));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("");
      node0.putProp(0, node_SideEffectFlags3);
      node0.removeProp((-2511));
      node0.isFromExterns();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(32);
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isComma();
      node0.toStringTree();
      node0.isScript();
      Node node1 = null;
      try {
        node1 = new Node(node0.JSDOC_INFO_PROP, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = 36;
      Node node0 = new Node(36, 94, 36);
      node0.detachChildren();
      Node node1 = Node.newNumber(3219.35, 10, 24);
      Node node2 = new Node(42, node1, node0, node1, node0);
      node0.getDirectives();
      node0.siblings();
      node1.checkTreeEquals(node2);
      node2.isScript();
      node0.isEquivalentToTyped(node2);
      node0.isCatch();
      // Undeclared exception!
      try { 
        node0.getBooleanProp(node1.FREE_CALL);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Object[] objectArray0 = new Object[8];
      Node node0 = Node.newString(13, "");
      node0.isLocalResultCall();
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) jSTypeRegistry0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      objectArray0[3] = (Object) jSTypeRegistry0;
      objectArray0[4] = (Object) jSTypeRegistry0;
      objectArray0[5] = (Object) jSTypeRegistry0;
      objectArray0[6] = (Object) jSTypeRegistry0;
      objectArray0[7] = (Object) simpleErrorReporter0;
      SimpleErrorReporter.getMessage("", objectArray0);
      JSType jSType0 = null;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node((-2511), (-2511), (-2361));
      Node node1 = Node.newString("");
      node0.addChildToBack(node1);
      node1.setSideEffectFlags(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node1.setSourceFileForTesting((String) null);
      Node node2 = new Node(131072);
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node3.isEquivalentTo(node1, false, false, false);
      node2.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node.extractLineno(119);
      Node node0 = new Node((-1852), 0, 2230);
      node0.isTry();
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[2] = node1;
      node1.checkTreeTypeAwareEqualsImpl(node0);
      nodeArray0[3] = node0;
      Node node2 = new Node(2230, nodeArray0, (-1852), 212);
      int int0 = 147;
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node0, node0, node2, nodeArray0[2], int0, node2.ORIGINALNAME_PROP);
      int int1 = 171;
      int int2 = 68;
      String string0 = "second new child has existing sibling";
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node0.isContinue();
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node0.getParent();
      node1.useSourceInfoFrom(node0);
      node1.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.setString((String) null);
      node0.setChangeTime(node2.INPUT_ID);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        node3.setJSType(jSType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SETTER_DEF 2848 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(18, "zz,'");
      node0.removeProp(1908);
      node0.isReturn();
      node0.detachChildren();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      node0.setIsSyntheticBlock(false);
      node0.mayMutateGlobalStateOrThrow();
      Node.extractLineno(132);
      node0.getAncestor(26);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node.extractLineno(119);
      Node node0 = new Node((-1852), 0, 2230);
      node0.isTry();
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[2] = node1;
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node0.mayMutateGlobalStateOrThrow();
      Node.extractLineno(32);
      node1.getAncestor((-2509));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node0.getParent();
      Node node3 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node3.detachChildren();
      node2.isBreak();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(18, "zz,'");
      node0.removeProp(1908);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(153);
      node1.setWasEmptyNode(false);
      node1.isAdd();
      node0.getQualifiedName();
      node1.useSourceInfoFrom(node0);
      node1.setString((String) null);
      node1.detachChildren();
      int int0 = (-136);
      node1.setChangeTime(int0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node3.isEquivalentTo(node1, false, false, false);
      node2.isOr();
      node0.isCatch();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "J4 'UCXU(C7}E<");
      node_SideEffectFlags1.setReturnsTainted();
      node1.setSourceFileForTesting("");
      Node node2 = new Node(53);
      node1.setLineno(50);
      node2.isSetterDef();
      node0.isContinue();
      Node node3 = new Node(56, node2, 0, 0);
      node3.addChildrenToBack(node2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node0.getParent();
      node1.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.setString((String) null);
      node0.setChangeTime(node2.INPUT_ID);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        node3.setJSType(jSType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SETTER_DEF 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      String string0 = "T;";
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isVar();
      node0.isOnlyModifiesArgumentsCall();
      node0.toString(false, false, false);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(15, nodeArray0);
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node0.setWasEmptyNode(true);
      node1.isQualifiedName();
      node0.setVarArgs(false);
      objectType0.isArrayType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.getCharno();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.getInputId();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray0);
      node0.isSwitch();
      node2.isFor();
      node2.isFunction();
      node2.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.setQuotedString();
      Node node4 = new Node(4095, node3);
      node_SideEffectFlags3.setMutatesGlobalState();
      node4.isNew();
      Node node5 = new Node(37, node2, 33, 154);
      node0.getChildCount();
      node2.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      node0.replaceChild(node1, node1);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node.extractLineno((-1955));
      Node node0 = null;
      Node node1 = new Node((-121), (Node) null);
      double double0 = 1897.986837;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3093, 1678, 111);
      Node node1 = new Node(3093, node0, node0, node0, node0);
      Node node2 = new Node((-582), node1);
      Node node3 = new Node((-16), node2, 15, 57);
      node3.getIndexOfChild(node0);
      Node.newString((-4356), "t6]Q<MhmK");
      node1.setChangeTime(42);
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node0.isContinue();
      node0.addChildrenToBack(node1);
      node0.hasOneChild();
      node1.getProp(46);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("\"v-hZzNt)DI#O%}OoM");
      Node node1 = new Node(29);
      node0.setLineno(51);
      node0.isSetterDef();
      node0.isContinue();
      node0.addChildrenToBack(node1);
      node0.hasMoreThanOneChild();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(57, node0, node0);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesArguments();
      Node node2 = new Node(56, node0, node1, node0, node1, 1, 49);
      node1.isUnscopedQualifiedName();
      node0.isAdd();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(2848);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.getParent();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node2.detachChildren();
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node0.putBooleanProp((-1852), false);
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node(3093, node0, node0, node0, node0);
      node0.isSwitch();
      node0.getFirstChild();
      node1.isScript();
      node0.isEquivalentToTyped((Node) null);
      node0.isCatch();
      int int0 = 26;
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1);
      Node node3 = new Node((-1735), node2, node2, 29, 1);
      node3.getJsDocBuilderForNode();
      node1.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.getParent();
      Node node4 = node0.useSourceInfoFrom(node1);
      node3.isReturn();
      node4.detachChildren();
      node4.isBreak();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "J4 'UCXU(C7}E<");
      node_SideEffectFlags1.setReturnsTainted();
      node1.setSourceFileForTesting("");
      Node node2 = new Node(12);
      node1.setLineno(15);
      node2.isSetterDef();
      node0.isContinue();
      Node node3 = new Node(40, node0, 4095, 54);
      node3.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = new Node(131072);
      node0.isTypeOf();
      node0.isTrue();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3093, 1678, 111);
      Node node1 = new Node(3093, node0, node0, node0, node0);
      Node node2 = new Node((-582), node1);
      Node node3 = node2.removeChildren();
      node3.getJSDocInfo();
      Node node4 = new Node((-16), node2, 49, 57);
      node4.getIndexOfChild(node0);
      node0.checkTreeEqualsImpl(node4);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.putProp(0, "r[PtF");
      node0.removeProp(0);
      node0.mayMutateArguments();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      node0.setSourceEncodedPosition(3093);
      node0.isInc();
      node0.isString();
      node0.toString(true, false, true);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node.extractLineno(119);
      Node node0 = new Node((-1852), 0, 2230);
      node0.isTry();
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((-1.0));
      Node.newString(37, "CASE");
      nodeArray0[2] = node1;
      node1.removeFirstChild();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node1.isCast();
      Node.extractLineno(32);
      node1.getAncestor((-2509));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(32);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(102);
      Node node1 = Node.newString(50, "r[PtF");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      Node node2 = null;
      Node node3 = node1.useSourceInfoIfMissingFromForTree((Node) null);
      node0.isFor();
      // Undeclared exception!
      try { 
        node3.useSourceInfoFromForTree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(436);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("Of");
      node0.setChangeTime(2954);
      Node node1 = new Node(111, node0);
      node1.putProp(12, node_SideEffectFlags1);
      node0.isNE();
      node0.isComma();
      node1.setDirectives((Set<String>) null);
      node1.setSourceEncodedPosition(65535);
      node1.isQualifiedName();
      node0.isString();
      node0.setCharno(51);
      node0.isScript();
      Node node2 = new Node(46, node1);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(53);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = node0.getParent();
      node0.isUnscopedQualifiedName();
      node0.isAdd();
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setChangeTime(53);
      JSType jSType0 = null;
      node2.addChildAfter(node1, node0);
      node2.setJSType(jSType0);
      node0.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node0.getStaticSourceFile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node0.copyInformationFromForTree(node1);
      node1.setCharno(36);
      node1.isScript();
      Node node2 = new Node(4, node0);
      node1.useSourceInfoIfMissingFromForTree(node2);
      Node node3 = new Node(32);
      node3.getChildBefore(node2);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setSourceFileForTesting("");
      Node node1 = Node.newString(15, "r[PtF");
      Node node2 = new Node(44, node0);
      node1.addChildrenToFront(node2);
      node2.isTypeOf();
      node2.isEquivalentTo(node0, false, false, false);
      node0.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 53;
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString("com.google.javascript.rhino.Node");
      nodeArray0[0] = node0;
      Node node1 = Node.newString((-563), "com.google.javascript.rhino.Node", 16, 52);
      nodeArray0[1] = node1;
      Node node2 = null;
      Node node3 = new Node(43, (Node) null, node0, (Node) null, (-563), 2);
      nodeArray0[2] = node3;
      ErrorReporter errorReporter0 = null;
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = new Node(48);
      node0.isVoid();
      node2.isCatch();
      node3.getBooleanProp(8);
      Node node4 = new Node(148, node2, node1, node3, (-3079), 102);
      node4.setType(56);
      node1.checkTreeEqualsImpl(node2);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.cloneNode();
      node0.isQualifiedName();
      Set<String> set0 = new TreeSet<String>();
      node2.siblings();
      node1.isScript();
      node0.isCatch();
      node0.getBooleanProp(4096);
      node1.setType(0);
      node2.setChangeTime(32);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addSuppression("change_time");
      node1.isEquivalentTo(node0, false, false, false);
      node0.putBooleanProp(57, false);
      Node node3 = Node.newString(4095, (String) null);
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "r[UvPtF";
      Node node0 = new Node(4096);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node2 = new Node(127, node1, node0, node0, 56, (-2437));
      node0.addChildToFront(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node3 = node0.getParent();
      Node node4 = new Node((-1017), node3, node1, 52, 4);
      node4.useSourceInfoFrom(node2);
      node4.isReturn();
      ObjectType objectType0 = null;
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(objectType0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      String string0 = "T;";
      Node node0 = Node.newString("T;", 31, 31);
      try { 
        node0.setDouble(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING T; 31 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = new Node(2169, (Node[]) null, (-2509), 131072);
      node0.isFor();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(2842);
      Node node1 = new Node(1112, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.getParent();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node2.detachChildren();
      node2.isNot();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.detachChildren();
      Node node1 = Node.newNumber(53.0, 132, 30);
      Node node2 = new Node(52, node1, node1, node1, node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.siblings();
      Node node3 = Node.newString(300, "", 102, 55);
      node3.checkTreeEquals(node0);
      node1.isScript();
      node1.isEquivalentToTyped(node2);
      node1.isCatch();
      node0.getBooleanProp(38);
      node2.setType(12);
      node2.checkTreeEqualsImpl(node3);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(102);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.getParent();
      Node node3 = node2.useSourceInfoFrom(node1);
      node0.isReturn();
      node1.detachChildren();
      node3.isFor();
      node1.getIntProp(105);
      node2.getLastSibling();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      Node node1 = new Node(12, 1, 52);
      node0.isVoid();
      node0.setChangeTime(2954);
      Node node2 = new Node(53, node1);
      node2.putProp(32, node1);
      node1.isNE();
      node1.isComma();
      node0.setDirectives((Set<String>) null);
      Node node3 = new Node(57, node1);
      node3.setSourceEncodedPosition(node0.NO_SIDE_EFFECTS);
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node1.isString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node((-1778), (-1778), (-1778));
      node0.isOptionalArg();
      node0.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[4];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      // Undeclared exception!
      try { 
        ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, (-1025), (-1320));
      node0.isSwitch();
      Node.mergeLineCharNo(37, 57);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node1.putIntProp(15, 4095);
      node3.isEquivalentTo(node1, false, false, false);
      node2.isOr();
      node0.isCatch();
      node1.getQualifiedName();
      node3.isTry();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      Node node4 = new Node(53, 310, 0);
      node4.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node4.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node5.isNumber();
      Node node6 = node4.cloneTree();
      node4.isTypeOf();
      node3.isTrue();
      node6.isInc();
      node0.getLastSibling();
      node4.isDo();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(97, 3093, 2);
      Node node1 = new Node(97, node0);
      int int0 = (-2562);
      Node node2 = node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node1.isOnlyModifiesThisCall();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node2.setSideEffectFlags(node_SideEffectFlags3);
      node1.setLineno(node2.IS_NAMESPACE);
      node1.setSideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node1.isContinue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_MOD
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(35, "R", 35, 35);
      int int0 = 9;
      node0.getExistingIntProp((-1455));
      node0.setSourceEncodedPositionForTree(int0);
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1455
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node0.setWasEmptyNode(true);
      node1.isQualifiedName();
      node0.setVarArgs(false);
      objectType0.isArrayType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.getCharno();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.addSuppression((String) null);
      node1.putBooleanProp((-766), true);
      node2.isInstanceOf();
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(37, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isFor();
      Node node3 = new Node((-3888), node1, node0, node0, 52, 39);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      node1.setQuotedString();
      Node node5 = new Node(49, node4);
      node_SideEffectFlags3.setMutatesGlobalState();
      node2.isNew();
      Node node6 = new Node(29, node4, 37, 12);
      node2.getChildCount();
      Node node7 = null;
      try {
        node7 = new Node(node3.INFERRED_FUNCTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node((-3098), (-3098), 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node0.getParent();
      node1.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.setChangeTime(53);
      node3.setJSType((JSType) null);
      node1.isSyntheticBlock();
      node2.isHook();
      node3.isNot();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.addChildrenToFront(node0);
      node1.isTypeOf();
      node0.setCharno(39);
      node0.isInstanceOf();
      Node node3 = new Node((-536870912), node2);
      node2.addChildrenToFront(node3);
      Node node4 = node2.removeFirstChild();
      node3.getChildCount();
      node1.getIndexOfChild(node4);
      Node.newNumber((double) 16, (-1426), 52);
      Node node5 = Node.newString(53, "GN", 39, 15);
      node5.cloneNode();
      node3.removeChildren();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      node2.setSourceEncodedPosition(32);
      Node node3 = new Node(30, node0);
      node3.isFor();
      Node node4 = new Node(56, 37, 4095);
      Node node5 = node0.useSourceInfoFromForTree(node4);
      Node node6 = new Node(38, 40, 47);
      node5.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node7 = Node.newString(0, "T*B1g0f&D[-J5X;");
      node7.isNumber();
      node0.cloneTree();
      node7.isTypeOf();
      node7.isTrue();
      Node node8 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node8.isInc();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isOnlyModifiesThisCall();
      node0.setType(35);
      Node.extractLineno(0);
      node0.isString();
      node0.getQualifiedName();
      node0.isNumber();
      Node node1 = node0.useSourceInfoFrom(node0);
      node0.removeChildAfter(node0);
      node1.isDo();
      // Undeclared exception!
      try { 
        node1.isFromExterns();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node2.getBooleanProp(8);
      node0.setType(33);
      node0.checkTreeEqualsImpl(node3);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.detachChildren();
      Node node1 = Node.newNumber(53.0, 132, 30);
      Node node2 = new Node(52, node1, node1, node1, node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.siblings();
      Node node3 = new Node(105);
      node3.setDirectives(hashSet0);
      node3.setSourceEncodedPosition(148);
      Node node4 = Node.newString(56, "Object#Element");
      node4.isInc();
      node1.isString();
      node3.toString(false, true, false);
      node4.isWhile();
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.isQualifiedName();
      node0.isAdd();
      node1.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.siblings();
      node1.checkTreeEquals(node0);
      node1.isScript();
      node0.isEquivalentToTyped(node1);
      node0.isCatch();
      node0.getBooleanProp(1334);
      node1.setType(39);
      node1.checkTreeEqualsImpl(node0);
      node1.isDefaultCase();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("\"v-hZzNt)DI#O%}OoM");
      Node node1 = new Node(29);
      node0.setLineno(51);
      Node.newNumber(53.0, 11, 29);
      node1.cloneNode();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString((String) null);
      node2.setSourceEncodedPosition(node0.INCRDECR_PROP);
      int int0 = 30;
      Node node3 = new Node(int0, node0);
      node3.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        node3.isTypeOf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node2.getChildCount();
      node2.getIndexOfChild(node0);
      Node.newNumber((double) 1, 609, 47);
      node2.cloneNode();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      node1.cloneTree();
      node1.getAncestor(1);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("'c^#[e`e'6]^sU", 536, 819);
      node0.getAncestors();
      Node node1 = null;
      node0.getIndexOfChild((Node) null);
      Node node2 = Node.newNumber((-1.0), 13, 101);
      node2.siblings();
      InputId inputId0 = new InputId("'c^#[e`e'6]^sU");
      node0.setInputId(inputId0);
      Node node3 = node0.copyInformationFromForTree((Node) null);
      node3.isSwitch();
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node1);
      int int0 = 86;
      Node node5 = Node.newNumber((double) node2.COLUMN_MASK, node3.SIDE_EFFECTS_ALL, int0);
      node5.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node((-3098), (-3098), 4096);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = node0.getParent();
      node0.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setChangeTime(53);
      node2.setJSType((JSType) null);
      node1.isHook();
      node2.isNot();
      node1.replaceChildAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isGetElem();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.checkTreeEqualsImpl(node2);
      node2.toString();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node0.isString();
      node2.isWhile();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(35, "R", 35, 35);
      node0.setSourceEncodedPositionForTree(9);
      node0.isEmpty();
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setThrows();
      node0.getSourceOffset();
      Node.extractCharno(46);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("T;", (-1363), (-1363));
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(124);
      Node node1 = Node.newString(8, "com.google.common.collect.Iterators$11");
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags6.setAllFlags();
      node1.isFor();
      Node node2 = new Node(636, node1, node0, node1, (-848), 0);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node2.setQuotedString();
      int int0 = 2902;
      Node node4 = new Node(int0, node2);
      node_SideEffectFlags4.setMutatesGlobalState();
      node3.isNew();
      Node node5 = new Node(node0.DECR_FLAG, node4, node3.REFLECTED_OBJECT, node4.QUOTED_PROP);
      // Undeclared exception!
      try { 
        node5.getChildCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(38, "R", 38, 38);
      node0.wasEmptyNode();
      int int0 = 9;
      node0.isOnlyModifiesThisCall();
      node0.getExistingIntProp((-1455));
      node0.setSourceEncodedPositionForTree(int0);
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1455
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      node2.addChildrenToFront(node2);
      node1.isTypeOf();
      node1.putIntProp(15, 4095);
      node1.isEquivalentTo(node1, false, false, false);
      node2.isOr();
      node0.isCatch();
      node1.getQualifiedName();
      node0.isTry();
      node0.isBlock();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      int int0 = 8;
      Node node0 = new Node(123, nodeArray0, 8, 132);
      Node node1 = Node.newString(43, "9MKT)LsK\"", 4649, (-986));
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newNumber((double) 57, 2452, 36);
      node2.isUnscopedQualifiedName();
      node2.putProp(42, node0);
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      boolean boolean0 = true;
      node3.setVarArgs(boolean0);
      node2.isComma();
      node1.getChildAtIndex(int0);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(53, 310, 0);
      node3.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node4.isNumber();
      Node node5 = new Node(38, node2, 16, 37);
      node3.isTypeOf();
      node3.isTrue();
      node5.isInc();
      node0.getLastSibling();
      node3.isDo();
      node1.isObjectLit();
      node3.setDouble(48);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      Node node2 = node1.cloneTree();
      Node node3 = new Node(48, node1, node2, node1, node0);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node((-1735));
      Node node1 = new Node(1955, 4685, 49);
      node1.isTry();
      node1.getSourceOffset();
      Node node2 = Node.newNumber(53.0);
      Node node3 = new Node(2, node0, node1, node2, node0, 48, 55);
      Node node4 = new Node(47, node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      boolean boolean0 = true;
      node4.setIsSyntheticBlock(boolean0);
      node4.isCast();
      Node.extractLineno(node4.OPT_ARG_NAME);
      int int0 = 115;
      // Undeclared exception!
      try { 
        node1.getAncestor(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "J4 'UCXU(C7}E<");
      node_SideEffectFlags1.setReturnsTainted();
      node1.setSourceFileForTesting("");
      Node node2 = new Node(12);
      node1.setLineno(15);
      node2.isSetterDef();
      node0.isContinue();
      Node node3 = new Node(40, node0, 4095, 54);
      node3.isCatch();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString((-1017), "node is not a child");
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(131072);
      node0.setLineno(47);
      node0.isSetterDef();
      node0.isContinue();
      node0.addChildrenToBack(node1);
      Node.newNumber((double) 36, 39, 1182);
      node1.cloneNode();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.detachChildren();
      Node node1 = Node.newNumber(53.0, 132, 30);
      Node node2 = new Node(52, node1, node1, node1, node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.siblings();
      Node node3 = Node.newString(300, "", 102, 55);
      node3.checkTreeEquals(node0);
      node1.isScript();
      node3.isFromExterns();
      node1.isEquivalentToTyped(node2);
      node1.isCatch();
      node0.getBooleanProp(38);
      node2.setType(12);
      node2.checkTreeEqualsImpl(node3);
      node0.isDefaultCase();
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = Node.newNumber((-968.86836432), 32, (-2510));
      node1.isQualifiedName();
      node0.getDirectives();
      node1.getAncestors();
      node1.isScript();
      node1.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getBooleanProp(52);
      node1.setType(52);
      Node node2 = Node.newString((-96), "");
      node1.isIf();
      node2.isCase();
      node0.setWasEmptyNode(true);
      node0.wasEmptyNode();
      Node.newString(48, "", 43, 119);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newString("", (-1981), (-1981));
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = new Node(122, 51, 50);
      Node node2 = new Node(54, node0, node0, node1, (-1037), 39);
      node2.setSourceEncodedPositionForTree(1);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      node0.isVar();
      node2.isOnlyModifiesArgumentsCall();
      node1.toString(true, false, false);
      node2.getDirectives();
      node1.setDirectives((Set<String>) null);
      node2.isFalse();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node((-1778), (-1778), (-1778));
      node0.isOptionalArg();
      node0.isIn();
      node0.setSourceEncodedPositionForTree(52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isNot();
      node0.isName();
      JSType[] jSTypeArray0 = new JSType[4];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      // Undeclared exception!
      try { 
        immutableList0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node0.isString();
      node3.cloneTree();
      node0.getCharno();
      node2.isCase();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("jZ1gt.+RR<ylM", 31, 31);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(37, "jZ1gt.+RR<ylM");
      node_SideEffectFlags1.setAllFlags();
      node1.isFor();
      Node node2 = new Node((-3888), node1, node0, node0, 52, 39);
      node_SideEffectFlags2.setThrows();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.setQuotedString();
      Node node4 = new Node(49, node3);
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.isNew();
      node2.cloneTree();
      Node node5 = new Node(29, node3, 37, 12);
      node0.getChildCount();
      Node node6 = null;
      try {
        node6 = new Node(node2.INFERRED_FUNCTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, (-16), (-16));
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node0.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node2.addSuppression("change_time");
      node1.isFor();
      node2.putBooleanProp((-2914), true);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.isDebugger();
      node0.isAdd();
      node1.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node1.addSuppression("change_time");
      Node node2 = new Node(2, 1001, (-1523));
      node1.isReturn();
      Node node3 = Node.newNumber((double) 2);
      node3.detachChildren();
      node3.isNot();
      node3.checkTreeEqualsImpl(node2);
      node3.addChildrenAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node.extractLineno(119);
      Node node0 = new Node((-1852), 0, 2230);
      node0.isNE();
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((-1.0));
      Node.newString(37, "CASE");
      nodeArray0[2] = node1;
      Node node2 = Node.newString(12, "CASE", 52, 29);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node1.isCast();
      Node.extractLineno(32);
      node1.getAncestor(46);
      node0.isNew();
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.isQualifiedName();
      node0.isAdd();
      node1.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node1.addSuppression("change_time");
      node1.getSideEffectFlags();
      Node node2 = new Node(2, 1001, (-1523));
      node1.isReturn();
      Node node3 = Node.newNumber((double) 2);
      node3.detachChildren();
      node3.isNot();
      node3.checkTreeEqualsImpl(node2);
      node3.addChildrenAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(53);
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node0.getParent();
      Node node3 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node3.detachChildren();
      node2.isBreak();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = (-16);
      Node node0 = Node.newNumber((double) (-16));
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -16.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((-1.0), 98, 1950);
      Node node1 = new Node(1950, node0);
      Node node2 = new Node(9, node1, 1, 1950);
      node2.isQuotedString();
      Node node3 = new Node(43, node2, node1);
      node2.hasChildren();
      node2.isLocalResultCall();
      node3.addChildrenToFront(node2);
      // Undeclared exception!
      try { 
        node0.srcrefTree(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, (-16), (-16));
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node0.getJsDocBuilderForNode();
      node1.isOptionalArg();
      int int0 = (-2914);
      boolean boolean0 = true;
      node2.addSuppression("change_time");
      File file0 = MockFile.createTempFile("EzwFo!", "change_time");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      node2.appendStringTree(mockPrintWriter0);
      node1.isFor();
      node2.putBooleanProp(int0, boolean0);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node0.isString();
      node1.isSetterDef();
      node1.isContinue();
      Node node4 = new Node((-150), node1, 48, 43);
      node2.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = (-15);
      Node node0 = new Node((-15), (-15), (-15));
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -15
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(123, nodeArray0, 8, 132);
      node0.setLength((-986));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node1 = Node.newString(43, "9MKT)LsK\"", 4649, (-986));
      Node node2 = Node.newNumber((double) 57, 2452, 36);
      node2.isUnscopedQualifiedName();
      node2.putProp(42, node0);
      Node node3 = Node.newString(615, "*c$q)hrJl");
      node1.isIf();
      node3.isCase();
      node3.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("r[PtF", 2944, 42);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isCatch();
      node0.getBooleanProp(48);
      node0.setType(63);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString((-1954), "r[PtF");
      Node node2 = Node.newNumber(3203.182543512);
      Node node3 = new Node(206, node1, node2, node2, node1, 43, 2);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node3);
      node4.setVarArgs(true);
      node0.isComma();
      node0.getChildAtIndex(148);
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-641), (Node) null, (Node) null);
      String string0 = "/KEyf40H(";
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newNumber((-1674.072), 4, 54);
      node0.hasChildren();
      node0.setSourceEncodedPosition(120);
      Node.extractLineno(1);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      node0.isExprResult();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isCatch();
      node0.getBooleanProp(52);
      Node.newString(116, "");
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4112);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node3 = node2.cloneNode();
      node0.isQualifiedName();
      TreeSet<String> treeSet2 = new TreeSet<String>();
      node2.siblings();
      node1.isScript();
      node3.isReturn();
      node3.detachChildren();
      node2.isNot();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("\"v-hZzNt)DI#O%}OoM");
      Node node1 = new Node(29);
      node0.setLineno(51);
      node0.isSetterDef();
      node0.isContinue();
      node0.addChildrenToBack(node1);
      node1.isQuotedString();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node0.isString();
      node0.getCharno();
      node2.isCase();
      node0.isVoid();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      node1.isEmpty();
      node2.getJsDocBuilderForNode();
      Node node3 = new Node(4, node1, node0, node1, node0);
      Node node4 = new Node(node1.MAX_COLUMN_NUMBER);
      node4.cloneTree();
      int int0 = 110;
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node0.setSourceFileForTesting("\"v-hZzNt)DI#O%}OoM");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(29);
      node0.setLineno(51);
      node0.isContinue();
      node0.addChildrenToBack(node1);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(296, "");
      node0.getLength();
      Node node1 = node0.cloneTree();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(57, "");
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.isAnd();
      Node node1 = Node.newString(296, "");
      Node node2 = new Node(46, node0, node1, node0, node0);
      node2.cloneTree();
      node2.getCharno();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)5;
      byte byte0 = (byte) (-35);
      Node node0 = new Node((byte) (-104));
      Node node1 = new Node(7, node0);
      node1.clonePropsFrom(node0);
      Node node2 = new Node((byte) (-35), node1, node1, node0, node1, 57, 16);
      node2.isDo();
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[3] = byte1;
      byte byte2 = (byte)27;
      byteArray0[4] = byte2;
      byte byte3 = (byte)0;
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(102);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isAnd();
      Node node2 = new Node(57, node1, node0, node1, node0, 92, 15);
      Node node3 = node2.cloneTree();
      int int0 = 35;
      node3.getAncestor(int0);
      node3.getCharno();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = node0.getParent();
      node0.useSourceInfoFrom((Node) null);
      node1.isReturn();
      // Undeclared exception!
      try { 
        node1.detachChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.checkTreeEquals(node0);
      node2.isScript();
      node0.cloneTree();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("r[PtF", 2944, 42);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isThrow();
      node0.isCatch();
      node0.getBooleanProp(48);
      node0.setType(63);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(119, "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList");
      Node.newNumber((double) 15);
      Node node2 = Node.newString("7H]m*z");
      Node node3 = new Node(38, node1, node2, node1, node2, 1, 29);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setVarArgs(false);
      node2.isComma();
      node4.getChildAtIndex((-4126));
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node(8, node0, node0, 12, 49);
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node2.getJsDocBuilderForNode();
      node1.isOptionalArg();
      Node node3 = new Node(50, 29, 40);
      node2.setDouble(4095);
      node0.isReturn();
      double double0 = 0.0;
      Node.newNumber(double0);
      node1.detachChildren();
      // Undeclared exception!
      try { 
        node2.isNot();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1735
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceEncodedPosition((-3556));
      node0.isInc();
      node0.isString();
      node0.toString(false, false, false);
      Node node1 = new Node(38, node0, node0);
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(498);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      node0.toStringTree();
      node0.hasOneChild();
      node0.isQuotedString();
      Node node1 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node1.getNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 498
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "%rd1";
      Node node0 = Node.newString("%rd1");
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.isDebugger();
      node0.isAdd();
      node1.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node1.addSuppression("change_time");
      node1.setType(31);
      Node node2 = new Node(2, 1001, (-1523));
      node1.isReturn();
      Node node3 = Node.newNumber((double) 2);
      node3.detachChildren();
      node3.isNot();
      node3.checkTreeEqualsImpl(node2);
      node1.getChangeTime();
      node3.addChildrenAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.isDebugger();
      node0.isAdd();
      node1.getJsDocBuilderForNode();
      node1.isOptionalArg();
      Node node2 = Node.newString(89, "");
      Node.newNumber(53.0);
      Node node3 = Node.newString("7H]m*z");
      Node node4 = new Node(51, node2, node3, node0, node2, (-439), 2178);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node5 = new Node(236, node1, node4);
      node5.setVarArgs(false);
      node5.isComma();
      node3.getChildAtIndex(16);
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node2.isCatch();
      node0.isString();
      node0.getCharno();
      node2.isCase();
      node2.getJSType();
      jSTypeRegistry0.overwriteDeclaredType("hOhHlVcAN[@g:x$t1n", (JSType) null);
      node0.isVoid();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString("r[PtF", 2944, 42);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isThrow();
      node0.isCatch();
      node0.getBooleanProp(48);
      node0.setType(63);
      node0.isOnlyModifiesArgumentsCall();
      node0.setCharno(2944);
      Node node1 = Node.newString(11, "r[PtF", 42, 51);
      node1.isInstanceOf();
      Node node2 = new Node(53, 33, 102);
      Node node3 = new Node(53, node2);
      node0.addChildrenToFront(node3);
      node3.removeFirstChild();
      Node node4 = Node.newString((-1479), "");
      node4.getChildCount();
      node2.getIndexOfChild(node1);
      Node node5 = Node.newString("r[PtF");
      node3.hasOneChild();
      node5.getIntProp(1998);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s:eW3d2BUwj");
      Node node0 = Node.newString("s:eW3d2BUwj");
      Node node1 = new Node(229, node0, node0, node0, 762, 53);
      node1.isBlock();
      node0.getProp(2254);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isDelProp();
      Node node2 = node1.cloneNode();
      node2.getExistingIntProp(4095);
      node2.isNot();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isVarArgs();
      Node node1 = Node.newString(51, "", (-766), 3019);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isSyntheticBlock();
      node0.mayMutateArguments();
      node0.isThis();
      node0.getChildCount();
      node2.removeChildAfter(node1);
      int int0 = 32;
      String string0 = "%s (%s) must not be greater than size (%s)";
      int int1 = 1359;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0, int1, node0.CHANGE_TIME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      Node node2 = Node.newString(30, "veyd7H{^9}}Vns-");
      node1.addChildrenToFront(node0);
      node0.isRegExp();
      Node node3 = Node.newString(15, "veyd7H{^9}}Vns-", 32, 1);
      node3.checkTreeEquals(node2);
      node3.isEquivalentToTyped(node1);
      node0.isCatch();
      node1.mayMutateArguments();
      node1.checkTreeEqualsImpl(node2);
      node1.isDefaultCase();
      node1.isAssign();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.srcrefTree(node1);
      node0.isDo();
      node1.isAssign();
      node2.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T;");
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      Node node4 = new Node(57, 4, 31);
      node3.isAdd();
      node1.getQualifiedName();
      Node node5 = node3.useSourceInfoFrom(node0);
      node3.setChangeTime(1);
      node4.isHook();
      node5.isNot();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node4;
      nodeArray0[2] = node2;
      Node node6 = new Node(57, nodeArray0);
      node6.replaceChildAfter(nodeArray0[2], node0);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node node2 = Node.newString(54, "Object#Key", 0, (-2275));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node3.isScript();
      node3.isEquivalentToTyped(node1);
      node2.isCatch();
      node0.isString();
      node0.getCharno();
      node2.isCase();
      node0.isVoid();
      node0.copyInformationFromForTree(node3);
      node2.children();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString("", (-385), (-1511));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(1);
      node1.isQualifiedName();
      node0.isAdd();
      node0.getJsDocBuilderForNode();
      node1.isOptionalArg();
      Node node2 = Node.newString(56, ":l");
      node1.addChildrenToFront(node0);
      Node node3 = new Node(53, node2, 40, (-1904));
      node3.isTypeOf();
      Node node4 = Node.newNumber((double) 8, 43, 37);
      Node node5 = new Node(39, node1, node4);
      node5.useSourceInfoIfMissingFromForTree(node2);
      node5.putIntProp(132, 4096);
      node1.clonePropsFrom(node5);
      node2.siblings();
      node1.isScript();
      node4.isReturn();
      node2.detachChildren();
      node0.isNot();
      node3.isDelProp();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node((-1769));
      node0.isOptionalArg();
      node0.isIn();
      node0.setSourceEncodedPositionForTree(52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isNot();
      node0.isName();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      node0.isNumber();
      node0.toString();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T;");
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      Node node4 = new Node(53, 310, 0);
      node4.isAdd();
      node4.getQualifiedName();
      node3.useSourceInfoFrom(node0);
      node2.setChangeTime(55);
      node4.getLastSibling();
      Node.newNumber(2086.801);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      node1.addChildrenToFront(node0);
      node0.isRegExp();
      Node node2 = Node.newString(15, "veyd7H{^9}}Vns-", 32, 1);
      node2.checkTreeEquals(node0);
      node2.isEquivalentToTyped(node1);
      node0.isCatch();
      node0.getExistingIntProp((-2846));
      node1.mayMutateArguments();
      node0.isEquivalentToTyped(node0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node.extractLineno(119);
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber((-1.0));
      nodeArray0[2] = node0;
      node0.isCast();
      node0.replaceChildAfter(nodeArray0[0], nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "\"v-hZzNt)DI#O%}OoM", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("\"v-hZzNt)DI#O%}OoM");
      Node node1 = new Node(29);
      node0.setLineno(51);
      node0.isSetterDef();
      node0.addChildrenToBack(node1);
      node0.hasMoreThanOneChild();
      node1.isAnd();
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      node0.putProp((-1003), (Object) null);
      node0.isNE();
      node0.isComma();
      node0.setDirectives((Set<String>) null);
      Node node1 = new Node(16, node0);
      node0.setSourceEncodedPosition(55);
      node0.isQualifiedName();
      node0.isString();
      Node node2 = Node.newNumber((double) 50, 31, (-2291));
      Node node3 = new Node(50, node2, node1, 55, 57);
      node3.getLength();
      node3.setCharno(46);
      node2.isNumber();
      Node node4 = node1.cloneTree();
      node4.isTrue();
      node4.isInc();
      node2.getAncestor(52);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("a[s=q]^[eh3p");
      Node node1 = new Node(12, 1, 52);
      node0.isEquivalentTo(node0);
      Node node2 = new Node(53, node1);
      Node node3 = new Node((-2762));
      node2.isDebugger();
      node1.isAdd();
      node2.getJsDocBuilderForNode();
      node1.isOptionalArg();
      Node.newString((-1668), "8I?B-<:0");
      Node node4 = Node.newNumber((double) 57);
      Node.newString("8I?B-<:0");
      Node node5 = new Node(17, node1, node1, node2, node4, 1, 36);
      node5.useSourceInfoIfMissingFromForTree(node2);
      Node node6 = new Node(node4.POST_FLAG, node4, node0);
      boolean boolean0 = false;
      node2.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node1.isComma();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node0.isOnlyModifiesArgumentsCall();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(102);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.getParent();
      Node node3 = node2.useSourceInfoFrom(node1);
      node0.isReturn();
      node1.detachChildren();
      node3.isFor();
      node1.getIntProp(105);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 4042, (-1643));
      node0.isDelProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("1", 49, 4);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.getQualifiedName();
      node2.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node0.setWasEmptyNode(true);
      node1.isQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(false);
      objectType0.isArrayType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.getCharno();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.getInputId();
      node0.siblings();
      node0.isComma();
      node1.getChildAtIndex(43);
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2848, 524288, 102);
      Node node1 = new Node(43, node0, node0, (-858), 1073741823);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("1", 48, (-3547));
      node1.useSourceInfoFromForTree(node0);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(124, 4096, 4096);
      Node node1 = new Node((-1998), node0, node0, node0, 48, 57);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node3 = node1.cloneNode();
      node3.isQualifiedName();
      TreeSet<String> treeSet2 = new TreeSet<String>();
      node2.siblings();
      node0.isScript();
      node3.isReturn();
      node0.detachChildren();
      node0.isNot();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "DFJZ1<VX|=[SbUP[";
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      node1.useSourceInfoIfMissingFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string1 = "com.google.javascript.rhino.jstype.PropertyMap$1";
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string1, node1, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getOwnPropertyJSDocInfo(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      int int0 = Node.IS_DISPATCHER;
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(43, node0, node0, node0, node0, 2, (-848));
      node1.cloneTree();
      node1.getAncestor(1);
      node1.getCharno();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node2.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node2.addSuppression("change_time");
      node2.isEquivalentTo(node0, true, true, true);
      node2.putBooleanProp((-2914), true);
      node2.isInstanceOf();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node.extractLineno(119);
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber((-1.0));
      nodeArray0[2] = node0;
      Node node1 = new Node(39);
      Node node2 = node1.cloneTree();
      node2.getAncestor(1246);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      node0.isNumber();
      node0.toString();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("r[PtF", 2944, 42);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isThrow();
      node0.isCatch();
      node0.getBooleanProp(48);
      node0.setType(63);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(119, "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList");
      Node.newNumber((double) 15);
      node1.isIf();
      node1.isCase();
      node0.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("r[PtF", 2944, 42);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      Iterable<Node> iterable0 = new HashSet<Node>();
      node0.isInstanceOf();
      node0.isCatch();
      node0.getBooleanProp(48);
      node0.setType(63);
      Node.newString((-4068), "");
      Node.newString("r[PtF");
      Node node1 = node0.cloneTree();
      node0.getAncestor(1344);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      Node node1 = new Node((-3575), node0, node0, node0, 1949, 4095);
      node0.addChildToFront(node1);
      Node node2 = Node.newString(30, "com.google.common.collect.EmptyImmutableBiMap");
      node1.setLength(29);
      node2.setChangeTime((-198));
      node2.isWith();
      node2.setOptionalArg(false);
      node1.removeChild((Node) null);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "r[PtF");
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.getQualifiedName();
      node0.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesArguments();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString(4299, "");
      Node node3 = new Node(43);
      node3.addChildrenToFront(node2);
      node1.isTypeOf();
      node1.putIntProp((-66), 861);
      node2.isEquivalentTo(node3, false, true, true);
      node2.isOr();
      node1.isWhile();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      node1.isAdd();
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.setString("node is not a child");
      node2.setChangeTime(46);
      node1.setJSType((JSType) null);
      node2.isSyntheticBlock();
      node2.isHook();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.srcrefTree(node1);
      node0.isSetterDef();
      node0.addChildrenToBack(node2);
      node1.hasMoreThanOneChild();
      node0.isAnd();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = Node.newString("}JirxXnWmb^4j", 32, (-439));
      node1.isThis();
      node1.children();
      Node node2 = new Node(43, node0);
      Node node3 = new Node(30, node2, node1, node1, node2, 46, 124);
      node1.setWasEmptyNode(true);
      Node node4 = new Node(101, node3);
      node4.putProp(101, node_SideEffectFlags0);
      node0.setType((-841));
      Node.newString(43, "DFJZ1<VX|=[SbUP[");
      Node node5 = Node.newNumber(53.0, 2118, (-812));
      node5.isIf();
      node5.isCase();
      Node.extractCharno(65536);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node2 = node0.cloneNode();
      node2.isQualifiedName();
      TreeSet<String> treeSet2 = new TreeSet<String>();
      node2.siblings();
      node1.isScript();
      node1.isReturn();
      node2.detachChildren();
      node1.isNot();
      node2.isLabelName();
      node0.isVar();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      Node node1 = new Node(134, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node node2 = Node.newString(55, "'q|P'^@ch");
      node0.isFor();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      Node node4 = new Node(632, 47, 864);
      node4.isAdd();
      node1.getQualifiedName();
      Node node5 = node1.useSourceInfoFrom(node3);
      node5.setChangeTime(152);
      node1.isHook();
      node5.isNot();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node5;
      nodeArray0[1] = node0;
      nodeArray0[2] = node4;
      nodeArray0[3] = node1;
      nodeArray0[4] = node3;
      nodeArray0[5] = node5;
      Node node6 = new Node(16, nodeArray0);
      node1.replaceChildAfter(node2, nodeArray0[4]);
      nodeArray0[1].getChangeTime();
      node5.getString();
      int int0 = (-688);
      node0.getAncestor(int0);
      // Undeclared exception!
      try { 
        nodeArray0[2].isFor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "J4 'UCvXU(C7}E<");
      node1.setSourceFileForTesting("");
      node1.isEquivalentTo(node0, false, false, false);
      node0.isOr();
      node1.isWhile();
      Node node2 = new Node(2883, node0, 36, (-4096));
      node2.isAssign();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node((-3098), (-3098), 4096);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node0.isNoSideEffectsCall();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = node0.getParent();
      node0.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setChangeTime(53);
      node2.setJSType((JSType) null);
      node0.isHook();
      node1.isNot();
      node0.isLabelName();
      node2.replaceChildAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString(31, "", 31, 31);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(37, "");
      node_SideEffectFlags1.setAllFlags();
      node1.isFor();
      Node node2 = new Node((-3871), node1, node0, node0, 52, 39);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.setQuotedString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.getQualifiedName();
      node3.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newString(148, "<");
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node0.setSourceFileForTesting("<");
      Node node1 = new Node(4095);
      node0.setLineno(39);
      node0.isSetterDef();
      node0.addChildrenToBack(node1);
      node0.hasOneChild();
      node0.getProp(53);
      node0.getSourceFileName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0, 51, (-2520));
      node0.getChangeTime();
      node0.setDouble((-3551.049911744));
      Node node1 = new Node(36, node0, 1074, 1074);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.hasChild(node1);
      Node node2 = node0.srcref(node1);
      node1.useSourceInfoFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node0.addChildBefore(node1, node3);
      node0.isNew();
      node2.hasChildren();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node2.isLocalResultCall();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0, 51, (-2520));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node((-309), node0, node0, node0, node0, 54, 47);
      node1.detachChildren();
      Node node2 = new Node(4299);
      node2.isQualifiedName();
      node2.isAdd();
      node0.getJsDocBuilderForNode();
      node0.isOptionalArg();
      Node node3 = Node.newString(54, "NUMBER_STRING");
      node0.addChildrenToFront(node2);
      node3.isTypeOf();
      node0.putIntProp((-456), 43);
      Node.newString(50, "NUMBER_STRING");
      Node.newNumber(0.0);
      node2.isIf();
      node3.isCase();
      node2.setWasEmptyNode(false);
      node0.hasChild(node1);
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString(31, "com.google.common.base.CharMatcher$NegatedMatcher", 31, 31);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(37, "com.google.common.base.CharMatcher$NegatedMatcher");
      node_SideEffectFlags1.setAllFlags();
      node1.isFor();
      Node node2 = new Node((-3888), node1, node0, node0, 52, 39);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.setQuotedString();
      Node node4 = new Node(49, node3);
      node_SideEffectFlags3.setMutatesGlobalState();
      node1.isNew();
      Node node5 = Node.newString(2, "com.google.common.base.CharMatcher$NegatedMatcher");
      node0.getChildCount();
      node4.getIndexOfChild(node3);
      node5.isGetProp();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(132, 123, 8);
      Set<String> set0 = new LinkedHashSet<String>();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Stack<Node> stack0 = new Stack<Node>();
      node0.isScript();
      node0.isCatch();
      Node node1 = Node.newNumber((double) 47);
      Node node2 = new Node((-26), node0, node1);
      node2.setType(148);
      Node node3 = Node.newString(39, "S?");
      node1.isIf();
      node3.isCase();
      node0.setWasEmptyNode(true);
      node1.srcrefTree(node3);
      node2.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node node2 = Node.newString(55, "'q|P'^@ch");
      node1.setLength(36);
      node1.setChangeTime(56);
      node1.isWith();
      node0.getJsDocBuilderForNode();
      node1.detachFromParent();
      node1.getIndexOfChild(node2);
      node0.addChildToFront(node1);
      node1.isCall();
      Node node3 = Node.newString("    ", 56, 38);
      node3.getAncestor(32);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node1.setIsSyntheticBlock(true);
      node0.isInstanceOf();
      node1.isDec();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      node1.isWhile();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      node0.isLocalResultCall();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node2.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node2.addSuppression("change_time");
      node2.isEquivalentTo(node0, true, true, true);
      node2.putBooleanProp((-2914), true);
      node2.isInstanceOf();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node((-1735), 2229, (-2509));
      node0.detachChildren();
      Node node1 = new Node((-1735), node0, node0, node0, 0, 0);
      Node node2 = new Node((-1735), node1, node1, 29, 1);
      node2.getJsDocBuilderForNode();
      node1.isOptionalArg();
      node0.isTypeOf();
      node2.putIntProp(23, 57);
      Node node3 = Node.newString((-2509), "pf ");
      Node node4 = Node.newNumber(1.2);
      node3.isIf();
      node4.isThrow();
      node3.setWasEmptyNode(false);
      node4.hasChild(node0);
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = new Node(31, 31, 31);
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isAssignAdd();
      node0.getBooleanProp(116);
      node0.isWith();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber((-7236.9424430854));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(3);
      node0.isNew();
      Node node1 = Node.newString(309, "%s (%s) must not be greater than size (%s)", 38, (-2358));
      Node node2 = Node.newString(2886, "%s (%s) must not be greater than size (%s)");
      node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      node3.isFunction();
      node3.isContinue();
      Node node4 = new Node(77, node0, node0, node2, node3, 83, (-676));
      node0.isCase();
      Node node5 = Node.newString(40, "L", 149, 31);
      node5.isWhile();
      node1.toStringTree();
      node5.isIn();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(53, 310, 0);
      Node.newString("P')>[v~M/Ff");
      Node node4 = new Node(48, node2);
      node4.isEquivalentToTyped(node1);
      node0.getJsDocBuilderForNode();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString(54, "tOIfc)b|yg4tr>RyG", 93, 54);
      InputId inputId0 = new InputId("tOIfc)b|yg4tr>RyG");
      node0.detachChildren();
      Node node1 = new Node((-1603));
      node1.isDelProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("1", 38, 11);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.checkTreeTypeAwareEqualsImpl(node2);
      node0.getQualifiedName();
      node0.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      Node node1 = new Node(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3712);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = node1.cloneNode();
      node0.isQualifiedName();
      TreeSet<String> treeSet2 = new TreeSet<String>();
      node1.siblings();
      node2.isScript();
      node2.isReturn();
      node0.isNot();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber((-7236.9424430854));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      node0.getIntProp(3);
      Node node1 = Node.newString("");
      Node node2 = new Node(12, node0, node0, node0, node1, 4, 1997);
      node0.isEquivalentToTyped(node2);
      Node.mergeLineCharNo((-2429), 40);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("Object#Key");
      Node node1 = new Node(29);
      node0.setLineno(51);
      node0.isSetterDef();
      node0.addChildrenToBack(node1);
      node0.hasMoreThanOneChild();
      node1.isAnd();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(1604);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesArguments();
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.setSideEffectFlags(node_SideEffectFlags2);
      // Undeclared exception!
      try { 
        node0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(147, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesArguments();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString(4299, "");
      Node.newString("[}(5BB@:T&dmmDe[C", 31, 42);
      Node node3 = new Node(8, 57, 36);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node2.isNumber();
      node3.cloneTree();
      node2.isTrue();
      node2.isInc();
      Node node4 = node1.getLastSibling();
      node3.isDo();
      node4.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(64);
      node0.isOnlyModifiesThisCall();
      node0.setType(64);
      Node.extractLineno(0);
      node0.isString();
      node0.getQualifiedName();
      node0.isNumber();
      Node node1 = node0.useSourceInfoFrom(node0);
      Node node2 = node0.removeChildAfter(node0);
      node2.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6ESi}p`;&o*&");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      Node node4 = new Node(53, 310, 0);
      Node node5 = Node.newString(56, "%s (%s) must not be greater than size (%s)", 0, (-2358));
      Node node6 = Node.newString(15, "WITH");
      node6.copyInformationFrom(node1);
      node3.isFunction();
      node2.isContinue();
      Node node7 = new Node(52, node0, node6, node5, node5, 8, 31);
      node7.isCase();
      node2.addChildToBack(node3);
      node4.isWhile();
      node1.toStringTree();
      node4.isIn();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(142);
      node0.isEquivalentTo(node0, false, false, false);
      node0.getAncestor(77);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(2);
      Node node1 = Node.newString(16, "J4 'UCvXU(C7}E<");
      node1.setSourceFileForTesting("");
      node1.isEquivalentTo(node0, false, false, false);
      node0.isOr();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getString();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isDec();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node1.isNot();
      node2.isLabelName();
      node2.toString(true, false, true);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      Node node2 = Node.newString(30, "veyd7H{^9}}Vns-");
      node1.addChildrenToFront(node0);
      node0.isTypeOf();
      node2.putIntProp(42, 36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(4095, 8, 77);
      node1.addChildrenAfter(node3, node0);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber(238.10611885322, 77, 77);
      node0.isSyntheticBlock();
      boolean boolean0 = node0.isVar();
      Node node1 = Node.newString((-540), "CharMatcher.JAVA_LETTER_OR_DIGIT");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.getSourcePosition();
      node1.isEquivalentTo(node0, false, false, false);
      node1.getAncestor(39);
      node1.addChildrenToBack(node0);
      node0.type = (-1501);
      node0.toStringTree();
      boolean boolean1 = true;
      node1.toString(boolean0, boolean1, boolean0);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(4095, "com.google.common.base.CharMatcher$2");
      node0.setSourceFileForTesting("%SG=Wt:n'");
      Node node2 = Node.newString(50, "DFJZ1<VX|=[SbUP[");
      node0.addChildrenToFront(node1);
      node1.isTypeOf();
      node0.putIntProp(2185, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(2185, 32, 128);
      node0.addChildrenAfter(node3, node2);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString(54, "tOIfc)b|yg4tr>RyG", 93, 54);
      InputId inputId0 = new InputId("tOIfc)b|yg4tr>RyG");
      node0.detachChildren();
      Node node1 = new Node((-1603));
      node1.isQualifiedName();
      node0.isAdd();
      node0.getJsDocBuilderForNode();
      node0.isOptionalArg();
      node1.addSuppression("lahq_-T8X;i");
      Node node2 = new Node(106, 23, 27591);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.siblings();
      node2.detachChildren();
      Node node3 = new Node(351, node0, node1, node0);
      node3.isLabelName();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node1.isVoid();
      Node node4 = node3.removeFirstChild();
      node1.isDefaultCase();
      node4.getString();
      node2.setLineno(16);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = Node.newNumber((double) (-2510), (-2510), (-2510));
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      Node node1 = Node.newNumber((double) 57);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'P';
      charArray0[2] = '';
      charArray0[3] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      node1.appendStringTree(stringBuffer0);
      node0.isEquivalentTo(node1, true, false, false);
      node0.isOr();
      node1.getQualifiedName();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 4096);
      Node node1 = new Node(147, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesArguments();
      node1.isUnscopedQualifiedName();
      boolean boolean0 = node0.isDebugger();
      node1.isAdd();
      Node node2 = new Node(512, node1, 13, (-1471));
      node0.copyInformationFrom(node2);
      node1.getJsDocBuilderForNode();
      node1.isOptionalArg();
      String string0 = "change_time";
      node1.putBooleanProp(node0.SIDE_EFFECTS_ALL, boolean0);
      // Undeclared exception!
      try { 
        node1.addSuppression(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node((-1455));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node((-1160), node0);
      node1.isOptionalArg();
      node0.clonePropsFrom(node1);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isOnlyModifiesThisCall();
      node0.setType(35);
      Node.extractLineno(0);
      node0.isString();
      node0.getQualifiedName();
      node0.isNumber();
      node0.cloneNode();
      node0.isQualifiedName();
      Node node1 = Node.newNumber(3520.0);
      Node node2 = Node.newString((String) null);
      node2.isIf();
      node1.isCase();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = Node.newNumber((double) (-2510), (-2510), 85);
      node0.isEquivalentToTyped(node0);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.setChangeTime(445);
      node0.setJSType((JSType) null);
      node0.isHook();
      node1.isNot();
      node1.replaceChildAfter(node0, node0);
      int int0 = 114;
      Node.mergeLineCharNo(int0, node2.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      Node node2 = Node.newString(30, "veyd7H{^9}}Vns-");
      node2.putProp(51, node0);
      Node node3 = Node.newString("veyd7H{^9}}Vns-", 43, 40);
      node3.removeProp(57);
      node0.mayMutateArguments();
      node3.isComma();
      node2.getDouble();
      node1.isVoid();
      Node node4 = node3.removeFirstChild();
      node1.isDefaultCase();
      node4.getString();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(118, "]nU757%P%EJ", 118, 108);
      node0.isFalse();
      Node node1 = new Node(4095, node0, 4095, 2848);
      node1.copyInformationFrom(node0);
      Node node2 = node0.srcrefTree(node1);
      node2.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(123, nodeArray0, 8, 132);
      node0.getDirectives();
      node0.getAncestors();
      Stack<Node> stack0 = new Stack<Node>();
      node0.isScript();
      node0.isCatch();
      Node node1 = Node.newNumber((double) 47);
      Node node2 = new Node(7, node0, node1);
      Node.newString((-650), "", 0, 425);
      node0.setIsSyntheticBlock(false);
      node0.isCast();
      Node node3 = new Node((-3486), 12, 154);
      node3.clonePropsFrom(node0);
      node1.isObjectLit();
      node1.isNot();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("r[PtF");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = new Node(39, node1, node1, node1, node1);
      Node node3 = new Node(30, node0);
      node3.addChildrenToFront(node2);
      node3.isTypeOf();
      node1.isVoid();
      Node node4 = node3.removeFirstChild();
      node1.isDefaultCase();
      node4.getString();
      node2.setLineno(node0.FLAG_LOCAL_RESULTS);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(4096, 4096, 4096);
      node0.addChildToFront((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-901));
      node0.isLocalResultCall();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(23, 23, 4096);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("vW", "", 4, 32);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = new Node(130);
      node1.setLength(147);
      node1.getAncestor(39);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(116, "");
      node0.isLabel();
      node0.isInstanceOf();
      Node node1 = new Node((-627), 37, 29);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.siblings();
      node0.detachChildren();
      Node node2 = new Node(127007, node0, node1, node0);
      node2.isLabelName();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node0 = new Node(38, 38, 38);
      Node node1 = Node.newString("Should not happen\n", (-2071), 47);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(37);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = node0.cloneNode();
      node1.isQualifiedName();
      Node node3 = Node.newNumber((double) 0);
      node0.isIf();
      node2.isCase();
      node3.setWasEmptyNode(false);
      node0.hasChild(node3);
      Node node4 = new Node(2, node2, node2, node1);
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) immutableList0;
      objectArray0[2] = (Object) jSTypeRegistry0;
      immutableList0.toArray(objectArray0);
      Node node1 = new Node(536870912, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      JSType[] jSTypeArray0 = new JSType[2];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("hNC0I\"Xo%}>j(C");
      jSTypeArray0[0] = (JSType) templateType0;
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(jSTypeArray0[0]);
      jSTypeArray0[1] = jSType0;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.srcrefTree(node0);
      node2.isDo();
      node2.isAssign();
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(23, 23, 23);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      node0.getAncestor(45);
      node0.children();
      Node.newString(55, (String) null, 50, 43);
      node0.setChangeTime(node0.INPUT_ID);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      node0.isUnscopedQualifiedName();
      node0.detachChildren();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("1", 42, 1);
      Node node2 = new Node(39, 50, 2);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node3.getQualifiedName();
      node0.isEquivalentToShallow(node3);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      simpleErrorReporter0.warning("1", "Object#Element", 148, 32);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.srcrefTree(node1);
      node1.isArrayLit();
      node1.isAssign();
      node2.getChildBefore(node0);
      Node.extractLineno(node0.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString("node is noa child", 52, 31);
      node1.setSourceFileForTesting("node is noa child");
      node1.addChildrenToFront(node0);
      node0.isRegExp();
      Node node2 = node0.cloneNode();
      node0.isQualifiedName();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.addSuppression("node is noa child");
      Node node3 = new Node((-4046), 57, 1360);
      node3.srcrefTree(node1);
      TreeSet<String> treeSet1 = new TreeSet<String>();
      node0.siblings();
      node1.detachChildren();
      Node node4 = new Node(610, node2, node0, node2);
      node4.isLabelName();
      node2.isVar();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      Node node2 = Node.newString(30, "veyd7H{^9}}Vns-");
      node0.isQualifiedName();
      node2.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node2.isScript();
      node1.isAssignAdd();
      node2.getBooleanProp(4);
      node1.isWith();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("1");
      node1.isAdd();
      node1.isNot();
      node0.isName();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      node1.isNumber();
      Node node2 = new Node(49, node1, node0, node1, node1, 1, 43);
      node2.toString();
      node2.cloneTree();
      node0.toString();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(31, (-159), (-159));
      Node node1 = new Node(31, node0, node0, node0, node0, 39, 9);
      node1.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags0.setAllFlags();
      node1.isFor();
      Node node2 = new Node(1253, node1, 1735, (-3195));
      node1.useSourceInfoFromForTree(node2);
      node1.setQuotedString();
      int int0 = 1086;
      Node node3 = new Node(int0, node0);
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isNew();
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(node1.SLASH_V, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(33);
      node0.isNoSideEffectsCall();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetProp();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("DFJZ1<VX|=[SbUP[", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isDec();
      Node node1 = Node.newString((-94), "com.google.javascript.rhino.Node$SiblingNodeIterable", 46, 4539);
      node0.isEquivalentToTyped(node1);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.base.Predicates$IsEqualToPredicate");
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(31);
      Node node0 = Node.newNumber((double) 31);
      node0.setSourceEncodedPositionForTree(31);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(46);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("T;", " 96'L]k", 148, 8);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("M,R>UFG8\"F");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      jSTypeArray0[0] = (JSType) templateType1;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node1.srcrefTree(node0);
      node1.isArrayLit();
      node2.isAssign();
      Node node3 = node0.getChildBefore(node2);
      JSDocInfo jSDocInfo0 = null;
      node3.setJSDocInfo(jSDocInfo0);
      int int0 = 148;
      Node.extractLineno(int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      node_SideEffectFlags0.setAllFlags();
      Node node0 = new Node(148, 148, 148);
      node0.isQualifiedName();
      node0.isAdd();
      node0.getJsDocBuilderForNode();
      node0.isOptionalArg();
      node0.addSuppression("ouZ9p0c9eW8a0");
      Node node1 = new Node(2747, (-2509), 26);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.siblings();
      node1.detachChildren();
      Node node2 = new Node(751619276, node1, node1, node0);
      node1.isLabelName();
      node1.isVar();
      node1.setSideEffectFlags(155);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(54, "tOIfc)b|yg4tr>RyG", 93, 54);
      InputId inputId0 = new InputId("tOIfc)b|yg4tr>RyG");
      node0.detachChildren();
      Node node1 = Node.newString(153, "DFJZ1<VX|=[SbUP[");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node1.setSourceFileForTesting("DFJZ1<VX|=[SbUP[");
      Node node2 = node0.cloneNode();
      node2.isQualifiedName();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node2.siblings();
      node2.isScript();
      node1.isReturn();
      Node node3 = Node.newNumber((double) 42);
      node3.detachChildren();
      node2.isNot();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = Node.newString((-154), ".1y/v6j~c':kZR6@b");
      node0.setSourceFileForTesting(".1y/v6j~c':kZR6@b");
      Node node2 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      node1.addChildrenToFront(node2);
      node2.isTypeOf();
      node2.cloneNode();
      node2.isQualifiedName();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.siblings();
      node2.isScript();
      node2.isReturn();
      node0.detachChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType.cast((JSType) null);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(".1y/v6j~c':kZR6@b", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(templateType0.UNKNOWN_NAME);
      Node node3 = jSDocInfo0.getAssociatedNode();
      node3.isNot();
      // Undeclared exception!
      try { 
        node3.isLabelName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isHook();
      Node node3 = Node.newString("T;", 50, 29);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node4 = new Node(53, 310, 0);
      node4.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node4.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node2.isUnscopedQualifiedName();
      node1.isNumber();
      Node node5 = node4.cloneTree();
      node3.isTrue();
      node5.isInc();
      node0.getLastSibling();
      node1.isObjectLit();
      node5.getCharno();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      Iterable<Node> iterable0 = new LinkedHashSet<Node>();
      node1.isRegExp();
      node1.isAssignAdd();
      node0.getBooleanProp(4);
      node1.isWith();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString("BNKA1K");
      node0.setChangeTime(0);
      node0.removeProp(0);
      Node node1 = Node.newString(77, "com.google.common.collect.Collections2");
      Node node2 = Node.newString(4095, "node is not a child");
      Node node3 = new Node(48, node2);
      node0.addChildrenToFront(node1);
      Node.extractLineno(86);
      node2.getQualifiedName();
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node1.isSwitch();
      Node node2 = new Node(53, 56, 43);
      node1.isScript();
      node0.isEquivalentToTyped(node2);
      node0.isDec();
      node0.getAncestor(29);
      node1.cloneTree();
      node1.getInputId();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nd1");
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      node0.setSourceFileForTesting("r[PtF");
      Node node1 = new Node(49);
      node0.setLineno(51);
      node0.isSetterDef();
      node1.addChildrenToBack(node0);
      node0.hasOneChild();
      node0.getProp(16);
      node0.isNull();
      node1.srcref(node0);
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = new Node(43, node0, node0, 31, 1);
      node0.isSwitch();
      Node node2 = new Node(0, 31, 57);
      node1.isScript();
      node0.isEquivalentToTyped(node2);
      Node node3 = Node.newString(12, "node is not a child");
      Node node4 = new Node(15, node3, node3, node1, node1, 115, 2147483645);
      node4.srcrefTree(node0);
      node2.isArrayLit();
      node4.isAssign();
      node4.getChildBefore(node3);
      Node.extractLineno(115);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node0.getAncestors();
      Node node1 = new Node(115, node0, 3608, 1101);
      node1.siblings();
      node1.isScript();
      node0.isAssignAdd();
      node1.getBooleanProp(37);
      node0.isWith();
      node0.getLineno();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 26, 55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        node0.srcref(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildrenToFront(node1);
      node0.isTypeOf();
      node0.putIntProp(30, 57);
      node0.toString();
      node1.isEquivalentTo(node0, true, true, true);
      node1.isOr();
      node1.getQualifiedName();
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(111, node0, node0, node0, (-3452), 48);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.getParent();
      Node node3 = node2.useSourceInfoFrom(node0);
      node2.isReturn();
      node3.hasChild(node0);
      Iterator<AllType> iterator0 = (Iterator<AllType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node5 = new Node(32768, node1, node0, node4);
      String string0 = "DEBUGGER";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = null;
      try {
        simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString(31, "com.google.common.base.CharMatcher$NegatedMatcher", 31, 31);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags4.setAllFlags();
      node0.isFor();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.setQuotedString();
      Node node2 = new Node(49, node1);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isNew();
      Node.newString(16, "1");
      node1.getChildCount();
      Node node3 = new Node(12);
      node2.getIndexOfChild(node1);
      node3.isDo();
      node1.setDouble(0.0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(137, 137, 137);
      node0.isEquivalentTo(node0, true, true, true);
      node0.getBooleanProp(122);
      node0.setType(236);
      node0.setLength(137);
      node0.setChangeTime(122);
      node0.isWith();
      node0.isWhile();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = node0.getParent();
      Node node2 = node0.useSourceInfoFrom(node0);
      node0.isReturn();
      node0.hasChild(node2);
      Node node3 = new Node(50, node0, node1, node1);
      String string0 = "DEBUGGER";
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.isLocalResultCall();
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 148, 32);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.srcrefTree(node1);
      Node node2 = Node.newString(8, "DFJZ1<VX|=[SbUP[", 4095, 49);
      node2.isFromExterns();
      node1.isArrayLit();
      node1.isAssign();
      Node.extractLineno(55);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(873);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.srcrefTree(node1);
      node0.isSetterDef();
      node1.hasMoreThanOneChild();
      node0.isAnd();
      node2.getLineno();
      node2.getIndexOfChild(node1);
      node2.isParamList();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber((-1650.7155201803535), 4, 4);
      node0.isEquivalentTo(node0);
      node0.setSourceEncodedPosition(120);
      Node node1 = new Node(32, node0, node0, node0, (-778), (-234));
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.setQuotedString();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.getQualifiedName();
      node0.isEquivalentToShallow(node2);
      node1.checkTreeEquals(node0);
      int int0 = (-1801);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString(51, "", (-766), 3019);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isContinue();
      node0.toStringTree();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(2848, 2848, 2848);
      Node node1 = new Node(148, node0, node0, node0, 0, 2);
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node0.getParent();
      Node node3 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node3.detachChildren();
      node2.isBreak();
      node3.srcrefTree(node2);
      node3.srcref(node0);
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = new Node(31, 31, 31);
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isAssignAdd();
      Node node1 = new Node(0, node0, node0, 4095, 4);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isReturn();
      node2.detachChildren();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.putProp((-2951), jSTypeRegistry0);
      node0.isFromExterns();
      node0.isComma();
      node0.isQuotedString();
      Node node1 = Node.newString("node is noa child", 31, 159);
      Node node2 = new Node(245, (-905), 0);
      node2.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isUnscopedQualifiedName();
      node1.isNumber();
      node1.cloneTree();
      node0.isTrue();
      node2.isInc();
      Node node3 = node0.getLastSibling();
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(142);
      node0.isExprResult();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node is noa child");
      Node node0 = new Node(111, 111, 3093);
      node0.isSwitch();
      Node node1 = new Node(0, 31, 57);
      node1.cloneTree();
      node0.isScript();
      node0.isDec();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(3988.41863);
      node0.getInputId();
      node0.toString(false, false, true);
      Node node1 = new Node(756, node0, 1020, 39);
      node1.isTry();
      node1.setInputId((InputId) null);
      node0.isWith();
      node0.mayMutateArguments();
      node0.isExprResult();
      Node.mergeLineCharNo(4, 2);
      node0.isLabelName();
      node1.isVar();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isVar();
      node_SideEffectFlags0.setAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newNumber((-914.109141521335));
      Node node2 = new Node(52, node0, node0, node1, node0);
      node2.isUnscopedQualifiedName();
      node1.isNumber();
      Node node3 = node1.cloneTree();
      node3.isTrue();
      node3.isInc();
      node1.getLastSibling();
      node0.isObjectLit();
      node0.isEquivalentToTyped(node3);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      simpleErrorReporter0.warning("Object#Key", "1", 4649, 4649);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node1 = new Node(4649, node0, node0, node0, node0);
      node1.getLength();
      node1.addChildBefore(node0, node0);
      node0.getLastChild();
      ObjectType objectType0 = null;
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString(4139, "The existing child node of the parent should not be null.");
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node0.isComma();
      node0.getSideEffectFlags();
      Node node2 = Node.newNumber((-1493.75));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node1.isTrue();
      node2.isVar();
      node2.isFalse();
      node2.isFor();
      Node.extractLineno(4095);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node0.isComma();
      node1.getSideEffectFlags();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node1.isTrue();
      node0.isVar();
      node1.isNot();
      node0.replaceChildAfter(node1, node0);
      // Undeclared exception!
      try { 
        Node.extractLineno(node0.COLUMN_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node((-3098), (-3098), (-3098));
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = node0.getParent();
      node0.isUnscopedQualifiedName();
      node0.isAdd();
      node0.getQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setChangeTime(53);
      node2.setJSType((JSType) null);
      node0.isHook();
      node2.getQualifiedName();
      node2.isEquivalentToShallow((Node) null);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(4096, 314, 71);
      Node node1 = new Node((-1595));
      node0.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(103);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node node2 = new Node(118);
      Node node3 = node2.cloneNode();
      node2.isQualifiedName();
      TreeSet<String> treeSet2 = new TreeSet<String>();
      node2.siblings();
      node3.isScript();
      node2.isReturn();
      Node node4 = new Node(32, node1, node3, node3, node0, (-2691), 154);
      node4.isNot();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      Node node1 = Node.newString("r[PtF");
      node0.putProp(79, node1);
      node1.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node1.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node1.isAnd();
      Node node2 = new Node(38, node1, node0, node1, node0, 15, 37);
      node2.cloneTree();
      node0.getAncestor(38);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newString(148, "<");
      node_SideEffectFlags1.setMutatesArguments();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "set1");
      node_SideEffectFlags0.setReturnsTainted();
      node0.setSourceFileForTesting("<");
      Node node1 = new Node(46, node0);
      Node node2 = node0.cloneTree();
      node2.isScript();
      node2.isDec();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node node0 = Node.newString(31, "", 31, 31);
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      node0.getString();
      Node node1 = Node.newString(37, "");
      node_SideEffectFlags1.setAllFlags();
      node1.isFor();
      Node node2 = new Node(31, node1, node0, node0, 52, 39);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.setQuotedString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.getQualifiedName();
      node3.isEquivalentToShallow(node2);
      node3.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(31);
      Node node1 = Node.newString(52, "T;");
      node_SideEffectFlags2.setAllFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isHook();
      Node.newString("T;", 50, 29);
      Node node3 = new Node(53, 310, 0);
      node3.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAnd();
      node0.isIf();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node4 = new Node(2, node3, 53, 0);
      node3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = Node.newString((-132), ".1y/v6j~c':kZR6@b");
      node0.setSourceFileForTesting(".1y/v6j~c':kZR6@b");
      Node node2 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      node1.addChildrenToFront(node2);
      node2.isTypeOf();
      node1.putIntProp(1, 111);
      node0.putProp(120, (Object) null);
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.isComma();
      Node node3 = node0.getChildAtIndex(1);
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(54, "");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString(":Xz+R.Q;C<");
      Node node2 = node0.clonePropsFrom(node1);
      node2.isLocalResultCall();
      node2.setLength(96);
      node1.isEquivalentTo(node0, true, true, true);
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      node0.setLineno(node2.MAX_COLUMN_NUMBER);
      node0.isGetElem();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      node0.isVoid();
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node node0 = Node.newString(0, "", 0, 0);
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(0);
      Node node1 = Node.newString(37, "");
      node_SideEffectFlags1.setAllFlags();
      node1.isFor();
      Node node2 = new Node(31, node1, node0, node0, 52, 39);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.setQuotedString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getQualifiedName();
      node3.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString(21, "DFJZ1<VX|=[SbUP[", 25, 3463);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.putBooleanProp(2225, false);
      node0.isDebugger();
      node0.useSourceInfoFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(123, nodeArray0, 8, 132);
      node0.getDirectives();
      node0.getAncestors();
      Stack<Node> stack0 = new Stack<Node>();
      node0.isScript();
      node0.isCatch();
      Node node1 = Node.newNumber((double) 47);
      Node node2 = new Node(7, node0, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node0.setSourceFileForTesting("1");
      Node node3 = new Node(721);
      node2.setLineno(39);
      node2.isSetterDef();
      node1.addChildrenToBack((Node) null);
      node0.hasOneChild();
      int int0 = 39;
      node2.getProp(int0);
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = new Node(31, 31, 31);
      node0.isQualifiedName();
      node0.getDirectives();
      node0.getAncestors();
      node0.siblings();
      node0.isScript();
      node0.isAssignAdd();
      Node node1 = new Node(0, node0, node0, 4095, 4);
      node0.srcrefTree(node1);
      node0.isArrayLit();
      node1.isAssign();
      Node.extractLineno(39);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = Node.newString((-132), ".1y/v6j~c':kZR6@b");
      node0.setSourceFileForTesting(".1y/v6j~c':kZR6@b");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      node1.addChildrenToFront(node2);
      node2.isTypeOf();
      node0.cloneTree();
      node1.isScript();
      node0.isDec();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node0.isComma();
      node1.getSideEffectFlags();
      Node node2 = Node.newNumber((double) 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node1.isTrue();
      node0.isVar();
      node1.isFalse();
      node2.isFor();
      Node.extractLineno(46);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString(97, "");
      node0.isCatch();
      node0.getBooleanProp(97);
      node0.setType(110);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString((-765), "directives");
      Node node2 = new Node((-739), node0, node1, 83, (-5028));
      node0.isIf();
      node0.isCase();
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceEncodedPosition((-3556));
      simpleErrorReporter0.error("DFJZ1<VX|=[SbUP[", "DFJZ1<VX|=[SbUP[", 94, 94);
      node0.isInc();
      node0.isString();
      node0.toString(false, true, false);
      Node.newString("STRING Object#Element");
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("T;", 31, 31);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildrenToFront(node1);
      node0.isTypeOf();
      node0.putIntProp(30, 57);
      node0.toString();
      Node node2 = Node.newString(153, "tOKH,WW_IBq-XMR]6\"", 8, 49);
      node2.isEquivalentToTyped(node0);
      node2.isDec();
      node1.useSourceInfoFromForTree(node2);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(123, nodeArray0, 8, 132);
      node0.getDirectives();
      node0.getAncestors();
      Stack<Node> stack0 = new Stack<Node>();
      node0.isScript();
      node0.isCatch();
      Node node1 = Node.newNumber((double) 47);
      Node node2 = new Node(7, node0, node1);
      Node node3 = new Node(1);
      node2.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAnd();
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node4 = new Node(39, node3, 123, 57);
      node1.isEmpty();
      node2.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString((-154), ".1y/v6j~c':kZR6@b");
      Node node1 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      node0.addChildrenToFront(node1);
      node1.isTypeOf();
      node0.putIntProp(1, 111);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DFJZ1<VX|=[SbUP[");
      node1.isOr();
      node1.isGetProp();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber(3988.41863);
      node0.getInputId();
      node0.toString(false, false, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceFileForTesting("DFJZ1<VX|=[SbUP[");
      Node node1 = new Node(49);
      node1.setLineno(102);
      node1.isSetterDef();
      node0.addChildrenToBack(node1);
      node0.hasOneChild();
      node1.getProp(336);
      node1.isNull();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      Node node1 = Node.newString("r[PtF");
      node0.putProp(53, node1);
      node1.isFromExterns();
      node0.srcref(node1);
      node1.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      int int0 = 29;
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString(97, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = Node.newString(114, "");
      node0.isLabel();
      node1.isFunction();
      Node node2 = Node.newString(1, "<e.JmK");
      Node node3 = node0.cloneTree();
      node3.isScript();
      node0.isDec();
      node2.isVoid();
      node0.isFor();
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node is noa child");
      Node node0 = new Node(111, 111, 3093);
      node0.isSwitch();
      Node node1 = new Node(0, 31, 57);
      node1.cloneTree();
      Node node2 = Node.newString("{Frg]jhoxhAjAP-");
      node0.isEquivalentTo(node2, false, false, false);
      node0.isContinue();
      node1.isGetProp();
      Node node3 = node1.srcrefTree(node0);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(23, 23, 4096);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.toString(true, false, false);
      node0.isTry();
      node0.isWith();
      node0.isExprResult();
      Node.mergeLineCharNo(2043, (-27));
      Node node1 = Node.newString((-27), "MUL 23");
      node0.replaceChild(node1, node1);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      Node node0 = Node.newString(31, "node is not a child");
      node0.setSourceFileForTesting("");
      node0.getDirectives();
      node0.getAncestors();
      Node node1 = new Node(93, 30, 5442);
      node0.siblings();
      node1.isScript();
      Node node2 = new Node(16, node0, node0, node1, 303, 298);
      node2.isAssignAdd();
      Node node3 = node2.useSourceInfoFrom(node0);
      node1.isReturn();
      node3.detachChildren();
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3974);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      node0.isQualifiedName();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node is not a child");
      node0.cloneTree();
      node1.isScript();
      node1.isDec();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = new Node((-3098), (-3098), (-3098));
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags0.setThrows();
      node0.getSourceOffset();
      Node.extractCharno((-1));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 53);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.clonePropsFrom(node1);
      node1.isParamList();
      node0.setLength(40);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.putBooleanProp(0, false);
      node0.setString((String) null);
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newNumber(1178.3644988220285, 8, (-1783));
      Node node1 = node0.cloneNode();
      Node node2 = new Node(34, node0, node0, node0, 8, 841);
      Node node3 = Node.newString(51, "NB#", 152, 130);
      node0.addChildToFront(node2);
      Node node4 = node2.getFirstChild();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NB#");
      node4.setLength((-1));
      node2.getInputId();
      node3.isDelProp();
      node0.isThis();
      node0.removeChildren();
      node4.isDelProp();
      node2.isQuotedString();
      node1.getIndexOfChild(node2);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      node0.addChildrenToFront(node1);
      node1.isTypeOf();
      node0.putIntProp(1, 111);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DFJZ1<VX|=[SbUP[");
      node1.setChangeTime(37);
      node0.isWith();
      node1.isAssign();
      node0.getString();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      node0.isEquivalentToShallow(node0);
      node0.isEquivalentTo(node0, true, true, false);
      node0.isContinue();
      node0.isGetProp();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.srcrefTree(node0);
      node0.isName();
      node0.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.removeProp(50);
      Node node1 = Node.newString("node is noa child", 52, 31);
      node0.isEquivalentToShallow(node1);
      node1.setSourceFileForTesting("node is noa child");
      node1.addSuppression("qNu");
      node0.isEquivalentTo(node1, false, true, false);
      node0.siblings();
      node1.isAssignAdd();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isReturn();
      node0.detachChildren();
      node2.isBreak();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.removeProp(50);
      Node node1 = Node.newString("node is noa child", 52, 31);
      node0.isEquivalentToShallow(node1);
      node1.setSourceFileForTesting("node is noa child");
      node1.isOptionalArg();
      node1.addSuppression("qNu");
      Node node2 = Node.newString(83, "K7_#]h");
      node2.isOr();
      node2.isWhile();
      Node node3 = new Node(53, node2, 12, 39);
      node1.isAssign();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DFJZ1<VX|=[SbUP[");
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isAnd();
      node0.putIntProp(0, 44);
      node0.isOr();
      node0.getQualifiedName();
      node0.isEquivalentToShallow((Node) null);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("[)bb1G1Y<,Zi[IJ|%");
      Node node1 = Node.newString(4095, "|-<no_*r0a", 0, 624);
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newNumber(1232.8695757011865, 624, 31);
      Node node3 = new Node((-1690), node0, 42, 49);
      node3.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.putProp(36, object0);
      node3.useSourceInfoIfMissingFromForTree(node1);
      node0.isComma();
      node1.getChildAtIndex(8233);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("tlIi");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "tlIi");
      node1.setSourceFileForTesting("node is not a child");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = new Node(56);
      node2.setLength((-1922));
      node0.getSourceFileName();
      node0.isScript();
      node0.isDec();
      Node node3 = Node.newString(1, ",");
      Node node4 = new Node(749, node3, node2, node1, node0);
      node4.isVoid();
      node4.isGetterDef();
      node4.getLength();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("first new child has existing parent");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isArrayLit();
      node0.isThrow();
      Node node1 = new Node(16, node0, node0, node0, 790, 97);
      Node node2 = Node.newString("first new child has existing parent", 2, 43);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      node1.isEquivalentToShallow(node2);
      node1.setSourceFileForTesting("first new child has existing parent");
      node1.isOptionalArg();
      node0.isEquivalentToTyped(node1);
      node0.getStaticSourceFile();
      Node node3 = Node.newString(30, "first new child has existing parent", 15, 63);
      node1.hasChildren();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node1);
      node_NodeMismatch0.equals(node3);
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(1268.503184716);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType1, jSType0, jSType0, jSType1, jSType1, jSType1, jSType1, jSType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.toString(true, false, true);
      node0.isTry();
      node0.isWith();
      node1.isExprResult();
      Node.mergeLineCharNo(38, 16);
      Node node2 = Node.newString("Unknown class name");
      node1.replaceChild(node2, node0);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.Sets$ImprovedAbstractSet");
      Node node0 = new Node(112, 112, 4360);
      node0.isSwitch();
      Node node1 = new Node(41, 39, 37);
      Node node2 = node1.cloneTree();
      Node.newString("com.google.common.collect.Sets$ImprovedAbstractSet");
      node2.isEquivalentTo(node1, false, true, false);
      node0.isContinue();
      node2.isGetProp();
      Node node3 = node1.setJSDocInfo((JSDocInfo) null);
      node0.cloneTree();
      node3.getAncestor(101);
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("T$o");
      node0.setChangeTime(0);
      Node node1 = Node.newString(38, "node is not a child");
      node1.setSourceFileForTesting((String) null);
      Node node2 = Node.newString(47, "node is not a child");
      node2.addChildrenToFront(node2);
      node1.putIntProp(15, 4095);
      node2.isOr();
      node0.isCatch();
      node1.getQualifiedName();
      node0.isTry();
      node1.isNE();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.removeProp(50);
      Node node1 = Node.newString("node is noa child", 52, 31);
      node0.isEquivalentToShallow(node1);
      node0.setSourceFileForTesting("node is noa child");
      node1.isOptionalArg();
      node1.addSuppression("qNu");
      node0.isEquivalentTo(node1, false, true, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Object object0 = node0.getProp(51);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "DFJZ1<VX|=[SbUP[";
      objectArray0[4] = (Object) "DFJZ1<VX|=[SbUP[";
      objectArray0[5] = (Object) node0;
      SimpleErrorReporter.getMessage("node is noa child", objectArray0);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(node0.SIDE_EFFECT_FLAGS);
      node2.addChildBefore(node0, node0);
      double double0 = (-254.169);
      Node node3 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node3.setQuotedString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property node is noa child
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPositionForTree(864);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSourceEncodedPosition((-3556));
      simpleErrorReporter0.error("DFJZ1<VX|=[SbUP[", "DFJZ1<VX|=[SbUP[", 94, 94);
      node0.isInc();
      node0.isString();
      node0.toString(false, false, false);
      Node node1 = new Node(38, node0, node0);
      node_SideEffectFlags2.areAllFlagsSet();
      node0.isEmpty();
      node0.getInputId();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      node0.isEquivalentToShallow(node0);
      Node node1 = Node.newNumber((-1.0), (-1073), 40);
      node0.putProp(15, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.isComma();
      node1.getChildAtIndex(36);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      node0.putProp(0, "r[PtF");
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(1);
      node1.setLength(0);
      node0.getSourceFileName();
      node1.isScript();
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(37, node1, node1, node0, node2);
      node2.cloneNode();
      node3.clonePropsFrom(node0);
      node3.isDec();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[", 0, (-676));
      String string0 = "B_;:x&q}";
      node0.isUnscopedQualifiedName();
      int int0 = 0;
      node0.detachChildren();
      Node node1 = new Node(42, node0, node0, node0, node0, (-676), 51);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getDirectives();
      node1.getDirectives();
      Node node3 = node0.getChildBefore(node1);
      node3.getSourceFileName();
      Node node4 = Node.newString(string0, node0.ORIGINALNAME_PROP, int0);
      node4.setType(node0.STATIC_SOURCE_FILE);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node4, node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(111, 111, 3093);
      Node node1 = Node.newString(52, "s0EVH7n", 29, 47);
      node1.addChildrenToFront(node0);
      node0.isRegExp();
      Node node2 = node0.cloneNode();
      node0.isQualifiedName();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.siblings();
      node2.isOnlyModifiesArgumentsCall();
      node1.cloneTree();
      node2.getQualifiedName();
      node2.isEquivalentToShallow(node1);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newNumber((-1650.7155201803535), 0, 0);
      Node node1 = node0.removeChildAfter((Node) null);
      node0.putIntProp(node1.COLUMN_BITS, node1.IS_CONSTANT_NAME);
      // Undeclared exception!
      try { 
        FileSystemHandling.shouldAllThrowIOExceptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-901), nodeArray0);
      Node node1 = new Node(51, 37, 36);
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newNumber((-1.0), (-1073), 40);
      node2.isUnscopedQualifiedName();
      node0.putProp(15, node1);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node3.isFor();
      node1.getJsDocBuilderForNode();
      node3.isRegExp();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags2.setReturnsTainted();
      Node node0 = Node.newString("%s", 43, 43);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildrenToFront(node2);
      node0.isTypeOf();
      node1.putIntProp(39, 8);
      node2.toString();
      node0.isFunction();
      node1.isFor();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting("node is not a child");
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.isUnscopedQualifiedName();
      node1.isNumber();
      node0.cloneTree();
      node0.isTrue();
      node1.isInc();
      node0.getLastSibling();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(111, 111, 3097);
      Node node1 = Node.newString((-154), ".1y/v6j~c':kZR6@b");
      node0.setSourceFileForTesting(".1y/v6j~c':kZR6@b");
      Node node2 = Node.newString(4, ".1y/v6j~c':kZR6@b");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node2.setSourceEncodedPositionForTree(100);
      node_SideEffectFlags1.setAllFlags();
      node2.isFor();
      node2.setSourceEncodedPositionForTree(155);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = node0.cloneNode();
      node4.isQualifiedName();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.siblings();
      node4.isScript();
      node3.isTypeOf();
      node3.isNot();
      node0.isLabelName();
      node4.getLastSibling();
      node3.removeFirstChild();
      node2.isWith();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1009);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newString("r[PtF");
      Object object0 = new Object();
      node0.putProp(1009, object0);
      node0.isFromExterns();
      node0.isGetProp();
      node0.setQuotedString();
      node0.getSourcePosition();
      node0.isAnd();
      Node node1 = new Node((-848), node0, node0, node0, node0, (-1415), (-1));
      node1.isGetElem();
      node1.isAnd();
      node1.isIf();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber((-7236.9424430854));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      node0.getIntProp(3);
      Node node1 = Node.newString("");
      InputId inputId0 = new InputId("O*m?N_7HATPIgP#");
      node1.setInputId(inputId0);
      Node node2 = new Node(12, node0, node0, node0, node1, 4, 1997);
      node0.isEquivalentToTyped(node2);
      node1.setDouble(16);
      String string0 = "I}YnJ!RS7,>T>h(";
      int int0 = (-547);
      Node.newString(string0, int0, node1.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString(35, "R", 35, 35);
      node0.setSourceEncodedPositionForTree(9);
      node0.isEmpty();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.cloneTree();
      node1.getAncestor(42);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString("DFJZ1<VX|=[SbUP[");
      node0.setChangeTime(4095);
      node0.removeProp(3986);
      Node node1 = Node.newString(102, "DFJZ1<VX|=[SbUP[");
      node1.setSourceFileForTesting(",V=1'");
      Node node2 = Node.newString(30, "veyd7H{^9}}Vns-");
      node1.addChildrenToFront(node0);
      node0.isTypeOf();
      node2.putIntProp(42, 36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(4095, 8, 77);
      node3.detachChildren();
      node1.addChildrenAfter(node3, node0);
      node1.isDefaultCase();
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(87855567);
      node0.getType();
      node0.isFunction();
      node0.isDec();
      Node node1 = new Node(55, node0, node0);
      Node node2 = node1.removeChildren();
      node0.checkTreeEqualsImpl(node1);
      node0.addChildrenToFront(node2);
      node1.getJsDocBuilderForNode();
      node0.isUnscopedQualifiedName();
      node1.getAncestors();
      Node.newString((-4096), "DFJZ1<VX|=[SbUP[");
      Node.newNumber((double) 48, 56, 40);
      node1.isSwitch();
      node1.getSourceOffset();
      node2.replaceChildAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString(116, "");
      node0.isLabel();
      node0.isBlock();
      Node node1 = new Node(40);
      node1.isEquivalentTo(node0, false, false, false);
      node0.isCatch();
      node0.getDirectives();
      node0.isGetterDef();
      node1.isIf();
      node0.isCase();
      node1.clonePropsFrom(node0);
  }
}
