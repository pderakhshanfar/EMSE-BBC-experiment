/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:49:32 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      Node node2 = new Node(4095);
      node2.isOr();
      node2.checkTreeEqualsImpl(node1);
      node2.isEquivalentTo(node0);
      node2.isRegExp();
      node1.isComma();
      node2.isIn();
      node1.isSwitch();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node1.useSourceInfoIfMissingFrom(node0);
      node0.getLength();
      node1.isVoid();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isBreak();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(43);
      Node node2 = new Node(4095);
      node2.isOr();
      node1.isEquivalentTo(node2);
      node2.isRegExp();
      node2.isComma();
      node2.isIn();
      node1.isSwitch();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("not a StringNode");
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isFalse();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2405.7170175391525));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      Node node1 = new Node(114, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(1, "Bg* Z_76kjMcclq>U`");
      node0.isEquivalentTo(node3);
      node0.isRegExp();
      node2.isOptionalArg();
      node0.isInstanceOf();
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("The existing child node of the parent should not be null.");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.isNoSideEffectsCall();
      node0.setChangeTime(48);
      Node node2 = Node.newString("The existing child node of the parent should not be null.");
      node2.srcref(node1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isEquivalentTo(node2, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getJSDocInfo();
      node0.isAdd();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("not a StringNode");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node((-677), 38, 1964);
      node1.isVoid();
      node1.isQualifiedName();
      node1.isDelProp();
      node1.isEquivalentTo(node0);
      node0.setString("com.google.javascript.rhino.Node$IntPropListItem");
      node1.isSyntheticBlock();
      node1.useSourceInfoFrom(node0);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = Node.newNumber((double) 46, (-228), 52);
      node0.hasChild(node0);
      node1.setOptionalArg(true);
      Node node2 = new Node(113, 43, 36);
      node0.hasChildren();
      node2.isScript();
      node2.getChildCount();
      Node node3 = new Node(1);
      node2.setIsSyntheticBlock(true);
      node2.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString("com.google.common.base.CharMatcher$12");
      try { 
        node2.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 43 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(43, 910, 910);
      node0.isGetterDef();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, true, true, true);
      node0.isDefaultCase();
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(63);
      node0.cloneTree();
      Node node1 = new Node(63, node0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      node0.getNext();
      node1.isNull();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(116, ".", 116, 116);
      node0.setSourceFileForTesting("]u88(~h");
      Node node1 = new Node(4, node0, node0, node0, node0, 942, 408);
      node0.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node1.isReturn();
      node0.isNumber();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BREAK . 116 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      Node node2 = new Node(4095);
      node2.isOr();
      node2.isEquivalentTo(node0);
      Node node3 = node1.copyInformationFromForTree(node2);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node4 = new Node(16, node2, node2, (-518), 47);
      // Undeclared exception!
      try { 
        node4.checkTreeEquals(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2405.7170175391525));
      node0.getStaticSourceFile();
      Node node1 = new Node(148, node0, node0);
      node1.isSetterDef();
      node1.useSourceInfoFrom(node0);
      node1.isDebugger();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(111, node0, node0, node0, node0);
      Node node2 = new Node(8);
      node2.type = 36;
      node1.isCase();
      node2.isOr();
      node0.isEquivalentTo(node2);
      node2.isRegExp();
      node0.isStringKey();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      nodeArray0[5] = node0;
      node2.useSourceInfoIfMissingFrom(node0);
      nodeArray0[6] = node1;
      Node node3 = Node.newNumber(88.057827003214, 37, 553);
      nodeArray0[7] = node3;
      Node node4 = null;
      try {
        node4 = new Node(8, nodeArray0, 40, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2405.7170175391525));
      node0.getStaticSourceFile();
      Node node1 = new Node(148, node0, node0);
      node1.isSetterDef();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(108, 135, 135);
      node0.removeProp(135);
      node0.hasMoreThanOneChild();
      node0.isDelProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isFromExterns();
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesThisCall();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(108, "fw", 37, 108);
      node0.isWhile();
      node0.putIntProp(43, 1);
      node0.toStringTree();
      Node node1 = new Node(46, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node0.getBooleanProp(0);
      node0.isLabelName();
      node2.isDefaultCase();
      node1.isEquivalentToShallow(node2);
      node1.isOptionalArg();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber((double) 101, 101, (-1998));
      Node node1 = new Node(2475, node0, 29, 31);
      node0.addChildrenToBack(node1);
      Node node2 = node1.getAncestor(15);
      InputId inputId0 = new InputId("k+p*#%;p3[(ed");
      node0.putProp(42, ".");
      node0.isScript();
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2475
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(21, 83, (-325));
      node0.isOptionalArg();
      Node node1 = node0.cloneTree();
      Node node2 = node1.cloneTree();
      node2.putProp(38, node0);
      node0.getIntProp((-1116));
      node0.isCatch();
      node0.isEmpty();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ADD is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(51, "NULL_TYPE");
      Node node1 = node0.getLastSibling();
      node1.setLineno(36);
      node1.isGetterDef();
      Node node2 = new Node(46, 50, 2);
      node2.isThis();
      Node.newNumber((double) 0);
      Node node3 = Node.newNumber((double) 42, 37, 1);
      node0.addChildrenAfter(node3, (Node) null);
      node2.copyInformationFrom(node0);
      Node node4 = null;
      try {
        node4 = new Node((-2485), node2, node3, node1, (Node) null, 42, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(147, 147, (-169));
      Node node1 = node0.cloneNode();
      node0.isBlock();
      node0.isGetterDef();
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(8, ".");
      Node node1 = new Node(52, 38, 42);
      node1.isGetterDef();
      node1.cloneNode();
      node1.isEquivalentTo(node0, true, true, true);
      Node node2 = new Node(49, node1, node1);
      node2.isDefaultCase();
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      // Undeclared exception!
      try { 
        node0.addChildToFront(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(130, ".", 25, 130);
      node0.isNE();
      node0.addChildrenToBack(node0);
      Node node1 = node0.getAncestor(16);
      InputId inputId0 = new InputId((String) null);
      node1.putProp(46, inputId0);
      node0.isScript();
      // Undeclared exception!
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(52, node0, node0, 43, 1);
      Node node2 = node1.srcref(node0);
      Node node3 = null;
      try {
        node3 = new Node(2001, node2, node1, node0, node1, 4095, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(37, 31, 37);
      node0.isGetterDef();
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setThrows();
      node0.isArrayLit();
      node0.setSideEffectFlags(node_SideEffectFlags4);
      node1.getBooleanProp(36);
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(63, 56, 56);
      node0.removeProp(321);
      node0.hasMoreThanOneChild();
      node0.isDelProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isFromExterns();
      Node node1 = node0.cloneNode();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(35, "", (-2476), 39);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      Node node1 = Node.newString(100, ".", 37, 31);
      node0.isComma();
      node0.setOptionalArg(true);
      node1.isIf();
      node0.isInc();
      node1.setString(".");
      node1.detachChildren();
      node0.isDo();
      node1.isAssignAdd();
      Node node2 = new Node(40, node0, node1, node1);
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(64, nodeArray0);
      node0.cloneTree();
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(77, node0, node0, (-1025), 1);
      node1.copyInformationFromForTree(node0);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = Node.newString((-304), "Object#Element");
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -304
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(37, 31, 37);
      node0.isGetterDef();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, true, true, true);
      node1.isDefaultCase();
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node1.isAssignAdd();
      node0.isInstanceOf();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString(116, ".", 116, 116);
      node0.toStringTree();
      Node node1 = new Node(46, node0);
      node0.setSourceEncodedPosition(47);
      node1.srcrefTree(node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(52, "BREAK . 116\n");
      node1.isEquivalentTo(node3);
      Node node4 = new Node(57, node2, node2, node1, node2, 110, 49);
      node0.getDirectives();
      node4.setDirectives((Set<String>) null);
      node0.isFalse();
      node2.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = new Node(123);
      node0.isWith();
      node0.isThrow();
      node_SideEffectFlags2.setThrows();
      node0.isFalse();
      node0.getAncestors();
      Node node1 = new Node(136, node0, node0, node0, 29, 40);
      node1.addChildToBack(node1);
      node1.getQualifiedName();
      node1.isStringKey();
      node1.getAncestor(2309);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(108);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newNumber((-224.1751));
      Node node1 = new Node(108, node0, node0, node0, node0, 83, (-2167));
      node1.isContinue();
      node1.isSyntheticBlock();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(20, ".");
      InputId inputId0 = new InputId(".");
      Node node1 = new Node(37, 82, 36);
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node1.isCall();
      node0.srcref(node1);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(30);
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL 82 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(783);
      Node node2 = node0.cloneTree();
      node2.getProp(42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("D-7");
      node0.putProp(52, templateType0);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      vector0.trimToSize();
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node1.checkTreeEquals(node2);
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(679);
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node((-473), 56, (-3105));
      node1.getProp(679);
      node0.isEquivalentTo(node1);
      Node node2 = new Node(49);
      node2.getQualifiedName();
      node2.isThrow();
      node2.isUnscopedQualifiedName();
      node2.hasOneChild();
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -473
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2405.7170175391525));
      node0.getStaticSourceFile();
      Node node1 = new Node(148, node0);
      node1.isTry();
      Node node2 = node1.cloneNode();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Node.INCRDECR_PROP;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(32);
      Node node1 = new Node(46, 8, 154);
      node0.isTypeOf();
      Node node2 = new Node(15, node0, node1);
      Node node3 = Node.newNumber((-843.0));
      node3.isLabelName();
      node2.isReturn();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Node.INCRDECR_PROP;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = new Node(0, 1, 32);
      node_SideEffectFlags2.setReturnsTainted();
      node0.isReturn();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(4, node0);
      node0.useSourceInfoFrom(node1);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node((-2574));
      Node node2 = new Node((-569), node1, node1, node1);
      Node node3 = node1.clonePropsFrom(node2);
      // Undeclared exception!
      try { 
        node3.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString(130, ".", 25, 130);
      node0.addChildrenToBack(node0);
      Node node1 = new Node(4, 36, (-2252));
      node0.isEquivalentToTyped(node1);
      node0.getAncestor(16);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = Node.newString("", 105, 4);
      // Undeclared exception!
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(31);
      Node node1 = Node.newNumber((double) 46, (-262), 52);
      Node node2 = Node.newString(48, "Object#Element", 57, 37);
      node2.hasChild(node0);
      node1.setOptionalArg(true);
      node0.useSourceInfoIfMissingFrom(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(159, 12, 46);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(14, nodeArray0);
      node1.srcref(node2);
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(4);
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LT 0 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node1.checkTreeEquals(node2);
      node2.addChildAfter(node3, (Node) null);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2405.7170175391525));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      Node node1 = new Node(105, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(1, "Bg* Z_76kjMcclq>U`");
      node0.isEquivalentTo(node3);
      node0.isRegExp();
      node2.isOptionalArg();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(1073741824, "", 1073741824, 120);
      node0.isNE();
      Node node1 = new Node(8, (-941), 43);
      node1.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      Node node2 = node1.srcref(node0);
      node2.getLength();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-578));
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1073741824
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(20, ".");
      InputId inputId0 = new InputId(".");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.setWasEmptyNode(true);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.wasEmptyNode();
      Node node1 = new Node(29, node0, node0, node0, 471, 33);
      node0.isGetterDef();
      node0.getJSType();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(963);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = new Node(2090);
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = new Node(98, node0, 147, 83);
      Node node2 = new Node(37, node1, 1, 42);
      node2.srcref(node0);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(300, "com.google.common.base.Predicate$InPredicate", 1055, 26);
      Node node1 = new Node(300, node0, node0);
      Node node2 = new Node(203, node1);
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      node0.toStringTree();
      node0.isEquivalentToTyped(node0);
      Node node1 = Node.newNumber((double) 30);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node1.checkTreeEquals(node2);
      Node.extractCharno(43);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[22];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setOptionalArg(false);
      node0.getAncestors();
      node0.isOr();
      node1.getAncestors();
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node1.isInstanceOf();
      Node node2 = jSTypeRegistry1.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(49, 108, (-1490));
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = new Node((-4418), node0, node1);
      node0.isLabelName();
      node0.isReturn();
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(64);
      node0.isSetterDef();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = new Node(100);
      node0.isCase();
      node0.isDec();
      node0.isHook();
      Node node1 = new Node((-81), node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node0.isOptionalArg();
      node0.getJSType();
      node1.isEquivalentToTyped(node0);
      node0.isWhile();
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(32);
      node0.isQualifiedName();
      node0.setSourceEncodedPosition(32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("", 154, 138);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString(46, "");
      node2.isEquivalentTo(node3);
      node1.isRegExp();
      node0.isOptionalArg();
      node2.isInstanceOf();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isVar();
      Node node2 = new Node(4095);
      node1.isCase();
      node2.isOr();
      Node.newString(1280, "", 57, 461845907);
      Node node3 = new Node(56);
      node0.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-424));
      node3.getJSType();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(695, 695, 695);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(2141, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.isArrayLit();
      Node node2 = Node.newString(0, "Object#Key");
      Node node3 = node1.srcrefTree(node2);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(51, "valueOf");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-764));
      Node node2 = new Node(42, node1);
      node0.setSourceEncodedPosition(154);
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      Node.newString(122, "valueOf");
      node0.isEquivalentTo(node3);
      node3.isRegExp();
      node1.isOptionalArg();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node((-5108));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=DP;@g9");
      node0.putProp((-1226), (Object) null);
      node0.isOptionalArg();
      node0.setJSType((JSType) null);
      Node node1 = Node.newString("=DP;@g9", 4398, 471);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = Node.newString("=DP;@g9");
      node2.getQualifiedName();
      node3.children();
      node0.getParent();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = Node.newString(52, "aluKeOf", 8, 51);
      Node node2 = new Node(112, node0, node0, node1, node1);
      int int0 = Node.NO_SIDE_EFFECTS;
      node2.removeProp(4095);
      Node node3 = new Node(132);
      // Undeclared exception!
      try { 
        node3.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node1.isVoid();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      Node.newString("valueO");
      node1.isVar();
      node1.srcref(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(4095);
      node1.isCase();
      node2.isFunction();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-3885);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3885));
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = null;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      Node node1 = Node.newString("Cw5k@6Y*6D?.-", (-3885), (-3885));
      nodeArray0[3] = node1;
      nodeArray0[4] = null;
      Node node2 = null;
      try {
        node2 = new Node((-3885), nodeArray0, 29, 3356);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("v|ZP_+]", 695, (-1319));
      Node node1 = new Node(37, node0, node0, node0);
      Node node2 = node1.clonePropsFrom(node0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node2;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node3 = null;
      try {
        node3 = new Node(50, nodeArray0, (-2410), 3736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(679);
      Node node1 = new Node(31, 49, 50);
      node1.isTypeOf();
      Node node2 = new Node(16, node1, node0);
      node2.isLabelName();
      node2.setSourceEncodedPositionForTree((-1303));
      node1.isReturn();
      node2.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isBreak();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", false);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("", false);
      simpleSourceFile1.getLineOffset(1610612736);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = new Node(51);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(53, node2, node2);
      node3.getProp(1481);
      node2.putProp(1, "");
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node node1 = new Node(56, node0, node0, node0);
      node1.isExprResult();
      Node node2 = new Node(42);
      Node node3 = node2.cloneTree();
      node3.getProp(2490);
      node2.putProp(40, node0);
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(10);
      node0.isFunction();
      node1.getLineno();
      node1.isOptionalArg();
      Node node2 = new Node(125);
      node0.setCharno(13);
      node2.getLastSibling();
      node2.isStringKey();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Should not happen\n");
      Node node3 = Node.newString((-1199), "", (-1), 48);
      Node node4 = new Node(15, node0, (-4096), 50);
      node3.isIn();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(2147483645, node0, node0, node0);
      node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString(32, "[6", 32, 32);
      node0.setSourceEncodedPosition(32);
      Node node1 = new Node(9);
      Node node2 = new Node(39, 47, 4095);
      node0.isTrue();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(51);
      Node node4 = node2.cloneTree();
      node3.getProp(11);
      node4.putProp(57, node1);
      Node node5 = Node.newString(31, "&V\n_i'`Nb");
      node5.isFunction();
      node1.isInc();
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(0, ".");
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(0, node0, node0, node0, node0, 52, 42);
      node1.isParamList();
      Node node2 = new Node(2, 30, 117);
      node1.isGetElem();
      int int0 = Node.INPUT_ID;
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags7.clearSideEffectFlags();
      Node node0 = new Node(108);
      Node node1 = node0.cloneTree();
      node0.getProp(47);
      node1.putProp(50, node_SideEffectFlags2);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = new Node(31, 49, 50);
      node1.isTypeOf();
      Node node2 = new Node(16, node1, node0);
      node2.isLabelName();
      node1.isReturn();
      node2.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEqualsImpl(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = Node.newString(1130, "[6", 8, 41);
      node0.setSourceEncodedPosition(113);
      Node node2 = new Node((-2746));
      node1.isTrue();
      node1.isUnscopedQualifiedName();
      Node node3 = Node.newString("?VQ4R,kzW");
      Node.newNumber((-1.0));
      node3.isAssign();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2431.7538));
      node0.putBooleanProp(148, false);
      Node node1 = new Node(105, node0);
      node1.toStringTree();
      Node node2 = Node.newNumber((double) 49, 52, 1);
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.putIntProp(778, 57);
      node0.isNot();
      node1.setWasEmptyNode(false);
      node0.isName();
      node1.getBooleanProp(56);
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2431.7538));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      // Undeclared exception!
      try { 
        node0.getProp(148);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.setSourceEncodedPositionForTree(41);
      Node node1 = Node.newString(52, "J?3+.kF;''cu[n", 110, 124);
      Node node2 = new Node(1189);
      node1.isFunction();
      node2.getLineno();
      node1.isOptionalArg();
      Node node3 = new Node(54);
      node1.setCharno(57);
      node0.getLastSibling();
      node2.isStringKey();
      Node.newString(1655, "J?3+.kF;''cu[n", 1, 38);
      Node node4 = new Node(11, node3, 30, (-2746));
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Vector<JSType> vector0 = new Vector<JSType>();
      vector0.spliterator();
      Node node0 = new Node(116);
      Node node1 = new Node(4, node0, node0, 39, (-128));
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString(97, "");
      node0.isEquivalentTo(node2);
      node0.isRegExp();
      Node node4 = null;
      try {
        node4 = new Node(57, node2, node2, node3, 42, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 100, 100);
      node0.isNE();
      Node node1 = Node.newString(57, "", 1, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(154);
      node1.isObjectLit();
      node0.setOptionalArg(false);
      Node node2 = new Node(4095, 38, 1);
      node1.isNumber();
      node1.isReturn();
      node1.mayMutateArguments();
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node1.isVoid();
      node0.detachChildren();
      Node node2 = Node.newNumber((double) 46);
      node1.setChangeTime(8237);
      node2.setLength(49);
      node2.isNot();
      node2.setWasEmptyNode(true);
      node1.isName();
      node1.getBooleanProp(31);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString(32, "[6", 32, 32);
      node0.setSourceEncodedPosition(32);
      Node node1 = new Node(9);
      Node node2 = new Node(39, 47, 4095);
      node0.isTrue();
      node0.isUnscopedQualifiedName();
      node0.getJSDocInfo();
      Node node3 = node2.getLastSibling();
      node0.isStringKey();
      Node.newString(16, "r$[%q/zDL", 43, (-1178));
      Node node4 = new Node(12, node2, (-1579), 43);
      node3.isIn();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(108, "(", 108, 108);
      node0.toStringTree();
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.setSourceEncodedPosition(47);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(52, "IF ( 108\n");
      node1.isEquivalentTo(node3);
      node2.isRegExp();
      node0.isOptionalArg();
      int int0 = Node.SLASH_V;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node.newString((-943), "Object#Key", 15, 110);
      Node node0 = new Node(56);
      Node node1 = new Node(0, 8, 110);
      node1.isFunction();
      node1.getLineno();
      Node node2 = new Node(44, node0);
      node2.isOptionalArg();
      Node node3 = new Node(119);
      node0.setCharno(43);
      node1.getLastSibling();
      node1.isStringKey();
      Node.newString((-3703), "A{", 6, 39);
      Node node4 = null;
      try {
        node4 = new Node(154, node0, 2523, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Vector<JSType> vector0 = new Vector<JSType>();
      vector0.spliterator();
      Node node0 = new Node(116);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isEquivalentTo(node1, true, true, true);
      Node node2 = node0.cloneNode();
      node0.getType();
      node0.isTrue();
      node1.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      Node node3 = null;
      try {
        node3 = new Node(53, nodeArray0, 46, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(51, "valueOf");
      node1.isNE();
      Node node2 = new Node(52, 55, 52);
      node1.isAdd();
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node2.isInstanceOf();
      Node.newString("w'$U'~9~");
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      Node node0 = new Node(123, 49, 49);
      node0.isBreak();
      Node node1 = new Node(30, node0, node0, node0, node0, 29, 1);
      node0.isDo();
      node1.isGetElem();
      node0.wasEmptyNode();
      node1.cloneNode();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber((double) 154);
      Node node1 = new Node(154, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.getLength();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING_KEY
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.setSourceEncodedPositionForTree(41);
      Node node1 = Node.newString(52, "com.google.common.base.Predicate$InPredicate", 110, 124);
      Node node2 = new Node(1189);
      node1.setOptionalArg(true);
      Node node3 = new Node(29, 48, 8);
      node1.isFunction();
      node2.getLineno();
      node1.isOptionalArg();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node4 = new Node(47);
      Node node5 = new Node(147);
      node5.cloneTree();
      node2.putProp(13, immutableList0);
      node5.isFunction();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags6.clearSideEffectFlags();
      ImmutableList.of();
      Node node0 = new Node(124);
      Node node1 = node0.cloneTree();
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      node1.putProp(4095, jSTypeNative0);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(20, ".");
      node0.setSourceFileForTesting((String) null);
      node0.toStringTree();
      Node node1 = new Node(1945, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getBooleanProp(2);
      node0.isLabelName();
      node2.isDefaultCase();
      node0.isStringKey();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.setSourceEncodedPositionForTree(41);
      Node node1 = Node.newString(52, "com.google.common.base.Predicate$InPredicate", 110, 124);
      Node node2 = new Node(1189);
      node1.setOptionalArg(true);
      Node node3 = new Node(29, 48, 8);
      node1.isFunction();
      node2.getLineno();
      node1.isOptionalArg();
      Node node4 = new Node(54);
      node1.setCharno(57);
      Node node5 = node3.getLastSibling();
      node5.cloneNode();
      node2.isStringKey();
      Node.newString(1655, "J?3+.kF;''cu[n", 1, 38);
      Node node6 = new Node(1, node3, 46, 8233);
      node4.isIn();
      node6.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node0 = new Node(32);
      node0.isWith();
      node0.isSyntheticBlock();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      Node node1 = new Node(4, node0, node0, node0, 57, 56);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.addChildToBack(node1);
      node0.getQualifiedName();
      Node node2 = new Node(1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(126);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 126
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, 39);
      node0.detachChildren();
      Node node2 = new Node(114);
      node2.setOptionalArg(false);
      Node node3 = new Node(8199, (-231), 1891);
      node0.isFunction();
      node2.getLineno();
      node1.isOptionalArg();
      Node node4 = new Node((-1449));
      node3.setCharno(4);
      node1.getLastSibling();
      node3.isStringKey();
      Node node5 = Node.newString(99, "", 57, (-825));
      Node node6 = new Node(16, node2, (-3735), 209);
      node5.isIn();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(82);
      node0.isWhile();
      node0.isVoid();
      node0.detachChildren();
      Node.newNumber((double) 46);
      node0.setChangeTime(8237);
      node0.isUnscopedQualifiedName();
      node0.isArrayLit();
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.getChangeTime();
      node0.getJSType();
      Node node1 = new Node(16);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) 181, (-367), 181);
      Node node1 = new Node((-367), node0, 2, 53);
      node1.getAncestors();
      Node node2 = new Node(181, node1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getDirectives();
      node0.setVarArgs(false);
      node2.isTrue();
      node0.isQuotedString();
      // Undeclared exception!
      try { 
        node2.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(2147483628);
      Node node1 = new Node(40, node0, 40, 37);
      node1.isInstanceOf();
      Node node2 = new Node(38);
      node2.setOptionalArg(false);
      int int0 = (-2874);
      int int1 = (-2221);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(126);
      nodeArray0[2] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = Node.newNumber(1.0);
      node0.getStaticSourceFile();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.toStringTree();
      Node node3 = new Node(1, node1);
      int int0 = Node.INPUT_ID;
      Node node4 = Node.newString(52, "Object#Key");
      node0.srcrefTree(node4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "com.google.common.base.Predicate$InPredicate";
      Node node0 = Node.newString(385, "com.google.common.base.Predicate$InPredicate", 228, 228);
      Node node1 = new Node(1380, node0, node0, (-2799), 130);
      node1.isFromExterns();
      node0.getDirectives();
      Node node2 = new Node(1380, node1, (-2170), 1351);
      Node node3 = node2.removeFirstChild();
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1380
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      simpleErrorReporter1.warning("Object#Element", "Object#Element", 4, (-3025));
      node0.getStaticSourceFile();
      Node node1 = new Node(124);
      Node node2 = new Node(15, node0, node1, (-5076), 119);
      node2.isThrow();
      node1.isAdd();
      node0.children();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesArguments();
      Node node0 = new Node(116, 116, 116);
      node0.isWith();
      node0.isThrow();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setAllFlags();
      node0.isCall();
      Node node1 = new Node((-2491), node0, node0, node0, (-2491), (-1941));
      node0.isUnscopedQualifiedName();
      node1.hasOneChild();
      node0.isGetterDef();
      node1.getJSType();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(126);
      nodeArray0[2] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[17];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.detachChildren();
      Node node1 = new Node(30, node0, 174, 128);
      node1.getFirstChild();
      node1.isGetElem();
      Node.newNumber((double) 1);
      Node node2 = new Node(48);
      node2.isComma();
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = new Node(37, 31, (-4944));
      node0.isWhile();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, true, true, true);
      node1.getSourceFileName();
      node1.isDefaultCase();
      Node node2 = null;
      try {
        node2 = new Node(4, (Node) null, node1, (Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      Node node1 = node0.getLastSibling();
      node1.setLineno(2);
      node1.isSetterDef();
      Node node2 = node1.cloneNode();
      node2.setCharno(2);
      Node node3 = new Node(38, node0);
      node1.isLabelName();
      Node node4 = new Node(12, 57, 54);
      node1.isThis();
      node3.isAssign();
      Node.newNumber(4095.0);
      node3.srcref(node1);
      Node.newNumber((double) 1, 2147483628, 57);
      Node node5 = Node.newNumber((double) 55);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node4, node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node0 = new Node(32);
      node0.isWith();
      node0.isSyntheticBlock();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      Node node1 = new Node(4, node0, node0, node0, 57, 56);
      node0.addChildToBack(node1);
      Node node2 = node0.getAncestor(733);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      node2.putProp(98, jSTypeNative0);
      Node node3 = Node.newString("com.google.common.collect.Lists$2");
      Node node4 = null;
      try {
        node4 = new Node(32, node0, node0, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(51, node0, node1, 32, (-1765));
      Node node3 = node2.copyInformationFromForTree(node0);
      Vector<JSType> vector2 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isAssign();
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Node node0 = new Node(116);
      node0.isWith();
      node0.isThrow();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = new Node(1);
      Node node2 = node0.cloneTree();
      node2.srcrefTree(node1);
      Node node3 = Node.newString(15, "com.google.common.base.Predicate$InPredicate", 64, 50);
      node3.isEquivalentToTyped(node2);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(49);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 49
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node0.removeProp(42);
      node0.putProp(42, node_SideEffectFlags1);
      node0.isFalse();
      node0.isDelProp();
      node0.getAncestors();
      node0.isFromExterns();
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesThisCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "com.google.common.base.Predicate$InPredicate";
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 32, 32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, (-228), 52);
      Node node2 = Node.newString(48, "Object#Element", 57, 37);
      node2.hasChild(node0);
      node1.setOptionalArg(true);
      Node node3 = new Node(113, 43, 36);
      node3.isIf();
      node3.isScript();
      node3.getChildCount();
      Node node4 = Node.newString(32, "Object#Key", 29, 1);
      Node node5 = new Node(1);
      node3.setIsSyntheticBlock(true);
      node4.isDo();
      node3.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      node3.cloneNode();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      Node node0 = new Node(100);
      node_SideEffectFlags3.setReturnsTainted();
      Node node1 = new Node(42, node0, 39, 39);
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node1.isArrayLit();
      node1.isThis();
      Node node2 = new Node((-701), node1, 15, 513);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(126);
      node0.isSetterDef();
      Node node1 = node0.cloneNode();
      node0.setCharno(2163);
      Node node2 = new Node(57, node0);
      node0.isLabelName();
      Node node3 = Node.newNumber((double) 47);
      node2.useSourceInfoFromForTree(node1);
      node1.srcref(node2);
      Node node4 = Node.newNumber(1508.587830965, 4221, 16384);
      node1.addChildrenAfter(node3, (Node) null);
      node4.isQualifiedName();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, 39);
      node0.detachChildren();
      Node node2 = Node.newNumber((-1.949922974381328));
      node1.setChangeTime(8237);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node1.isArrayLit();
      node2.getIntProp(0);
      node1.getBooleanProp(56);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(51, "valueOf");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-764));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = new Node((-3055));
      node_SideEffectFlags0.setReturnsTainted();
      Node node3 = new Node(47, node2, 4, 54);
      node3.addChildBefore(node1, node2);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node2.isArrayLit();
      node0.isThis();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node3.getJSType();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(120, node0, node0, (-1273), 131072);
      Node node2 = node1.srcref(node0);
      Node node3 = new Node(122, node1, node1, 55, 29);
      node3.getQualifiedName();
      InputId inputId0 = new InputId((String) null);
      node3.setInputId(inputId0);
      node3.setWasEmptyNode(false);
      int int0 = Node.ORIGINALNAME_PROP;
      int int1 = 1;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node5 = null;
      try {
        node5 = new Node(1, node2, node4, node4, 14, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(108, ".", 25, 108);
      node0.isNE();
      node0.toStringTree();
      Node node1 = new Node(46, node0);
      node0.setSourceEncodedPosition(47);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(52, "IF . 25\n");
      node1.isEquivalentTo(node3);
      node2.isRegExp();
      node2.isOptionalArg();
      int int0 = Node.ORIGINALNAME_PROP;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags6.setThrows();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags9.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      ImmutableList.of();
      Node node0 = new Node((-1407));
      Node node1 = new Node(37, node0, node0, (-2242), 32);
      node1.cloneTree();
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      node0.putProp(2999, jSTypeNative0);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(42, "com.google.common.base.Predicate$InPredicate");
      node0.isNE();
      Node node1 = new Node(51, 49, 40);
      node1.isAdd();
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(56);
      node0.isInstanceOf();
      Node node2 = Node.newString("v=>[^*c1Fl0z>@~rp`");
      node0.wasEmptyNode();
      Node node3 = node1.cloneNode();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node3;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      Node node4 = null;
      try {
        node4 = new Node(159, nodeArray0, (-133), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 32, 32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setReturnsTainted();
      node0.isRegExp();
      Node node1 = new Node(52);
      node0.isContinue();
      int int1 = Node.ORIGINALNAME_PROP;
      Node node2 = Node.newString(47, "y", 42, 38);
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31);
      Node node1 = Node.newNumber((double) 46, 24, 52);
      Node node2 = Node.newString(48, "Object#Element", 51, 37);
      node2.hasChild(node0);
      node1.setOptionalArg(true);
      Node node3 = Node.newString(8, "Object#Key", 4, 16);
      node3.isIf();
      Node node4 = new Node(1, (-3986), (-1321));
      node0.isNumber();
      // Undeclared exception!
      try { 
        node4.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node node0 = new Node(123);
      node0.isWith();
      node0.isThrow();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isCall();
      node_SideEffectFlags4.setThrows();
      Node node1 = new Node(132, node0, node0, node0, 29, 40);
      node1.addChildToBack(node1);
      node1.getQualifiedName();
      Node node2 = new Node(111);
      Node node3 = node2.cloneTree();
      node1.putProp(54, node_SideEffectFlags4);
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(5479, "R8Oxl]\"S%j}9CH*");
      node1.isEquivalentTo(node0, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node0.isOnlyModifiesThisCall();
      node0.isRegExp();
      Node node2 = new Node(4231);
      node0.isContinue();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node3 = new Node(43, node1, node2, 2, 1522);
      node2.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = new Node(32);
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(16777216);
      node0.setOptionalArg(false);
      Node node3 = new Node(4095, 2, 31);
      node1.isFunction();
      node3.getLineno();
      node0.isOptionalArg();
      Node node4 = new Node(29);
      node0.setCharno(12);
      Node node5 = node1.getLastSibling();
      node4.isStringKey();
      Node node6 = Node.newString((-396), "0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10", 285, 38);
      Node node7 = new Node(2, node5, 47, (-1458));
      node6.isIn();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, 29, 52);
      node1.setCharno(12);
      Node.newString(48, "Object#Element", 2838, 37);
      node1.isAdd();
      node1.setOptionalArg(false);
      Node node2 = new Node(108, 43, 36);
      node2.toString();
      node2.isIf();
      node0.hasChildren();
      Node node3 = new Node(52, node0);
      // Undeclared exception!
      try { 
        node3.getExistingIntProp(52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 52
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = (-1874);
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node$NumberNode", 12, (-1874));
      node0.putProp(82, (Object) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      vector0.spliterator();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31);
      node0.setOptionalArg(true);
      node0.isSyntheticBlock();
      Node node1 = new Node(49, 1, 2);
      node1.type = 30;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isTypeOf();
      Node node1 = new Node(2, node0, node0);
      node1.putIntProp(55, (-371));
      node0.putIntProp(57, 155);
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isReturn();
      node1.getSourceOffset();
      node1.isStringKey();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node node1 = new Node((-852), node0, node0, (-1275), 152);
      Node node2 = new Node(57);
      node0.isOptionalArg();
      node1.copyInformationFromForTree(node2);
      node2.isDebugger();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isNot();
      node3.isInstanceOf();
      node3.useSourceInfoIfMissingFrom(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = Node.newString(57, "", 1, 0);
      Node node2 = Node.newString("A9t}j");
      node2.getIndexOfChild(node0);
      node0.removeProp(63);
      node1.getCharno();
      // Undeclared exception!
      try { 
        Node.newString((String) null, 331, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node.newString(51, "valueOf");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-764));
      node0.isOnlyModifiesThisCall();
      node0.isRegExp();
      Node node1 = new Node(115);
      node1.isContinue();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(32);
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      Node node2 = new Node(86, 1106, 9);
      node1.isAdd();
      Node node3 = new Node((-1276), node2, 1178, (-589));
      node3.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2865);
      node3.isInstanceOf();
      Node.newString("first new child has existing sibling");
      node1.wasEmptyNode();
      node1.cloneNode();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.putProp(50, simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(54);
      node0.removeProp(50);
      node0.isCast();
      Node.extractCharno(56);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NULL_TYPE", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 28, (-1489));
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(230);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      ImmutableList.of();
      Node node1 = new Node(98);
      Node node2 = node1.cloneTree();
      node2.getInputId();
      node0.putProp(1528, (Object) null);
      Node node3 = Node.newString(" (");
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      node0.isNE();
      Node node1 = Node.newString(32, ">%.PO!", 43, (-4096));
      Node node2 = Node.newNumber(47.0, 40, (-252));
      node2.putIntProp(1, 37);
      node1.isNot();
      node0.setWasEmptyNode(true);
      node0.isName();
      node2.getBooleanProp(40);
      node2.mayMutateArguments();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node((-642));
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(2147483628);
      Node node1 = new Node(40, node0, 40, 37);
      node1.isInstanceOf();
      Node node2 = new Node(38);
      node2.setOptionalArg(false);
      Node node3 = new Node(46, (-2874), (-2221));
      node3.isTrue();
      node0.isUnscopedQualifiedName();
      Node node4 = new Node(57, node1);
      node4.removeFirstChild();
      node4.isInc();
      node2.isSetterDef();
      String string0 = "";
      Node.newString("", 36, 30);
      node2.isScript();
      Node node5 = null;
      try {
        node5 = new Node(56, node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = new Node((-9));
      node0.isWith();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      Node node1 = new Node(4, node0, node0, node0, 57, 56);
      Node node2 = node0.srcref(node1);
      node2.addChildToBack(node1);
      node0.getQualifiedName();
      Node node3 = new Node(1);
      node1.isStringKey();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isDebugger();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.getLength();
      node2.isRegExp();
      Node node4 = Node.newNumber((double) 54);
      node4.isCast();
      Node.newNumber(1508.587830965);
      Node node5 = new Node(119, node1, 83, 102);
      node5.isInc();
      node4.isContinue();
      // Undeclared exception!
      try { 
        node5.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.setSourceEncodedPositionForTree(41);
      Node node1 = Node.newString(52, "com.google.common.base.Predicate$InPredicate", 110, 124);
      Node node2 = new Node(1189);
      node1.setOptionalArg(true);
      Node node3 = new Node(29, 48, 8);
      node1.isFunction();
      node2.getLineno();
      node1.isOptionalArg();
      Node node4 = new Node(54);
      node1.setCharno(57);
      node3.getLastSibling();
      node2.isStringKey();
      Node.newString(1655, "J?3+.kF;''cu[n", 1, 38);
      Node node5 = new Node(1, node3, 46, 8233);
      node4.isIn();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      ImmutableList.of();
      Node node0 = new Node((-2030));
      Node node1 = new Node((-3047), 32, 0);
      Node node2 = node1.cloneTree();
      node0.putProp(37, node_SideEffectFlags5);
      node2.isFunction();
      Node.extractCharno(51);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = new Node(100);
      Node node1 = node0.cloneTree();
      node1.isOptionalArg();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.putProp(55, immutableList0);
      node0.isFunction();
      Node.extractCharno(31);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags(130);
      node_SideEffectFlags8.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags9.setMutatesThis();
      node_SideEffectFlags7.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ImmutableList.of();
      Node node0 = new Node(130);
      Node node1 = node0.cloneTree();
      Object object0 = new Object();
      node1.putProp(54, object0);
      node0.isFunction();
      Node.extractCharno(3026);
      node0.isThrow();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = new Node(43, node0, node0, 482, 434);
      Node node2 = node1.srcref(node0);
      InputId inputId0 = new InputId((String) null);
      node2.setInputId(inputId0);
      node0.setWasEmptyNode(true);
      int int0 = Node.ORIGINALNAME_PROP;
      Node node3 = null;
      try {
        node3 = new Node(0, node0, node0, node0, 216, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(64, nodeArray0);
      Node node1 = new Node(51, node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 32, 32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node1 = Node.newNumber((-1743.467941770473), 47, (-4944));
      Node node2 = Node.newString("", 30, 48);
      node2.isEquivalentTo(node0);
      node2.getAncestor(32);
      node1.isWith();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node node2 = new Node(102508, node1, node0, (-718), 24);
      Node node3 = node1.copyInformationFromForTree(node0);
      node0.isDebugger();
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isAssign();
      node4.isInstanceOf();
      node1.isLabelName();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isScript();
      Node node1 = new Node(49, node0, node0, 4, 100);
      Node node2 = node1.srcref(node0);
      node1.getQualifiedName();
      InputId inputId0 = new InputId((String) null);
      node1.setInputId(inputId0);
      node1.setWasEmptyNode(true);
      int int0 = Node.ORIGINALNAME_PROP;
      Node node3 = new Node(32, node1, node2, node2, (-622), 8);
      node3.toStringTree();
      int int1 = 2607;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      Node node4 = new Node(28, node3);
      nodeArray0[1] = node4;
      nodeArray0[2] = node2;
      nodeArray0[3] = node3;
      nodeArray0[4] = node2;
      Node node5 = null;
      try {
        node5 = new Node(51, node3, node3, 127, (-4071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = new Node(32);
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node0.getStaticSourceFile();
      node0.isArrayLit();
      node1.getIntProp(42);
      node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, 24, 52);
      Node node2 = Node.newString(48, "Object#Element", 2825, 37);
      node2.hasChild(node0);
      node1.setOptionalArg(false);
      node0.getStaticSourceFile();
      Node node3 = new Node(2953, (-652), 32768);
      node3.isIf();
      node0.isLabelName();
      Node node4 = new Node(2470, node2);
      node4.isLabelName();
      node0.setJSDocInfo((JSDocInfo) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("e~rGAJ\"}06o4B^]%q", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      node0.setLineno(82);
      node0.isSetterDef();
      Node node1 = node0.cloneNode();
      node1.setCharno(8);
      Node node2 = new Node(0, node1);
      node0.isLabelName();
      Node node3 = new Node((-690), 15, 2);
      Node node4 = new Node(40, node0);
      node4.isThis();
      node3.isAssign();
      Node node5 = Node.newNumber((double) 2);
      Node node6 = new Node(46, node3);
      node6.srcref(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.newNumber((-517.860544405), 159, (-2860));
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node5, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node0.siblings();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node node2 = new Node(37, node1, node0, 50, 32);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node4 = node2.copyInformationFromForTree(node1);
      node0.getQualifiedName();
      Node node5 = new Node(36, node2, node4);
      // Undeclared exception!
      try { 
        node3.replaceChild(node4, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(28, "NULL_TYPE", 28, 28);
      Node node1 = node0.getLastSibling();
      node1.setLineno(36);
      node0.isSetterDef();
      Node node2 = node0.cloneNode();
      node0.setCharno(42);
      Node node3 = new Node(36, node1);
      node2.isLabelName();
      Node node4 = new Node(46, 50, 2);
      node4.isThis();
      node1.isAssign();
      Node node5 = Node.newNumber((double) 0);
      Node node6 = node0.srcref(node5);
      Node node7 = Node.newNumber((double) 42, 37, 1);
      node6.addChildrenAfter(node7, (Node) null);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(148, 12, 46);
      node1.getProp(1);
      node0.isEquivalentTo(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("((zj", true);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(16);
      simpleSourceFile0.getLineOffset(43);
      Node node2 = new Node(40, node1, node0, node0, (-685), 2004);
      Node node3 = Node.newString("", 43, 305);
      node2.isEquivalentToTyped(node3);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.isOnlyModifiesThisCall();
      node0.isRegExp();
      node4.getBooleanProp(41);
      node2.isCast();
      node4.isInc();
      node4.isContinue();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(20, "", (-2968), 100);
      Node node1 = Node.newNumber((double) 4095);
      node1.isNE();
      Node node2 = new Node(64, (-1619), 32);
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      node2.srcref(node1);
      node0.getQualifiedName();
      InputId inputId0 = new InputId("p8K+n0F\"L{su=");
      node0.setInputId(inputId0);
      node2.setWasEmptyNode(false);
      int int0 = Node.ORIGINALNAME_PROP;
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(148, 12, 46);
      node1.getProp(1);
      node0.isEquivalentTo(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("((zj", true);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(16);
      simpleSourceFile0.getLineOffset(43);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node1.srcref(node0);
      Node node2 = new Node(57, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(159, 12, 46);
      node1.getProp(1);
      Node node2 = new Node(40);
      node1.isWith();
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isCall();
      Node node3 = new Node(47, node2, node0, node0, 36, 57);
      Node node4 = node3.srcref(node2);
      node4.getQualifiedName();
      Node node5 = new Node(56);
      node4.isExprResult();
      node4.isStringKey();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(2322, " AKLf0Pu}S)m)Fp");
      Node node1 = new Node(2322, node0, node0, node0, 300, 32);
      node1.useSourceInfoFromForTree(node0);
      Node node2 = null;
      try {
        node2 = new Node(42, node0, 41, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node node2 = new Node(102508, node1, node0, (-718), 24);
      Node node3 = node1.copyInformationFromForTree(node0);
      node0.isDebugger();
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.getDirectives();
      node3.detachFromParent();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = new Node(32);
      node0.isWith();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isCall();
      Node node1 = new Node(4, node0, node0, node0, 57, 56);
      Node node2 = node0.srcref(node1);
      node0.getQualifiedName();
      InputId inputId0 = new InputId("com.google.javascript.rhino.Node$SideEffectFlags");
      node0.setInputId(inputId0);
      node2.setWasEmptyNode(false);
      int int0 = Node.ORIGINALNAME_PROP;
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList.of();
      Node node1 = new Node(4095);
      Node node2 = new Node(124, node1, node1, 42, 43);
      Node node3 = node0.srcref(node2);
      node3.getQualifiedName();
      InputId inputId0 = new InputId("Object#Key");
      node2.setInputId(inputId0);
      node3.setWasEmptyNode(true);
      int int0 = Node.ORIGINALNAME_PROP;
      node3.toStringTree();
      node0.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      nodeArray0[3] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node2.isBreak();
      Node node3 = new Node(54);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.getQualifiedName();
      node1.isThrow();
      node0.isUnscopedQualifiedName();
      node2.hasOneChild();
      node2.isGetterDef();
      node3.getJSType();
      node2.isLabel();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(30, nodeArray0);
      node0.getSourceOffset();
      Node.newNumber(1.0, 15, 15);
      node0.isVoid();
      node0.removeProp(113);
      node0.isHook();
      Node node1 = new Node(114716, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.mergeLineCharNo(39, 40);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newString(1248, "", (-1544), (-1544));
      node0.isLabel();
      node0.isInc();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1248
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList.of();
      Node node0 = new Node(114);
      Node node1 = node0.cloneTree();
      Node node2 = new Node(52, node1, node0, node1);
      node2.putProp(1, node_SideEffectFlags0);
      Node node3 = null;
      try {
        node3 = new Node((-3520), node1, 533, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node node0 = new Node(42);
      Node node1 = Node.newNumber((double) 4095);
      Node node2 = new Node((-3459));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setAllFlags();
      Node node3 = new Node(42, node1, (-4096), (-5293));
      node3.isBreak();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node node4 = new Node(2000);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node5.addChildrenToBack(node2);
      node2.getQualifiedName();
      node3.isThrow();
      node0.isUnscopedQualifiedName();
      node5.hasOneChild();
      node0.isGetterDef();
      node3.getJSType();
      node4.getAncestors();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(1871);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isParamList();
      Node node3 = new Node(6623, node2, 29, 1);
      node3.setLineno(53);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getQualifiedName();
      node0.isNumber();
      node1.getLastChild();
      // Undeclared exception!
      try { 
        node1.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node((byte)33, (-1), (byte)86);
      Node node1 = Node.newNumber((-1.0), 100, 53);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = Node.newString(126, "}", (-3459), (int) (byte)115);
      Node node3 = new Node(31, node0);
      node3.isAdd();
      node3.isObjectLit();
      Node.newString(56, "<(8]6/g:b@Jcd5>Y", (-5293), 53);
      node2.isBlock();
      Node.mergeLineCharNo(32, 52);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(122);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 57, 155, 2);
      node1.getChildCount();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", false);
      simpleSourceFile0.getLineOffset(77);
      simpleSourceFile0.getLineOffset(30);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Element", false);
      simpleSourceFile1.getLineOffset(15);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node1.isRegExp();
      node0.isCast();
      node1.isInc();
      node0.isContinue();
      node0.toString(true, false, false);
      Node.newString("Object#Element", 40, 4095);
      node0.cloneNode();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = Node.newString(57, "", 1, 117);
      Node node2 = new Node(57, node1, 98, 2);
      node2.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      node1.isObjectLit();
      node0.setCharno(343);
      node1.isEquivalentToTyped(node1);
      node2.isOnlyModifiesThisCall();
      node1.isRegExp();
      node1.isCast();
      node2.isInc();
      node1.isContinue();
      // Undeclared exception!
      try { 
        node1.toString(false, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node((-1231), (-1231), (-1231));
      Node node1 = new Node((-1231), node0);
      Node node2 = new Node(38, 2, 31);
      node0.isAdd();
      node2.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isInstanceOf();
      Node node3 = node2.cloneNode();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 48, 53, 100);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node.newString(1605, "is_constant_name", 30, 4098);
      node1.isAdd();
      node0.setOptionalArg(true);
      Node node2 = new Node(42, 15, 52);
      node2.isIf();
      node2.isScript();
      node1.isLabelName();
      Node node3 = new Node(51, node0);
      node0.isOr();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(115, "source_file");
      Node node1 = new Node(47);
      node1.setType(12288);
      node1.isVoid();
      node0.isFor();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ImmutableList.of();
      Node node0 = new Node(50);
      Node node1 = node0.cloneTree();
      node1.putProp(0, node_SideEffectFlags5);
      node1.isFunction();
      Node.extractCharno((-1));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      node0.putIntProp(43, 1);
      node0.toStringTree();
      Node node1 = new Node(46, node0);
      node0.getBooleanProp(0);
      node0.isLabelName();
      node1.isReturn();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(4883, "RegExp", 4883, 4883);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 16, 36, 29);
      Node node2 = Node.newString(2523, "RegExp", 3202, 8);
      node0.hasChild(node2);
      node2.setQuotedString();
      node2.setOptionalArg(false);
      Node node3 = Node.newString(101, "RegExp");
      node1.isInstanceOf();
      node3.isAnd();
      Node.newNumber((double) 125, 57, 705);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-154));
      node1.isObjectLit();
      node0.setCharno((-1921));
      node0.isCatch();
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(1247);
      node2.isRegExp();
      node0.isCast();
      Node node3 = Node.newNumber((-1520.73093959), 51, 116);
      node3.checkTreeEqualsImpl(node1);
      node0.isHook();
      node3.isEmpty();
      node3.isEquivalentToTyped(node2);
      node3.isWhile();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(1521, "=Pqn>:y(A-=AKh");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("CONST");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$IntPropListItem");
      node_FileLevelJsDocBuilder0.append("MB");
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isParamList();
      Node node1 = new Node(39, node0, 2246, 42);
      node1.setLineno(50);
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node2.getQualifiedName();
      node2.isNumber();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = Node.newString(100, ".", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node2.isIf();
      Node node3 = new Node((-890), node0, 306654252, 38);
      node1.addChildrenToBack(node3);
      node2.getAncestor(4);
      Node.newString(53, "q", 0, 1);
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      String string0 = "0|)XKQ$f";
      Node node0 = Node.newString(29, "not a StringNode", 40, 29);
      Node node1 = new Node((-1254), node0, node0);
      Node node2 = node1.cloneTree();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags8.clearAllFlags();
      Node node0 = new Node(100);
      node_SideEffectFlags3.setReturnsTainted();
      Node node1 = new Node(10, node0, 57, 3974);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.copyInformationFrom(node1);
      node1.isObjectLit();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags9 = new Node.SideEffectFlags();
      node0.isArrayLit();
      node1.getQualifiedName();
      node0.getInputId();
      node1.getQualifiedName();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isSetterDef();
      Node node1 = node0.cloneNode();
      node0.setCharno(2163);
      Node node2 = new Node((-1839), node0);
      node0.isLabelName();
      node1.isThis();
      node1.isGetElem();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      node2.isTry();
      node0.useSourceInfoFrom(node2);
      node3.addChildToFront(node3);
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 679
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[17];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setOptionalArg(true);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node0.isExprResult();
      node1.getAncestors();
      node0.children();
      node2.isAssignAdd();
      node0.getLastSibling();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isScript();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(30, nodeArray0);
      node1.removeChild(node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = Node.newString("Object#Key");
      node0.isNumber();
      node0.getDirectives();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(8, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2431.7538));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      node0.getQualifiedName();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(37, node0, 38, 15);
      node1.isAdd();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(8);
      node1.isObjectLit();
      node1.setCharno(2623);
      Node node2 = new Node(55, node1, node1);
      node2.isCatch();
      node2.isOnlyModifiesThisCall();
      node2.isRegExp();
      node1.isCast();
      Node node3 = Node.newNumber(Double.POSITIVE_INFINITY, 302, 56);
      node2.isHook();
      Node node4 = new Node(55);
      node4.isEmpty();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node3;
      Node node5 = new Node(132, nodeArray0, 16, 2);
      node5.copyInformationFrom(node1);
      node5.isEquivalentToTyped(node2);
      node5.isWhile();
      node0.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isDebugger();
      node2.isEquivalentTo(node0);
      Node node3 = node2.getAncestor(0);
      node2.isWith();
      node0.isInc();
      node1.isHook();
      node2.isEquivalentToTyped(node0);
      node0.isWhile();
      node3.isDebugger();
      node3.isScript();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(1099, "");
      node0.isNE();
      Node node1 = new Node(56, 77, 52);
      node1.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isInstanceOf();
      Node.newString("Object#Key");
      node1.cloneNode();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[17];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isSetterDef();
      Node node3 = node1.cloneNode();
      Node node4 = new Node(29, node0, 4, 2);
      node4.isAnd();
      node1.setCharno(2);
      node4.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.Maps$KeySet");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Multiple entries with same ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(37, nodeArray0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isSyntheticBlock();
      node0.toString();
      node0.isLabel();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      Node node1 = new Node(1264);
      nodeArray0[1] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4753));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags7.clearSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList.of();
      Node node2 = new Node((-2419));
      node0.cloneTree();
      node1.putProp(53, node0);
      node1.isFunction();
      Node.extractCharno((-1843));
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(32);
      node0.isWith();
      node0.isGetProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      node2.isDebugger();
      node1.isVoid();
      node0.putBooleanProp(0, false);
      Node.mergeLineCharNo(29, (-1698));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, 24, 52);
      Node node2 = Node.newString(48, "Object#Element", 2825, 37);
      node2.hasChild(node0);
      node1.isDefaultCase();
      node2.removeProp(53);
      node2.getCharno();
      Node node3 = Node.newString("", (-143), 42);
      node2.isScript();
      node3.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = new Node(1);
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = new Node(56, node0, (-2874), 42);
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node1.isObjectLit();
      node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node1.isArrayLit();
      node0.getQualifiedName();
      Node.newString("I]x\u0007F", 2, 108);
      node1.isThrow();
      node1.hasMoreThanOneChild();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      node0.removeChildren();
      node0.setLength(43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      try { 
        node0.setString("NOT_NULL");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WITH 119 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(25, "Object#Key", 25, 125);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber(4095.0, 152, 51);
      Node node2 = Node.newString(56, "Object#Key", 48, 44);
      node2.hasChild(node1);
      node0.setOptionalArg(true);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isIf();
      node2.isInc();
      node1.isInc();
      node0.isName();
      node1.isCase();
      node2.setLineno((-355));
      node1.isTrue();
      node3.isTry();
      node3.useSourceInfoFrom(node2);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString(8, ".");
      node0.isNE();
      Node node1 = new Node(3065, 4095, 8);
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node1.isInstanceOf();
      Node node2 = Node.newString(".");
      node2.wasEmptyNode();
      Node node3 = node2.cloneNode();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber((-3382.90913393));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = Node.newNumber(0.7);
      node1.getStaticSourceFile();
      node0.toStringTree();
      Node node2 = Node.newString("NUMBER -3382.90913393\n");
      node2.isSetterDef();
      node0.isExprResult();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 57, 155, 2);
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = new Node(1, node0, node0, 4, 51);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = node0.copyInformationFromForTree(node1);
      node3.getQualifiedName();
      Node node4 = new Node(56, node1, node2);
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[17];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setOptionalArg(true);
      node1.useSourceInfoFrom(node2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node2.isNew();
      node1.getAncestors();
      node0.children();
      node2.isAssignAdd();
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(363);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(51, "valueOf");
      Node node2 = new Node(112, node0, node0, node1, node1);
      Node node3 = Node.newString("valueOf");
      node2.getIndexOfChild(node0);
      node3.isVar();
      node2.isDefaultCase();
      node2.removeProp((-161));
      node3.getCharno();
      Node.newString("valueOf", 8, 1528);
      node2.isScript();
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 57, 155, 2);
      Node node2 = new Node(13, node1, 53, 12);
      node0.setLineno(4);
      Node.extractCharno(1127);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node node3 = jSTypeRegistry1.createParameters((List<JSType>) vector0);
      node3.isInstanceOf();
      Node node4 = new Node(51, 46, 29);
      node0.isVar();
      node1.isNumber();
      node1.getDirectives();
      Node node5 = node1.detachFromParent();
      node0.useSourceInfoFrom(node5);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(17);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, 24, 52);
      Node.newString(48, "Object#Element", 2825, 37);
      node1.isAdd();
      Node node2 = new Node(40, 1175, (-1834));
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isInstanceOf();
      Node node3 = Node.newString("Object#Element");
      Node node4 = new Node((-496), node3);
      node4.cloneNode();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(49, node0, node0, node0);
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node node2 = new Node(57);
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node0;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.isIf();
      Node node4 = Node.newString(147, "No6#");
      node4.isScript();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.isLabelName();
      Node node5 = new Node(47, node1);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber((-3382.90913393));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = Node.newNumber((double) 15);
      node1.getStaticSourceFile();
      node1.toStringTree();
      node0.isSetterDef();
      Node.extractCharno(43);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = new Node(31, 49, 50);
      node1.isTypeOf();
      Node node2 = Node.newNumber((double) 32, 52, 4375);
      node2.putIntProp(31, (-917));
      node0.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setAllFlags();
      node1.setCharno(115);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = Node.newString(100, "S@DXa[u^g5-dw9a", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node0.isInc();
      node2.setString("t\"S");
      node2.isSetterDef();
      Node node3 = node0.cloneNode();
      node1.getType();
      node0.isTrue();
      node2.isOnlyModifiesThisCall();
      node3.isRegExp();
      node3.isCast();
      node1.isFromExterns();
      node0.isGetterDef();
      node0.getBooleanProp((-3224));
      Node.extractCharno(0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isEquivalentTo(node0, true, false, false);
      Node node1 = new Node(39, node0, 2246, 42);
      Node node2 = new Node(198, node1, 2, (-603));
      Node node3 = node2.getFirstChild();
      node2.isAdd();
      node1.isGetElem();
      Node node4 = Node.newNumber(0.0);
      node4.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node node1 = new Node(53, node0, node0, 51, 37);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      node2.setSourceFileForTesting("EvalError");
      node2.isDebugger();
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      node2.isAssign();
      node1.isInstanceOf();
      node2.getCharno();
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.setChangeTime((-2874));
      Node node3 = new Node(56);
      Node node4 = new Node(43, node2, node2, 43, (-2693));
      node1.cloneTree();
      node1.isFunction();
      node1.getLineno();
      node0.isOptionalArg();
      Node node5 = new Node(1523);
      Node node6 = node0.getLastSibling();
      node6.getLength();
      node0.isStringKey();
      node6.getType();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      Node node1 = new Node(1);
      Node node2 = new Node(30, node1, node1, 56, 47);
      node2.cloneTree();
      node0.isFunction();
      node2.isFalse();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      nodeArray0[3] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node2.isBreak();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node node3 = new Node(54);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSTypeArray0[0], jSTypeArray0[0], jSTypeArray0[0]);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node2.addChildrenToBack(node4);
      node0.getQualifiedName();
      node1.isThrow();
      node0.isUnscopedQualifiedName();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = Node.newString(100, "S@DXa[u^g5-dw9a", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      Node node3 = Node.newString(1467, ".");
      node1.isInstanceOf();
      node3.getLength();
      node0.isAnd();
      Node.newNumber((-1576.709703679), 125, 56);
      node3.isExprResult();
      node3.getLength();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString(28, "com.google.common.base.Predicates$InPredicate", 28, 28);
      Node node1 = node0.getLastSibling();
      node1.setLineno(36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1510);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags6.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setThrows();
      node_SideEffectFlags8.setMutatesThis();
      Node.newString("com.google.common.base.Predicates$InPredicate");
      Node node2 = node0.getAncestor(0);
      node2.putProp(301, (Object) null);
      node2.isFalse();
      node0.isDelProp();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newString(49, "", (-707), 15);
      node1.addChildrenToFront(node0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(26, 36, (-115));
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      node0.removeChildren();
      node0.setLength(43);
      try { 
        node0.setString("NOT_NULL");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WITH 119 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 57, 155, 2);
      node0.setOptionalArg(false);
      Node node2 = Node.newString("Object#Key");
      node2.getChildCount();
      Node node3 = Node.newString("Object#Element");
      Node node4 = Node.newString(43, "p@<gjI");
      node0.isEquivalentTo(node2);
      node2.getAncestor(1984);
      node4.isWith();
      node3.isInc();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.toStringTree();
      node2.isBlock();
      node1.getChildAtIndex((-845));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 57, 155, 2);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 42, 50, (-1231));
      node0.useSourceInfoFromForTree(node1);
      Node node2 = new Node(347);
      node2.setType(55);
      node0.isVoid();
      node1.isFor();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      Node node0 = new Node(100);
      Node node1 = new Node(56, node0, node0, 47, 21);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = node0.cloneTree();
      node0.isFunction();
      node2.isFalse();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.getProp(100);
      Node node1 = Node.newString(2947, "[GO}dY2CK=<", 52, 47);
      node0.isEquivalentTo(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("h_R;i!+e", false);
      simpleSourceFile0.getLineOffset(152);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(40);
      node1.getSourceOffset();
      Node node2 = Node.newString("", 32, 4095);
      node1.isCase();
      node0.mayMutateGlobalStateOrThrow();
      node1.isThis();
      node0.isHook();
      node1.getBooleanProp(30);
      Node.extractLineno(1602);
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.addSuppression("Object#Key");
      node0.getAncestors();
      Node node1 = Node.newString("Object#Element", 16, (-4582));
      Node node2 = new Node(0, node0, node1);
      node1.getAncestor(47);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(149);
      Node node1 = new Node(618, node0);
      Node node2 = new Node((-1510), node1, 2, 43);
      node2.isInstanceOf();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(102, 102, 48);
      node0.isNE();
      node0.mayMutateArguments();
      node0.getJsDocBuilderForNode();
      node0.getProp(102);
      node0.getChangeTime();
      node0.children();
      Node node1 = new Node(1, 4095, 4095);
      Node node2 = new Node((-2720), node0, node1, 50, 55);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      String string0 = ":9hhv";
      node_NodeMismatch0.equals(":9hhv");
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(2299);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node1 = new Node(114);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense((String) null);
      jSDocInfo0.getAssociatedNode();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node1.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126, 126, 126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node0.children();
      node0.isAssignAdd();
      Node.newString("Object#Key");
      node0.isLabelName();
      Node node1 = new Node(30, node0);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error(" : ", " : ", 19, 19);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry1.createParameters((List<JSType>) vector1);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node0.getChildCount();
      Node node1 = new Node(1809, 42, 36);
      Node node2 = new Node(37);
      node2.setIsSyntheticBlock(true);
      node2.isDo();
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber(2194.337139, 461845907, (-2408));
      Node node1 = new Node((-5033), node0, node0, node0, node0, 40, 42);
      node1.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(119);
      node0.removeProp(5081);
      node0.isSetterDef();
      node1.setOptionalArg(false);
      node0.isInc();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1455));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(154, node0);
      Node node2 = Node.newString("Object#Key");
      node2.getChildCount();
      Node node3 = new Node(56);
      Node node4 = Node.newString(56, "The new child node has siblings.");
      node1.cloneTree();
      node0.isFunction();
      node4.getLineno();
      Node node5 = new Node(623);
      node5.isOptionalArg();
      node5.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(2341, node0, 43, 1);
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isEquivalentTo(node0, true, false, false);
      Node node1 = new Node(39, node0, 2246, 42);
      node1.setLineno(50);
      Node.extractCharno(1);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isInstanceOf();
      Node node3 = new Node((-1508), 1, (-1508));
      node1.isVar();
      node3.isNumber();
      node2.getDirectives();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      node1.removeProp(51);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node2 = Node.newString(100, ".", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node2.isIf();
      node0.isInc();
      node2.setString("t\"S");
      node2.isSetterDef();
      Node node3 = node0.cloneNode();
      node1.getType();
      node0.isTrue();
      node2.isOnlyModifiesThisCall();
      node3.isRegExp();
      Node node4 = new Node(48, node3, node1, 0, 54);
      node4.useSourceInfoIfMissingFromForTree(node3);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(57);
      node0.addSuppression((String) null);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = new Node(1, 52, 4095);
      node0.getProp(799);
      simpleSourceFile0.getLineOffset(55);
      node1.copyInformationFrom(node0);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(3520);
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("Type names cannot contain template annotations.", (-814), 1480);
      Node node1 = new Node(2685, node0, 225, (-3071));
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2685
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(55);
      node0.setSourceEncodedPositionForTree(0);
      node0.useSourceInfoIfMissingFromForTree(node0);
      Node node1 = new Node(1, 8199, 29);
      node0.isNumber();
      node0.isReturn();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node node3 = new Node(4095, node1, 105, 4572);
      node2.isAdd();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-999));
      node2.isObjectLit();
      node0.setCharno(32);
      node2.isCatch();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 32);
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.toStringTree();
      node1.isBlock();
      node1.getChildAtIndex(1);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber(1508.587830965);
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isNumber();
      node1.isReturn();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 57, 155, 2);
      node0.setOptionalArg(false);
      Node node1 = Node.newString("Object#Key");
      node1.getChildCount();
      Node.newString("Object#Element");
      Node node2 = Node.newString(43, "p@<gjI");
      // Undeclared exception!
      try { 
        node2.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(802);
      node0.setSourceEncodedPositionForTree(802);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(49);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp(802);
      node0.isNew();
      node1.getAncestors();
      node1.children();
      node1.isStringKey();
      node1.setType(52);
      node1.isVoid();
      Node node2 = new Node(1, node0, node1, 46, 349);
      node2.copyInformationFromForTree(node1);
      node1.isThrow();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-3020));
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<UnionType> vector0 = new Vector<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node node2 = new Node((-951), node1, node0, 2538, 1);
      node2.copyInformationFromForTree(node1);
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber(3740.13650651366);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      Node node1 = new Node(49, node0, node0, 51, 31);
      node0.cloneTree();
      node1.isFunction();
      node1.getLineno();
      node0.isOptionalArg();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      vector0.add((JSType) objectType0);
      Node node1 = Node.newString(36, "L#H!>qbjH#rY", 46, 2);
      Node node2 = new Node(36, node0);
      node1.detachChildren();
      node0.copyInformationFromForTree(node2);
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isEquivalentTo(node2);
      node0.mayMutateArguments();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber(41.221, 108, 108);
      node0.setLength((-2726));
      node0.setVarArgs(true);
      Node node1 = new Node(12, node0, node0, node0);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(112);
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ImmutableList.of();
      Node node0 = new Node(112);
      Node node1 = new Node(50, node0);
      node0.cloneTree();
      node1.isFunction();
      node0.getLineno();
      node0.isOptionalArg();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("DWF*YG{QWcif");
      node0.getAncestor(432);
      int int0 = 451;
      int int1 = 546;
      int int2 = (-2728);
      node0.isFromExterns();
      Node node1 = Node.newString("", 43, 37);
      // Undeclared exception!
      try { 
        node1.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2431.7538));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      node0.getQualifiedName();
      Node node1 = new Node(105, node0);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 148
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(148, 12, 46);
      node1.getProp(1);
      node0.isEquivalentTo(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("((zj", true);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(16);
      simpleSourceFile0.getLineOffset(43);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(16);
      node0.getSourceOffset();
      node0.isOnlyModifiesThisCall();
      node0.getLength();
      node1.isRegExp();
      node1.isCast();
      node0.isInc();
      node1.isContinue();
      node0.toString(true, true, false);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      node2.getStaticSourceFile();
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.toStringTree();
      node4.isBlock();
      // Undeclared exception!
      try { 
        node3.getChildAtIndex(82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      Node node1 = new Node(42, node0, node0, node0, node0);
      node1.isInstanceOf();
      Node node2 = new Node(39, (-862048943), 1064);
      node0.isNumber();
      node1.isReturn();
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      Node.newString(30, "", 704, 37);
      node0.hasChild(node1);
      node1.setOptionalArg(false);
      node1.isInc();
      // Undeclared exception!
      try { 
        node1.setString("h");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[17];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = new Node(36, node0, 39, 16);
      node1.getFirstChild();
      node2.isAdd();
      node3.isGetElem();
      node0.setCharno(225398);
      node2.toStringTree();
      Node node4 = new Node(16, node3);
      node3.getBooleanProp(1157);
      node2.isLabelName();
      node4.children();
      node4.isNot();
      Node.newString(1119, "Object#Key", 4095, 2);
      node4.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setSourceEncodedPositionForTree((-536870912));
      node0.isQualifiedName();
      node0.getProp((-536870912));
      node0.isDec();
      node0.addChildrenToFront(node0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isRegExp();
      node0.getAncestors();
      node0.children();
      node0.isStringKey();
      node0.setType((-536870912));
      node0.isOr();
      node0.isDebugger();
      node0.isString();
      Node node1 = null;
      try {
        node1 = new Node(50, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.addSuppression("Object#Key");
      node0.getAncestors();
      Node node1 = Node.newString("Object#Key", (-1778), (-1778));
      Node node2 = new Node(27, node0, node1);
      node0.getAncestor(2);
      node2.checkTreeEquals(node0);
      Node node3 = Node.newString(4, "3_:3c^A,&dMlAY", 0, (-2273));
      node3.srcref(node1);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-388), "", 2573, 2573);
      node0.isNE();
      Node node1 = new Node(49, 54, (-2647));
      node1.isAdd();
      node0.detachChildren();
      Node.newString(51, "");
      node0.getLength();
      node0.setChangeTime(48);
      Node node2 = new Node((-1011), node0, node0);
      node0.isReturn();
      node0.isGetElem();
      node2.isNew();
      node0.getNext();
      node2.getBooleanProp(49);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      Node node1 = Node.newString("Hg\"q|(tDmFLw)_6FU");
      node1.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      Node node2 = Node.newNumber((-5196.93122230308));
      node2.getStaticSourceFile();
      node1.toStringTree();
      node1.isBlock();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber(3740.13650651366);
      Node node1 = Node.newNumber((double) 4, 3411, 3620);
      node1.setOptionalArg(false);
      Node.newNumber((double) 4095, (-3643), 89);
      Node node2 = new Node(44);
      Node.newNumber((-819.43280626621));
      node1.setType(44);
      node1.isVoid();
      node0.isFor();
      node1.isAssign();
      CharBuffer charBuffer0 = CharBuffer.allocate(1510);
      node2.appendStringTree(charBuffer0);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(148, 12, 46);
      node1.getProp(1);
      node0.isEquivalentTo(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("((zj", true);
      simpleSourceFile0.getLineOffset(43);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(16);
      node0.getSourceOffset();
      Node.newString("missing prop: ", 54, (-4296));
      node0.isCase();
      node0.mayMutateGlobalStateOrThrow();
      node1.isThis();
      node1.isHook();
      node1.getIntProp(43);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.addSuppression("Object#Key");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", false);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Key", false);
      simpleSourceFile1.getLineOffset(44);
      node0.addSuppression("");
      simpleSourceFile1.getLineOffset(42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node node1 = new Node(1, node0, node0, 1952, 31);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.getQualifiedName();
      node1.replaceChild(node0, node2);
      node1.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isWhile();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      node0.detachChildren();
      Node.newNumber(0.0);
      node1.setChangeTime(8237);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(49, node0, node0, node0);
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node node2 = new Node(57);
      node1.addChildrenToBack(node2);
      node1.getQualifiedName();
      node0.isThrow();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getType();
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'J';
      charArray0[2] = 'F';
      charArray0[3] = 'D';
      charArray0[4] = 'd';
      charArray0[5] = '~';
      charArray0[6] = '{';
      charArray0[7] = '\'';
      charArray0[8] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseBooleanType();
      node1.isOnlyModifiesThisCall();
      node2.isRegExp();
      node1.isCast();
      Node node3 = Node.newString("Not declared as a constructor");
      node3.isInc();
      node0.isContinue();
      node2.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isSyntheticBlock();
      node0.toString();
      node0.isLabel();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      Node node1 = new Node(1270);
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      nodeArray0[4] = null;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      jSDocInfo0.getAssociatedNode();
      node0.addChildAfter(node0, (Node) null);
      node0.isCatch();
      Node node2 = null;
      try {
        node2 = new Node(117, node0, 1, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.getAncestors();
      Node node1 = Node.newString("com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets", 0, 4);
      Node node2 = new Node(32, node1, node1);
      Node node3 = new Node(38, node0);
      Node node4 = new Node(38);
      Node node5 = new Node((-371), node3, node3, node4);
      node5.getSourceOffset();
      node5.isNot();
      node4.removeChildren();
      Node node6 = Node.newString(39, "Object#Key", 16, 4095);
      // Undeclared exception!
      try { 
        node6.setDouble(4095.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      Node node0 = new Node(20);
      Node node1 = new Node(47, node0, node0, 642, (-1796));
      Node node2 = node0.cloneTree();
      node1.isFunction();
      node2.getLineno();
      node0.isOptionalArg();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "com.google.common.base.Predicate$InPredicate";
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 32, 32);
      node0.setLineno(36);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.setCharno(4);
      node0.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString(4235, "0|)XKQ$f", 4235, 4235);
      Node node1 = new Node(0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.newNumber(1846.02132);
      Node node2 = new Node(4095, node1);
      Node node3 = Node.newString("0|)XKQ$f");
      node3.getChildCount();
      Node.newString("NUMBER");
      Node node4 = Node.newString(4095, "0|)XKQ$f");
      node2.isEquivalentTo(node0);
      node4.getAncestor(31);
      node1.isWith();
      node4.isInc();
      node4.isHook();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString(20, ".", 42, 8202);
      node0.isNE();
      Node node1 = new Node(4095, node0, node0, node0, 32, 4095);
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node1.getQualifiedName();
      InputId inputId0 = new InputId("ED:e?");
      node1.setInputId(inputId0);
      node0.setWasEmptyNode(true);
      int int0 = Node.ORIGINALNAME_PROP;
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = new Node(100, node0, node1);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node2.isIf();
      node0.isInc();
      try { 
        node2.setString("t\"S");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // OR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.addSuppression("Object#Key");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", false);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Key", false);
      simpleSourceFile1.getLineOffset(44);
      node0.addSuppression("");
      simpleSourceFile1.getLineOffset(42);
      Node node1 = new Node(4, Integer.MIN_VALUE, 50);
      node1.getProp(53);
      simpleSourceFile1.getLineOffset(40);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(2662);
      node1.getSourceOffset();
      Node node2 = Node.newString("New Collection violated the Collection spec", 3505, 36);
      node2.isCase();
      node2.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(29, node0, node0, node0, node0);
      Node node2 = Node.newString("F*o+H%~u_");
      node1.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node2.isArrayLit();
      simpleErrorReporter0.warning("F*o+H%~u_", "9jG(EKtZd[W.", 2880, 0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.setSourceEncodedPositionForTree((-1689));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node4 = node0.cloneTree();
      node2.isCase();
      node4.isFunction();
      node1.getLineno();
      node4.hasOneChild();
      node3.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp(799);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(4095);
      Node.newString("LABEL");
      node0.mayMutateGlobalStateOrThrow();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(52, node0, 57, 40);
      Node node2 = node1.getFirstChild();
      node2.isAdd();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isObjectLit();
      node0.setCharno((-1414));
      node1.isCatch();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INSTANCEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2431.7538));
      node0.getStaticSourceFile();
      node0.putBooleanProp(148, true);
      node0.isDec();
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 57, 155, 2);
      Node node2 = Node.newNumber((double) 0);
      node2.copyInformationFrom(node1);
      node0.setOptionalArg(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      ImmutableList.of();
      Node node3 = new Node((-1547));
      Node node4 = new Node(36, node3, node3, 50, 8);
      node0.cloneTree();
      node1.isFunction();
      node0.getLineno();
      node0.isOptionalArg();
      node4.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(1738, 86, (-2978));
      Node node1 = new Node(1738, node0, node0);
      node0.setSourceEncodedPosition(32);
      Node.newString("", 40, 453);
      node1.getChildBefore(node0);
      node1.mayMutateGlobalStateOrThrow();
      node1.getSourceFileName();
      node0.getProp(2190);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      Node node0 = new Node(100);
      Node node1 = new Node(56, node0, node0, 47, 21);
      Node node2 = node0.cloneTree();
      node0.isFunction();
      node1.getLineno();
      node1.isOptionalArg();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.addSuppression("Object#Key");
      node0.getAncestors();
      Node node1 = Node.newString("", 33, 4095);
      Node node2 = new Node((-3192), node0);
      Node node3 = new Node(93, node2, node2);
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node(1, nodeArray0);
      node4.getSourceOffset();
      node3.isNot();
      node3.removeChildren();
      try { 
        node1.setDouble(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  33 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 50);
      Node node1 = Node.newString(16, "valueOf");
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = new Node(1, node0, node1, node0, node0);
      Node.newString("ASSIGN_URSH");
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesArguments();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      Node.newNumber((-1200.0445084071782));
      node2.getStaticSourceFile();
      node1.toStringTree();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString(20, ".", 42, 8202);
      node0.isNE();
      Node node1 = new Node(3062, 4095, 20);
      node0.isAdd();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(155, node0, 30, 57);
      node1.getFirstChild();
      node1.isAdd();
      node0.isGetElem();
      node2.setCharno(47);
      node2.toStringTree();
      Node node3 = new Node(32, node1);
      Node node4 = Node.newString(0, ".");
      node4.getAncestors();
      node4.getBooleanProp((-1317));
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString((-1564), "", (-1564), 641);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.setJSDocInfo((JSDocInfo) null);
      node2.isLabel();
      node0.isStringKey();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString((-501), "");
      node0.getChangeTime();
      node0.isNoSideEffectsCall();
      node0.getParent();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1458));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      Node node0 = Node.newNumber((double) 0, 47, 47);
      Node node1 = new Node((-2826), node0, node0, 57, 49);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-1973));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2826
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      Node node0 = new Node(116);
      Node node1 = new Node(5760, node0, node0, 1076, 147);
      node0.cloneTree();
      node0.isFunction();
      node0.getLineno();
      node0.isOptionalArg();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      node0.getString();
      Node node2 = Node.newString(100, "S@DXa[u^g5-dw9a", 83, 31);
      node1.isArrayLit();
      node1.setOptionalArg(true);
      node2.isIf();
      node2.cloneNode();
      node0.isInc();
      node2.setString("t\"S");
      node2.isSetterDef();
      Node node3 = node0.cloneNode();
      node3.getLength();
      node1.getType();
      node0.isThrow();
      node3.isWhile();
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[17];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = Node.newString(39, "Object#Key", 1, 1);
      node1.getFirstChild();
      node2.isAdd();
      node0.isAnd();
      node0.setCharno(225398);
      node2.toStringTree();
      Node node4 = new Node(126, node3);
      node3.getBooleanProp(1157);
      node4.isLabelName();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      node_SideEffectFlags0.setThrows();
      node0.isAdd();
      Node node1 = null;
      try {
        node1 = new Node(0, node0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", (-1636), 7);
      node0.useSourceInfoFrom(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(0.7380729408896665);
      node0.isScript();
      node0.isWhile();
      node0.isQualifiedName();
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1455));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(154, node0);
      Node node2 = Node.newString("Object#Key");
      node2.getChildCount();
      Node.newString("Object#Element");
      Node node3 = Node.newString(56, "The new child node has siblings.");
      node0.isEquivalentTo(node3);
      Node node4 = node2.getAncestor(0);
      node3.isWith();
      node1.isInc();
      node4.isHook();
      node4.isThis();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(57);
      node0.addSuppression((String) null);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = new Node(1, 52, 4095);
      node0.getProp(799);
      simpleSourceFile0.getLineOffset(55);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(3520);
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString((-87), "~Z4|UQg'~3As^a%", 117, 953);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setString("'>_}{j[!stIVXrw?mm");
      node0.isSetterDef();
      Node node2 = node0.cloneNode();
      node2.getType();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags((-1859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(56, node0);
      Node.newString("var_args_name");
      node1.copyInformationFrom(node2);
      Node node3 = Node.newNumber((double) 51, 47, 57);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.2124235228754734);
      nodeArray0[1] = node1;
      Node node2 = new Node(2, node0, node0, node0, 15, 12);
      node2.copyInformationFrom(node1);
      Node node3 = Node.newString("", 57, 1523);
      Node node4 = Node.newString(1008, "4)]");
      // Undeclared exception!
      try { 
        node3.getChildBefore(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node0.getChildCount();
      Node node1 = new Node(4547, 1309, 4095);
      node1.setIsSyntheticBlock(false);
      node0.isDo();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node node0 = new Node(53);
      Node node1 = new Node(42, node0, node0, node0, node0);
      node1.isInstanceOf();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node2 = new Node(4095, node1, 57, 4);
      Node node3 = Node.newString(1217, ";", 1008, 39);
      Node node4 = node1.getFirstChild();
      node1.isAdd();
      node4.isAnd();
      node3.setCharno(1440);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node node1 = Node.newString(2, "Object#Element", 1189, 57);
      node0.srcref(node1);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node0.getChildCount();
      InputId inputId0 = new InputId("Object#Key");
      node0.setInputId(inputId0);
      node0.setWasEmptyNode(false);
      int int0 = Node.ORIGINALNAME_PROP;
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(39, "", (-1564), 39);
      node0.isNE();
      Node node1 = new Node(38, 47, (-2491));
      node1.isAdd();
      node0.detachChildren();
      node0.getLength();
      node1.setChangeTime(8232);
      Node node2 = new Node(31, node1, node1);
      node0.isReturn();
      node1.isGetElem();
      node2.isNew();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node0.getChildCount();
      Node node1 = new Node(32, node0, node0, 638, 2887);
      node1.cloneTree();
      node1.isFunction();
      node1.getLineno();
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      node2.isDebugger();
      node1.isVoid();
      node0.putBooleanProp(0, false);
      node3.clonePropsFrom(node0);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicate$InPredicate", 32, 32);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.hasOneChild();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1);
      node0.isNot();
      node0.setWasEmptyNode(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(unionType0).toString();
      ImmutableList<UnionType> immutableList0 = ImmutableList.of(unionType0, unionType0);
      immutableList0.reverse();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.isQuotedString();
      Node node2 = new Node(26, node0, node0, node1, 449, (-1));
      node2.copyInformationFromForTree(node1);
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage0("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getInputId();
      Node node1 = Node.newNumber((double) (-2142));
      node1.setDouble((-108.0874934064));
      Node.newString("l*9q+");
      node0.checkTreeEquals(node1);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("PROTECTED");
      node0.isNE();
      Node node1 = new Node(27, 29, 39);
      Node node2 = new Node(2, node0);
      Node node3 = null;
      try {
        node3 = new Node(40, node2, node2, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp(799);
      simpleSourceFile0.getLineOffset(55);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(4095);
      node1.isDec();
      node1.isInstanceOf();
      node0.addChildrenToFront(node1);
      Node node2 = node1.removeChildren();
      node0.isQualifiedName();
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFromExterns();
      Node node1 = Node.newString(52, "", (-934), (-2299));
      node0.isNE();
      Node node2 = new Node(4095, 48, (-1510));
      node2.isAdd();
      Node node3 = new Node(36, 55, 2);
      Node node4 = node3.copyInformationFrom(node2);
      Node.newNumber((double) 52);
      node3.setChangeTime(50);
      Node node5 = new Node(38, node1, node4, 56, 46);
      Node node6 = node0.copyInformationFromForTree(node5);
      node2.getQualifiedName();
      Node.newNumber((double) 54);
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(1, node0, 47, 1472);
      Node node2 = node1.getFirstChild();
      node1.isAdd();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node3 = Node.newString("Object#Key");
      node3.isObjectLit();
      node2.setCharno(38);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node4.isCatch();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      vector0.add(jSType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newNumber((double) 56, 29, 0);
      node1.hasChild(node0);
      node0.setOptionalArg(false);
      node1.isIf();
      node1.isInc();
      node0.isSetterDef();
      node1.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEqualsImpl(node0);
      node0.isDelProp();
      node0.removeProp(960);
      node0.isGetProp();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(31, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = new Node(31, 39, 1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParameters(jSTypeArray0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      templateType0.getDisplayName();
      modificationVisitor0.caseTemplateType(templateType0);
      node2.setOptionalArg(true);
      node4.isIf();
      node1.isInc();
      node2.isQuotedString();
      node3.isOnlyModifiesThisCall();
      node0.isGetterDef();
      node2.isCast();
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 32, 4095, 125);
      Node node2 = Node.newString(37, "6m,k0D~Uglq:2T", 38, 46);
      node2.hasChild(node1);
      Node node3 = Node.newNumber((-1864.524462979285));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("?", "?", 15, 516);
      Node node4 = Node.newNumber((double) 42);
      node4.hasChildren();
      node2.isWhile();
      node3.isQualifiedName();
      Node node5 = new Node(1, node3, node1, node0, node4, 484, 16);
      node5.isIn();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(25, "hHx7teJ|\"9Z>3:+2", (-1), (-2838));
      node0.isNE();
      Node node1 = new Node(0, 41, 15);
      node0.setOptionalArg(true);
      node1.isIf();
      node0.isInc();
      // Undeclared exception!
      try { 
        node1.setString("t\"S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      Node node1 = Node.newString(57, "", 1, 117);
      Node node2 = Node.newNumber((double) 1, (-1101), (-3287));
      node0.putIntProp(43, 100);
      node1.mayMutateArguments();
      node0.isNot();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isQuotedString();
      node2.isOnlyModifiesThisCall();
      node2.isCall();
      Node node3 = new Node(1471, node1, node0, 148, 29);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-1564), "", (-1564), (-1564));
      Node node1 = Node.newNumber(0.0, (-541), 57);
      node1.putIntProp(29, 4095);
      node0.mayMutateArguments();
      node1.isNot();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setString("");
      node0.isSetterDef();
      Node node2 = new Node(105);
      node2.cloneNode();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Collection<? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 32, 4095, 125);
      Node node2 = Node.newString(37, "6m,k0D~Uglq:2T", 38, 46);
      node2.hasChild(node1);
      node2.setType((-86));
      node1.setOptionalArg(true);
      node0.isIf();
      node2.isInc();
      node0.setOptionalArg(false);
      node0.isInc();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      try { 
        node2.setDouble(53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "dXn-P9%jy|Ej";
      Node node0 = Node.newString(115, "dXn-P9%jy|Ej", 115, 115);
      node0.putBooleanProp(4095, true);
      Node node1 = new Node(4095, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.UnknownType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = null;
      int int0 = 118;
      // Undeclared exception!
      try { 
        Node.newString((String) null, 118, 118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node4 = node2.cloneTree();
      node2.isCase();
      node0.isFunction();
      node0.getLineno();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node4.setJSDocInfo(jSDocInfo0);
      node4.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 57, 155, 2);
      node0.setOptionalArg(false);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = Node.newNumber((double) 42, 50, (-1231));
      Node node3 = new Node(347);
      node3.setType(55);
      node0.isVoid();
      node2.isFor();
      node0.isAssign();
      node2.isBreak();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList.of((JSType) templateType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1455));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(154, node0);
      Node node2 = Node.newString("Object#Key");
      node2.getChildCount();
      Node.newString("Object#Element");
      Node node3 = Node.newString(56, "The new child node has siblings.");
      node0.isEquivalentTo(node3);
      Node node4 = node2.getAncestor(0);
      node3.isWith();
      node1.isInc();
      node4.isHook();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isNE();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      node0.detachChildren();
      Node.newNumber(0.0);
      node1.setChangeTime(8232);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(30);
      node_SideEffectFlags3.setReturnsTainted();
      node1.isArrayLit();
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isSyntheticBlock();
      node0.toString();
      node0.isLabel();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      Node node1 = new Node(1270);
      Node node2 = new Node(37, node0, node1, 8, 63);
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      nodeArray0[4] = null;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      jSDocInfo0.getAssociatedNode();
      nodeArray0[8] = null;
      Node node3 = null;
      try {
        node3 = new Node(42, nodeArray0, 48, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.cloneTree();
      node2.isCase();
      node0.isFunction();
      node0.getLineno();
      Node.extractLineno((-552));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = Node.newString(100, "S@DXa[u^g5-dw9a", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node2.isIf();
      node0.isInc();
      node2.setString("t\"S");
      node2.isSetterDef();
      Node node3 = node0.cloneNode();
      node1.getType();
      node0.isTrue();
      node2.isOnlyModifiesThisCall();
      node3.detachChildren();
      node3.isRegExp();
      Node node4 = new Node(48, node3, node1, 0, 54);
      node4.isThrow();
      node2.getType();
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(25, "reflected_object", (-1971), 118);
      Node node1 = Node.newString(8, ".", 33, (-914));
      Node node2 = Node.newNumber((double) 36, 9, 40);
      node2.putIntProp(4095, 0);
      node1.mayMutateArguments();
      node1.isNot();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.isQuotedString();
      node1.isOnlyModifiesThisCall();
      node1.isCall();
      node1.isCast();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(220);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((-139.823249), 16, 521);
      node0.setOptionalArg(false);
      Node node2 = Node.newNumber((double) 31, 37, 47);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(17, nodeArray0, 48, 954);
      node3.getBooleanProp(8);
      node2.siblings();
      node1.setOptionalArg(true);
      node3.isInc();
      Node node4 = new Node((-226), node1);
      node4.isSetterDef();
      Node.newString(50, "com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber(1508.587830965);
      Node node1 = new Node(50, node0, node0, node0, 49, 1);
      node0.addChildToFront(node1);
      node0.getChildCount();
      Node node2 = Node.newString("");
      node2.getString();
      node1.isEquivalentTo(node2);
      node2.getAncestor(38);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newString("Object#Key");
      Node node1 = node0.getAncestor(0);
      node0.putProp(29, node_SideEffectFlags0);
      node1.checkTreeEquals(node0);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node0.getChildCount();
      Node node1 = Node.newString(101, "", (-2099), 131104);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.getJSType();
      node1.isTypeOf();
      Node node2 = Node.newString(50, "Object#Element", 77, 31);
      node0.useSourceInfoFromForTree(node2);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node0.getChildCount();
      Node node1 = new Node(4547, 1309, 4095);
      node1.setIsSyntheticBlock(false);
      node0.isDo();
      node1.getJSDocInfo();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = 48;
      Node node0 = Node.newNumber((double) 48, 48, (-709));
      Node node1 = new Node(48, node0, node0, node0, node0);
      node0.isVarArgs();
      Node.newNumber((-1.0), 42, 4);
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(50);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp(799);
      simpleSourceFile0.getLineOffset(55);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getIntProp(4095);
      node1.isDec();
      node1.isInstanceOf();
      node0.addChildrenToFront(node1);
      node1.removeChildren();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 46, 12, 32);
      Node node2 = Node.newString(100, "S@DXa[u^g5-dw9a", 83, 31);
      node2.hasChild(node1);
      node1.setOptionalArg(true);
      node2.isIf();
      node0.isInc();
      node2.setString("t\"S");
      node2.isSetterDef();
      Node node3 = node0.cloneNode();
      node1.getType();
      node0.isTrue();
      node2.isOnlyModifiesThisCall();
      node3.isRegExp();
      Node node4 = new Node(48, node3, node1, 0, 54);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(25, "hHx7teJ|\"9Z>3:+2", (-1), (-2838));
      node0.isNE();
      Node node1 = new Node(0, 41, 15);
      node0.isAdd();
      node0.copyInformationFrom(node1);
      Node node2 = Node.newNumber((double) 32);
      node2.setChangeTime(2);
      Node node3 = new Node(42, node2, node0, 4095, 1);
      node1.copyInformationFromForTree(node3);
      node3.getQualifiedName();
      Node node4 = Node.newNumber(2326.0523878238);
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(5760);
      Node node1 = new Node(5760, node0, node0, node0);
      node1.isOnlyModifiesArgumentsCall();
      boolean boolean0 = true;
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.toString(false, true, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5760
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(126);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 57, 155, 2);
      node0.setOptionalArg(false);
      Node node1 = Node.newNumber((double) 42, 50, (-1231));
      Node node2 = new Node(347);
      node2.setType(55);
      node0.isVoid();
      node1.isFor();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(31, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = new Node(31, 39, 1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      jSTypeRegistry1.getObjectIndexKey();
      node4.getAncestor(54);
      Node.newString(120, "Object#Element", 93, 51);
      node2.srcref(node3);
      // Undeclared exception!
      try { 
        node5.addChildrenAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList.of((JSType) templateType0);
      Node node0 = new Node(87855567);
      Node node1 = new Node(1271, node0, node0, node0, node0);
      node1.isInstanceOf();
      Node node2 = new Node(2709, 3265, 31);
      node2.isVar();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = new Node(8, 43, 3327);
      node0.isAdd();
      Node node2 = Node.newNumber((double) 56);
      Node[] nodeArray0 = new Node[0];
      node0.setChangeTime(15);
      Node node3 = new Node(8, nodeArray0);
      node0.getAncestor(2);
      Node node4 = null;
      try {
        node4 = new Node(15, node2, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(679);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(31, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = new Node(31, 39, 1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry1.createParameters(jSTypeArray0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      templateType0.getDisplayName();
      modificationVisitor0.caseTemplateType(templateType0);
      Node node5 = Node.newNumber((double) 49);
      simpleErrorReporter0.error("Not declared as a constructor", "Unknown class name", 88, 2);
      Node.newNumber((double) 29);
      node4.hasChildren();
      node5.isWhile();
      node3.isQualifiedName();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isAdd();
      node0.detachChildren();
      Node node2 = Node.newNumber((-2431.7538));
      node1.setChangeTime(21);
      node2.getStaticSourceFile();
      Node node3 = Node.newString("synthetic");
      Node node4 = new Node(52, node1, node3, (-2551), 132);
      node4.copyInformationFromForTree(node3);
      node3.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = Node.newString((-2001), "com.google.javascript.rhino.jstype.NamedType", 1650, 51);
      node0.setType(1);
      node1.isVoid();
      node0.isDebugger();
      node0.isAssign();
      node1.getCharno();
      node1.addChildrenToFront(node0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1862.4));
      Node node1 = Node.newString("7(PT#[4");
      Node node2 = new Node(39, node1, node1, node1, 1311, 105);
      node2.isTry();
      Node node3 = node1.detachFromParent();
      Node node4 = new Node(1, node3, node3, node0, node2);
      node4.isInstanceOf();
      Node node5 = new Node(1, node4, 8388608, 16);
      int int0 = (-358);
      Node node6 = null;
      try {
        node6 = new Node((-918), node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82);
      node0.isNE();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.setChangeTime(8232);
      node0.getStaticSourceFile();
      Node.newString(25, "", 52, 363);
      node2.setType(55);
      node1.isVoid();
      node0.isFor();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node1 = new Node((-1889), node0, node0, node0, node0, 39, 2);
      node1.setChangeTime(44);
      Node node2 = Node.newString((-1231), "", 1309, 1589);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node_AncestorIterable0.iterator();
      Node node3 = new Node(1750, node1, 50, 57);
      node3.setOptionalArg(false);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node3.children();
      node2.isStringKey();
      node1.isAssignAdd();
      node3.isStringKey();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      Node node1 = Node.newString(57, "", 1, 117);
      Node node2 = Node.newNumber((double) 1, (-1101), (-3287));
      node0.putIntProp(43, 100);
      node1.mayMutateArguments();
      node0.isNot();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      try { 
        node2.setString(".");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = new Node(8, 43, 3327);
      node0.isAdd();
      Node.newNumber((double) 56);
      Node[] nodeArray0 = new Node[0];
      node0.setChangeTime(15);
      Node node2 = new Node(8, nodeArray0);
      node2.isCast();
      Node node3 = new Node(40, nodeArray0);
      Node node4 = new Node(85, node1, node0);
      node4.isNull();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newNumber((double) 38, 52, (-1138));
      Node node2 = Node.newString(55, "6m,k0D~Uglq:2T", (-100), (-1858));
      node0.hasChild(node2);
      node2.setOptionalArg(true);
      node1.isIf();
      node1.isInc();
      node2.setString("Object#Key");
      node1.isSetterDef();
      node2.cloneNode();
      node0.getType();
      node0.isTrue();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setMutatesThis();
      Node node1 = new Node(154, node0);
      node0.getChildCount();
      Node node2 = Node.newString("");
      node2.isEquivalentTo(node1);
      node1.getAncestor(387);
      node1.isWith();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 32, 4095, 125);
      Node node2 = Node.newString(37, "6m,k0D~Uglq:2T", 38, 46);
      node2.hasChild(node1);
      node1.setOptionalArg(false);
      node0.isIf();
      node2.isInc();
      node2.setString("$M~=!gx");
      node2.isSetterDef();
      Node node3 = node2.cloneNode();
      node0.getType();
      node2.isTrue();
      node2.isOnlyModifiesThisCall();
      node3.isRegExp();
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.addSuppression(".");
      node0.getAncestors();
      Node node1 = new Node(53, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesThis();
      Node.newString("f");
      node0.getAncestor(57);
      node1.putProp(2048, node_SideEffectFlags6);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      Node node4 = new Node(16, node3, node3, 8, 2);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSTypeArray0[0], jSType0, jSTypeArray0[0], jSType0, jSType0, jSTypeArray0[0]);
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node5.cloneTree();
      node4.isFunction();
      node4.getLineno();
      node4.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      Node node1 = Node.newString(57, "", 1, 117);
      Node node2 = Node.newNumber((double) 1, (-1101), (-3287));
      node0.putIntProp(43, 100);
      node1.mayMutateArguments();
      node0.isNot();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isQuotedString();
      node2.isOnlyModifiesThisCall();
      node2.isCall();
      node1.isCast();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      jSType0.restrictByNotNullOrUndefined();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      Node node1 = new Node(40, node0, 1, 32);
      Node node2 = node0.getFirstChild();
      node0.isAdd();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.isObjectLit();
      node1.setCharno(1);
      node0.isCatch();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NAME
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newString("Object#Key");
      Node node1 = node0.getAncestor(0);
      node0.putProp(29, node_SideEffectFlags0);
      node1.isFalse();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(57);
      simpleSourceFile0.getLineOffset(50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newNumber(2969.797259599058);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "", (-1402), 1929);
      Node node2 = Node.newNumber((double) 37);
      node1.setIsSyntheticBlock(false);
      node2.isScript();
      node0.isWhile();
      node1.isQualifiedName();
      node2.isNumber();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry1.createAnonymousObjectType(jSDocInfo0);
      vector0.add((JSType) objectType0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry2.createParameters((List<JSType>) vector0);
      Node node0 = Node.newString((-1231), "Object#Element", 1309, 1589);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.isAdd();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.isObjectLit();
      Node node2 = new Node((-1951), node0);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of();
      Vector<TemplateType> vector0 = new Vector<TemplateType>(immutableList0);
      Vector<JSType> vector1 = new Vector<JSType>(vector0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector1);
      node0.getChangeTime();
      Node node1 = Node.newNumber((double) 0, 48, (-1210));
      vector1.containsAll(immutableList0);
      node1.setChangeTime(331);
      node0.isEquivalentToTyped(node1);
      node0.getJSDocInfo();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node[] nodeArray0 = new Node[10];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(47);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[5] = node3;
      Node node4 = new Node(57);
      // Undeclared exception!
      try { 
        node4.useSourceInfoIfMissingFrom(nodeArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.newNumber(3098.1727);
      Node node0 = Node.newString(119, "Object#Element");
      node0.isInstanceOf();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 13);
      Node node2 = new Node((-265), node0, node0, node1, 2330, 51);
      node0.isTry();
      node0.detachFromParent();
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node2.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -265
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString(606, "com.google.common.base.Predicates$AssignableFromPredicate", 606, 606);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = new Node(8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-2491));
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node1.getChildCount();
      Node.newString("@");
      node0.isEquivalentTo(node2);
      node0.getAncestor(57);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(48, "Object#Key", 48, 48);
      Node node1 = new Node(54, node0, node0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-1564), 8, 3818);
      node0.isAdd();
      Node node1 = Node.newNumber(2796.9924913884);
      node1.setChangeTime((-1996));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node((-918), nodeArray0);
      node0.isCast();
      Node node3 = null;
      try {
        node3 = new Node(8, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      Node node3 = Node.newNumber((-1.0));
      simpleErrorReporter0.error("}/A%", "f4GbZ]ziF&7q0mN+LT", 3645, 152);
      Node node4 = Node.newNumber((double) 38);
      node4.isScript();
      node2.isWhile();
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-0.0555400975758823));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      node1.setIsSyntheticBlock(false);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      node3.srcref(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = Node.newString(57, "", 1, 117);
      Node node2 = Node.newNumber((double) 1, (-1101), (-3287));
      node0.putIntProp(43, 100);
      node1.mayMutateArguments();
      node0.isNot();
      node1.setWasEmptyNode(true);
      node1.isQuotedString();
      node2.isOnlyModifiesThisCall();
      node2.isCall();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(39, "", (-1564), 82);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = Node.newString("");
      node0.getAncestor(1);
      node1.setSourceFileForTesting("");
      node1.getInputId();
      node1.putProp(12, (Object) null);
      Node node2 = null;
      try {
        node2 = new Node(1762, (Node) null, (Node) null, (-840), 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node1 = new Node((-1889), node0, node0, node0, node0, 39, 2);
      node1.setChangeTime(44);
      Node node2 = Node.newString((-1231), "", 1309, 1589);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node_AncestorIterable0.iterator();
      Node node3 = new Node(1750, node1, 50, 57);
      node3.setOptionalArg(false);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node3.children();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      String string0 = "valueOf";
      Node node1 = Node.newString(51, "valueOf");
      Node node2 = new Node(112, node0, node0, node1, node1);
      Node node3 = Node.newString("valueOf");
      node2.getIndexOfChild(node0);
      node0.isDebugger();
      node2.isDefaultCase();
      node2.removeProp((-161));
      node3.getCharno();
      Node node4 = Node.newString("valueOf", 8, 1528);
      try { 
        node4.setDouble((-1707.37174944318));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING valueOf 8 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString(118, " [", 118, 118);
      node0.toStringTree();
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.getDirectives();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isArrayLit();
      node0.getQualifiedName();
      InputId inputId0 = new InputId("26n\"");
      node0.setInputId(inputId0);
      node0.setWasEmptyNode(false);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[17];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node0.getAncestor(122);
      Node.newString(1864, "com.google.common.base.CharMatcher$14", 46, (-4103));
      node0.srcref(node1);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node node0 = new Node(1);
      node0.isInstanceOf();
      node0.isVar();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      try { 
        node2.setDouble(53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(82, 82, 82);
      node0.isNE();
      Node node1 = new Node(38, 47, (-2491));
      node0.isAdd();
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.setChangeTime(8232);
      node2.getStaticSourceFile();
      Node.newString(25, "", 52, 363);
      node2.setType(55);
      node1.isVoid();
      node0.isDebugger();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      node0.isNE();
      Node node1 = new Node(8, 43, 3327);
      node0.isAdd();
      Node.newNumber((double) 56);
      Node[] nodeArray0 = new Node[0];
      node0.setChangeTime(15);
      Node node2 = new Node(8, nodeArray0);
      node2.isCast();
      node1.isNew();
      node0.getAncestors();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 4448, 4448);
      node0.isInstanceOf();
      Node node1 = new Node(49, node0, 12, 32);
      Node node2 = new Node(56, node1);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node4 = null;
      try {
        node4 = new Node(114, node2, node3, node2, node1, 39, 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(32, node0, node0, (-3692), (-143));
      node1.toString(true, true, true);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(0, (-2677), 0);
      Node node1 = new Node(4095, node0, 57, 57);
      node1.isAdd();
      Node node2 = Node.newNumber((double) 4);
      Node node3 = new Node(2762);
      node3.setChangeTime(1);
      node1.setLineno(1);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      Node node4 = new Node(15, node2, 49, 39);
      nodeArray0[4] = node4;
      Node node5 = null;
      try {
        node5 = new Node(46, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.addSuppression("7R*");
      node0.getAncestors();
      Node.newString("Object#Key", 49, 2314);
      Node node1 = new Node(55, node0, node0);
      node0.getSourceOffset();
      node1.isNot();
      node1.removeChildren();
      try { 
        node0.setDouble(2582.2460173);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Object#Key [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000337] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4095);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[17];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node node3 = new Node(36, node0, 39, 16);
      node1.getFirstChild();
      node2.isAdd();
      node3.isGetElem();
      node0.setCharno(225398);
      node2.toStringTree();
      Node node4 = new Node(126, node3);
      node3.getBooleanProp(1157);
      node2.isLabelName();
      node0.isEquivalentToShallow(node4);
      node4.getParent();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$Marker", 0, 0);
      Node node1 = Node.newString(1, "com.google.javascript.rhino.JSDocInfo$Marker", 36, 43);
      node1.getSourcePosition();
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getAncestor(15);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node2.setChangeTime(37);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node3 = Node.newString(38, " is not a string node", 1, 40);
      node3.getChildCount();
      // Undeclared exception!
      try { 
        node2.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = "com.google.common.base.Predicates$InPredicate";
      Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate", 28, 28);
      node0.setLineno(36);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.setCharno(4);
      node0.hasOneChild();
      node0.isContinue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags7.clearAllFlags();
      node_SideEffectFlags7.setMutatesThis();
      Node.newString("PRIVATE");
      node3.getAncestor(32);
      node0.putProp(12, (Object) null);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      Node node0 = new Node(116);
      Node node1 = new Node(5760, node0, node0, 1076, 147);
      node0.cloneTree();
      node0.isFunction();
      node0.getLineno();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(17.907211013751787);
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber((double) 38, (-1862), 111);
      node0.setOptionalArg(true);
      Node node3 = Node.newNumber((double) 50, 0, (-577));
      node3.hasChild(node1);
      node0.getInputId();
      node1.setOptionalArg(false);
      node1.isIf();
      Node node4 = null;
      try {
        node4 = new Node(128, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node node0 = new Node(1, 1, 4096);
      node0.setSourceEncodedPositionForTree(0);
      node0.isDec();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFromExterns();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node1.getSourceOffset();
      modificationVisitor0.caseBooleanType();
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node node4 = new Node(40, node3, 51, 4);
      Node node5 = node3.getFirstChild();
      node2.isAdd();
      node3.isGetElem();
      node0.setCharno(2);
      node5.toStringTree();
      Node node6 = new Node(32, node2);
      node3.getBooleanProp(10);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, (List<JSType>) immutableList0);
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) templateType0;
      jSTypeArray0[5] = (JSType) templateType0;
      jSTypeArray0[6] = (JSType) templateType0;
      jSTypeArray0[7] = (JSType) templateType0;
      jSTypeArray0[8] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      simpleErrorReporter0.warning("Named type with empty name component", "", 2663, 55);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      node2.isDebugger();
      Node.newString(680, "jWqzD.SR =8(P{:~8", (-36), 1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber(3740.13650651366);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = Node.newNumber((double) 38);
      node1.getStaticSourceFile();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node_AncestorIterable0.iterator();
      node1.setOptionalArg(true);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList.of((JSType) templateType0);
      Node node0 = new Node(53);
      Node node1 = new Node(42, node0, node0, node0, node0);
      node1.isInstanceOf();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node2 = new Node(4095, node1, 57, 4);
      node1.setOptionalArg(false);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node1.isNew();
      node1.getAncestors();
      node2.children();
      node1.isStringKey();
      node0.isAssignAdd();
      Node.newString("Ut#hi_1a/?TE8");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 28, (-3599), (-1));
      node0.setOptionalArg(true);
      Node node1 = Node.newNumber((double) 32, 4095, 125);
      Node node2 = Node.newString(37, "6m,k0D~Uglq:2T", 38, 46);
      node2.hasChild(node1);
      node1.setOptionalArg(false);
      node0.isIf();
      node2.isInc();
      node2.setString("$M~=!gx");
      node2.isSetterDef();
      node2.cloneNode();
      node0.getType();
      node2.isTrue();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString((-1231), "", 1309, 1589);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node1.isAdd();
      node_SideEffectFlags1.setMutatesGlobalState();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isObjectLit();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.removeProp((-3844));
      Node node1 = new Node((-3844), node0, node0, 57, 0);
      Node.newNumber((double) 30, 54, 3868);
      node1.setOptionalArg(false);
      Node node2 = Node.newNumber((double) 32, 2535, 3868);
      node1.hasChild(node0);
      node1.setOptionalArg(true);
      node2.isIf();
      node1.isInc();
      node2.isVoid();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(1839, 1515, 8192);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean0 = node0.isTypeOf();
      assertFalse(boolean0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.putIntProp(3139, 3139);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean1 = node0.mayMutateArguments();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean2 = node0.isNot();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.setWasEmptyNode(false);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean3 = node0.isQuotedString();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean4 = node0.isOnlyModifiesThisCall();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean5 = node0.isFor();
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean6 = node0.isCast();
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(12, (-936), (-936));
      node0.isTypeOf();
      Node.newString(31, "", (-2167), 110);
      Node.newNumber(1891.58, 2048, (-1740));
      node0.putIntProp(118, 39);
      node0.mayMutateArguments();
      node0.isNot();
      node0.setWasEmptyNode(true);
      node0.isQuotedString();
      node0.isOnlyModifiesThisCall();
      node0.isCall();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newString(4235, "0|)XKQ$f", 4235, 4235);
      Node node1 = new Node(38, node0, node0, node0, 2, (-1759));
      Node node2 = null;
      try {
        node2 = new Node(56, node1, node0, node1, 1848, 1746);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = "com.google.common.base.Predicates$AssignableFromPredicate";
      Node node0 = Node.newString(606, "com.google.common.base.Predicates$AssignableFromPredicate");
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.cloneTree();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newString("]h0!h-");
      node0.isVoid();
      Node node1 = new Node(4095, 38, 29);
      node1.isAdd();
      Node.newNumber((double) 36);
      Node node2 = new Node(1);
      node2.setChangeTime(31);
      Node[] nodeArray0 = new Node[8];
      node2.setLineno((-435));
      nodeArray0[0] = node2;
      Node node3 = null;
      try {
        node3 = new Node(2, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      node0.isInc();
      try { 
        node3.setString("hTG ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node[] nodeArray0 = new Node[10];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isDefaultCase();
      Node node3 = Node.newString("Object#Element", 40, 32);
      node3.removeProp(8);
      node1.getCharno();
      Node.newString("", (-1236), 15);
      Node node4 = Node.newString("y'K$1!P**+78'U &", 4, (-1024));
      try { 
        node4.setDouble(54);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING y'K$1!P**+78'U & is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString(695, "LSH");
      Node node1 = new Node(40);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseBooleanType();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      simpleErrorReporter0.warning("Object#Element", "first new child has existing parent", 4, 53);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ImmutableList.of();
      Node node3 = new Node(2879, node1, node2, 57, 42);
      Node node4 = node1.cloneTree();
      node0.isCase();
      node0.isFunction();
      node4.getLineno();
      Node.mergeLineCharNo(1, 38);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString((-3844), "");
      node0.removeProp((-3844));
      Node node1 = new Node((-3844), node0, node0, 57, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      int int0 = (-1768);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      Node node2 = null;
      try {
        node2 = new Node(2147483645, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("]h0!h-");
      node0.isNE();
      Node node1 = new Node(4095, 38, 29);
      node1.isAdd();
      Node node2 = Node.newNumber((double) 36);
      Node node3 = new Node(1);
      node3.setChangeTime(31);
      Node[] nodeArray0 = new Node[1];
      node3.setLineno((-435));
      nodeArray0[0] = node3;
      Node node4 = new Node(2, nodeArray0);
      Node node5 = new Node((-1236), node2, node2);
      node5.isString();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(82, "", 82, 82);
      node0.isNE();
      Node node1 = new Node(30, 55, 30);
      node0.isAdd();
      node1.detachChildren();
      node0.getLength();
      node0.setChangeTime(15);
      Node node2 = new Node((-2491), node1, node0);
      node1.isReturn();
      node0.isGetElem();
      node1.isNew();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseBooleanType();
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node node4 = new Node(40, node3, 51, 4);
      node3.getFirstChild();
      node0.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node_AncestorIterable0.iterator();
      Node node5 = new Node((-1740), node0, 51, 2);
      node3.setOptionalArg(false);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node3.children();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString(849, "", (-145), 849);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.setChangeTime(1);
      Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node_AncestorIterable0.iterator();
      node0.setOptionalArg(false);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node0.isNew();
      node0.getAncestors();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString(606, "com.google.common.base.Predicates$AssignableFromPredicate");
      Node node1 = new Node(606, node0, node0, node0, 13, 118);
      node1.isTry();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = Node.SIDE_EFFECT_FLAGS;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[1];
      Node node0 = null;
      try {
        node0 = new Node(4307, nodeArray0, 82, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isEquivalentTo(node0, false, true, false);
      Node node1 = new Node(1714, node0, 2246, 42);
      node0.getSourceFileName();
      node0.isDefaultCase();
      node1.setLineno(31);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$Marker", 0, 0);
      Node node1 = Node.newString(1, "com.google.javascript.rhino.JSDocInfo$Marker", 36, 43);
      node1.getSourcePosition();
      node0.isParamList();
      boolean boolean0 = true;
      node1.isEquivalentTo(node0, false, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean1 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getAncestor(15);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node3 = node1.copyInformationFromForTree(node2);
      Node node4 = new Node(46, node2);
      // Undeclared exception!
      try { 
        node3.addChildBefore(node2, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = new Node((-2148));
      node0.addSuppression("");
      node0.isLocalResultCall();
      node0.isGetterDef();
      node0.getChildCount();
      Node node1 = new Node(1, node0, node0, 52, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node1.getChildCount();
      Node.newString("@");
      node1.isEquivalentTo(node1);
      node0.getAncestor(85);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node node0 = Node.newString("Object#Key");
      Node node1 = node0.getAncestor(0);
      node0.putProp(29, node_SideEffectFlags0);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString("Object#Key", (-3762), 47);
      node1.isEquivalentTo(node0, true, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node1.addChildToBack(node0);
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags6.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags7.setMutatesThis();
      Node node2 = new Node(130, node1, node1, node1);
      node2.getChildCount();
      Node.newString("Object#Key");
      node2.isEquivalentTo(node1);
      Node node3 = Node.newString("Object#Key");
      node0.getIndexOfChild(node2);
      node0.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = "LSH";
      Node node0 = Node.newString(695, "LSH");
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node2.setQuotedString();
      node1.hasChildren();
      node1.mayMutateGlobalStateOrThrow();
      node0.checkTreeEqualsImpl(node2);
      node0.setVarArgs(true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 695
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      nodeArray0[0] = node0;
      Node node1 = new Node((-326), node0, node0, node0);
      node0.clonePropsFrom(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node2 = null;
      try {
        node2 = new Node(51, node0, (Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString("Object#Key", (-3762), 47);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(45, node1, 2246, 42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      node_SideEffectFlags0.setAllFlags();
      Node node3 = null;
      try {
        node3 = new Node(39, node1, node2, (-405), 1488);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString(2048, "duplicate child", 2048, 2048);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node node2 = new Node((-303), node1, node0, 36, 21);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.type = 2;
      node3.getQualifiedName();
      // Undeclared exception!
      try { 
        node3.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setOptionalArg(true);
      node0.isIf();
      node0.isInc();
      node0.isSetterDef();
      node0.setSourceEncodedPosition(1012);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setOptionalArg(true);
      node0.isIf();
      node0.isInc();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString("Object#Key", (-3762), 47);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(45, node1, 2246, 42);
      node1.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.getChildCount();
      Node node3 = Node.newString("");
      node2.isEquivalentTo(node3);
      node2.getAncestor(4);
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString(118, " [", 118, 118);
      node0.toStringTree();
      node0.getJSType();
      node0.isDefaultCase();
      node0.removeProp(2013);
      node0.getCharno();
      Node node1 = Node.newString("", 55, 118);
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  55 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(743, node0, node0, node0, node0);
      node0.getJSDocInfo();
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      int int0 = (-2148);
      Node node0 = new Node((-2148));
      String string0 = "";
      node0.addSuppression("");
      node0.isLocalResultCall();
      node0.isGetterDef();
      node0.getChildCount();
      Node node1 = Node.newString("", 0, 602);
      node1.removeChildren();
      Node node2 = null;
      try {
        node2 = new Node(49, (Node) null, node1, node1, 30, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newNumber(1508.587830965);
      Node node1 = new Node(50, node0, node0, node0, 49, 1);
      node0.addChildToFront(node1);
      node0.getChildCount();
      Node node2 = Node.newString("");
      node1.isEquivalentTo(node2);
      node2.getAncestor(38);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(39, "", (-1564), 82);
      node0.isNE();
      Node node1 = new Node(38, 47, (-2491));
      node1.isAdd();
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.setChangeTime(8232);
      Node node3 = new Node(31, node1, node2);
      node1.setLength(43);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      
      Node node1 = new Node(55, node0, node0, 2477, 49);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals(10145841, node1.getSourcePosition());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(55, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertEquals(2477, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Node node2 = node1.copyInformationFromForTree(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(55, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNew());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isCast());
      assertEquals(55, node2.getType());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = node1.getQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertNull(string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(55, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = "LSH";
      Node node0 = Node.newString("LSH", 695, 695);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(55, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = node0.clonePropsFrom(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertEquals(695, node2.getCharno());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertEquals(2847415, node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertEquals(695, node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node2.setQuotedString();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertEquals(695, node2.getCharno());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertEquals(2847415, node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertEquals(695, node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean0 = node1.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertSame(node0, node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertSame(node0, node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertNull(node_NodeMismatch0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertEquals(695, node2.getCharno());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertEquals(2847415, node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertEquals(695, node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setVarArgs(true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertSame(node0, node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(695, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals(55, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(55, node3.getType());
      assertFalse(node3.isLabel());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isDec());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isHook());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node3, node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = new Node((-2148));
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      node0.addSuppression("");
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean1 = node0.isGetterDef();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      int int0 = node0.getChildCount();
      assertEquals(0, int0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node1 = new Node(1, node0, node0, 52, 1);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(212993, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      
      Node node2 = node0.copyInformationFromForTree(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isAdd());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(52, node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(212993, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(212993, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-2148), node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertEquals(212993, node2.getSourcePosition());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertEquals(1, node2.getCharno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(52, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      String string0 = node2.getQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNull(string0);
      assertFalse(node0.isAdd());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(52, node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(212993, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-2148), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(52, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(212993, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-2148), node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertEquals(212993, node2.getSourcePosition());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertEquals(1, node2.getCharno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(52, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = "LSH";
      Node node0 = Node.newString("LSH", 695, 695);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(55, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(55, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node2 = node0.clonePropsFrom(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(55, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertTrue(node2.isString());
      assertEquals(2847415, node2.getSourcePosition());
      assertEquals(695, node2.getCharno());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCatch());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertEquals(695, node2.getLineno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isComma());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isTrue());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      node2.setQuotedString();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(55, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertTrue(node2.isString());
      assertEquals(2847415, node2.getSourcePosition());
      assertEquals(695, node2.getCharno());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCatch());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertEquals(695, node2.getLineno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isComma());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isTrue());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node1.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(55, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertSame(node0, node2);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(55, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertSame(node0, node2);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setVarArgs(true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertEquals(695, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(2847415, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(695, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertSame(node0, node2);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber((-1009.90920112));
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = node0.removeChildren();
      assertNull(node1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = node0.useSourceInfoFromForTree(node0);
      assertNotNull(node2);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabel());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setOptionalArg(true);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertSame(node0, node2);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      node_SideEffectFlags2.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("INTERFACE", "e x{(y+", 53, (-97));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      
      Node node3 = new Node(4095, node0, node0, 50, 46);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNew());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isOr());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertEquals(46, node3.getCharno());
      assertEquals(50, node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isFunction());
      assertFalse(node3.isString());
      assertFalse(node3.isContinue());
      assertEquals(4095, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isInc());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isHook());
      assertEquals(204846, node3.getSourcePosition());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isIn());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isTry());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node4 = node0.cloneTree();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isCast());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertEquals(39, node4.getType());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssign());
      assertFalse(node4.isLabel());
      assertFalse(node4.isScript());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAnd());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isBreak());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isVar());
      assertFalse(node4.isComma());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isEmpty());
      assertTrue(node4.isNumber());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFor());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isString());
      assertFalse(node4.isTry());
      assertFalse(node4.isCase());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertNotSame(node0, node4);
      assertSame(node0, node2);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      boolean boolean0 = node2.isCase();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(boolean0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabel());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertNotSame(node0, node4);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotSame(node2, node4);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node5 = null;
      try {
        node5 = new Node(348, node0, 8, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(679, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isOr());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isComma());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isAssignAdd());
      assertTrue(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertEquals(126, node2.getType());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isThis());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNullType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.isParamList());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isComma());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getCharno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCase());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isString());
      assertFalse(node3.isOr());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags1.valueOf());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags1.valueOf());
      assertEquals(19, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      boolean boolean0 = node0.isIf();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(679, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean1 = node1.isSetterDef();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isOr());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      try { 
        node3.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean0 = node0.isEquivalentTo(node0, true, true, false);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node((-3762), node0, 2246, 42);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertEquals((-3762), node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(9199658, node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(2246, node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      String string0 = node0.getSourceFileName();
      assertFalse(node0.equals((Object)node1));
      assertNull(string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertNotSame(node0, node1);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean1 = node0.isDefaultCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertNotSame(node0, node1);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      node1.setLineno(31);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node1.isComma());
      assertEquals(31, node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertEquals((-3762), node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertEquals(42, node1.getCharno());
      assertEquals(127018, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(679, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = node1.removeChildren();
      assertFalse(node1.equals((Object)node0));
      assertNull(node2);
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node3 = Node.newString("", 57, 1);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isWith());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isName());
      assertEquals(57, node3.getLineno());
      assertFalse(node3.isNull());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getChildCount());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertEquals(233473, node3.getSourcePosition());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCall());
      assertEquals(40, node3.getType());
      assertFalse(node3.isThrow());
      assertEquals(1, node3.getCharno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      node3.setOptionalArg(true);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isWith());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isName());
      assertEquals(57, node3.getLineno());
      assertFalse(node3.isNull());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getChildCount());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertEquals(233473, node3.getSourcePosition());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCall());
      assertEquals(40, node3.getType());
      assertFalse(node3.isThrow());
      assertEquals(1, node3.getCharno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node0.isSetterDef();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(679, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = Node.newString("Object#Key", (-3762), 47);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean0 = node1.isEquivalentTo(node0, true, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node node2 = new Node(45, node1, 2246, 42);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertEquals(2246, node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertEquals(9199658, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertEquals(1, node2.getChildCount());
      assertEquals(45, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertEquals(42, node2.getCharno());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      String string0 = node1.getSourceFileName();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNull(string0);
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(43, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesThis();
      assertNotNull(node_SideEffectFlags6);
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      
      int int0 = node0.getChildCount();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertNotSame(node0, node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node3 = Node.newString("");
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isComma());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNew());
      assertTrue(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isNull());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isScript());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertNotSame(node3, node1);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean1 = node2.isEquivalentTo(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean1);
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isComma());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNew());
      assertTrue(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isNull());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isScript());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertEquals(2246, node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertEquals(9199658, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertEquals(1, node2.getChildCount());
      assertEquals(45, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertEquals(42, node2.getCharno());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertNotSame(node3, node1);
      assertNotSame(node1, node3);
      assertNotSame(node2, node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node node4 = node2.getAncestor(4);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNull(node4);
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertEquals(2246, node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertEquals(9199658, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertEquals(1, node2.getChildCount());
      assertEquals(45, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertEquals(42, node2.getCharno());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertNotSame(node1, node3);
      assertNotSame(node2, node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean2 = node1.isWith();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean2);
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertNotSame(node1, node3);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node0 = Node.newNumber(1508.587830965);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node0.addChildToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean1 = node1.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      String string0 = node1.toString();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals("TYPEOF 49", string0);
      assertNotNull(string0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertTrue(node0.isOr());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node1 = Node.newString("source_file");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertNotSame(node1, node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = Node.newString("input_id", 42, 48);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFor());
      assertEquals(42, node2.getLineno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertEquals(172080, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertEquals(48, node2.getCharno());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isHook());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals(40, node2.getType());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean0 = node0.isEquivalentTo(node1, false, false, true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertTrue(node0.isOr());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node3 = new Node(64, node1, 51, 21);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertEquals(64, node3.getType());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isBlock());
      assertFalse(node3.isCall());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVar());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertEquals(51, node3.getLineno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertEquals(208917, node3.getSourcePosition());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertTrue(node3.isObjectLit());
      assertFalse(node3.isScript());
      assertFalse(node3.isCast());
      assertEquals(21, node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      
      String string0 = node1.getSourceFileName();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertNull(string0);
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean1 = node1.isDefaultCase();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node4 = null;
      try {
        node4 = new Node(2545, node2, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString((-1564), "", (-1822), (-1564));
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = new Node(4, 55, 2678);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertEquals(2678, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(4, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertEquals(227958, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.isReturn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean1 = node1.isAdd();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertEquals(2678, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(4, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertEquals(227958, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.isReturn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node2 = Node.newNumber(0.0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInc());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertTrue(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node2.setChangeTime(2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInc());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertTrue(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node3 = new Node((-195), node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertEquals(2678, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(4, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertEquals(227958, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.isReturn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertEquals((-195), node3.getType());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isInc());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isParamList());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCase());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isExprResult());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node3.isWith());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isOr());
      assertFalse(node3.isName());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNull());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isString());
      assertFalse(node3.isObjectLit());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      node0.addSuppression("Object#Key");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = Node.newString("Object#Key", (-1778), (-1778));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node2 = new Node(21, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertEquals(21, node2.getType());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertTrue(node2.isAdd());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      
      int int0 = node0.getSourceOffset();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals((-1), int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertNotSame(node0, node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node2.isNot();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertEquals(21, node2.getType());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertTrue(node2.isAdd());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node3 = node0.removeChildren();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertNull(node3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertNotSame(node0, node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      try { 
        node0.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertEquals(100, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertEquals(100, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = new Node(8, 43, 3327);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDo());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertEquals(8, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(179455, node1.getSourcePosition());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean1 = node0.isAdd();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertEquals(100, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = Node.newNumber((double) 56);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node[] nodeArray0 = new Node[0];
      node0.setChangeTime(15);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertEquals(100, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node3 = new Node(8, nodeArray0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(0, nodeArray0.length);
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isOr());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isBlock());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertFalse(node3.isVar());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFor());
      assertEquals(8, node3.getType());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNull());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isIf());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isCall());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isWhile());
      assertFalse(node3.isThrow());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      assertFalse(node3.isDebugger());
      assertEquals(0, node3.getLineno());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node4 = new Node((-195), node0, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertEquals(100, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDo());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertEquals(8, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(179455, node1.getSourcePosition());
      assertEquals((-195), node4.getType());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIn());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isCatch());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isCall());
      assertFalse(node4.isFalse());
      assertFalse(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isThrow());
      assertFalse(node4.isGetProp());
      assertEquals(2, node4.getChildCount());
      assertFalse(node4.isContinue());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isScript());
      assertFalse(node4.isAssignAdd());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isComma());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isThis());
      assertFalse(node4.isNew());
      assertFalse(node4.isCase());
      assertFalse(node4.isDo());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isLabelName());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      
      int int0 = node_SideEffectFlags6.valueOf();
      assertEquals(0, int0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString((-1564), "", (-1822), (-1564));
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = Node.newString("|(/6PycLQpc7nQ>");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertNotSame(node1, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node2 = Node.newString("|(/6PycLQpc7nQ>", 31, 378);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertEquals(31, node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertEquals(127354, node2.getSourcePosition());
      assertEquals(40, node2.getType());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isEquivalentTo(node1, true, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node3 = new Node((-1822), node0, (-1564), 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isCall());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      String string0 = node3.getSourceFileName();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNull(string0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isCall());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node3.isDefaultCase();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isCall());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      Node node4 = new Node(46, node2, node2, node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertEquals(31, node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertEquals(127354, node2.getSourcePosition());
      assertEquals(40, node2.getType());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isCall());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isNumber());
      assertEquals(46, node4.getType());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFalse());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isNew());
      assertFalse(node4.isName());
      assertFalse(node4.isString());
      assertFalse(node4.isNull());
      assertFalse(node4.isReturn());
      assertEquals(3, node4.getChildCount());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isBreak());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDec());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isIn());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFunction());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThrow());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertEquals((-1), node4.getCharno());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isInstanceOf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isThis());
      assertFalse(node4.isCatch());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean2 = node4.isIf();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertEquals(31, node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertEquals(127354, node2.getSourcePosition());
      assertEquals(40, node2.getType());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isCall());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isNumber());
      assertEquals(46, node4.getType());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFalse());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isNew());
      assertFalse(node4.isName());
      assertFalse(node4.isString());
      assertFalse(node4.isNull());
      assertFalse(node4.isReturn());
      assertEquals(3, node4.getChildCount());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isBreak());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDec());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isIn());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFunction());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThrow());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertEquals((-1), node4.getCharno());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isInstanceOf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isThis());
      assertFalse(node4.isCatch());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node4);
      assertNotSame(node4, node3);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean3 = node0.isSetterDef();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1822
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(679, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals(39, node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals(126, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      
      Node node4 = new Node(40, node3, 51, 4);
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node4);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node4.isCall());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertFalse(node4.isNull());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isParamList());
      assertFalse(node4.isName());
      assertFalse(node4.isContinue());
      assertFalse(node4.isLabel());
      assertFalse(node4.isOr());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isSetterDef());
      assertEquals(40, node4.getType());
      assertFalse(node4.isNew());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isInstanceOf());
      assertEquals(1, node4.getChildCount());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isNumber());
      assertFalse(node4.isThis());
      assertFalse(node4.isFor());
      assertFalse(node4.isScript());
      assertFalse(node4.isCase());
      assertTrue(node4.isString());
      assertFalse(node4.isTry());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isIn());
      assertEquals(51, node4.getLineno());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isInc());
      assertFalse(node4.isThrow());
      assertFalse(node4.isCast());
      assertEquals(208900, node4.getSourcePosition());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isAssign());
      assertFalse(node4.isFunction());
      assertFalse(node4.isTrue());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isReturn());
      assertFalse(node4.isComma());
      assertFalse(node4.isNot());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDec());
      assertFalse(node4.isWhile());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isGetProp());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node5 = node3.getFirstChild();
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node5.isDelProp());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isFor());
      assertFalse(node5.isIf());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTry());
      assertFalse(node5.isFunction());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isCatch());
      assertFalse(node5.isVoid());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isBreak());
      assertFalse(node5.isComma());
      assertFalse(node5.isNot());
      assertFalse(node5.isContinue());
      assertFalse(node5.isString());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAnd());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isDebugger());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isAssign());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNumber());
      assertFalse(node5.isCast());
      assertFalse(node5.isGetElem());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isReturn());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertEquals(38, node5.getType());
      assertFalse(node5.isLabel());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isDo());
      assertFalse(node5.isWith());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isNew());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isAdd());
      assertTrue(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isBlock());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isThis());
      assertFalse(node5.isVar());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isHook());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isScript());
      assertFalse(node5.isCase());
      assertFalse(node5.isParamList());
      assertEquals((-1), node5.getCharno());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node4);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean0 = node2.isAdd();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(boolean0);
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals(126, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertNotSame(node2, node3);
      assertNotSame(node2, node4);
      assertNotSame(node2, node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node3.isGetElem();
      assertTrue(boolean1 == boolean0);
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(boolean1);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node4);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node0.setCharno(2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(679, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNotSame(node0, node3);
      assertNotSame(node0, node4);
      assertNotSame(node0, node2);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      String string0 = node5.toStringTree();
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertEquals("NAME \n", string0);
      assertNotNull(string0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node5.isDelProp());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isFor());
      assertFalse(node5.isIf());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTry());
      assertFalse(node5.isFunction());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isCatch());
      assertFalse(node5.isVoid());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isBreak());
      assertFalse(node5.isComma());
      assertFalse(node5.isNot());
      assertFalse(node5.isContinue());
      assertFalse(node5.isString());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAnd());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isDebugger());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isAssign());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNumber());
      assertFalse(node5.isCast());
      assertFalse(node5.isGetElem());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isReturn());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertEquals(38, node5.getType());
      assertFalse(node5.isLabel());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isDo());
      assertFalse(node5.isWith());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isNew());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isAdd());
      assertTrue(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isBlock());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isThis());
      assertFalse(node5.isVar());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isHook());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isScript());
      assertFalse(node5.isCase());
      assertFalse(node5.isParamList());
      assertEquals((-1), node5.getCharno());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node4);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node6 = new Node(32, node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node2));
      assertNotNull(node6);
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals(126, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node6.isVar());
      assertFalse(node6.isCall());
      assertFalse(node6.isName());
      assertFalse(node6.isBlock());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isNull());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isNew());
      assertFalse(node6.isAdd());
      assertFalse(node6.isDo());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isLabel());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isParamList());
      assertFalse(node6.isFunction());
      assertEquals(32, node6.getType());
      assertFalse(node6.isContinue());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isFor());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isTry());
      assertFalse(node6.isIf());
      assertFalse(node6.isNE());
      assertFalse(node6.isScript());
      assertFalse(node6.isNumber());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.hasMoreThanOneChild());
      assertTrue(node6.isTypeOf());
      assertEquals(1, node6.getChildCount());
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isCase());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isThis());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isWith());
      assertFalse(node6.isCatch());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isInc());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isString());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isAnd());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isFalse());
      assertFalse(node6.isCast());
      assertTrue(node6.hasOneChild());
      assertFalse(node6.isTrue());
      assertFalse(node6.isDebugger());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isOr());
      assertFalse(node6.isNot());
      assertFalse(node6.isReturn());
      assertFalse(node6.isWhile());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isVoid());
      assertFalse(node6.isBreak());
      assertFalse(node6.isComma());
      assertFalse(node6.isDec());
      assertFalse(node6.isAssign());
      assertFalse(node6.isGetElem());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean2 = node3.getBooleanProp(10);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(boolean2);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertEquals(83, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertNotSame(node3, node6);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node4);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString(24, "Io2{D {|+l", 0, 0);
      assertNotNull(node0);
      assertEquals(24, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      boolean boolean0 = node0.isBlock();
      assertFalse(boolean0);
      assertEquals(24, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      boolean boolean1 = node0.isComma();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(24, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      String string0 = node0.toStringTree();
      assertEquals("DIV Io2{D {|+l 0\n", string0);
      assertNotNull(string0);
      assertEquals(24, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$Marker", 0, 0);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = Node.newString(1, "com.google.javascript.rhino.JSDocInfo$Marker", 36, 43);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertEquals(147499, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isRegExp());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getType());
      assertNotSame(node1, node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      int int0 = node1.getSourcePosition();
      assertFalse(node1.equals((Object)node0));
      assertEquals(147499, int0);
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertEquals(147499, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isRegExp());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getType());
      assertNotSame(node1, node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean0 = node0.isParamList();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertNotSame(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean1 = true;
      boolean boolean2 = node1.isEquivalentTo(node0, false, true, true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertEquals(147499, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isRegExp());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getType());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node_SideEffectFlags1;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("com.google.javascript.rhino.JSDocInfo$Marker", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property com.google.javascript.rhino.JSDocInfo$Marker
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newString("", 0, 970);
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertNull(node_NodeMismatch1);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      JSType jSType0 = null;
      node0.setJSType((JSType) null);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      int int0 = node0.getLineno();
      assertEquals(0, int0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(970, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertEquals(970, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(679, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertTrue(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertEquals(126, node2.getType());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node3 = node1.cloneTree();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertTrue(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node3.isNull());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isContinue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertEquals(39, node3.getType());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isCast());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isLabel());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDo());
      assertTrue(node3.isNumber());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTrue());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertNotSame(node1, node3);
      assertNotSame(node3, node1);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = Node.newString("Object#Key", (-3762), 47);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean0 = node1.isEquivalentTo(node0, true, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node2 = new Node(45, node1, 2246, 42);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCast());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertEquals(9199658, node2.getSourcePosition());
      assertEquals(2246, node2.getLineno());
      assertEquals(42, node2.getCharno());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertEquals(45, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = node1.getSourceFileName();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNull(string0);
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean1 = node0.isDefaultCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertNotSame(node0, node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      node2.setLineno(31);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isArrayLit());
      assertEquals(127018, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertEquals(42, node2.getCharno());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertEquals(45, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertNotSame(node2, node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(679, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInc());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWith());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(126, node2.getType());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("boolean", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullable());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      nodeArray0[3] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      
      Node node3 = new Node(40, node0, 51, 4);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(679, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAnd());
      assertFalse(node3.isScript());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isNumber());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNew());
      assertFalse(node3.isName());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isBreak());
      assertFalse(node3.isWhile());
      assertFalse(node3.isCall());
      assertFalse(node3.isComma());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isEmpty());
      assertEquals(51, node3.getLineno());
      assertFalse(node3.isOr());
      assertEquals(208900, node3.getSourcePosition());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isFor());
      assertEquals(40, node3.getType());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isCase());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertTrue(node3.isString());
      assertFalse(node3.isThis());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertEquals(4, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node4 = node1.getFirstChild();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertNull(node4);
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node2.isAdd();
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(boolean0);
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInc());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWith());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(126, node2.getType());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertNotSame(node2, node0);
      assertNotSame(node2, node3);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate", 28, 28);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertEquals(28, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertEquals(40, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(114716, node1.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      node1.setLineno(36);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(28, node0.getCharno());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertEquals(40, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      int int0 = Node.SIDE_EFFECT_FLAGS;
      assertEquals(42, int0);
      
      node1.setType(42);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(28, node0.getCharno());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(42, node1.getType());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      node1.setCharno(4);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(147460, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean0 = node1.hasOneChild();
      assertFalse(boolean0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(147460, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean1 = node0.isBreak();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertSame(node0, node1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node2 = node1.removeFirstChild();
      assertNull(node2);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(147460, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags7.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      
      node0.setLineno(2263);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals(9269252, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertTrue(node0.isThis());
      assertFalse(node0.isNot());
      assertEquals(2263, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertSame(node0, node1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString(28, "com.google.common.base.Predicates$InPredicate", 28, 28);
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertEquals(28, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertEquals(28, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertEquals(114716, node1.getSourcePosition());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertEquals(28, node1.getLineno());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(28, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node1.setLineno(36);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertEquals(28, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(28, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      int int0 = node1.getSideEffectFlags();
      assertEquals(0, int0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertEquals(28, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertEquals(28, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node1.setType(42);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node2 = new Node(8192, node1, 87, (-794));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals(8192, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      String string0 = node2.getSourceFileName();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNull(string0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals(8192, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean0 = node0.isDefaultCase();
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertSame(node0, node1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      node2.setLineno(51);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals(0, node2.getCharno());
      assertEquals(51, node2.getLineno());
      assertEquals(8192, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertEquals(208896, node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int1 = Node.extractCharno(32);
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      int int2 = 681;
      node1.removeProp(127);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean1 = node1.isDefaultCase();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      boolean boolean2 = node0.hasChild(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertTrue(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, node0.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(42, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertTrue(node1.isThis());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString((-1564), "", (-1822), (-1564));
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newString("");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotSame(node1, node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node2 = Node.newString("", 31, 378);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertEquals(127354, node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isNot());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isFunction());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDebugger());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVar());
      assertFalse(node2.isCast());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWith());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertTrue(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isEquivalentTo(node1, true, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean1 = node0.hasOneChild();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean2 = node2.isBreak();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertEquals(127354, node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isNot());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isFunction());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDebugger());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVar());
      assertFalse(node2.isCast());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWith());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertTrue(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node0.addChildrenToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node3 = node1.getAncestor(1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isCast());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertEquals((-1564), node3.getType());
      assertFalse(node3.isVar());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isName());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNull());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isString());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFalse());
      assertFalse(node3.isParamList());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isRegExp());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node3, node2);
      assertSame(node3, node0);
      assertNotSame(node3, node1);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node4 = Node.newString(4095, "", 1674, 2);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertNotNull(node4);
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isAnd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isContinue());
      assertFalse(node4.isOr());
      assertFalse(node4.isThrow());
      assertFalse(node4.isNew());
      assertFalse(node4.isDo());
      assertFalse(node4.isAdd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isNull());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isReturn());
      assertFalse(node4.isComma());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasChildren());
      assertEquals(6856706, node4.getSourcePosition());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertEquals(2, node4.getCharno());
      assertFalse(node4.isNE());
      assertFalse(node4.isArrayLit());
      assertEquals(4095, node4.getType());
      assertFalse(node4.isVoid());
      assertFalse(node4.isIn());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isInc());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertEquals(1674, node4.getLineno());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThis());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isFor());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node3);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      
      Node node5 = node0.srcref(node4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertNotNull(node5);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(1674, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(6856706, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isAnd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isContinue());
      assertFalse(node4.isOr());
      assertFalse(node4.isThrow());
      assertFalse(node4.isNew());
      assertFalse(node4.isDo());
      assertFalse(node4.isAdd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isNull());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isReturn());
      assertFalse(node4.isComma());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasChildren());
      assertEquals(6856706, node4.getSourcePosition());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertEquals(2, node4.getCharno());
      assertFalse(node4.isNE());
      assertFalse(node4.isArrayLit());
      assertEquals(4095, node4.getType());
      assertFalse(node4.isVoid());
      assertFalse(node4.isIn());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isInc());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertEquals(1674, node4.getLineno());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThis());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isFor());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertFalse(node5.isDo());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isOr());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertFalse(node5.isName());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isNull());
      assertFalse(node5.isReturn());
      assertFalse(node5.isCatch());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isCall());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isWith());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isRegExp());
      assertEquals((-1564), node5.getType());
      assertEquals(2, node5.getCharno());
      assertFalse(node5.isTrue());
      assertFalse(node5.isTry());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isScript());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNumber());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isVar());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertEquals(1674, node5.getLineno());
      assertFalse(node5.isLabel());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isString());
      assertFalse(node5.isCase());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isIn());
      assertFalse(node5.isInc());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isComma());
      assertFalse(node5.isNE());
      assertFalse(node5.isThis());
      assertFalse(node5.isHook());
      assertFalse(node5.isFor());
      assertTrue(node5.hasChildren());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isVoid());
      assertFalse(node5.isBreak());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isNot());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSetterDef());
      assertEquals(6856706, node5.getSourcePosition());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFunction());
      assertFalse(node5.isCast());
      assertFalse(node5.isContinue());
      assertSame(node0, node5);
      assertNotSame(node0, node1);
      assertNotSame(node0, node4);
      assertNotSame(node0, node2);
      assertSame(node0, node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node5);
      assertNotSame(node4, node3);
      assertNotSame(node5, node1);
      assertSame(node5, node3);
      assertSame(node5, node0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node2);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("TYPE_ERROR_TYPE", node3, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(679, node0.getType());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isNumber());
      assertFalse(node1.isString());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isIf());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertEquals(126, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getSourcePosition());
      assertTrue(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isOr());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThrow());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNot());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTrue());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertEquals(83, node3.getType());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isWith());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isScript());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isInstanceOf());
      assertEquals(1, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node4 = new Node(31, 39, 1);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      assertFalse(node4.isInc());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isNE());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThrow());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isVoid());
      assertFalse(node4.isAnd());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isFunction());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isComma());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isObjectLit());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isReturn());
      assertEquals(31, node4.getType());
      assertFalse(node4.isLabel());
      assertFalse(node4.isContinue());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isName());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isAdd());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isScript());
      assertFalse(node4.isTry());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isInstanceOf());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isThis());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isParamList());
      assertFalse(node4.hasOneChild());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isHook());
      assertEquals(83, node5.getType());
      assertFalse(node5.isComma());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isBreak());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isIn());
      assertFalse(node5.isInc());
      assertFalse(node5.isGetElem());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isCast());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isTrue());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isVoid());
      assertFalse(node5.isAnd());
      assertFalse(node5.isString());
      assertFalse(node5.isWhile());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isReturn());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isName());
      assertFalse(node5.isCall());
      assertFalse(node5.isVar());
      assertFalse(node5.isNull());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFunction());
      assertFalse(node5.isOr());
      assertFalse(node5.isNew());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isFor());
      assertFalse(node5.isNumber());
      assertFalse(node5.isGetterDef());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isArrayLit());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isCase());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.hasMoreThanOneChild());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isWith());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isBlock());
      assertFalse(node5.isThis());
      assertFalse(node5.isScript());
      assertFalse(node5.isTry());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node4);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      String string0 = templateType0.getDisplayName();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertEquals("Object#Key", string0);
      assertNotNull(string0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType1 = (TemplateType)modificationVisitor0.caseTemplateType(templateType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isVoidType());
      assertEquals("Object#Key", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Node node6 = Node.newNumber((double) 49);
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node2));
      assertNotNull(node6);
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isLabelName());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isOr());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isBlock());
      assertFalse(node6.isWhile());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isCall());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isReturn());
      assertEquals(39, node6.getType());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isWith());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isAssign());
      assertFalse(node6.isDec());
      assertFalse(node6.isParamList());
      assertFalse(node6.isThis());
      assertFalse(node6.isNull());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isStringKey());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isAdd());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isNew());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isDo());
      assertFalse(node6.isVar());
      assertFalse(node6.isLabel());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isNE());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isIf());
      assertTrue(node6.isNumber());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isString());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isTrue());
      assertFalse(node6.isCase());
      assertFalse(node6.isVoid());
      assertFalse(node6.isTry());
      assertFalse(node6.isFor());
      assertFalse(node6.isHook());
      assertFalse(node6.isCatch());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isComma());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isAnd());
      assertFalse(node6.isNot());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isInc());
      assertFalse(node6.isContinue());
      assertFalse(node6.isFalse());
      assertFalse(node6.isThrow());
      assertFalse(node6.isCast());
      assertNotSame(node6, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      simpleErrorReporter0.error("Not declared as a constructor", "Unknown class name", 88, 2);
      Node node7 = Node.newNumber((double) 29);
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node2));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node1));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node4));
      assertNotNull(node7);
      assertFalse(node7.isVar());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isBlock());
      assertFalse(node7.isNull());
      assertFalse(node7.isParamList());
      assertFalse(node7.isCall());
      assertFalse(node7.isName());
      assertEquals(0, node7.getChildCount());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.isContinue());
      assertFalse(node7.isLabel());
      assertFalse(node7.isOr());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.isAdd());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isDo());
      assertFalse(node7.isNew());
      assertFalse(node7.isCast());
      assertFalse(node7.isFunction());
      assertFalse(node7.isTrue());
      assertFalse(node7.isAssign());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isDec());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isVoid());
      assertFalse(node7.isGetElem());
      assertFalse(node7.isExprResult());
      assertFalse(node7.isReturn());
      assertFalse(node7.isAnd());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isNot());
      assertFalse(node7.isComma());
      assertEquals((-1), node7.getSourcePosition());
      assertFalse(node7.hasChildren());
      assertFalse(node7.isString());
      assertFalse(node7.isWhile());
      assertFalse(node7.isGetProp());
      assertTrue(node7.isNumber());
      assertFalse(node7.isHook());
      assertEquals((-1), node7.getCharno());
      assertFalse(node7.isThrow());
      assertFalse(node7.isFalse());
      assertFalse(node7.isBreak());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isIn());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isInc());
      assertFalse(node7.isFor());
      assertFalse(node7.isIf());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isNE());
      assertFalse(node7.isWith());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isArrayLit());
      assertEquals((-1), node7.getLineno());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isCatch());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isThis());
      assertEquals(39, node7.getType());
      assertFalse(node7.isGetterDef());
      assertFalse(node7.isScript());
      assertFalse(node7.isTry());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isCase());
      assertNotSame(node7, node6);
      assertNotSame(node7, node1);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node3.isScript();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node7));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node4));
      assertFalse(boolean0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThrow());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNot());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTrue());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertEquals(83, node3.getType());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isWith());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isScript());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isInstanceOf());
      assertEquals(1, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node5);
      assertNotSame(node3, node4);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean1 = node6.isWhile();
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node7));
      assertFalse(node6.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isLabelName());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isOr());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isBlock());
      assertFalse(node6.isWhile());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isCall());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isReturn());
      assertEquals(39, node6.getType());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isWith());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isAssign());
      assertFalse(node6.isDec());
      assertFalse(node6.isParamList());
      assertFalse(node6.isThis());
      assertFalse(node6.isNull());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isStringKey());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isAdd());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isNew());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isDo());
      assertFalse(node6.isVar());
      assertFalse(node6.isLabel());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isNE());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isIf());
      assertTrue(node6.isNumber());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isString());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isTrue());
      assertFalse(node6.isCase());
      assertFalse(node6.isVoid());
      assertFalse(node6.isTry());
      assertFalse(node6.isFor());
      assertFalse(node6.isHook());
      assertFalse(node6.isCatch());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isComma());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isAnd());
      assertFalse(node6.isNot());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isInc());
      assertFalse(node6.isContinue());
      assertFalse(node6.isFalse());
      assertFalse(node6.isThrow());
      assertFalse(node6.isCast());
      assertNotSame(node6, node1);
      assertNotSame(node6, node7);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int int0 = 524288;
      Node node0 = Node.newNumber((double) 1230);
      assertNotNull(node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node(1230, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertEquals(1230, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertEquals(27, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags7.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags6.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags8);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags5.valueOf());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.setType(799);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.setSourceEncodedPositionForTree(799);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.addSuppression((String) null);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      Object object0 = node0.getProp(799);
      assertNull(object0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      int int0 = node0.getIntProp(3520);
      assertEquals(0, int0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      int int1 = node0.getSourceOffset();
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.setLineno(0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertEquals(799, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(30, (Node) null, (Node) null, (Node) null, (Node) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals(679, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertTrue(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.isLabel());
      assertEquals(126, node2.getType());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isAdd());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNot());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.isParamList());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isEmpty());
      assertEquals(83, node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isIf());
      assertFalse(node3.isThis());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      
      Node node4 = new Node(40, node3, 51, 4);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node4);
      assertEquals(1, jSTypeArray0.length);
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isFor());
      assertFalse(node4.isIf());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isIn());
      assertFalse(node4.isTrue());
      assertFalse(node4.isNE());
      assertEquals(208900, node4.getSourcePosition());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isCatch());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCase());
      assertEquals(1, node4.getChildCount());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isAdd());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNull());
      assertFalse(node4.isDo());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isSwitch());
      assertEquals(51, node4.getLineno());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isNumber());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isOr());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isWhile());
      assertFalse(node4.isWith());
      assertFalse(node4.isNot());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isReturn());
      assertTrue(node4.isString());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isComma());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isThis());
      assertFalse(node4.isDec());
      assertFalse(node4.isBlock());
      assertFalse(node4.isFalse());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isInc());
      assertFalse(node4.isFunction());
      assertFalse(node4.isThrow());
      assertEquals(40, node4.getType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isAdd());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNot());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.isParamList());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isEmpty());
      assertEquals(83, node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isIf());
      assertFalse(node3.isThis());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node5 = node3.getFirstChild();
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node5.isNE());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isIn());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isTrue());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isString());
      assertFalse(node5.isVoid());
      assertFalse(node5.isCase());
      assertFalse(node5.isTry());
      assertFalse(node5.isCatch());
      assertFalse(node5.isFor());
      assertFalse(node5.isHook());
      assertFalse(node5.isNull());
      assertFalse(node5.isComma());
      assertFalse(node5.isParamList());
      assertFalse(node5.isCall());
      assertFalse(node5.isBreak());
      assertFalse(node5.isStringKey());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isDo());
      assertFalse(node5.isVar());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertEquals(38, node5.getType());
      assertFalse(node5.isTypeOf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDec());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isOr());
      assertFalse(node5.isScript());
      assertFalse(node5.isWhile());
      assertFalse(node5.isWith());
      assertFalse(node5.isExprResult());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssign());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isThis());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isNot());
      assertTrue(node5.isName());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInc());
      assertFalse(node5.isCast());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isAdd());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNot());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.isParamList());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isEmpty());
      assertEquals(83, node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isIf());
      assertFalse(node3.isThis());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertNotSame(node3, node2);
      assertNotSame(node3, node4);
      assertNotSame(node3, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean0 = node2.isAdd();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(boolean0);
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.isLabel());
      assertEquals(126, node2.getType());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertNotSame(node2, node0);
      assertNotSame(node2, node4);
      assertNotSame(node2, node3);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      
      boolean boolean1 = node1.isObjectLit();
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertTrue(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.setCharno(2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals(679, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node0, node3);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        node5.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NAME
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(679, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertTrue(node2.isLabel());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isComma());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertEquals(126, node2.getType());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isHook());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isString());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertEquals(83, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node4 = new Node(31, 39, 1);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      assertFalse(node4.isGetProp());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isAnd());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isBreak());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isLabel());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isIf());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isNE());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isBlock());
      assertFalse(node4.isTry());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isHook());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isCase());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isScript());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isCatch());
      assertFalse(node4.isVoid());
      assertFalse(node4.isAdd());
      assertFalse(node4.isFunction());
      assertFalse(node4.isTrue());
      assertEquals(31, node4.getType());
      assertFalse(node4.isNew());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isVar());
      assertFalse(node4.isDo());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isOr());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isCast());
      assertFalse(node4.isContinue());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isDebugger());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isWhile());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isCast());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isScript());
      assertFalse(node5.isNumber());
      assertFalse(node5.isOr());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isContinue());
      assertFalse(node5.isAnd());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertFalse(node5.isThrow());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInc());
      assertFalse(node5.isSwitch());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isCatch());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isInstanceOf());
      assertEquals((-1), node5.getLineno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCase());
      assertFalse(node5.isThis());
      assertFalse(node5.isRegExp());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isWith());
      assertFalse(node5.isFor());
      assertFalse(node5.isHook());
      assertFalse(node5.isBlock());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isTry());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTrue());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isIn());
      assertFalse(node5.isFunction());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isCall());
      assertFalse(node5.isVar());
      assertFalse(node5.isName());
      assertFalse(node5.isFalse());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isBreak());
      assertEquals(83, node5.getType());
      assertFalse(node5.isNull());
      assertFalse(node5.isObjectLit());
      assertTrue(node5.isParamList());
      assertFalse(node5.isString());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isWhile());
      assertFalse(node5.isReturn());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType1 = (TemplateType)modificationVisitor0.caseTemplateType(templateType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals("Object#Key", templateType1.getReferenceName());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertTrue(templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isResolved());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node6 = Node.newNumber((double) 49);
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node2));
      assertNotNull(node6);
      assertFalse(node6.isFunction());
      assertFalse(node6.isTrue());
      assertFalse(node6.isVoid());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTry());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isCatch());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isArrayLit());
      assertTrue(node6.isNumber());
      assertFalse(node6.isFor());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isParamList());
      assertFalse(node6.isCase());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isString());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isNew());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isDo());
      assertFalse(node6.isWhile());
      assertFalse(node6.isCall());
      assertFalse(node6.isVar());
      assertFalse(node6.isNull());
      assertFalse(node6.isBreak());
      assertFalse(node6.isLabel());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isName());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isOr());
      assertFalse(node6.isAdd());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isAnd());
      assertFalse(node6.isCast());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAssign());
      assertFalse(node6.isWith());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isComma());
      assertFalse(node6.isThis());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isDec());
      assertFalse(node6.isGetProp());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isReturn());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNot());
      assertFalse(node6.isInc());
      assertEquals(39, node6.getType());
      assertFalse(node6.isBlock());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isHook());
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isFalse());
      assertFalse(node6.isContinue());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isNE());
      assertFalse(node6.isThrow());
      assertFalse(node6.isIf());
      assertFalse(node6.isIn());
      assertNotSame(node6, node1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      simpleErrorReporter0.error("Not declared as a constructor", "Unknown class name", 88, 2);
      Node node7 = Node.newNumber((double) 29);
      assertFalse(node7.equals((Object)node4));
      assertFalse(node7.equals((Object)node1));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node2));
      assertNotNull(node7);
      assertFalse(node7.hasChildren());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isDec());
      assertEquals((-1), node7.getSourcePosition());
      assertFalse(node7.isAssign());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isOr());
      assertFalse(node7.isScript());
      assertFalse(node7.isWhile());
      assertFalse(node7.isWith());
      assertEquals(39, node7.getType());
      assertFalse(node7.isBlock());
      assertFalse(node7.isReturn());
      assertEquals((-1), node7.getLineno());
      assertFalse(node7.isCall());
      assertFalse(node7.isExprResult());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isGetElem());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isBreak());
      assertFalse(node7.isName());
      assertFalse(node7.isParamList());
      assertFalse(node7.isThis());
      assertFalse(node7.isNull());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isHook());
      assertFalse(node7.isVar());
      assertFalse(node7.isNew());
      assertFalse(node7.isAdd());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.isDo());
      assertEquals((-1), node7.getCharno());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isLabel());
      assertEquals(0, node7.getChildCount());
      assertFalse(node7.isArrayLit());
      assertFalse(node7.isIf());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isGetterDef());
      assertFalse(node7.isFor());
      assertFalse(node7.isNE());
      assertTrue(node7.isNumber());
      assertFalse(node7.isIn());
      assertFalse(node7.isTry());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isCase());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isTrue());
      assertFalse(node7.isVoid());
      assertFalse(node7.isCatch());
      assertFalse(node7.isFalse());
      assertFalse(node7.isComma());
      assertFalse(node7.isThrow());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isInc());
      assertFalse(node7.isGetProp());
      assertFalse(node7.isString());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isNot());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isAnd());
      assertFalse(node7.isFunction());
      assertFalse(node7.isContinue());
      assertFalse(node7.isCast());
      assertNotSame(node7, node1);
      assertNotSame(node7, node6);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      boolean boolean0 = node3.isScript();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node3.equals((Object)node7));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isHook());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isString());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertEquals(83, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node3, node5);
      assertNotSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node[] nodeArray0 = new Node[10];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(679, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDec());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isLabel());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals(126, node2.getType());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isCall());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertFalse(node3.isReturn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isScript());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertEquals(83, node3.getType());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertTrue(node3.isParamList());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCase());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isCast());
      assertFalse(node3.isNot());
      assertFalse(node3.isIf());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isIn());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      nodeArray0[3] = node3;
      Node node4 = new Node(31, 39, 1);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      nodeArray0[4] = node4;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isIn());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCase());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isString());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isHook());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isBreak());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isFor());
      assertFalse(node5.isThis());
      assertFalse(node5.isComma());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isNull());
      assertEquals(83, node5.getType());
      assertFalse(node5.isScript());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isTrue());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNew());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNumber());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertTrue(node5.isParamList());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isCast());
      assertFalse(node5.isInc());
      assertFalse(node5.isContinue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFunction());
      assertFalse(node5.isFalse());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node2);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      nodeArray0[5] = node5;
      Node node6 = new Node(37, node4, node5, 0, 47);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(node6);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isIn());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCase());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isString());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isHook());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isBreak());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isFor());
      assertFalse(node5.isThis());
      assertFalse(node5.isComma());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isNull());
      assertEquals(83, node5.getType());
      assertFalse(node5.isScript());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isTrue());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNew());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNumber());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertTrue(node5.isParamList());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isCast());
      assertFalse(node5.isInc());
      assertFalse(node5.isContinue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFunction());
      assertFalse(node5.isFalse());
      assertFalse(node6.isCase());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isInc());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isString());
      assertFalse(node6.isFor());
      assertFalse(node6.isIf());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isHook());
      assertFalse(node6.isNE());
      assertTrue(node6.isCall());
      assertFalse(node6.isVoid());
      assertFalse(node6.isThis());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getSourcePosition());
      assertEquals(37, node6.getType());
      assertFalse(node6.isBreak());
      assertFalse(node6.isRegExp());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isAnd());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertFalse(node6.isFunction());
      assertEquals(2, node6.getChildCount());
      assertEquals(0, node6.getLineno());
      assertFalse(node6.isCast());
      assertFalse(node6.isContinue());
      assertFalse(node6.isDo());
      assertFalse(node6.isReturn());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAdd());
      assertFalse(node6.isOr());
      assertFalse(node6.isNew());
      assertFalse(node6.isNumber());
      assertFalse(node6.isName());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAssign());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNull());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isBlock());
      assertFalse(node6.isDec());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isWith());
      assertFalse(node6.isCatch());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTrue());
      assertFalse(node6.isTry());
      assertFalse(node6.isScript());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isVar());
      assertFalse(node6.isParamList());
      assertFalse(node6.isLabel());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      
      nodeArray0[6] = node6;
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Named type with empty name component", node6, jSType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(enumType0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isIn());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCase());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isString());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isHook());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isBreak());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isFor());
      assertFalse(node5.isThis());
      assertFalse(node5.isComma());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isNull());
      assertEquals(83, node5.getType());
      assertFalse(node5.isScript());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isTrue());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNew());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNumber());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertTrue(node5.isParamList());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isCast());
      assertFalse(node5.isInc());
      assertFalse(node5.isContinue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFunction());
      assertFalse(node5.isFalse());
      assertFalse(node6.isCase());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isInc());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isString());
      assertFalse(node6.isFor());
      assertFalse(node6.isIf());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isHook());
      assertFalse(node6.isNE());
      assertTrue(node6.isCall());
      assertFalse(node6.isVoid());
      assertFalse(node6.isThis());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getSourcePosition());
      assertEquals(37, node6.getType());
      assertFalse(node6.isBreak());
      assertFalse(node6.isRegExp());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isAnd());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertFalse(node6.isFunction());
      assertEquals(2, node6.getChildCount());
      assertEquals(0, node6.getLineno());
      assertFalse(node6.isCast());
      assertFalse(node6.isContinue());
      assertFalse(node6.isDo());
      assertFalse(node6.isReturn());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAdd());
      assertFalse(node6.isOr());
      assertFalse(node6.isNew());
      assertFalse(node6.isNumber());
      assertFalse(node6.isName());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAssign());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNull());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isBlock());
      assertFalse(node6.isDec());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isWith());
      assertFalse(node6.isCatch());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTrue());
      assertFalse(node6.isTry());
      assertFalse(node6.isScript());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isVar());
      assertFalse(node6.isParamList());
      assertFalse(node6.isLabel());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isEnumElementType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isAllType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node2);
      assertNotSame(node5, node6);
      assertNotSame(node6, node5);
      assertNotSame(node6, node3);
      assertNotSame(node6, node4);
      assertNotSame(node6, node0);
      assertNotSame(node6, node2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(enumType1);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isIn());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCase());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isString());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isHook());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isBreak());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isFor());
      assertFalse(node5.isThis());
      assertFalse(node5.isComma());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isNull());
      assertEquals(83, node5.getType());
      assertFalse(node5.isScript());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isTrue());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNew());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNumber());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertTrue(node5.isParamList());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isCast());
      assertFalse(node5.isInc());
      assertFalse(node5.isContinue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFunction());
      assertFalse(node5.isFalse());
      assertFalse(node6.isCase());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isInc());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isString());
      assertFalse(node6.isFor());
      assertFalse(node6.isIf());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isHook());
      assertFalse(node6.isNE());
      assertTrue(node6.isCall());
      assertFalse(node6.isVoid());
      assertFalse(node6.isThis());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getSourcePosition());
      assertEquals(37, node6.getType());
      assertFalse(node6.isBreak());
      assertFalse(node6.isRegExp());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isAnd());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertFalse(node6.isFunction());
      assertEquals(2, node6.getChildCount());
      assertEquals(0, node6.getLineno());
      assertFalse(node6.isCast());
      assertFalse(node6.isContinue());
      assertFalse(node6.isDo());
      assertFalse(node6.isReturn());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAdd());
      assertFalse(node6.isOr());
      assertFalse(node6.isNew());
      assertFalse(node6.isNumber());
      assertFalse(node6.isName());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAssign());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNull());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isBlock());
      assertFalse(node6.isDec());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isWith());
      assertFalse(node6.isCatch());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTrue());
      assertFalse(node6.isTry());
      assertFalse(node6.isScript());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isVar());
      assertFalse(node6.isParamList());
      assertFalse(node6.isLabel());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isEnumElementType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isAllType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isStringValueType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isConstructor());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node2);
      assertNotSame(node5, node6);
      assertNotSame(node6, node5);
      assertNotSame(node6, node3);
      assertNotSame(node6, node4);
      assertNotSame(node6, node0);
      assertNotSame(node6, node2);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      EnumType enumType2 = jSTypeRegistry1.createEnumType("Not declared as a type name", node4, jSTypeArray0[0]);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(enumType2.equals((Object)enumType1));
      assertFalse(enumType2.equals((Object)enumType0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(enumType2);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType2.getPossibleToBooleanOutcomes());
      assertFalse(enumType2.isRecordType());
      assertFalse(enumType2.isResolved());
      assertFalse(enumType2.isInterface());
      assertFalse(enumType2.isAllType());
      assertFalse(enumType2.isFunctionType());
      assertFalse(enumType2.matchesNumberContext());
      assertTrue(enumType2.matchesStringContext());
      assertFalse(enumType2.isTemplateType());
      assertFalse(enumType2.isOrdinaryFunction());
      assertTrue(enumType2.isEnumType());
      assertFalse(enumType2.isCheckedUnknownType());
      assertFalse(enumType2.isNominalType());
      assertFalse(enumType2.isStringValueType());
      assertFalse(enumType2.isUnionType());
      assertTrue(enumType2.matchesObjectContext());
      assertFalse(enumType2.isEnumElementType());
      assertFalse(enumType2.isNoResolvedType());
      assertFalse(enumType2.isNominalConstructor());
      assertFalse(enumType2.isTemplatizedType());
      assertFalse(enumType2.isVoidType());
      assertFalse(enumType2.isNoObjectType());
      assertFalse(enumType2.isNoType());
      assertFalse(enumType2.isBooleanValueType());
      assertFalse(enumType2.isNullType());
      assertTrue(enumType2.isObject());
      assertFalse(enumType2.isConstructor());
      assertFalse(enumType2.isNumberValueType());
      assertFalse(enumType2.isFunctionPrototypeType());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(enumType2, enumType1);
      assertNotSame(enumType2, enumType0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      EnumElementType enumElementType0 = enumType2.getElementsType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(enumType2.equals((Object)enumType1));
      assertFalse(enumType2.equals((Object)enumType0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(enumElementType0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType2.getPossibleToBooleanOutcomes());
      assertFalse(enumType2.isRecordType());
      assertFalse(enumType2.isResolved());
      assertFalse(enumType2.isInterface());
      assertFalse(enumType2.isAllType());
      assertFalse(enumType2.isFunctionType());
      assertFalse(enumType2.matchesNumberContext());
      assertTrue(enumType2.matchesStringContext());
      assertFalse(enumType2.isTemplateType());
      assertFalse(enumType2.isOrdinaryFunction());
      assertTrue(enumType2.isEnumType());
      assertFalse(enumType2.isCheckedUnknownType());
      assertFalse(enumType2.isNominalType());
      assertFalse(enumType2.isStringValueType());
      assertFalse(enumType2.isUnionType());
      assertTrue(enumType2.matchesObjectContext());
      assertFalse(enumType2.isEnumElementType());
      assertFalse(enumType2.isNoResolvedType());
      assertFalse(enumType2.isNominalConstructor());
      assertFalse(enumType2.isTemplatizedType());
      assertFalse(enumType2.isVoidType());
      assertFalse(enumType2.isNoObjectType());
      assertFalse(enumType2.isNoType());
      assertFalse(enumType2.isBooleanValueType());
      assertFalse(enumType2.isNullType());
      assertTrue(enumType2.isObject());
      assertFalse(enumType2.isConstructor());
      assertFalse(enumType2.isNumberValueType());
      assertFalse(enumType2.isFunctionPrototypeType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(enumType2, enumType1);
      assertNotSame(enumType2, enumType0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(enumType2.equals((Object)enumType1));
      assertFalse(enumType2.equals((Object)enumType0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(enumElementType1);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType2.getPossibleToBooleanOutcomes());
      assertFalse(enumType2.isRecordType());
      assertFalse(enumType2.isResolved());
      assertFalse(enumType2.isInterface());
      assertFalse(enumType2.isAllType());
      assertFalse(enumType2.isFunctionType());
      assertFalse(enumType2.matchesNumberContext());
      assertTrue(enumType2.matchesStringContext());
      assertFalse(enumType2.isTemplateType());
      assertFalse(enumType2.isOrdinaryFunction());
      assertTrue(enumType2.isEnumType());
      assertFalse(enumType2.isCheckedUnknownType());
      assertFalse(enumType2.isNominalType());
      assertFalse(enumType2.isStringValueType());
      assertFalse(enumType2.isUnionType());
      assertTrue(enumType2.matchesObjectContext());
      assertFalse(enumType2.isEnumElementType());
      assertFalse(enumType2.isNoResolvedType());
      assertFalse(enumType2.isNominalConstructor());
      assertFalse(enumType2.isTemplatizedType());
      assertFalse(enumType2.isVoidType());
      assertFalse(enumType2.isNoObjectType());
      assertFalse(enumType2.isNoType());
      assertFalse(enumType2.isBooleanValueType());
      assertFalse(enumType2.isNullType());
      assertTrue(enumType2.isObject());
      assertFalse(enumType2.isConstructor());
      assertFalse(enumType2.isNumberValueType());
      assertFalse(enumType2.isFunctionPrototypeType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNumberValueType());
      assertTrue(enumElementType1.isEnumElementType());
      assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplateType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(enumType2, enumType1);
      assertNotSame(enumType2, enumType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      Node node7 = enumElementType0.getRootNode();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(enumType2.equals((Object)enumType1));
      assertFalse(enumType2.equals((Object)enumType0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNull(node7);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType2.getPossibleToBooleanOutcomes());
      assertFalse(enumType2.isRecordType());
      assertFalse(enumType2.isResolved());
      assertFalse(enumType2.isInterface());
      assertFalse(enumType2.isAllType());
      assertFalse(enumType2.isFunctionType());
      assertFalse(enumType2.matchesNumberContext());
      assertTrue(enumType2.matchesStringContext());
      assertFalse(enumType2.isTemplateType());
      assertFalse(enumType2.isOrdinaryFunction());
      assertTrue(enumType2.isEnumType());
      assertFalse(enumType2.isCheckedUnknownType());
      assertFalse(enumType2.isNominalType());
      assertFalse(enumType2.isStringValueType());
      assertFalse(enumType2.isUnionType());
      assertTrue(enumType2.matchesObjectContext());
      assertFalse(enumType2.isEnumElementType());
      assertFalse(enumType2.isNoResolvedType());
      assertFalse(enumType2.isNominalConstructor());
      assertFalse(enumType2.isTemplatizedType());
      assertFalse(enumType2.isVoidType());
      assertFalse(enumType2.isNoObjectType());
      assertFalse(enumType2.isNoType());
      assertFalse(enumType2.isBooleanValueType());
      assertFalse(enumType2.isNullType());
      assertTrue(enumType2.isObject());
      assertFalse(enumType2.isConstructor());
      assertFalse(enumType2.isNumberValueType());
      assertFalse(enumType2.isFunctionPrototypeType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(enumType2, enumType1);
      assertNotSame(enumType2, enumType0);
      assertSame(enumElementType0, enumElementType1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      Node node8 = new Node(57);
      assertFalse(node8.equals((Object)node1));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node2));
      assertFalse(node8.equals((Object)node4));
      assertFalse(node8.equals((Object)node0));
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node3));
      assertNotNull(node8);
      assertFalse(node8.isBreak());
      assertFalse(node8.isThrow());
      assertFalse(node8.isComma());
      assertFalse(node8.isFalse());
      assertFalse(node8.isGetProp());
      assertFalse(node8.isHook());
      assertFalse(node8.isInc());
      assertFalse(node8.isThis());
      assertFalse(node8.isWith());
      assertFalse(node8.isIn());
      assertFalse(node8.isInstanceOf());
      assertFalse(node8.isExprResult());
      assertFalse(node8.isNE());
      assertFalse(node8.isIf());
      assertFalse(node8.isDelProp());
      assertFalse(node8.isEmpty());
      assertFalse(node8.isLabelName());
      assertFalse(node8.isFor());
      assertFalse(node8.isNumber());
      assertFalse(node8.isGetterDef());
      assertFalse(node8.isAssignAdd());
      assertFalse(node8.isLabel());
      assertFalse(node8.isTry());
      assertFalse(node8.hasOneChild());
      assertFalse(node8.isDefaultCase());
      assertFalse(node8.isCase());
      assertFalse(node8.isScript());
      assertEquals(0, node8.getChildCount());
      assertEquals((-1), node8.getCharno());
      assertFalse(node8.isSwitch());
      assertFalse(node8.isParamList());
      assertFalse(node8.isArrayLit());
      assertFalse(node8.isStringKey());
      assertFalse(node8.isNull());
      assertFalse(node8.isCall());
      assertFalse(node8.isNew());
      assertFalse(node8.isAdd());
      assertFalse(node8.isBlock());
      assertFalse(node8.isSetterDef());
      assertFalse(node8.isVar());
      assertFalse(node8.isDo());
      assertFalse(node8.isWhile());
      assertFalse(node8.isCatch());
      assertFalse(node8.hasMoreThanOneChild());
      assertFalse(node8.isRegExp());
      assertFalse(node8.isOr());
      assertEquals((-1), node8.getLineno());
      assertFalse(node8.isTrue());
      assertFalse(node8.isVoid());
      assertFalse(node8.isName());
      assertFalse(node8.isAssign());
      assertEquals(57, node8.getType());
      assertFalse(node8.hasChildren());
      assertFalse(node8.isGetElem());
      assertFalse(node8.isCast());
      assertEquals((-1), node8.getSourcePosition());
      assertFalse(node8.isDec());
      assertFalse(node8.isTypeOf());
      assertFalse(node8.isReturn());
      assertFalse(node8.isNot());
      assertFalse(node8.isString());
      assertFalse(node8.isContinue());
      assertFalse(node8.isDebugger());
      assertFalse(node8.isFunction());
      assertFalse(node8.isObjectLit());
      assertFalse(node8.isAnd());
      
      Node node9 = node8.useSourceInfoIfMissingFrom(node4);
      assertFalse(node8.equals((Object)node1));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node2));
      assertFalse(node8.equals((Object)node4));
      assertFalse(node8.equals((Object)node0));
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node3));
      assertFalse(node9.equals((Object)node3));
      assertFalse(node9.equals((Object)node5));
      assertFalse(node9.equals((Object)node4));
      assertFalse(node9.equals((Object)node1));
      assertFalse(node9.equals((Object)node2));
      assertFalse(node9.equals((Object)node0));
      assertFalse(node9.equals((Object)node6));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node8));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertNotNull(node9);
      assertEquals(39, node8.getLineno());
      assertFalse(node8.isBreak());
      assertFalse(node8.isThrow());
      assertFalse(node8.isComma());
      assertFalse(node8.isFalse());
      assertFalse(node8.isGetProp());
      assertFalse(node8.isHook());
      assertFalse(node8.isInc());
      assertFalse(node8.isThis());
      assertFalse(node8.isWith());
      assertFalse(node8.isIn());
      assertFalse(node8.isInstanceOf());
      assertFalse(node8.isExprResult());
      assertFalse(node8.isNE());
      assertFalse(node8.isIf());
      assertFalse(node8.isDelProp());
      assertFalse(node8.isEmpty());
      assertFalse(node8.isLabelName());
      assertFalse(node8.isFor());
      assertFalse(node8.isNumber());
      assertFalse(node8.isGetterDef());
      assertFalse(node8.isAssignAdd());
      assertFalse(node8.isLabel());
      assertFalse(node8.isTry());
      assertFalse(node8.hasOneChild());
      assertFalse(node8.isDefaultCase());
      assertFalse(node8.isCase());
      assertFalse(node8.isScript());
      assertEquals(0, node8.getChildCount());
      assertFalse(node8.isSwitch());
      assertFalse(node8.isParamList());
      assertFalse(node8.isArrayLit());
      assertFalse(node8.isStringKey());
      assertFalse(node8.isNull());
      assertFalse(node8.isCall());
      assertFalse(node8.isNew());
      assertFalse(node8.isAdd());
      assertFalse(node8.isBlock());
      assertFalse(node8.isSetterDef());
      assertFalse(node8.isVar());
      assertFalse(node8.isDo());
      assertFalse(node8.isWhile());
      assertFalse(node8.isCatch());
      assertFalse(node8.hasMoreThanOneChild());
      assertFalse(node8.isRegExp());
      assertFalse(node8.isOr());
      assertFalse(node8.isTrue());
      assertFalse(node8.isVoid());
      assertFalse(node8.isName());
      assertFalse(node8.isAssign());
      assertEquals(57, node8.getType());
      assertFalse(node8.hasChildren());
      assertFalse(node8.isGetElem());
      assertFalse(node8.isCast());
      assertFalse(node8.isDec());
      assertFalse(node8.isTypeOf());
      assertFalse(node8.isReturn());
      assertEquals(159745, node8.getSourcePosition());
      assertFalse(node8.isNot());
      assertFalse(node8.isString());
      assertFalse(node8.isContinue());
      assertFalse(node8.isDebugger());
      assertFalse(node8.isFunction());
      assertFalse(node8.isObjectLit());
      assertEquals(1, node8.getCharno());
      assertFalse(node8.isAnd());
      assertFalse(node9.isCase());
      assertFalse(node9.isSwitch());
      assertFalse(node9.isInc());
      assertFalse(node9.isNE());
      assertFalse(node9.isString());
      assertFalse(node9.isIn());
      assertFalse(node9.isGetterDef());
      assertFalse(node9.isHook());
      assertFalse(node9.isFor());
      assertFalse(node9.isBreak());
      assertFalse(node9.isIf());
      assertFalse(node9.isDelProp());
      assertFalse(node9.isVoid());
      assertFalse(node9.isTry());
      assertFalse(node9.isComma());
      assertFalse(node9.isThis());
      assertFalse(node9.isRegExp());
      assertFalse(node9.isCatch());
      assertFalse(node9.isAnd());
      assertFalse(node9.isInstanceOf());
      assertFalse(node9.isSetterDef());
      assertFalse(node9.isDebugger());
      assertFalse(node9.isGetProp());
      assertFalse(node9.isObjectLit());
      assertFalse(node9.isNot());
      assertEquals(57, node9.getType());
      assertFalse(node9.isThrow());
      assertFalse(node9.isCast());
      assertFalse(node9.isFunction());
      assertFalse(node9.isFalse());
      assertFalse(node9.hasMoreThanOneChild());
      assertFalse(node9.isContinue());
      assertFalse(node9.isWhile());
      assertFalse(node9.isAssignAdd());
      assertFalse(node9.isDo());
      assertFalse(node9.isAdd());
      assertEquals(1, node9.getCharno());
      assertFalse(node9.isNumber());
      assertFalse(node9.isOr());
      assertFalse(node9.isCall());
      assertFalse(node9.isGetElem());
      assertFalse(node9.isName());
      assertFalse(node9.hasOneChild());
      assertEquals(159745, node9.getSourcePosition());
      assertFalse(node9.isBlock());
      assertFalse(node9.isExprResult());
      assertFalse(node9.isReturn());
      assertFalse(node9.isWith());
      assertFalse(node9.hasChildren());
      assertFalse(node9.isDec());
      assertFalse(node9.isAssign());
      assertFalse(node9.isTypeOf());
      assertFalse(node9.isDefaultCase());
      assertFalse(node9.isParamList());
      assertFalse(node9.isTrue());
      assertFalse(node9.isNull());
      assertFalse(node9.isScript());
      assertFalse(node9.isArrayLit());
      assertFalse(node9.isStringKey());
      assertFalse(node9.isVar());
      assertFalse(node9.isEmpty());
      assertFalse(node9.isNew());
      assertFalse(node9.isLabelName());
      assertEquals(39, node9.getLineno());
      assertFalse(node9.isLabel());
      assertEquals(0, node9.getChildCount());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isFor());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertEquals(31, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertEquals(1, node4.getCharno());
      assertNotSame(node8, node6);
      assertNotSame(node8, node2);
      assertNotSame(node8, node4);
      assertNotSame(node8, node0);
      assertNotSame(node8, node5);
      assertSame(node8, node9);
      assertNotSame(node8, node3);
      assertNotSame(node9, node3);
      assertSame(node9, node8);
      assertNotSame(node9, node5);
      assertNotSame(node9, node4);
      assertNotSame(node9, node2);
      assertNotSame(node9, node0);
      assertNotSame(node9, node6);
      assertNotSame(node4, node9);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node8);
      assertNotSame(node4, node6);
      assertNotSame(node4, node5);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('*');
      assertNotNull(stringWriter1);
      assertEquals("*", stringWriter0.toString());
      assertEquals("*", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      try { 
        node0.appendStringTree(stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 679
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 100);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node(8, 43, 3327);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertEquals(179455, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertEquals(43, node1.getLineno());
      assertEquals(8, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isAdd();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node2 = Node.newNumber((double) 56);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getLineno());
      assertEquals(39, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node[] nodeArray0 = new Node[0];
      node0.setChangeTime(15);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node3 = new Node(8, nodeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(0, nodeArray0.length);
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isTry());
      assertFalse(node3.isCase());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAdd());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getLineno());
      assertEquals(8, node3.getType());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAnd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetProp());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      Node node4 = new Node((-178), node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(102500, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertEquals(179455, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertEquals(43, node1.getLineno());
      assertEquals(8, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isObjectLit());
      assertEquals(2, node4.getChildCount());
      assertFalse(node4.isAnd());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isComma());
      assertFalse(node4.isFalse());
      assertFalse(node4.isWith());
      assertFalse(node4.isExprResult());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isHook());
      assertEquals((-1), node4.getCharno());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertFalse(node4.isNot());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isIn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isContinue());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isParamList());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCall());
      assertFalse(node4.isCatch());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isBlock());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertEquals((-178), node4.getType());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isLabelName());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVar());
      assertFalse(node4.isNull());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isDo());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isEmpty());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(1839, 1515, 8192);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isTypeOf();
      assertFalse(boolean0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      node0.putIntProp(3139, 3139);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean1 = node0.mayMutateArguments();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean2 = node0.isNot();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      node0.setWasEmptyNode(false);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean3 = node0.isQuotedString();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean4 = node0.isOnlyModifiesThisCall();
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean5 = node0.isFor();
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean6 = node0.isCast();
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(1515, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(6209535, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertEquals(1839, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1839, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(1515, node1.getLineno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertEquals(6209535, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newNumber((-1009.90920112));
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = node0.removeChildren();
      assertNull(node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node2 = node0.useSourceInfoFromForTree(node0);
      assertNotNull(node2);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.setOptionalArg(true);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertSame(node0, node2);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean0 = node0.isIf();
      assertFalse(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertSame(node0, node2);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean1 = node2.isSetterDef();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1009.90920112 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      assertNotNull(node0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(5479, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      
      Node node1 = Node.newString(51, "valueOf");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertEquals(51, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node node2 = new Node(112, node0, node0, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(5479, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertEquals(51, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertTrue(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertEquals(112, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNull());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node3 = Node.newString("valueOf");
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isDefaultCase());
      assertEquals(40, node3.getType());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isBlock());
      assertFalse(node3.isArrayLit());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAnd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isWith());
      assertFalse(node3.isThrow());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isHook());
      assertFalse(node3.isCast());
      assertFalse(node3.isSwitch());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isScript());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getCharno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNot());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isName());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNull());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertNotSame(node3, node1);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      int int0 = node2.getIndexOfChild(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, int0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(5479, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertEquals(51, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertTrue(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertEquals(112, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNull());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertNotSame(node0, node2);
      assertNotSame(node1, node3);
      assertNotSame(node2, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isDebugger();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(5479, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertNotSame(node0, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      assertNotNull(node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags8);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setMutatesThis();
      assertNotNull(node_SideEffectFlags9);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags8.valueOf());
      assertEquals(29, node_SideEffectFlags9.valueOf());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      
      int int1 = node1.getChildCount();
      assertTrue(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertEquals(0, int1);
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertEquals(51, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertNotSame(node1, node3);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node node4 = new Node(49, 132, 89);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isReturn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWhile());
      assertFalse(node4.isNot());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isVar());
      assertFalse(node4.isName());
      assertTrue(node4.isThrow());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isOr());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isNull());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertEquals(89, node4.getCharno());
      assertFalse(node4.isTry());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFor());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isIf());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCatch());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isParamList());
      assertFalse(node4.isString());
      assertFalse(node4.isGetterDef());
      assertEquals(49, node4.getType());
      assertFalse(node4.isCase());
      assertFalse(node4.isBlock());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertEquals(132, node4.getLineno());
      assertFalse(node4.isContinue());
      assertEquals(540761, node4.getSourcePosition());
      assertFalse(node4.isIn());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isSetterDef());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node1.setIsSyntheticBlock(true);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertEquals(51, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertNotSame(node1, node3);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean1 = node3.isDo();
      assertTrue(boolean1 == boolean0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(boolean1);
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isDefaultCase());
      assertEquals(40, node3.getType());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isBlock());
      assertFalse(node3.isArrayLit());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAnd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isWith());
      assertFalse(node3.isThrow());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isHook());
      assertFalse(node3.isCast());
      assertFalse(node3.isSwitch());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isScript());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getCharno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNot());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isName());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNull());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertNotSame(node3, node1);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node5 = node4.getLastChild();
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertNull(node5);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isReturn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWhile());
      assertFalse(node4.isNot());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isVar());
      assertFalse(node4.isName());
      assertTrue(node4.isThrow());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isOr());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isNull());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertEquals(89, node4.getCharno());
      assertFalse(node4.isTry());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFor());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isIf());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCatch());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isParamList());
      assertFalse(node4.isString());
      assertFalse(node4.isGetterDef());
      assertEquals(49, node4.getType());
      assertFalse(node4.isCase());
      assertFalse(node4.isBlock());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertEquals(132, node4.getLineno());
      assertFalse(node4.isContinue());
      assertEquals(540761, node4.getSourcePosition());
      assertFalse(node4.isIn());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isSetterDef());
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate", 28, 28);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertEquals(28, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(28, node1.getCharno());
      assertTrue(node1.isString());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIn());
      assertEquals(114716, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setLineno(36);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(28, node1.getCharno());
      assertTrue(node1.isString());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      int int0 = Node.SIDE_EFFECT_FLAGS;
      assertEquals(42, int0);
      
      node1.setType(42);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(42, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertTrue(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setCharno(4);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(42, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertEquals(147460, node1.getSourcePosition());
      assertTrue(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = node1.hasOneChild();
      assertFalse(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(42, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertEquals(147460, node1.getSourcePosition());
      assertTrue(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean1 = node0.isBreak();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertSame(node0, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node2 = node0.getAncestor(43);
      assertNull(node2);
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertSame(node0, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isString());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node4 = node1.copyInformationFromForTree(node3);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node4.isIn());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isIf());
      assertFalse(node4.isString());
      assertFalse(node4.isInc());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isNE());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isFor());
      assertFalse(node4.isComma());
      assertTrue(node4.isThis());
      assertEquals(42, node4.getType());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isTrue());
      assertFalse(node4.isScript());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNew());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isLabel());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isDo());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWhile());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isBlock());
      assertFalse(node4.isWith());
      assertFalse(node4.isAssign());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isThrow());
      assertFalse(node4.isCast());
      assertFalse(node4.isFalse());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(42, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(42, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertTrue(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertTrue(node3.isParamList());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isString());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertSame(node4, node1);
      assertSame(node4, node0);
      assertSame(node0, node1);
      assertSame(node0, node4);
      assertSame(node1, node4);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node5 = null;
      try {
        node5 = new Node((-4981), (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setType(799);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(799, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setSourceEncodedPositionForTree(799);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(799, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      assertNotNull(simpleSourceFile0);
      assertNull(simpleSourceFile0.getName());
      assertNull(simpleSourceFile0.toString());
      assertTrue(simpleSourceFile0.isExtern());
      
      int int0 = simpleSourceFile0.getLineOffset(57);
      assertEquals(Integer.MIN_VALUE, int0);
      assertNull(simpleSourceFile0.getName());
      assertNull(simpleSourceFile0.toString());
      assertTrue(simpleSourceFile0.isExtern());
      
      node0.addSuppression((String) null);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(799, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      assertNotNull(node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertEquals(29, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      
      int int1 = node0.getChildCount();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertEquals(799, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(799, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(799, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertEquals(679, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertTrue(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCast());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCall());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.isLabel());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isVar());
      assertEquals(126, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.hasOneChild());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isConstructor());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isVoid());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isString());
      assertFalse(node3.isRegExp());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isTry());
      assertFalse(node3.isCase());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertEquals(83, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isVar());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getSourcePosition());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCast());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAnd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBlock());
      assertFalse(node3.isReturn());
      assertTrue(node3.isParamList());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isIn());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(23, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      
      node_SideEffectFlags5.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertEquals(15, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags5.valueOf());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      Node node4 = null;
      try {
        node4 = new Node(42, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      assertNotNull(node_SideEffectFlags7);
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags7.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      
      int int0 = node0.getChildCount();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(148, 2, 26);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals(148, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean0 = node1.isCase();
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals(148, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertNotSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean1 = node1.isFunction();
      assertTrue(boolean1 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals(148, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertNotSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      int int1 = node1.getLineno();
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, int1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals(148, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertNotSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(679, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(126, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCast());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertTrue(node2.isLabel());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isFunctionType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isHook());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertEquals(83, node3.getType());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFor());
      assertFalse(node3.isStringKey());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isSetterDef());
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      nodeArray0[3] = node3;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags1.valueOf());
      assertEquals(19, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      node_SideEffectFlags5.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      simpleErrorReporter1.warning("Named type with empty name component", "", 2663, 3246);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node4.isIn());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isInc());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isEmpty());
      assertEquals(83, node4.getType());
      assertFalse(node4.isIf());
      assertFalse(node4.isTrue());
      assertFalse(node4.isNE());
      assertTrue(node4.isParamList());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isComma());
      assertFalse(node4.isThrow());
      assertFalse(node4.isCast());
      assertFalse(node4.isString());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isReturn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssign());
      assertFalse(node4.isContinue());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isBlock());
      assertFalse(node4.isLabel());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isNew());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isThis());
      assertFalse(node4.isVar());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNumber());
      assertEquals((-1), node4.getCharno());
      assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node5 = node2.cloneTree();
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertNotNull(node5);
      assertEquals(126, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCast());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertTrue(node2.isLabel());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node5.isFunction());
      assertFalse(node5.isTrue());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isTry());
      assertFalse(node5.isVoid());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isCatch());
      assertFalse(node5.isFor());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isString());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAdd());
      assertFalse(node5.isDo());
      assertFalse(node5.isNew());
      assertFalse(node5.isVar());
      assertFalse(node5.isCall());
      assertFalse(node5.isReturn());
      assertFalse(node5.isNull());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isBreak());
      assertFalse(node5.isOr());
      assertFalse(node5.isScript());
      assertFalse(node5.isExprResult());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isCast());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWith());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isComma());
      assertFalse(node5.isDec());
      assertFalse(node5.isNumber());
      assertFalse(node5.isThis());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getCharno());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isInc());
      assertEquals(126, node5.getType());
      assertFalse(node5.isCase());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isHook());
      assertFalse(node5.isContinue());
      assertTrue(node5.isLabel());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isBlock());
      assertFalse(node5.isNE());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIn());
      assertNotSame(node2, node0);
      assertNotSame(node2, node5);
      assertNotSame(node2, node3);
      assertNotSame(node2, node4);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node4);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node3.isCase();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertTrue(node3.isParamList());
      assertFalse(node3.isHook());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertEquals(83, node3.getType());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFor());
      assertFalse(node3.isStringKey());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isSetterDef());
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node5);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean1 = node5.isFunction();
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(126, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCast());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertTrue(node2.isLabel());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node5.isFunction());
      assertFalse(node5.isTrue());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isTry());
      assertFalse(node5.isVoid());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isCatch());
      assertFalse(node5.isFor());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isString());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAdd());
      assertFalse(node5.isDo());
      assertFalse(node5.isNew());
      assertFalse(node5.isVar());
      assertFalse(node5.isCall());
      assertFalse(node5.isReturn());
      assertFalse(node5.isNull());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isBreak());
      assertFalse(node5.isOr());
      assertFalse(node5.isScript());
      assertFalse(node5.isExprResult());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isCast());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWith());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isComma());
      assertFalse(node5.isDec());
      assertFalse(node5.isNumber());
      assertFalse(node5.isThis());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getCharno());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isInc());
      assertEquals(126, node5.getType());
      assertFalse(node5.isCase());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isHook());
      assertFalse(node5.isContinue());
      assertTrue(node5.isLabel());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isBlock());
      assertFalse(node5.isNE());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIn());
      assertNotSame(node2, node0);
      assertNotSame(node2, node5);
      assertNotSame(node2, node3);
      assertNotSame(node2, node4);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertNotSame(node5, node4);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      int int0 = node1.getLineno();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertEquals((-1), int0);
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(1279);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node((-351), node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Iterable<Node> iterable0 = node1.children();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(iterable0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Object object0 = node0.getProp(31);
      assertFalse(node0.equals((Object)node1));
      assertNull(object0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertNotSame(node0, node1);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      assertNotNull(node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertEquals(29, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags7.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      
      int int0 = node0.getChildCount();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = new Node(148, 2, 26);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertEquals(2, node1.getLineno());
      assertEquals(148, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node1.setIsSyntheticBlock(false);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertEquals(2, node1.getLineno());
      assertEquals(148, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertEquals(8218, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertNotSame(node1, node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean0 = node0.isDo();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertNotSame(node0, node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node0 = Node.newNumber(1508.587830965);
      assertNotNull(node0);
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(32, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      node0.addChildToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(32, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      boolean boolean1 = node1.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(32, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertEquals(5479, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setType(5479);
      assertFalse(node0.isIn());
      assertEquals(5479, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(22446079, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals(5479, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setSourceEncodedPositionForTree(5479);
      assertFalse(node0.isIn());
      assertEquals(5479, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(5479, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(1383, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      String string0 = null;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{gk==+[v`HG.uT", false);
      assertNotNull(simpleSourceFile0);
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.toString());
      
      int int0 = simpleSourceFile0.getLineOffset(438);
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.toString());
      
      node0.addSuppression("{gk==+[v`HG.uT");
      assertFalse(node0.isIn());
      assertEquals(5479, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(5479, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(1383, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      int int1 = simpleSourceFile0.getLineOffset(62);
      assertTrue(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals("{gk==+[v`HG.uT", simpleSourceFile0.toString());
      
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node(37, (Node) null, (Node) null, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      String string0 = "";
      Node node1 = Node.newString(25, "");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertEquals(25, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node2 = new Node(12, node0, node1, node1, 0, 4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertEquals(25, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(12, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertEquals(4, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isIf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertEquals(4, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node3 = null;
      try {
        node3 = new Node(2, node1, node2, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 24);
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(24, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(102424, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(100, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(24, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(102424, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(100, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node1 = new Node(8, 43, 3327);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNew());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertEquals(179455, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertEquals(8, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean1 = node0.isAdd();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(24, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(102424, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(100, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      jSTypeRegistry0.forwardDeclareType("Mj$Zc2J:?=s");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(".", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(679, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertEquals(39, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertEquals(126, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertTrue(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetProp());
      assertTrue(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isBlock());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isName());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.isCall());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[3] = node3;
      Node node4 = new Node(31, 39, 1);
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertEquals(31, node4.getType());
      assertFalse(node4.isContinue());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNumber());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWhile());
      assertFalse(node4.isComma());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNull());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      nodeArray0[4] = node4;
      int int0 = node0.getIntProp(51);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertEquals(0, int0);
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(679, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node0, node3);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWith());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertEquals(83, node5.getType());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isNumber());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isHook());
      assertFalse(node5.isReturn());
      assertFalse(node5.isThis());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isVar());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isTry());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWhile());
      assertEquals(1, node5.getChildCount());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isBlock());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isInc());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isNE());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node4);
      assertNotSame(node5, node0);
      assertNotSame(node5, node3);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      nodeArray0[5] = node5;
      Node node6 = new Node(37, node4, node5, 12, 47);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node6);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWith());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertEquals(83, node5.getType());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isNumber());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isHook());
      assertFalse(node5.isReturn());
      assertFalse(node5.isThis());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isVar());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isTry());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWhile());
      assertEquals(1, node5.getChildCount());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isBlock());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isInc());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isNE());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTrue());
      assertFalse(node6.isRegExp());
      assertEquals(49199, node6.getSourcePosition());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isFor());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTry());
      assertFalse(node6.isParamList());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isAdd());
      assertFalse(node6.isString());
      assertEquals(37, node6.getType());
      assertFalse(node6.isVar());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isNew());
      assertFalse(node6.isDo());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isNull());
      assertFalse(node6.isReturn());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isOr());
      assertFalse(node6.isAssign());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isVoid());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isWith());
      assertFalse(node6.isNot());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isLabel());
      assertEquals(2, node6.getChildCount());
      assertFalse(node6.isFalse());
      assertFalse(node6.isNumber());
      assertFalse(node6.isContinue());
      assertFalse(node6.isAnd());
      assertFalse(node6.isCast());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isInc());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isBlock());
      assertEquals(12, node6.getLineno());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isCase());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isThis());
      assertTrue(node6.isCall());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isNE());
      assertFalse(node6.isIn());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCatch());
      assertFalse(node6.isIf());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertEquals(31, node4.getType());
      assertFalse(node4.isContinue());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNumber());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWhile());
      assertFalse(node4.isComma());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNull());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node7 = Node.newNumber((double) 49);
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node2));
      assertFalse(node7.equals((Object)node4));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node1));
      assertNotNull(node7);
      assertFalse(node7.isNew());
      assertFalse(node7.isAdd());
      assertFalse(node7.isBlock());
      assertFalse(node7.isWhile());
      assertFalse(node7.isDo());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isOr());
      assertFalse(node7.isReturn());
      assertFalse(node7.isNull());
      assertEquals((-1), node7.getLineno());
      assertFalse(node7.isName());
      assertFalse(node7.isGetElem());
      assertEquals(39, node7.getType());
      assertFalse(node7.isCatch());
      assertFalse(node7.isCall());
      assertFalse(node7.isDec());
      assertFalse(node7.hasChildren());
      assertFalse(node7.isAssign());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isTrue());
      assertFalse(node7.isExprResult());
      assertFalse(node7.isScript());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isArrayLit());
      assertFalse(node7.isVoid());
      assertFalse(node7.isTry());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isGetterDef());
      assertFalse(node7.isParamList());
      assertFalse(node7.isLabel());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isVar());
      assertEquals(0, node7.getChildCount());
      assertEquals((-1), node7.getCharno());
      assertFalse(node7.isInc());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isCase());
      assertFalse(node7.isIn());
      assertFalse(node7.isString());
      assertFalse(node7.isGetProp());
      assertFalse(node7.isNE());
      assertFalse(node7.isThis());
      assertFalse(node7.isIf());
      assertFalse(node7.isBreak());
      assertTrue(node7.isNumber());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isFor());
      assertFalse(node7.isHook());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isComma());
      assertFalse(node7.isWith());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isAnd());
      assertEquals((-1), node7.getSourcePosition());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isNot());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isThrow());
      assertFalse(node7.isFalse());
      assertFalse(node7.isContinue());
      assertFalse(node7.isCast());
      assertFalse(node7.isFunction());
      assertNotSame(node7, node1);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      
      nodeArray0[7] = node7;
      Node node8 = Node.newNumber((double) 29);
      assertFalse(node8.equals((Object)node3));
      assertFalse(node8.equals((Object)node2));
      assertFalse(node8.equals((Object)node1));
      assertFalse(node8.equals((Object)node4));
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node7));
      assertFalse(node8.equals((Object)node0));
      assertNotNull(node8);
      assertFalse(node8.isNE());
      assertTrue(node8.isNumber());
      assertFalse(node8.isDelProp());
      assertFalse(node8.isFor());
      assertFalse(node8.isIf());
      assertFalse(node8.isArrayLit());
      assertFalse(node8.isSwitch());
      assertFalse(node8.isRegExp());
      assertEquals((-1), node8.getCharno());
      assertFalse(node8.isDebugger());
      assertFalse(node8.isTry());
      assertFalse(node8.isCase());
      assertFalse(node8.isGetterDef());
      assertFalse(node8.isString());
      assertFalse(node8.isComma());
      assertFalse(node8.isNull());
      assertFalse(node8.isBreak());
      assertFalse(node8.isGetProp());
      assertFalse(node8.isName());
      assertFalse(node8.isStringKey());
      assertFalse(node8.isParamList());
      assertFalse(node8.isVar());
      assertFalse(node8.isCall());
      assertEquals(0, node8.getChildCount());
      assertFalse(node8.isTrue());
      assertFalse(node8.isExprResult());
      assertFalse(node8.isVoid());
      assertFalse(node8.isNew());
      assertFalse(node8.isDo());
      assertFalse(node8.isDefaultCase());
      assertFalse(node8.isEmpty());
      assertFalse(node8.isOr());
      assertFalse(node8.isAdd());
      assertFalse(node8.isTypeOf());
      assertFalse(node8.hasChildren());
      assertFalse(node8.isDec());
      assertFalse(node8.isLabel());
      assertEquals((-1), node8.getSourcePosition());
      assertFalse(node8.isAssignAdd());
      assertFalse(node8.isReturn());
      assertFalse(node8.isLabelName());
      assertFalse(node8.isCast());
      assertFalse(node8.hasMoreThanOneChild());
      assertEquals((-1), node8.getLineno());
      assertFalse(node8.isAssign());
      assertFalse(node8.isGetElem());
      assertFalse(node8.isContinue());
      assertFalse(node8.isScript());
      assertEquals(39, node8.getType());
      assertFalse(node8.isBlock());
      assertFalse(node8.isWhile());
      assertFalse(node8.isAnd());
      assertFalse(node8.isObjectLit());
      assertFalse(node8.hasOneChild());
      assertFalse(node8.isNot());
      assertFalse(node8.isSetterDef());
      assertFalse(node8.isThis());
      assertFalse(node8.isThrow());
      assertFalse(node8.isCatch());
      assertFalse(node8.isHook());
      assertFalse(node8.isWith());
      assertFalse(node8.isFalse());
      assertFalse(node8.isInstanceOf());
      assertFalse(node8.isFunction());
      assertFalse(node8.isInc());
      assertFalse(node8.isIn());
      assertNotSame(node8, node1);
      assertNotSame(node8, node7);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node9 = new Node(1924, node3, node6, node8, node8);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node8));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node5.equals((Object)node7));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node7));
      assertFalse(node6.equals((Object)node8));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node8.equals((Object)node3));
      assertFalse(node8.equals((Object)node2));
      assertFalse(node8.equals((Object)node1));
      assertFalse(node8.equals((Object)node4));
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node7));
      assertFalse(node8.equals((Object)node0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node9.equals((Object)node2));
      assertFalse(node9.equals((Object)node4));
      assertFalse(node9.equals((Object)node0));
      assertFalse(node9.equals((Object)node3));
      assertFalse(node9.equals((Object)node6));
      assertFalse(node9.equals((Object)node5));
      assertFalse(node9.equals((Object)node8));
      assertFalse(node9.equals((Object)node1));
      assertFalse(node9.equals((Object)node7));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node7));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node8));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node8));
      assertFalse(node4.equals((Object)node7));
      assertNotNull(node9);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWith());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertEquals(83, node5.getType());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isNumber());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isHook());
      assertFalse(node5.isReturn());
      assertFalse(node5.isThis());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isVar());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isTry());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWhile());
      assertEquals(1, node5.getChildCount());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isBlock());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isInc());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isNE());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTrue());
      assertFalse(node6.isRegExp());
      assertEquals(49199, node6.getSourcePosition());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isFor());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTry());
      assertFalse(node6.isParamList());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isAdd());
      assertFalse(node6.isString());
      assertEquals(37, node6.getType());
      assertFalse(node6.isVar());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isNew());
      assertFalse(node6.isDo());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isNull());
      assertFalse(node6.isReturn());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isOr());
      assertFalse(node6.isAssign());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isVoid());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isWith());
      assertFalse(node6.isNot());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isLabel());
      assertEquals(2, node6.getChildCount());
      assertFalse(node6.isFalse());
      assertFalse(node6.isNumber());
      assertFalse(node6.isContinue());
      assertFalse(node6.isAnd());
      assertFalse(node6.isCast());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isInc());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isBlock());
      assertEquals(12, node6.getLineno());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isCase());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isThis());
      assertTrue(node6.isCall());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isNE());
      assertFalse(node6.isIn());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCatch());
      assertFalse(node6.isIf());
      assertFalse(node8.isNE());
      assertTrue(node8.isNumber());
      assertFalse(node8.isDelProp());
      assertFalse(node8.isFor());
      assertFalse(node8.isIf());
      assertFalse(node8.isArrayLit());
      assertFalse(node8.isSwitch());
      assertFalse(node8.isRegExp());
      assertEquals((-1), node8.getCharno());
      assertFalse(node8.isDebugger());
      assertFalse(node8.isTry());
      assertFalse(node8.isCase());
      assertFalse(node8.isGetterDef());
      assertFalse(node8.isString());
      assertFalse(node8.isComma());
      assertFalse(node8.isNull());
      assertFalse(node8.isBreak());
      assertFalse(node8.isGetProp());
      assertFalse(node8.isName());
      assertFalse(node8.isStringKey());
      assertFalse(node8.isParamList());
      assertFalse(node8.isVar());
      assertFalse(node8.isCall());
      assertEquals(0, node8.getChildCount());
      assertFalse(node8.isTrue());
      assertFalse(node8.isExprResult());
      assertFalse(node8.isVoid());
      assertFalse(node8.isNew());
      assertFalse(node8.isDo());
      assertFalse(node8.isDefaultCase());
      assertFalse(node8.isEmpty());
      assertFalse(node8.isOr());
      assertFalse(node8.isAdd());
      assertFalse(node8.isTypeOf());
      assertFalse(node8.hasChildren());
      assertFalse(node8.isDec());
      assertFalse(node8.isLabel());
      assertEquals((-1), node8.getSourcePosition());
      assertFalse(node8.isAssignAdd());
      assertFalse(node8.isReturn());
      assertFalse(node8.isLabelName());
      assertFalse(node8.isCast());
      assertFalse(node8.hasMoreThanOneChild());
      assertEquals((-1), node8.getLineno());
      assertFalse(node8.isAssign());
      assertFalse(node8.isGetElem());
      assertFalse(node8.isContinue());
      assertFalse(node8.isScript());
      assertEquals(39, node8.getType());
      assertFalse(node8.isBlock());
      assertFalse(node8.isWhile());
      assertFalse(node8.isAnd());
      assertFalse(node8.isObjectLit());
      assertFalse(node8.hasOneChild());
      assertFalse(node8.isNot());
      assertFalse(node8.isSetterDef());
      assertFalse(node8.isThis());
      assertFalse(node8.isThrow());
      assertFalse(node8.isCatch());
      assertFalse(node8.isHook());
      assertFalse(node8.isWith());
      assertFalse(node8.isFalse());
      assertFalse(node8.isInstanceOf());
      assertFalse(node8.isFunction());
      assertFalse(node8.isInc());
      assertFalse(node8.isIn());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node9.isEmpty());
      assertFalse(node9.isFor());
      assertFalse(node9.isDelProp());
      assertFalse(node9.isGetterDef());
      assertFalse(node9.isIf());
      assertFalse(node9.isArrayLit());
      assertFalse(node9.isVoid());
      assertFalse(node9.isIn());
      assertFalse(node9.isNE());
      assertFalse(node9.isDebugger());
      assertFalse(node9.isTrue());
      assertFalse(node9.isDefaultCase());
      assertFalse(node9.isInc());
      assertFalse(node9.isFunction());
      assertFalse(node9.isName());
      assertFalse(node9.isFalse());
      assertFalse(node9.isCall());
      assertFalse(node9.isBreak());
      assertFalse(node9.isGetProp());
      assertFalse(node9.isAdd());
      assertFalse(node9.isNull());
      assertFalse(node9.isNot());
      assertFalse(node9.isString());
      assertFalse(node9.isWhile());
      assertFalse(node9.isObjectLit());
      assertEquals(1924, node9.getType());
      assertTrue(node9.hasMoreThanOneChild());
      assertFalse(node9.isExprResult());
      assertEquals(3, node9.getChildCount());
      assertFalse(node9.isTypeOf());
      assertFalse(node9.isComma());
      assertFalse(node9.isDec());
      assertFalse(node9.isReturn());
      assertFalse(node9.isLabelName());
      assertFalse(node9.isAssign());
      assertFalse(node9.isNumber());
      assertFalse(node9.isCast());
      assertFalse(node9.hasOneChild());
      assertFalse(node9.isGetElem());
      assertFalse(node9.isOr());
      assertEquals((-1), node9.getLineno());
      assertEquals((-1), node9.getSourcePosition());
      assertFalse(node9.isDo());
      assertFalse(node9.isContinue());
      assertFalse(node9.isAnd());
      assertFalse(node9.isLabel());
      assertFalse(node9.isNew());
      assertFalse(node9.isAssignAdd());
      assertFalse(node9.isVar());
      assertFalse(node9.isStringKey());
      assertFalse(node9.isThrow());
      assertFalse(node9.isSetterDef());
      assertFalse(node9.isParamList());
      assertFalse(node9.isSwitch());
      assertEquals((-1), node9.getCharno());
      assertFalse(node9.isCase());
      assertFalse(node9.isWith());
      assertFalse(node9.isScript());
      assertFalse(node9.isCatch());
      assertFalse(node9.isInstanceOf());
      assertTrue(node9.hasChildren());
      assertFalse(node9.isTry());
      assertFalse(node9.isBlock());
      assertFalse(node9.isRegExp());
      assertFalse(node9.isHook());
      assertFalse(node9.isThis());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetProp());
      assertTrue(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isBlock());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isName());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.isCall());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertEquals(31, node4.getType());
      assertFalse(node4.isContinue());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNumber());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWhile());
      assertFalse(node4.isComma());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNull());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node10 = new Node(679, node9, node7);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node9));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node8));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node5.equals((Object)node7));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node7));
      assertFalse(node6.equals((Object)node8));
      assertFalse(node6.equals((Object)node9));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node7.equals((Object)node8));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node2));
      assertFalse(node7.equals((Object)node4));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node9));
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node1));
      assertFalse(node8.equals((Object)node3));
      assertFalse(node8.equals((Object)node2));
      assertFalse(node8.equals((Object)node1));
      assertFalse(node8.equals((Object)node4));
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node7));
      assertFalse(node8.equals((Object)node0));
      assertFalse(node8.equals((Object)node9));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node9.equals((Object)node2));
      assertFalse(node9.equals((Object)node4));
      assertFalse(node9.equals((Object)node0));
      assertFalse(node9.equals((Object)node3));
      assertFalse(node9.equals((Object)node6));
      assertFalse(node9.equals((Object)node5));
      assertFalse(node9.equals((Object)node8));
      assertFalse(node9.equals((Object)node1));
      assertFalse(node9.equals((Object)node7));
      assertFalse(node10.equals((Object)node6));
      assertFalse(node10.equals((Object)node3));
      assertFalse(node10.equals((Object)node7));
      assertFalse(node10.equals((Object)node1));
      assertFalse(node10.equals((Object)node9));
      assertFalse(node10.equals((Object)node8));
      assertFalse(node10.equals((Object)node2));
      assertFalse(node10.equals((Object)node0));
      assertFalse(node10.equals((Object)node4));
      assertFalse(node10.equals((Object)node5));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node9));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node7));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node8));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node9));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node8));
      assertFalse(node4.equals((Object)node7));
      assertNotNull(node10);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWith());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertEquals(83, node5.getType());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isNumber());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isHook());
      assertFalse(node5.isReturn());
      assertFalse(node5.isThis());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isVar());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isCall());
      assertFalse(node5.isTry());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWhile());
      assertEquals(1, node5.getChildCount());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isBlock());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isInc());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isNE());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTrue());
      assertFalse(node6.isRegExp());
      assertEquals(49199, node6.getSourcePosition());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isFor());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTry());
      assertFalse(node6.isParamList());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isAdd());
      assertFalse(node6.isString());
      assertEquals(37, node6.getType());
      assertFalse(node6.isVar());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isNew());
      assertFalse(node6.isDo());
      assertFalse(node6.isComma());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isNull());
      assertFalse(node6.isReturn());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isOr());
      assertFalse(node6.isAssign());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isVoid());
      assertTrue(node6.hasMoreThanOneChild());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isWith());
      assertFalse(node6.isNot());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isLabel());
      assertEquals(2, node6.getChildCount());
      assertFalse(node6.isFalse());
      assertFalse(node6.isNumber());
      assertFalse(node6.isContinue());
      assertFalse(node6.isAnd());
      assertFalse(node6.isCast());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isInc());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isBlock());
      assertEquals(12, node6.getLineno());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isCase());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isThis());
      assertTrue(node6.isCall());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isNE());
      assertFalse(node6.isIn());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCatch());
      assertFalse(node6.isIf());
      assertFalse(node7.isNew());
      assertFalse(node7.isAdd());
      assertFalse(node7.isBlock());
      assertFalse(node7.isWhile());
      assertFalse(node7.isDo());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isOr());
      assertFalse(node7.isReturn());
      assertFalse(node7.isNull());
      assertEquals((-1), node7.getLineno());
      assertFalse(node7.isName());
      assertFalse(node7.isGetElem());
      assertEquals(39, node7.getType());
      assertFalse(node7.isCatch());
      assertFalse(node7.isCall());
      assertFalse(node7.isDec());
      assertFalse(node7.hasChildren());
      assertFalse(node7.isAssign());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isTrue());
      assertFalse(node7.isExprResult());
      assertFalse(node7.isScript());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isArrayLit());
      assertFalse(node7.isVoid());
      assertFalse(node7.isTry());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isGetterDef());
      assertFalse(node7.isParamList());
      assertFalse(node7.isLabel());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isVar());
      assertEquals(0, node7.getChildCount());
      assertEquals((-1), node7.getCharno());
      assertFalse(node7.isInc());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isCase());
      assertFalse(node7.isIn());
      assertFalse(node7.isString());
      assertFalse(node7.isGetProp());
      assertFalse(node7.isNE());
      assertFalse(node7.isThis());
      assertFalse(node7.isIf());
      assertFalse(node7.isBreak());
      assertTrue(node7.isNumber());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isFor());
      assertFalse(node7.isHook());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isComma());
      assertFalse(node7.isWith());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isAnd());
      assertEquals((-1), node7.getSourcePosition());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isNot());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isThrow());
      assertFalse(node7.isFalse());
      assertFalse(node7.isContinue());
      assertFalse(node7.isCast());
      assertFalse(node7.isFunction());
      assertFalse(node8.isNE());
      assertTrue(node8.isNumber());
      assertFalse(node8.isDelProp());
      assertFalse(node8.isFor());
      assertFalse(node8.isIf());
      assertFalse(node8.isArrayLit());
      assertFalse(node8.isSwitch());
      assertFalse(node8.isRegExp());
      assertEquals((-1), node8.getCharno());
      assertFalse(node8.isDebugger());
      assertFalse(node8.isTry());
      assertFalse(node8.isCase());
      assertFalse(node8.isGetterDef());
      assertFalse(node8.isString());
      assertFalse(node8.isComma());
      assertFalse(node8.isNull());
      assertFalse(node8.isBreak());
      assertFalse(node8.isGetProp());
      assertFalse(node8.isName());
      assertFalse(node8.isStringKey());
      assertFalse(node8.isParamList());
      assertFalse(node8.isVar());
      assertFalse(node8.isCall());
      assertEquals(0, node8.getChildCount());
      assertFalse(node8.isTrue());
      assertFalse(node8.isExprResult());
      assertFalse(node8.isVoid());
      assertFalse(node8.isNew());
      assertFalse(node8.isDo());
      assertFalse(node8.isDefaultCase());
      assertFalse(node8.isEmpty());
      assertFalse(node8.isOr());
      assertFalse(node8.isAdd());
      assertFalse(node8.isTypeOf());
      assertFalse(node8.hasChildren());
      assertFalse(node8.isDec());
      assertFalse(node8.isLabel());
      assertEquals((-1), node8.getSourcePosition());
      assertFalse(node8.isAssignAdd());
      assertFalse(node8.isReturn());
      assertFalse(node8.isLabelName());
      assertFalse(node8.isCast());
      assertFalse(node8.hasMoreThanOneChild());
      assertEquals((-1), node8.getLineno());
      assertFalse(node8.isAssign());
      assertFalse(node8.isGetElem());
      assertFalse(node8.isContinue());
      assertFalse(node8.isScript());
      assertEquals(39, node8.getType());
      assertFalse(node8.isBlock());
      assertFalse(node8.isWhile());
      assertFalse(node8.isAnd());
      assertFalse(node8.isObjectLit());
      assertFalse(node8.hasOneChild());
      assertFalse(node8.isNot());
      assertFalse(node8.isSetterDef());
      assertFalse(node8.isThis());
      assertFalse(node8.isThrow());
      assertFalse(node8.isCatch());
      assertFalse(node8.isHook());
      assertFalse(node8.isWith());
      assertFalse(node8.isFalse());
      assertFalse(node8.isInstanceOf());
      assertFalse(node8.isFunction());
      assertFalse(node8.isInc());
      assertFalse(node8.isIn());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node9.isEmpty());
      assertFalse(node9.isFor());
      assertFalse(node9.isDelProp());
      assertFalse(node9.isGetterDef());
      assertFalse(node9.isIf());
      assertFalse(node9.isArrayLit());
      assertFalse(node9.isVoid());
      assertFalse(node9.isIn());
      assertFalse(node9.isNE());
      assertFalse(node9.isDebugger());
      assertFalse(node9.isTrue());
      assertFalse(node9.isDefaultCase());
      assertFalse(node9.isInc());
      assertFalse(node9.isFunction());
      assertFalse(node9.isName());
      assertFalse(node9.isFalse());
      assertFalse(node9.isCall());
      assertFalse(node9.isBreak());
      assertFalse(node9.isGetProp());
      assertFalse(node9.isAdd());
      assertFalse(node9.isNull());
      assertFalse(node9.isNot());
      assertFalse(node9.isString());
      assertFalse(node9.isWhile());
      assertFalse(node9.isObjectLit());
      assertEquals(1924, node9.getType());
      assertTrue(node9.hasMoreThanOneChild());
      assertFalse(node9.isExprResult());
      assertEquals(3, node9.getChildCount());
      assertFalse(node9.isTypeOf());
      assertFalse(node9.isComma());
      assertFalse(node9.isDec());
      assertFalse(node9.isReturn());
      assertFalse(node9.isLabelName());
      assertFalse(node9.isAssign());
      assertFalse(node9.isNumber());
      assertFalse(node9.isCast());
      assertFalse(node9.hasOneChild());
      assertFalse(node9.isGetElem());
      assertFalse(node9.isOr());
      assertEquals((-1), node9.getLineno());
      assertEquals((-1), node9.getSourcePosition());
      assertFalse(node9.isDo());
      assertFalse(node9.isContinue());
      assertFalse(node9.isAnd());
      assertFalse(node9.isLabel());
      assertFalse(node9.isNew());
      assertFalse(node9.isAssignAdd());
      assertFalse(node9.isVar());
      assertFalse(node9.isStringKey());
      assertFalse(node9.isThrow());
      assertFalse(node9.isSetterDef());
      assertFalse(node9.isParamList());
      assertFalse(node9.isSwitch());
      assertEquals((-1), node9.getCharno());
      assertFalse(node9.isCase());
      assertFalse(node9.isWith());
      assertFalse(node9.isScript());
      assertFalse(node9.isCatch());
      assertFalse(node9.isInstanceOf());
      assertTrue(node9.hasChildren());
      assertFalse(node9.isTry());
      assertFalse(node9.isBlock());
      assertFalse(node9.isRegExp());
      assertFalse(node9.isHook());
      assertFalse(node9.isThis());
      assertFalse(node10.isCatch());
      assertFalse(node10.isNull());
      assertFalse(node10.isTrue());
      assertFalse(node10.isVoid());
      assertFalse(node10.isParamList());
      assertFalse(node10.isStringKey());
      assertFalse(node10.isName());
      assertFalse(node10.isCall());
      assertFalse(node10.isBlock());
      assertFalse(node10.isDebugger());
      assertFalse(node10.isRegExp());
      assertFalse(node10.isWhile());
      assertEquals(679, node10.getType());
      assertFalse(node10.isFor());
      assertFalse(node10.isTry());
      assertFalse(node10.isLabel());
      assertFalse(node10.isReturn());
      assertFalse(node10.isOr());
      assertFalse(node10.isTypeOf());
      assertFalse(node10.isNumber());
      assertFalse(node10.isDelProp());
      assertFalse(node10.isGetterDef());
      assertTrue(node10.hasMoreThanOneChild());
      assertFalse(node10.isGetElem());
      assertFalse(node10.isSwitch());
      assertFalse(node10.isLabelName());
      assertFalse(node10.isArrayLit());
      assertFalse(node10.isAdd());
      assertFalse(node10.isVar());
      assertFalse(node10.isDefaultCase());
      assertFalse(node10.isEmpty());
      assertFalse(node10.isNew());
      assertFalse(node10.isDo());
      assertFalse(node10.isAssignAdd());
      assertFalse(node10.isInstanceOf());
      assertEquals(2, node10.getChildCount());
      assertFalse(node10.isComma());
      assertFalse(node10.isNot());
      assertFalse(node10.isWith());
      assertFalse(node10.isObjectLit());
      assertFalse(node10.isBreak());
      assertFalse(node10.isExprResult());
      assertFalse(node10.isAnd());
      assertFalse(node10.hasOneChild());
      assertFalse(node10.isHook());
      assertEquals((-1), node10.getCharno());
      assertFalse(node10.isAssign());
      assertFalse(node10.isString());
      assertFalse(node10.isDec());
      assertFalse(node10.isScript());
      assertFalse(node10.isThis());
      assertFalse(node10.isGetProp());
      assertFalse(node10.isCase());
      assertFalse(node10.isIn());
      assertEquals((-1), node10.getLineno());
      assertTrue(node10.hasChildren());
      assertFalse(node10.isContinue());
      assertFalse(node10.isIf());
      assertEquals((-1), node10.getSourcePosition());
      assertFalse(node10.isNE());
      assertFalse(node10.isCast());
      assertFalse(node10.isFunction());
      assertFalse(node10.isFalse());
      assertFalse(node10.isSetterDef());
      assertFalse(node10.isInc());
      assertFalse(node10.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetProp());
      assertTrue(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isBlock());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isStringKey());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isName());
      assertFalse(node3.isTypeOf());
      assertEquals(83, node3.getType());
      assertFalse(node3.isCall());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node4.isVoid());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertEquals(31, node4.getType());
      assertFalse(node4.isContinue());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWith());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNumber());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWhile());
      assertFalse(node4.isComma());
      assertEquals(39, node4.getLineno());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNull());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int int0 = (-1054);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2856, (Node) null, 25, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newString(8, "Io2{D {|+l", 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertEquals(8, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isBlock();
      assertFalse(boolean0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertEquals(8, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node0.isComma();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertEquals(8, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node0 = Node.newNumber(1508.587830965);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(32, node0, node0, node0, 49, 1);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertEquals(32, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertTrue(node1.isTypeOf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(200705, node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = null;
      try {
        node2 = new Node(32, node1, node0, 32, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newNumber(3840.49541624, 797, 1794);
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(3266306, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals(1794, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(797, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(4, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NO_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.STRING_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(unknownType0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unknownType0, (JSType) unknownType0, (JSType) unknownType0, (JSType) unknownType0, (JSType) unknownType0);
      assertNotNull(immutableList0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertEquals(5, immutableList0.size());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      assertNotNull(node0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertEquals(5, immutableList0.size());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(5, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      int int0 = node0.getType();
      assertEquals(83, int0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertEquals(5, immutableList0.size());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(5, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$Marker", 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(0, node0, (-3643), (-261));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      
      int int0 = node1.getSourcePosition();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), int0);
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean0 = node1.isParamList();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean1 = node1.isEquivalentTo(node0, false, true, true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node_SideEffectFlags1;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("com.google.javascript.rhino.JSDocInfo$Marker", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property com.google.javascript.rhino.JSDocInfo$Marker
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      int int0 = 307;
      Node node0 = Node.newNumber((-1.0));
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(307, node0, (-1263), 40);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(307, node1.getType());
      assertFalse(node1.isNumber());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      Node node2 = null;
      try {
        node2 = new Node(1616, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      String string0 = node0.getSourceFileName();
      assertNull(string0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(15, (Node) null, (Node) null, 15, (-1005));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      assertNotNull(node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags6.valueOf());
      assertEquals(29, node_SideEffectFlags7.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      
      int int0 = node0.getChildCount();
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = Node.newString("Object#Key");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      
      boolean boolean0 = node0.isEquivalentTo(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node2 = node1.getAncestor(0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isInc());
      assertTrue(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertSame(node2, node1);
      assertSame(node1, node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = new Node(0, 467, 4307);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getType());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertEquals(1916927, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(467, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      
      Node node1 = Node.newString(0, "E:2>?qOF=pP");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isName());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDo());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isVar());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertEquals(0, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWith());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setReturnsTainted();
      assertNotNull(node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setMutatesThis();
      assertNotNull(node_SideEffectFlags8);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags8.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString((-2460), "");
      assertNotNull(node0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertEquals((-2460), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int0 = node0.getType();
      assertEquals((-2460), int0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertEquals((-2460), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((-93), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newString(100, ".", 25, 24);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(102424, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(24, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(102424, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(24, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertTrue(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node1 = new Node(8, 43, 3327);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(179455, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(8, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertEquals(3327, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(".", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      int int0 = 679;
      int int1 = 1924;
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node(679);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertEquals(679, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isNumber());
      assertFalse(node1.isString());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(126);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertEquals(126, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertTrue(node2.isLabel());
      assertFalse(node2.isFunction());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesNumberContext());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssign());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNot());
      assertTrue(node3.isParamList());
      assertFalse(node3.isNumber());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDec());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNull());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertEquals(83, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertFalse(node3.isString());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFalse());
      assertFalse(node3.isIn());
      assertFalse(node3.isContinue());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      nodeArray0[3] = node3;
      Node node4 = new Node(31, 39, 1);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(31, node4.getType());
      assertFalse(node4.isThrow());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIf());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertEquals(39, node4.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      nodeArray0[4] = node4;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Node node5 = jSTypeRegistry1.createParameters(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertNotNull(node5);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(83, node5.getType());
      assertFalse(node5.isThis());
      assertFalse(node5.isFalse());
      assertFalse(node5.isComma());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isHook());
      assertFalse(node5.isThrow());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isScript());
      assertFalse(node5.isString());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isCast());
      assertFalse(node5.isAnd());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNE());
      assertFalse(node5.isNumber());
      assertFalse(node5.isIf());
      assertFalse(node5.isFor());
      assertFalse(node5.isGetterDef());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isIn());
      assertFalse(node5.isTry());
      assertFalse(node5.isCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWith());
      assertFalse(node5.isBlock());
      assertFalse(node5.isCatch());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isInstanceOf());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNull());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isVar());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isFunction());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isContinue());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isLabel());
      assertFalse(node5.isOr());
      assertFalse(node5.isAssign());
      assertFalse(node5.isReturn());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isDec());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isTrue());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isWhile());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isVoid());
      assertFalse(node5.isBreak());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      assertNotSame(node5, node4);
      assertNotSame(node5, node3);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      nodeArray0[5] = node5;
      Node node6 = new Node(37, node4, node5, 0, 47);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node2));
      assertNotNull(node6);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(31, node4.getType());
      assertFalse(node4.isThrow());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIf());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertEquals(39, node4.getLineno());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(83, node5.getType());
      assertFalse(node5.isThis());
      assertFalse(node5.isFalse());
      assertFalse(node5.isComma());
      assertTrue(node5.isParamList());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isHook());
      assertFalse(node5.isThrow());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isScript());
      assertFalse(node5.isString());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isCast());
      assertFalse(node5.isAnd());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNE());
      assertFalse(node5.isNumber());
      assertFalse(node5.isIf());
      assertFalse(node5.isFor());
      assertFalse(node5.isGetterDef());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isIn());
      assertFalse(node5.isTry());
      assertFalse(node5.isCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWith());
      assertFalse(node5.isBlock());
      assertFalse(node5.isCatch());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isInstanceOf());
      assertTrue(node5.hasChildren());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNull());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isVar());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isFunction());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isContinue());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isLabel());
      assertFalse(node5.isOr());
      assertFalse(node5.isAssign());
      assertFalse(node5.isReturn());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isDec());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isTrue());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isWhile());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isVoid());
      assertFalse(node5.isBreak());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isName());
      assertFalse(node6.isAdd());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isParamList());
      assertFalse(node6.isNull());
      assertFalse(node6.isCatch());
      assertEquals(47, node6.getCharno());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isTry());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssign());
      assertFalse(node6.isDec());
      assertFalse(node6.isBlock());
      assertFalse(node6.isReturn());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isDelProp());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isTrue());
      assertFalse(node6.isVoid());
      assertFalse(node6.isNumber());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isOr());
      assertFalse(node6.isDo());
      assertFalse(node6.isNew());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isVar());
      assertFalse(node6.isLabel());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertFalse(node6.isBreak());
      assertTrue(node6.isCall());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isWith());
      assertFalse(node6.isString());
      assertFalse(node6.isInstanceOf());
      assertTrue(node6.hasMoreThanOneChild());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isScript());
      assertFalse(node6.isCase());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isComma());
      assertEquals(37, node6.getType());
      assertEquals(47, node6.getSourcePosition());
      assertFalse(node6.isFor());
      assertFalse(node6.isHook());
      assertFalse(node6.isThis());
      assertFalse(node6.isCast());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isNE());
      assertFalse(node6.isIf());
      assertFalse(node6.isContinue());
      assertFalse(node6.isAnd());
      assertFalse(node6.isIn());
      assertEquals(0, node6.getLineno());
      assertFalse(node6.isInc());
      assertFalse(node6.isFunction());
      assertEquals(2, node6.getChildCount());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      nodeArray0[6] = node6;
      Node node7 = Node.newNumber((double) 49);
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node4));
      assertFalse(node7.equals((Object)node2));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node1));
      assertNotNull(node7);
      assertFalse(node7.isString());
      assertFalse(node7.isIn());
      assertFalse(node7.isInc());
      assertFalse(node7.isFor());
      assertFalse(node7.isCase());
      assertTrue(node7.isNumber());
      assertFalse(node7.isHook());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isNE());
      assertFalse(node7.isTrue());
      assertFalse(node7.isBreak());
      assertFalse(node7.isVoid());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isIf());
      assertEquals(0, node7.getChildCount());
      assertFalse(node7.isCatch());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isWith());
      assertFalse(node7.isScript());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isThis());
      assertFalse(node7.isTry());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.isArrayLit());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isVar());
      assertFalse(node7.isGetterDef());
      assertEquals((-1), node7.getCharno());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isParamList());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isReturn());
      assertEquals((-1), node7.getLineno());
      assertFalse(node7.isLabel());
      assertFalse(node7.isOr());
      assertFalse(node7.isContinue());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isDec());
      assertEquals(39, node7.getType());
      assertFalse(node7.hasChildren());
      assertFalse(node7.isNew());
      assertFalse(node7.isBlock());
      assertFalse(node7.isDo());
      assertFalse(node7.isWhile());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.isCall());
      assertFalse(node7.isAdd());
      assertFalse(node7.isGetElem());
      assertFalse(node7.isAssign());
      assertFalse(node7.isNull());
      assertFalse(node7.isExprResult());
      assertFalse(node7.isName());
      assertFalse(node7.isNot());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isComma());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isGetProp());
      assertFalse(node7.isThrow());
      assertFalse(node7.isCast());
      assertFalse(node7.isFunction());
      assertFalse(node7.isFalse());
      assertEquals((-1), node7.getSourcePosition());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isAnd());
      assertNotSame(node7, node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      nodeArray0[7] = node7;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("IsInstanceOf(", node4, jSTypeArray0[0]);
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node7));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(enumType0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(31, node4.getType());
      assertFalse(node4.isThrow());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIf());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertEquals(39, node4.getLineno());
      assertFalse(enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(node4, node6);
      assertNotSame(node4, node3);
      assertNotSame(node4, node5);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node7));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(enumElementType0);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(31, node4.getType());
      assertFalse(node4.isThrow());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIf());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertEquals(39, node4.getLineno());
      assertFalse(enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("IsInstanceOf(", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isAllType());
      assertNotSame(node4, node6);
      assertNotSame(node4, node3);
      assertNotSame(node4, node5);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node8 = enumElementType0.getPropertyNode("Wmy5`=Yr)TFu(=\"b{");
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node7));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(node8);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isLabelName());
      assertEquals(159745, node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isOr());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(31, node4.getType());
      assertFalse(node4.isThrow());
      assertEquals(1, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.isIf());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDo());
      assertFalse(node4.isParamList());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertEquals(39, node4.getLineno());
      assertFalse(enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("IsInstanceOf(", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isAllType());
      assertNotSame(node4, node6);
      assertNotSame(node4, node3);
      assertNotSame(node4, node5);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      nodeArray0[8] = null;
      Node node9 = null;
      try {
        node9 = new Node(1924, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = "0|)XKQ$f";
      Node node0 = Node.newString(4235, "0|)XKQ$f", 4235, 130);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(130, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertEquals(4235, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(4235, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(17346690, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node(0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(130, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertEquals(4235, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(4235, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(17346690, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      
      Node node2 = node1.cloneTree();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertEquals(130, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertEquals(4235, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(4235, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(17346690, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isWith());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNull());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isRegExp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      int int0 = (-1133);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[3];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, (JSType) null);
      assertTrue(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType[] jSTypeArray1 = new JSType[3];
      assertFalse(jSTypeArray1.equals((Object)jSTypeArray0));
      
      jSTypeArray1[0] = null;
      jSTypeArray1[1] = (JSType) functionType1;
      jSTypeArray1[2] = (JSType) functionType0;
      FunctionType functionType2 = jSTypeRegistry0.createConstructorType((JSType) functionType1, true, jSTypeArray1);
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeArray1.equals((Object)jSTypeArray0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertNotNull(functionType2);
      assertEquals(3, jSTypeArray0.length);
      assertEquals(3, jSTypeArray1.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType2.isNumberValueType());
      assertTrue(functionType2.isObject());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isVoidType());
      assertTrue(functionType2.isConstructor());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isEnumElementType());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.isTemplatizedType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isResolved());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertTrue(functionType2.hasInstanceType());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(jSTypeArray1, jSTypeArray0);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = (JSType) functionType2;
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, functionType1);
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertNotNull(enumType0);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertNotNull(enumElementType0);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertNotNull(enumElementType1);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType1.getReferenceName());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)enumElementType1.getPropertyType("1Usp(g-");
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertNotNull(unknownType0);
      assertEquals(3, jSTypeArray0.length);
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType1.getReferenceName());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[1] = (JSType) unknownType0;
      ObjectType objectType0 = enumElementType1.getImplicitPrototype();
      assertFalse(jSTypeArray0.equals((Object)jSTypeArray1));
      assertTrue(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertTrue(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertNull(objectType0);
      assertEquals(3, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isObject());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType1.getReferenceName());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertNotSame(jSTypeArray0, jSTypeArray1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[2] = (JSType) null;
      // Undeclared exception!
      try { 
        ImmutableList.copyOf(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 2
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "0|)XKQ$f";
      Node node0 = Node.newString(4235, "0|)XKQ$f", 4235, 4235);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals(4235, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertEquals(17350655, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCatch());
      assertEquals(4235, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = new Node(0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals(4235, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertEquals(17350655, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCatch());
      assertEquals(4235, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = ".";
      Node node0 = Node.newString(100, ".", 25, 100);
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(102500, node0.getSourcePosition());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.addSuppression("_4_%Ql");
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(102500, node0.getSourcePosition());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(102500, node0.getSourcePosition());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      Node node1 = new Node(53, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(25, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertTrue(node0.isOr());
      assertFalse(node0.isAnd());
      assertEquals(102500, node0.getSourcePosition());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(100, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(53, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString((-3844), "");
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      node0.removeProp((-3844));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      int int0 = 0;
      Node node1 = new Node((-3844), node0, node0, 57, 0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node1.isSwitch());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node2 = Node.newNumber((double) 30, 54, 3868);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertEquals(225052, node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertEquals(3868, node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertEquals(54, node2.getLineno());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node1.setOptionalArg(false);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node1.isSwitch());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node3 = Node.newNumber((double) 32, 2535, 3868);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNot());
      assertEquals(3868, node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isCase());
      assertTrue(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isLabel());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertEquals(10387228, node3.getSourcePosition());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertEquals(2535, node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isCast());
      assertFalse(node3.isIf());
      assertFalse(node3.isInc());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertNotSame(node3, node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node1.hasChild(node0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node1.isSwitch());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node4 = new Node((-1909), node3, node1, 4, (-1784));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertEquals((-3844), node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node1.isSwitch());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNot());
      assertEquals(3868, node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isCase());
      assertTrue(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isLabel());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertEquals(10387228, node3.getSourcePosition());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertEquals(2535, node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isCast());
      assertFalse(node3.isIf());
      assertFalse(node3.isInc());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isThis());
      assertFalse(node4.isNot());
      assertEquals(2, node4.getChildCount());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWith());
      assertFalse(node4.isAnd());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isAssignAdd());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isLabel());
      assertFalse(node4.isIf());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNE());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isHook());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isBlock());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isFor());
      assertFalse(node4.isScript());
      assertFalse(node4.isTry());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCase());
      assertFalse(node4.isCatch());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isFunction());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isEmpty());
      assertEquals((-1909), node4.getType());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isReturn());
      assertFalse(node4.isContinue());
      assertFalse(node4.isOr());
      assertFalse(node4.isDec());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isGetElem());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isAssign());
      assertFalse(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.isGetProp());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(1941);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = 1515;
      String string0 = "|";
      Node node0 = Node.newString(1515, "|", 103, 103);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertEquals(421991, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(1515, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals(103, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(103, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(1515, node0, node0, node0, node0, 40, (-2964));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertEquals(421991, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(1515, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals(103, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(103, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertEquals(1515, node1.getType());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node2 = null;
      try {
        node2 = new Node(1515, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate", 28, 28);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(40, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertEquals(28, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals(114716, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      node1.setLineno(36);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(40, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      int int0 = Node.SIDE_EFFECT_FLAGS;
      assertEquals(42, int0);
      
      node1.setType(42);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertTrue(node1.isThis());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertEquals(42, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      node1.setCharno(4);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertTrue(node1.isThis());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertEquals(36, node1.getLineno());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertEquals(42, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals(147460, node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean0 = node1.hasOneChild();
      assertFalse(boolean0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertTrue(node1.isThis());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertEquals(36, node1.getLineno());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertEquals(42, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertEquals(147460, node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node0.isBreak();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(147460, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertSame(node0, node1);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertEquals(23, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags7.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "com.google.common.base.Predicates$InPredicate";
      Node node0 = Node.newString(28, "com.google.common.base.Predicates$InPredicate", 28, 28);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(28, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(28, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals(114716, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertEquals(28, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(28, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertEquals(114716, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(28, node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node1.setLineno(36);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(28, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(28, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int0 = node1.getSideEffectFlags();
      assertEquals(0, int0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(28, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(28, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node1.setType(42);
      assertTrue(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertTrue(node1.isThis());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node1.hasOneChild();
      assertFalse(boolean0);
      assertTrue(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertTrue(node1.isThis());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isBreak();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertSame(node0, node1);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node0.addChildrenToBack(node1);
      assertTrue(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(42, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(28, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertEquals(147484, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertEquals(147484, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(42, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertTrue(node1.isThis());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node1.getAncestor((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 92, 92);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(376924, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(376924, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      node0.removeProp(92);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(376924, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(2, node0, node0, node0, node0, 2, (-1706));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(376924, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newString((-3844), "");
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-3844), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.removeProp((-3844));
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-3844), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node((-3844), node0, node0, 57, 0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-3844), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = Node.newNumber((double) 30, 54, 3868);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(39, node2.getType());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertEquals(225052, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertEquals(3868, node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isComma());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertEquals(54, node2.getLineno());
      assertFalse(node2.isObjectLit());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setOptionalArg(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-3844), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node3 = Node.newNumber((double) 32, 2535, 3868);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssignAdd());
      assertEquals(39, node3.getType());
      assertFalse(node3.isDo());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isOr());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertEquals(2535, node3.getLineno());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isComma());
      assertFalse(node3.isInc());
      assertFalse(node3.isWhile());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isContinue());
      assertFalse(node3.isString());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTry());
      assertTrue(node3.isNumber());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isIn());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertFalse(node3.isStringKey());
      assertEquals(3868, node3.getCharno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThis());
      assertFalse(node3.isNew());
      assertFalse(node3.isHook());
      assertFalse(node3.isVar());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isScript());
      assertEquals(10387228, node3.getSourcePosition());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertNotSame(node3, node2);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node1.hasChild(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-3844), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals((-3844), node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals(233472, node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int0 = node0.getSourcePosition();
      assertEquals((-1), int0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThis());
      assertFalse(node0.isNew());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = null;
      try {
        node1 = new Node(0, node0, node0, (Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        Node.newString(2, (String) null, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node(826, 35, 100);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(143460, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(826, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(35, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isSyntheticBlock();
      assertFalse(boolean0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(143460, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(826, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(35, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setSourceEncodedPositionForTree(35);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(35, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertEquals(826, node0.getType());
      assertEquals(35, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      assertNotNull(node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      
      node_SideEffectFlags6.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[2];
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      jSTypeArray0[0] = (JSType) null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newString((-1564), "", (-1822), (-1564));
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = Node.newString("|(/6PycLQpc7nQ>");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertTrue(node1.isString());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertNotSame(node1, node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node2 = Node.newString("|(/6PycLQpc7nQ>", 31, 378);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertTrue(node2.isString());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isCall());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertEquals(378, node2.getCharno());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertEquals(0, node2.getChildCount());
      assertEquals(127354, node2.getSourcePosition());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isLabelName());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isEquivalentTo(node1, true, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertTrue(node1.isString());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node3 = new Node((-1822), node0, (-1564), 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTry());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isString());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isHook());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      String string0 = node3.getSourceFileName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNull(string0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTry());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isString());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isHook());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      boolean boolean1 = node3.isDefaultCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTry());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isString());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isHook());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      int int0 = 15;
      node3.setLineno(111);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1564), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTry());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertEquals(454656, node3.getSourcePosition());
      assertFalse(node3.isString());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIf());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertEquals((-1822), node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(111, node3.getLineno());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isHook());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      // Undeclared exception!
      try { 
        node3.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1822
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(1279);
      assertNotNull(node0);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node((-351), node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Iterable<Node> iterable0 = node1.children();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(iterable0);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = new Node(517, node1, node1, (-3759), 21);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNot());
      assertEquals(517, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isInc());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNot());
      assertEquals(517, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isInc());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node2.isDo();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(1279, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals((-351), node1.getType());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNot());
      assertEquals(517, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isInc());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newNumber((-1009.90920112));
      assertNotNull(node0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = node0.removeChildren();
      assertNull(node1);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node2 = Node.newString("A;e{_=x[GzQMN8l&16", 370, 0);
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertEquals(370, node2.getLineno());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals(1515520, node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertEquals(40, node2.getType());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      
      Node node3 = node0.useSourceInfoFromForTree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1515520, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(370, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertEquals(370, node2.getLineno());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals(1515520, node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertEquals(40, node2.getType());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.isNumber());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(1515520, node3.getSourcePosition());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isCast());
      assertEquals(370, node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.isReturn());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertSame(node0, node3);
      assertSame(node3, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node2));
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1515520, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(370, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertSame(node0, node3);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isIf();
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1515520, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(370, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertSame(node0, node3);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean1 = node0.isInc();
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1515520, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(370, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertSame(node0, node3);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean2 = node3.isSetterDef();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals(1515520, node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(370, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertEquals(370, node2.getLineno());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals(1515520, node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertEquals(40, node2.getType());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.isNumber());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(1515520, node3.getSourcePosition());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isCast());
      assertEquals(370, node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.isReturn());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertSame(node0, node3);
      assertSame(node3, node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node4 = Node.newNumber(2200.126740107684, 57, 4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      assertFalse(node4.isGetProp());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isAnd());
      assertFalse(node4.isWith());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isBreak());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isFalse());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThrow());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertEquals(39, node4.getType());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isFor());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isTry());
      assertFalse(node4.isBlock());
      assertFalse(node4.isHook());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isCase());
      assertFalse(node4.isScript());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isName());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCall());
      assertFalse(node4.isFunction());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isAdd());
      assertFalse(node4.isVoid());
      assertFalse(node4.isNew());
      assertFalse(node4.isVar());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isDo());
      assertFalse(node4.isEmpty());
      assertEquals(57, node4.getLineno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isOr());
      assertTrue(node4.isNumber());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetElem());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isCast());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isWhile());
      assertFalse(node4.isNot());
      assertEquals(233476, node4.getSourcePosition());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isString());
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3000);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(3000, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(3000, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(3000, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(3000, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(3000, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(2984, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(2984, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesThis();
      assertNotNull(node_SideEffectFlags6);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      
      node_SideEffectFlags3.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = node0.cloneTree();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean0 = node1.isCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean1 = node1.isFunction();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      int int0 = (-422);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-422));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("se", "se", (-422), (-1228));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(5479, 5479, 5479);
      Node node1 = Node.newString(51, "valueOf");
      Node node2 = new Node(112, node0, node0, node1, node1);
      Node node3 = Node.newString("valueOf");
      node2.getIndexOfChild(node0);
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node1.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node1.isArrayLit();
      node1.getQualifiedName();
      InputId inputId0 = new InputId("com.google.javascript.rhino.Node$NumberNode");
      node0.setInputId(inputId0);
      node0.setWasEmptyNode(false);
      // Undeclared exception!
      try { 
        node3.getExistingIntProp(1223);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1223
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      int int0 = 524288;
      Node node0 = Node.newNumber((double) 1230);
      Node node1 = new Node(1230, node0, node0, node0);
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int int0 = 1383;
      Node node0 = null;
      try {
        node0 = new Node(0, (Node[]) null, 1383, 1383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString(2048, "duplicate child", 2048, 2048);
      node0.setChangeTime(2033);
      node0.isFunction();
      node0.isDebugger();
      // Undeclared exception!
      try { 
        node0.getAncestor((-4096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      assertEquals(15, node_SideEffectFlags4.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 46, 115);
      node0.getAncestors();
      node0.getAncestors();
      int int0 = node0.getChildCount();
      assertEquals(188531, node0.getSourcePosition());
      assertEquals(0, int0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newNumber((-828.577146945814));
      int int0 = 799;
      node0.setType(799);
      node0.setSourceEncodedPositionForTree(799);
      int int1 = 3520;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      simpleSourceFile0.getLineOffset(57);
      node0.addSuppression((String) null);
      simpleSourceFile0.getLineOffset(50);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 0, 970);
      Node node1 = new Node(31, node0, 40, 0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setJSType((JSType) null);
      node1.getLineno();
      node1.isDec();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1038);
      node0.getSourceFileName();
      Node node1 = new Node(1038, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(16, node0, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString(28, "com.google.common.base.Predicates$InPredicate", 28, 28);
      Node node1 = node0.getLastSibling();
      node1.setLineno(36);
      node1.getSideEffectFlags();
      node1.setType(42);
      node1.setCharno(4);
      node1.hasOneChild();
      node0.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.setMutatesThis();
      node0.cloneNode();
      assertEquals(36, node0.getLineno());
  }
}
