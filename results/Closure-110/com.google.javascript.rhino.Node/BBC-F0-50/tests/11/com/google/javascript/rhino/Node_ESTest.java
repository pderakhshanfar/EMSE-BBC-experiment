/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 13:09:03 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.CharArrayWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString((-1771), "gUI{VAM`U\"t3W", (-1771), 3574);
      node0.hasOneChild();
      Node node1 = new Node(51, node0);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1391;
      int int1 = 4;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("directives");
      jSTypeArray0[0] = (JSType) templateType0;
      int int2 = 0;
      Node node0 = new Node(1, 0, 1391);
      JSType jSType0 = node0.getJSType();
      jSTypeArray0[1] = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      jSType0.matchesStringContext();
      jSTypeArray0[2] = (JSType) functionType0;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQuotedString();
      node0.isQualifiedName();
      node0.isSetterDef();
      node0.getLength();
      node0.setCharno(100);
      node0.setSourceFileForTesting(">1')W;NrO'?eRI");
      node0.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("162=6AW`\"R,Pc{7", node0, (JSType) null);
      enumType0.getElementsType();
      enumType0.isDict();
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) enumType0);
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      // Undeclared exception!
      try { 
        ImmutableList.of(templateType0, templateType1, templateType0, templateType1, templateType0, templateType1, templateType0, templateType1, templateType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString(3772, "vb{");
      node0.setSourceFileForTesting("F2 o>Eh");
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 2934;
      Node node0 = new Node(8199, (Node) null);
      int int1 = 33;
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0, node0.NO_SIDE_EFFECTS, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = new Node(12288);
      Node node1 = new Node((-1376), node0, node0);
      Node node2 = new Node(1799, node1, node1, node1, node1);
      Node node3 = new Node(1799, node2);
      Node node4 = new Node(0, node3, (-31), 536870912);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.new FileLevelJsDocBuilder();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(931, "");
      Node node1 = new Node(931, node0, node0, node0, node0);
      node1.getDirectives();
      node1.isVarArgs();
      node1.getInputId();
      node1.setDirectives((Set<String>) null);
      node1.mayMutateArguments();
      node0.setChangeTime(16384);
      node0.isTry();
      node1.setCharno(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals("");
      node0.isAssignAdd();
      node1.getString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.INFERRED_FUNCTION);
      node_SideEffectFlags0.areAllFlagsSet();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(518, nodeArray0);
      String string0 = "B%aHbni!]/pb3WwG7*3";
      boolean boolean0 = true;
      Node node1 = new Node(36, nodeArray0, 0, (-1210));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getIntProp(197);
      node1.toStringTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = (-3352);
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("7`{!y<L K.|");
      node0.setString("21lx=4lE");
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isBreak();
      Node node1 = Node.newString("21lx=4lE", 40, 13);
      node1.addChildToBack(node0);
      node1.addChildrenToBack(node0);
      node0.isString();
      node1.isEmpty();
      // Undeclared exception!
      try { 
        node0.getLastSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 12288;
      Node node0 = null;
      Node node1 = new Node(110, (Node) null, (Node) null, 75, 12288);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node1.setWasEmptyNode(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1306));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newNumber((double) (-1306));
      Node node1 = Node.newString(12, "t+Vf|4+Xs'MV9|Yt");
      Node node2 = node0.srcrefTree(node1);
      node2.getQualifiedName();
      node2.wasEmptyNode();
      Node node3 = null;
      node0.addChildAfter((Node) null, (Node) null);
      int int0 = (-2563);
      // Undeclared exception!
      try { 
        node0.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.removeChild(node1);
      int int0 = 27591;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString((-2756), "i75+'wvy'dWVJ.|x*", (-586), (-586));
      Node node1 = new Node(14, (Node[]) null, 57, 14);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(0, 0, 3008);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isNoSideEffectsCall();
      node1.getStaticSourceFile();
      node1.isAssign();
      node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0, 2282, (-1153));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = node1.copyInformationFrom(node2);
      node3.isFalse();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 0, 0);
      Node node1 = new Node(0, node0, node0, node0, 43, (-3335));
      node1.addChildToFront(node0);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'C';
      // Undeclared exception!
      try { 
        stringWriter0.append(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ")nd?tpQ6.'>l-pp";
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Node node1 = node0.cloneTree();
      node1.isOptionalArg();
      node0.isDefaultCase();
      Node node2 = node1.srcrefTree(node0);
      node0.getJsDocBuilderForNode();
      node0.isQualifiedName();
      node2.setDouble((-1100.51710271857));
      node1.getCharno();
      // Undeclared exception!
      try { 
        node1.getStaticSourceFile();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING )nd?tpQ6.'>l-pp [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(159);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node0 = Node.newNumber(0.0, (-307), 0);
      node0.setWasEmptyNode(false);
      node0.isOptionalArg();
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      Node node1 = node0.getParent();
      node0.setQuotedString();
      node1.getChangeTime();
      node1.mayMutateArguments();
      node0.isVarArgs();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(1226);
      Node node1 = new Node(1226, node0, node0, 1048576, 0);
      Node node2 = node1.removeChildAfter(node0);
      Node.newNumber((double) node2.FREE_CALL);
      int int0 = 2726;
      // Undeclared exception!
      try { 
        node1.setLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.getExistingIntProp(24);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 122;
      int int1 = 53;
      int int2 = 0;
      int int3 = 1728;
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(40, node0, node0);
      Node node2 = new Node(37, node0, node0, node1, 57, 1);
      Node node3 = null;
      try {
        node3 = new Node(int3, node0, node0, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1093, 1093, 738);
      Node node1 = new Node(0, node0, node0, node0, node0, (-1200), 50);
      Node node2 = new Node(0, node1, node1);
      Node node3 = new Node(1093, node2);
      node3.isGetElem();
      node1.isStringKey();
      Node node4 = new Node(513, node3, node1, node0, node0);
      int int0 = (-2585);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node4.setSideEffectFlags(node_SideEffectFlags1);
      String string0 = "    ";
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0);
      node1.getAncestor(4217);
      node0.detachFromParent();
      Node node2 = Node.newString(Integer.MAX_VALUE, "3ZVKk}z=z", 116, 306);
      node1.isEquivalentTo(node0);
      node1.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      InputId inputId0 = new InputId((String) null);
      node2.setInputId(inputId0);
      simpleErrorReporter0.error("3ZVKk}z=z", "Object#Key", 31, 1184);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node3.isNoSideEffectsCall();
      node1.getChildBefore(node3);
      node0.isNot();
      node0.setSourceEncodedPosition(node3.FLAG_THIS_UNMODIFIED);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0, (Node[]) null);
      int int1 = 860;
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString((String) null, (-4760), (-4760));
      int int0 = 2282;
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.MAX_COLUMN_NUMBER, int0, node0.FLAG_THIS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(1259.8, 0, 6373);
      Node node1 = new Node(2211, node0, node0, (-1425), 0);
      node1.setChangeTime(105);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(2769.93275);
      node0.getInputId();
      node0.children();
      Node node1 = new Node(0);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node2 = Node.newNumber((double) 2);
      node2.getQualifiedName();
      node0.checkTreeEqualsImpl(node2);
      node1.setSideEffectFlags(0);
      int int0 = (-2965);
      // Undeclared exception!
      try { 
        node1.setChangeTime(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements", 21, 21);
      Node node1 = new Node(21, node0);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getChangeTime();
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.isAnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString((-3995), " 94Li", 2081, 2081);
      node0.getSourceFileName();
      node0.getString();
      node0.getChangeTime();
      node0.isOptionalArg();
      node0.isAssign();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      node0.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node0.isHook();
      Node node1 = node0.getLastSibling();
      node1.isScript();
      node1.isExprResult();
      node1.getProp((-652));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("!T}a$EG$O");
      Node node1 = new Node(4095, node0, node0, node0, node0, 12, 48);
      node0.replaceChild(node1, node1);
      // Undeclared exception!
      try { 
        node1.getChangeTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getLength();
      Node node1 = new Node((-704), node0, node0, 53, 37);
      node1.isEquivalentToTyped(node0);
      Node.newString((String) null);
      node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.isParamList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(779);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-2190);
      Node node0 = Node.newString(394, (String) null, 1330, 1330);
      int int1 = 86;
      Node node1 = new Node(int0, node0, node0, node0, int1, node0.LAST_PROP);
      // Undeclared exception!
      try { 
        node1.isEquivalentToTyped(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(3008);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isNoSideEffectsCall();
      node1.getStaticSourceFile();
      node1.isAssign();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-278));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      int int0 = 738;
      Node.newNumber((double) node2.LENGTH, int0, node2.DIRECTIVES);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(518, nodeArray0);
      Node node1 = new Node(48, node0, node0, node0, node0, 47, 43);
      Node node2 = new Node((-2050), node1, node1);
      Node node3 = new Node(36, node1);
      node2.isGetElem();
      // Undeclared exception!
      try { 
        node2.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1093, 1093, 738);
      boolean boolean0 = true;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(471, nodeArray0, (-3233), (-712));
      Node node2 = nodeArray0[0].useSourceInfoIfMissingFrom(node1);
      node1.getIntProp(node2.INFERRED_FUNCTION);
      String string0 = nodeArray0[2].toStringTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      // Undeclared exception!
      try { 
        node0.setStaticSourceFile(simpleSourceFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0, 2282, (-1153));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.setString("Object#Key");
      Node node2 = new Node(node1.FLAG_GLOBAL_STATE_UNMODIFIED);
      node2.isAssignAdd();
      int int0 = 2081;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0);
      node1.getAncestor(4217);
      node0.detachFromParent();
      Node node2 = Node.newString(Integer.MAX_VALUE, "3ZVKk}z=z", 116, 306);
      node1.isEquivalentTo(node0);
      node1.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      InputId inputId0 = new InputId((String) null);
      node2.setInputId(inputId0);
      node2.mayMutateGlobalStateOrThrow();
      simpleErrorReporter0.error("3ZVKk}z=z", "Object#Key", 31, 1184);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node3.isNoSideEffectsCall();
      node1.getChildBefore(node3);
      node0.isNot();
      node2.getExistingIntProp(node1.ORIGINALNAME_PROP);
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements", 21, 21);
      node0.addSuppression("");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(2147, nodeArray0);
      node0.srcref(node1);
      nodeArray0[3].isDec();
      boolean boolean0 = false;
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node((-851), 10, 10);
      node0.getChangeTime();
      Node node1 = node0.getAncestor((-704));
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node((-851));
      int int0 = Node.MAX_COLUMN_NUMBER;
      node0.getChangeTime();
      Node node1 = Node.newNumber((double) 798);
      node0.removeChildAfter(node1);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node((-851), 10, 10);
      node0.getChangeTime();
      node0.toString(true, true, true);
      boolean boolean0 = true;
      node0.setIsSyntheticBlock(boolean0);
      int int0 = (-559);
      int int1 = (-3341);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(0, 0, 3008);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3008);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = new Node((-508));
      Node node3 = new Node(32, node0, node2);
      Node node4 = new Node(node2.CHANGE_TIME, node0, node1, node3, node0);
      Node node5 = new Node(node2.QUOTED_PROP, node2);
      int int0 = 536870912;
      int int1 = 3537;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node1.getLastSibling();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("7`{!y<L K.|");
      node0.setString("21lx=4lE");
      Node node1 = node0.cloneTree();
      node1.isOptionalArg();
      node0.isDefaultCase();
      node1.srcrefTree(node0);
      node0.getJsDocBuilderForNode();
      node1.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      double double0 = 1427.98844233;
      node2.setDouble(double0);
      Node node3 = null;
      try {
        node3 = new Node(node2.MAX_COLUMN_NUMBER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = new Node(1246);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node3 = Node.newNumber(1.2);
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node0);
      node0.setSideEffectFlags(29);
      double double0 = (-1227.6731607);
      Node node4 = Node.newNumber(double0);
      int int0 = (-1107);
      // Undeclared exception!
      try { 
        node4.setChangeTime(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1259.8, 0, 6373);
      Node node1 = new Node(2211, node0, node0, 0, 43);
      node1.setChangeTime(105);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime((-706));
      node0.isTry();
      node0.setCharno(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("$#`>o1P l^9` T@35H", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(enumType0.UNKNOWN_NAME);
      node_NodeMismatch0.equals(jSDocInfo0);
      node0.isAssignAdd();
      node0.getString();
      int int0 = (-6177);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(931, "");
      Node node1 = new Node(931, node0, node0, node0, node0);
      node1.getDirectives();
      boolean boolean0 = node1.isVarArgs();
      node1.getInputId();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node1;
      Node node2 = new Node(26, nodeArray0, 39, (-860));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType[] jSTypeArray0 = null;
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node((-2075), (-2075), (-2075));
      Node node1 = new Node(43, node0, node0);
      node0.setVarArgs(false);
      Node node2 = new Node((-2075), node0, node0, node0, node1, 42, 113);
      Node node3 = node2.useSourceInfoFrom(node1);
      int int0 = 77;
      StaticSourceFile staticSourceFile0 = node3.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node3.setStaticSourceFile(staticSourceFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 35;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(35, (Node) null, (Node) null, (Node) null, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(2411, "ajd");
      Node node1 = new Node(2411, node0, node0);
      Node node2 = new Node(2411, node1, node0, node0, 57, 44);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node1.getIntProp((-3444));
      node1.toStringTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z/a$p}k%}x-l0n?,mn", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = new Node(112, node1, node0, node0, 16, 1);
      Node node3 = new Node(30, node1, node0, node2);
      node1.useSourceInfoIfMissingFrom(node2);
      int int0 = 1791;
      Node.mergeLineCharNo(node3.FLAG_LOCAL_RESULTS, int0);
      node3.isNumber();
      node3.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = Node.newNumber((-1.0), 41, 43);
      Node node1 = new Node(43, node0);
      node1.isGetElem();
      node0.isStringKey();
      Node node2 = new Node(16, node1, node1, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(node1.FLAG_GLOBAL_STATE_UNMODIFIED);
      node_SideEffectFlags1.setMutatesThis();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      Node node1 = Node.newNumber((-1.0), 48, 31);
      node1.detachChildren();
      node1.isThrow();
      node0.isNumber();
      node1.isHook();
      Node node2 = node1.getLastSibling();
      node0.isScript();
      node0.isExprResult();
      node2.getProp(2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(3574, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(57, nodeArray0, (-1359), 51);
      node2.getIndexOfChild(node0);
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1306));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newNumber((double) (-1306));
      Node node1 = Node.newString(12, "t+Vf|4+Xs'MV9|Yt");
      Node node2 = node0.srcrefTree(node1);
      node2.getQualifiedName();
      node2.setLength(4095);
      node2.wasEmptyNode();
      Node node3 = null;
      node0.addChildAfter((Node) null, (Node) null);
      int int0 = (-2563);
      // Undeclared exception!
      try { 
        node0.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements", 21, 21);
      node0.addSuppression("");
      node0.getString();
      node0.getChangeTime();
      node0.isOptionalArg();
      Node node1 = Node.newString("?7@ELFq~5@}J`Db(*{");
      node1.isAssign();
      node1.getStaticSourceFile();
      node1.isUnscopedQualifiedName();
      node1.getJsDocBuilderForNode();
      node1.getChildCount();
      Node node2 = new Node(36, node0, node1, node1, node0, 39, 47);
      node2.detachChildren();
      node2.isThrow();
      node1.isNumber();
      node0.isHook();
      node1.getLastSibling();
      node2.isScript();
      node1.isExprResult();
      node0.getProp(12);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1093, 1093, 738);
      Node node1 = new Node(0, node0, node0, node0, node0, (-1200), 50);
      Node node2 = new Node(0, node1, node1);
      Node node3 = new Node(1093, node2);
      node0.clonePropsFrom(node3);
      node3.isGetElem();
      node1.isStringKey();
      Node node4 = new Node(513, node2, node1, node2, node0);
      int int0 = (-2585);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node4.setSideEffectFlags(node_SideEffectFlags1);
      int int1 = 2;
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node1.getLastSibling();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = Node.newString("<y);~]2F&kmC=oukg6N", 152, 8);
      Node node3 = new Node(39, node2);
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(21);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      Iterator<JSType> iterator0 = arrayDeque0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
      Node node2 = Node.newNumber(0.0);
      node0.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.setSideEffectFlags(32);
      Node.newNumber((double) node0.FLAG_NO_THROWS);
      node2.setChangeTime(node0.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeProp((-3142));
      String string0 = "#[Gyk.";
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Not declared as a constructor");
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, functionType0);
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      node0.children();
      Node.newString("`?t;p`8w#_ #8", (-2338), 1);
      Node node1 = new Node(36, node0);
      Node node2 = Node.newNumber(3935.991227025759);
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node1.getLastSibling();
      node2.getSourceFileName();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node0.isVar();
      node3.isTrue();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1306));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newNumber((double) (-1306));
      Node node1 = Node.newString(12, "t+Vf|4+Xs'MV9|Yt");
      Node node2 = node0.srcrefTree(node1);
      node2.getQualifiedName();
      node2.wasEmptyNode();
      Node node3 = null;
      node1.isHook();
      node2.setType(461845907);
      node0.addChildAfter((Node) null, (Node) null);
      int int0 = (-2563);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node3, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("5", 5847, 220);
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 55, 2);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node0.getLastSibling();
      node0.setInputId((InputId) null);
      Node node3 = new Node(147);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getProp(2219);
      node_NodeMismatch0.equals((Object) null);
      node0.isContinue();
      node2.replaceChildAfter(node1, node3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      node0.isSyntheticBlock();
      Node node1 = new Node(0, nodeArray0, 2282, (-1153));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.setString("Object#Key");
      Node node2 = new Node(node1.FLAG_GLOBAL_STATE_UNMODIFIED);
      node2.isAssignAdd();
      int int0 = 2081;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements", 21, 21);
      Node node1 = new Node(21, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Jdh+]o&Tj>HESW+W");
      jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a type name");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(simpleErrorReporter0);
      node1.isContinue();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(46, node0, node0, 525, 12);
      Node node2 = node1.getLastSibling();
      node0.isScript();
      node2.isExprResult();
      node1.getProp((-1373));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1125);
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      Node node1 = new Node(1432, node0, node0, node0, node0, 46, (-936));
      node1.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node.newString(".5");
      node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node.mergeLineCharNo(57, 4095);
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node1.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      node1.appendStringTree(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node1.getAncestor(4217);
      node0.putProp(8, (Object) null);
      node0.detachFromParent();
      Node node3 = Node.newString(Integer.MAX_VALUE, "3ZVKk}z=z", 116, 306);
      node1.isEquivalentTo(node0);
      node1.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      InputId inputId0 = new InputId((String) null);
      node3.setInputId(inputId0);
      simpleErrorReporter0.error("3ZVKk}z=z", "Object#Key", 31, 1184);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node2.isLabelName();
      node4.isNoSideEffectsCall();
      node1.getChildBefore(node4);
      node0.isNot();
      node0.setSourceEncodedPosition(node4.FLAG_THIS_UNMODIFIED);
      node3.isThis();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(0, 3008, 3032);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = Node.newNumber((double) 49, 0, 751);
      node0.detachChildren();
      node1.isThrow();
      node2.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null);
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, node0, node1, (JSType) templateType0, immutableList0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) functionType0, (JSType) templateType0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node3.isHook();
      double double0 = 0.0;
      int int0 = 51;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node1.getLastSibling();
      node2.getSourceFileName();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node3.isGetterDef();
      node3.isTrue();
      node2.isGetterDef();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(21);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime(3008);
      node0.isTry();
      Node node1 = Node.newString(2339, "$[0-9]+", 21, 65535);
      node1.setCharno(36);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      Node node2 = new Node(38, nodeArray0, 2, 3008);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      int int0 = 793;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      ArrayDeque<JSType> arrayDeque1 = new ArrayDeque<JSType>();
      Iterator<JSType> iterator0 = arrayDeque1.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(57, node1, node1, node0, node0);
      node2.addChildrenToFront(node0);
      nodeArray0[0].isLocalResultCall();
      double double0 = (-1287.107118127);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.5);
      node1.setLineno(55);
      node0.isOptionalArg();
      Node node2 = new Node(2540, nodeArray0, 0, 56);
      node2.isLocalResultCall();
      node0.isEquivalentTo(node0);
      node1.getParent();
      node1.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(8, node2);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("b", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(enumType1.UNKNOWN_NAME);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString((-1405), "");
      Node node1 = null;
      Node node2 = new Node(42, (Node) null, node0, (Node) null, (Node) null, 1297, 1);
      node2.isOnlyModifiesThisCall();
      node2.isRegExp();
      String string0 = ".5";
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2639));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 2, 55, 31);
      Node node2 = new Node(3032, node0);
      node0.isGetElem();
      node1.isStringKey();
      Node node3 = new Node(16, 52, 55);
      Node node4 = new Node(54, node3, node1, node1, node2);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesThis();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      int int0 = 46;
      int int1 = (-128);
      Node node5 = new Node(int0, node3, node2, node4.NO_SIDE_EFFECTS, int1);
      node4.checkTreeEquals(node1);
      int int2 = 38;
      int int3 = 112;
      // Undeclared exception!
      try { 
        node5.putIntProp(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString((-5050), "g7kAbkuWDwW7-Hxb\"", 97, 12);
      Node node1 = node0.cloneTree();
      node0.getDirectives();
      node0.isDec();
      node0.removeProp(525);
      node1.setSideEffectFlags(391);
      node0.isThrow();
      node1.useSourceInfoFrom(node0);
      int int0 = 42;
      int int1 = 56;
      Node node2 = node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node2.getSourceFileName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -5050
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString(409, "`8>", 356, 356);
      node0.setChangeTime((-3228));
      node0.setCharno(356);
      node0.isCase();
      int int0 = 1194;
      node0.setSideEffectFlags((-285));
      Node node1 = new Node(int0);
      node0.isEquivalentToTyped(node1);
      node0.isSyntheticBlock();
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.isNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 409
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("7`{!y<L K.|");
      node0.setString("7`{!y<L K.|");
      node0.isNoSideEffectsCall();
      node0.getChangeTime();
      node0.isOptionalArg();
      Node node1 = Node.newString("");
      node1.isAssign();
      node0.getStaticSourceFile();
      node1.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      Node node2 = new Node(10, node1, node0, node1, node1, (-1), 2756);
      node1.detachChildren();
      node1.isThrow();
      node1.isNumber();
      node1.isHook();
      Node node3 = node2.getLastSibling();
      node1.getDirectives();
      node3.setDirectives((Set<String>) null);
      node0.isScript();
      node0.isExprResult();
      node2.getProp(57);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(1226, 1226, 1226);
      Node node1 = new Node(1226, node0, node0, 1048576, 54);
      Node node2 = new Node(32, node1, 0, 57);
      Node node3 = Node.newNumber((double) 50);
      node1.setLineno(2726);
      node1.isOptionalArg();
      Node node4 = new Node(57, node0, node2, node1, 30, 39);
      node4.addChildToFront(node3);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 101;
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.5);
      node1.setLineno(55);
      node0.isOptionalArg();
      Node node2 = new Node(56, nodeArray0, 39, 133);
      node0.isLocalResultCall();
      Node node3 = new Node(1641, node1, (-2640), 54);
      node1.isEquivalentTo(node3);
      node0.isOptionalArg();
      Node node4 = node0.getParent();
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      JSType[] jSTypeArray0 = null;
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      Node node6 = new Node(node4.JSDOC_INFO_PROP, node5);
      String string0 = "+ntFvI'&*w3^2y-";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      String string1 = "A-Bl1xl&R@";
      EnumType enumType2 = jSTypeRegistry0.createEnumType(string1, node4, enumType1);
      // Undeclared exception!
      try { 
        enumType2.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isBlock();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node1.getLastSibling();
      node2.getSourceFileName();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node0.isVar();
      node3.isTrue();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements", 21, 21);
      node0.addSuppression("");
      node0.getString();
      node0.getChangeTime();
      node0.isOptionalArg();
      Node node1 = Node.newString("?7@ELFq~5@}J`Db(*{");
      node1.isAssign();
      node1.getStaticSourceFile();
      node0.isLocalResultCall();
      node1.isEquivalentTo(node0);
      node0.getParent();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node((-5050), node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Element", (Node) null, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      ObjectType objectType0 = enumElementType1.getParentScope();
      Map<TemplateType, JSType> map0 = null;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, map0);
      jSTypeRegistry1.createEnumType(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node2, templatizedType0);
      // Undeclared exception!
      try { 
        enumType0.toMaybeEnumType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = new Node(1246);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node3 = Node.newNumber(1.2);
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node0);
      node3.detachChildren();
      node1.isThrow();
      node0.isNumber();
      node3.isHook();
      Node node4 = node2.getLastSibling();
      node0.isScript();
      node3.isExprResult();
      node4.getProp(30);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node((-1614));
      Node node2 = new Node(57);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node2.isEquivalentToTyped(node3);
      node2.isSyntheticBlock();
      Node node4 = new Node(48, node1, 40, 4771);
      node4.setQuotedString();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(409, "`8>", 356, 356);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(42, node0, node0, 2, 30);
      Node node2 = node0.getLastSibling();
      Node node3 = Node.newNumber((double) 0, 1, 2);
      node3.isScript();
      node0.isExprResult();
      node2.getProp(39);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      Node node1 = new Node((-1553), node0, node0, node0, 4771, (-1449));
      node0.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      Node.mergeLineCharNo(124, 52);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags5.clearSideEffectFlags();
      node1.isString();
      node1.isInc();
      node2.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"d{h(qN)n");
      node0.appendStringTree(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      node0.setChangeTime(1432);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isInc();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      Node node1 = Node.newNumber((double) 4095, (-1210), 4095);
      node0.detachChildren();
      node0.detachFromParent();
      node1.isThrow();
      node1.isNumber();
      // Undeclared exception!
      try { 
        node1.isHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(Integer.MAX_VALUE, "");
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PUBLIC;
      node0.putProp(86, jSDocInfo_Visibility0);
      node0.detachFromParent();
      String string0 = "?7@ELFq~5@}J`Db(*{";
      int int0 = 409;
      int int1 = (-3532);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1093, 1093, 738);
      Node node1 = new Node(0, node0, node0, node0, node0, (-1200), 50);
      Node node2 = new Node(0, node1, node1);
      Node node3 = new Node(1093, node2);
      node0.clonePropsFrom(node3);
      node3.isGetElem();
      node1.isStringKey();
      node1.getSourceOffset();
      Node node4 = new Node(513, node2, node1, node2, node0);
      InputId inputId0 = null;
      node1.setInputId(inputId0);
      node1.checkTreeEqualsImpl(node4);
      node4.isFalse();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node1.EMPTY_BLOCK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("R;:Bqr91Ui[/];(", (-514), 509);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      Node node1 = new Node(1432, node0, node0, node0, node0, 46, (-936));
      node1.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node node2 = Node.newString(".5");
      node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node.mergeLineCharNo(57, 4095);
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node1.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      node2.isSwitch();
      node1.appendStringTree(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = (-1688);
      Node node0 = new Node((-1688));
      Node node1 = new Node((-1688), (Node) null, (Node) null, (Node) null, node0);
      int int1 = (-1757);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(3571, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber((-3090.054833892));
      node3.removeFirstChild();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = new Node(11, 37, 3179);
      Node node1 = new Node(11, node0, node0, node0, 15, 47);
      node1.hasOneChild();
      Node node2 = new Node(88, node1);
      Node node3 = new Node(50, node2, node0, node1, node0);
      Node node4 = node3.useSourceInfoFrom(node0);
      Node node5 = node4.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = null;
      node3.getIndexOfChild(node6);
      node3.toString();
      node5.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(3468, 128, 8);
      node0.setChangeTime(53);
      Node.newNumber((double) 53, 30, 124);
      node1.getQualifiedName();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      Node node1 = new Node(1432, node0, node0, node0, node0, 46, (-936));
      node1.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node node2 = Node.newString(".5");
      node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node1.setString("<e T");
      Node node3 = new Node(node0.INPUT_ID);
      node3.isAssignAdd();
      node3.getStaticSourceFile();
      node2.isAssign();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1432
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0, 2282, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      Node.mergeLineCharNo(114, 1774);
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node1.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Object#Element");
      node0.appendStringTree(charBuffer0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      node0.children();
      Node node1 = Node.newString("`?t;p`8w#_ #8", (-2338), 1);
      Node node2 = new Node(36, node0);
      node1.isOr();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(14, 3008, 3032);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(0, 3008, 3032);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isNoSideEffectsCall();
      node1.getStaticSourceFile();
      node1.isAssign();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node((-1614));
      Node node2 = new Node(57);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node2.isEquivalentToTyped(node3);
      node2.isSyntheticBlock();
      Node node4 = new Node(48, node1, 40, 4771);
      node3.isContinue();
      node1.replaceChildAfter(node4, node4);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("5", 47, 220);
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 55, 2);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      node0.getLastSibling();
      node0.setInputId((InputId) null);
      Node node2 = new Node(147);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getProp(2219);
      node_NodeMismatch0.equals((Object) null);
      node1.setQuotedString();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      Node node1 = new Node(1432, node0, node0, node0, node0, 46, (-936));
      node1.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node node2 = Node.newString(".5");
      Node node3 = node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node.mergeLineCharNo(57, 4095);
      node0.checkTreeEqualsImpl(node3);
      node2.setSideEffectFlags(1);
      double double0 = (-1.0);
      Node.newNumber(double0);
      node1.setChangeTime(node3.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(21);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      Iterator<JSType> iterator0 = arrayDeque0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
      Node.newNumber(0.0);
      node0.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node1.isInc();
      node1.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Object#Element");
      node1.isSwitch();
      node1.appendStringTree(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(29, node0);
      node1.isGetElem();
      node0.isStringKey();
      Node node2 = new Node(4502, node1, node0, node0, node1);
      int int0 = 14;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = Node.newNumber((-1.0), 41, 43);
      Node node1 = new Node(4, node0, node0, 41, 1756);
      Node node2 = node1.getLastSibling();
      node2.isScript();
      node0.isExprResult();
      node2.getProp(2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = Node.newNumber((-1.0), 2458, 2239);
      Node node1 = new Node(1637, node0);
      node0.isGetElem();
      node0.isStringKey();
      Node node2 = new Node(15, node1, node1, node0, node1);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(node1.COLUMN_BITS);
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-651.456));
      node0.cloneTree();
      node0.srcrefTree((Node) null);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("5", 5847, 220);
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 55, 2);
      node1.setVarArgs(true);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node0.getLastSibling();
      node0.setInputId((InputId) null);
      Node node3 = new Node(147);
      Node node4 = Node.newString(8199, "XuI+PUT0jKT", 738, 4095);
      node4.isSyntheticBlock();
      Node node5 = new Node(4095, node2, 761, 113);
      node5.isContinue();
      node5.replaceChildAfter(node2, node2);
      node0.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 0, 0, 0);
      nodeArray0[0] = node0;
      node0.isRegExp();
      Node node1 = new Node(32, nodeArray0, 4217, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.setString("Object#Key");
      int int0 = (-307);
      Node node2 = new Node(int0);
      node2.isAssignAdd();
      // Undeclared exception!
      try { 
        nodeArray0[0].getStaticSourceFile();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(159);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node0 = Node.newNumber(0.0, (-307), 0);
      node0.toStringTree();
      Node node1 = Node.newString("?h8&TA}/TJ3^o@( sfZ", 41, 1);
      Node node2 = new Node(841, node1);
      node0.isOr();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      Node node1 = new Node(37, node0, node0, node0, (-1861), 56);
      node1.setWasEmptyNode(false);
      node0.isOptionalArg();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node0.getParent();
      node0.setQuotedString();
      node0.getChangeTime();
      node0.getString();
      node3.mayMutateArguments();
      node2.isVarArgs();
      node1.setQuotedString();
      node1.isIf();
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isBlock();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 57);
      node0.getQualifiedName();
      node1.checkTreeEqualsImpl((Node) null);
      node0.detachChildren();
      node0.isThrow();
      // Undeclared exception!
      try { 
        node0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1861;
      Node node0 = Node.newString(3574, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node0.getDouble();
      int int1 = 3784;
      Node[] nodeArray0 = new Node[3];
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(3574, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(2129, node0);
      Node[] nodeArray0 = new Node[1];
      node1.isEquivalentToShallow(node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(347, nodeArray0, 15, (-1304));
      node2.getIndexOfChild(node1);
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber((-136.59076667585));
      Node node1 = Node.newString(43, "MOD");
      node0.setType((-881));
      node0.addChildToBack(node1);
      node0.getIndexOfChild(node1);
      node0.clonePropsFrom(node1);
      node1.getDirectives();
      node0.isOptionalArg();
      node0.getChildAtIndex(42);
      node0.getExistingIntProp(node1.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 36;
      Node node0 = new Node(116, 64, 36);
      node0.setDouble(64);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "set2";
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isBlock();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 57);
      node0.getQualifiedName();
      Node node2 = null;
      node0.addChildrenToBack((Node) null);
      node1.getChildBefore(node0);
      // Undeclared exception!
      try { 
        node1.isSwitch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      node0.children();
      Node node1 = Node.newString("`?t;p`8w#_ #8", (-2338), 1);
      Node node2 = new Node(36, node0);
      node2.setLineno(42);
      node0.getChangeTime();
      node1.getBooleanProp(10);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(14, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = Node.newNumber((double) 50);
      node1.addChildrenToBack(node2);
      Node node3 = Node.newNumber((double) 30);
      node3.isString();
      node0.isEmpty();
      node1.getLastSibling();
      node3.getSourceFileName();
      node3.setInputId((InputId) null);
      Node node4 = new Node((-5050), node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node2, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      String string0 = "is_dispatcher";
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(string0);
      node3.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString((-5050), "g7kAbkuWDwW7-Hxb\"", 97, 12);
      Node node1 = node0.cloneTree();
      node0.getDirectives();
      node0.isDec();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(52, node0, node0, node0, node1);
      node1.checkTreeEqualsImpl(node0);
      node2.isFalse();
      node2.setSideEffectFlags((-858));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node((-1614));
      Node node2 = new Node(57);
      node2.isEquivalentToTyped(node2);
      node2.isSyntheticBlock();
      Node node3 = new Node(48, node1, 40, 4771);
      node0.isContinue();
      node1.replaceChildAfter(node3, node3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-1431), (Node) null, (-1431), 97);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.useSourceInfoIfMissingFrom(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.isOr();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 102;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "cannot store more than MAX_VALUE elements";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cannot store more than MAX_VALUE elements");
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 40, 102);
      Node node1 = null;
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.type = int0;
      // Undeclared exception!
      try { 
        node0.isStringKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString(3571, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node0.isFromExterns();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber((-3090.054833892));
      node3.removeFirstChild();
      node0.checkTreeEquals(node1);
      int int0 = 248;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      node_SideEffectFlags0.valueOf();
      int int1 = 44;
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(14, 3008, 3008);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(2527, node0);
      node0.addChildrenAfter(node1, node1);
      node0.isIf();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      node0.isWith();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(3571, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      Node node2 = new Node(2, node1);
      node2.isAssign();
      node2.useSourceInfoIfMissingFrom(node1);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      JSType jSType0 = null;
      node0.isInc();
      String string0 = "";
      int int0 = (-1564);
      Node node1 = new Node((-159), node0, node0);
      node1.addChildToBack(node0);
      double double0 = 1.0;
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(46, node0, node0, (-3987), 12);
      node1.getLastSibling();
      node0.isScript();
      node0.isAdd();
      node1.getProp((-1373));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(55, nodeArray0, 108, 16);
      node0.copyInformationFrom(node1);
      Node node2 = Node.newNumber((double) 4095, (-1363), (-1068));
      node0.getCharno();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node0.getString();
      node0.isOnlyModifiesThisCall();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 0, 0);
      Node node1 = new Node(0, node0, node0, 40, 31);
      node1.copyInformationFromForTree(node0);
      node1.addChildToFront(node0);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'C';
      // Undeclared exception!
      try { 
        stringWriter0.append(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node.extractCharno((-194));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString("cannot store more than MAX_VALUE elements");
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("cannot store more than MAX_VALUE elements", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node1 = enumElementType1.getPropertyNode(templateType0.EMPTY_TYPE_COMPONENT);
      Node node2 = new Node(node1.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        node1.clonePropsFrom(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      node1.isOr();
      node1.isWhile();
      node1.isEquivalentTo(node0, false, true, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      node1.getChildBefore(node2);
      node1.isNot();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node((-1614));
      node0.isEquivalentToTyped(node0);
      node0.isSyntheticBlock();
      Node node2 = new Node(48, node1, 40, 4771);
      node2.isTypeOf();
      node1.replaceChildAfter(node2, node2);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(36, node0, node0, node0);
      Node node2 = new Node(38);
      node0.checkTreeEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isNull();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString(3571, "", 1861, 1861);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node0.isFromExterns();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber(0.0);
      node0.isStringKey();
      node3.getSourceOffset();
      Node node4 = new Node(0, node2, node3, node2, node1);
      node4.checkTreeEqualsImpl(node0);
      node4.isFalse();
      node1.setSideEffectFlags(node2.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node((-1614));
      Node node2 = new Node(57);
      node2.isEquivalentToTyped(node2);
      node2.isSyntheticBlock();
      Node node3 = new Node(48, node1, 40, 4771);
      node0.isContinue();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("EMPTY", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnPropertyJSDocInfo("Unknown class name");
      node2.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString((-3117), "?7@ELFq~5@}J`Db(*{", 3574, (-91));
      node0.hasOneChild();
      Node node1 = new Node((-1505), node0);
      node0.getDouble();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      int int0 = 864;
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node1 = new Node(113, 48, (-1363));
      node1.isArrayLit();
      node0.setIsSyntheticBlock(true);
      Node.mergeLineCharNo(2, (-2425));
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node1.isInc();
      node0.isLabelName();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 353, 49);
      CharBuffer.wrap((CharSequence) charBuffer0);
      node1.appendStringTree(charBuffer0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(4095);
      Node node1 = new Node(46);
      node0.getStaticSourceFile();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString("<y);~]2F&kmC=oukg6N", 29, 30);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      node1.getChildBefore(node2);
      node1.isNot();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      Node node1 = new Node(26, node0, node0, node0);
      Node node2 = new Node(3384);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Object#Key", "Object#Key", 117, 1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isNull();
      node0.getSourcePosition();
      node0.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(36, node0, node0, node0);
      Node node2 = new Node(38);
      node0.checkTreeEqualsImpl(node2);
      node2.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      node0.isWith();
      Node node3 = new Node(30, node1, node2);
      node3.isEquivalentTo(node2, false, true, false);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      node0.isThrow();
      node0.isNumber();
      node0.isHook();
      Node node1 = node0.getLastSibling();
      Node node2 = node0.detachFromParent();
      node1.isScript();
      node2.isExprResult();
      // Undeclared exception!
      try { 
        node0.getProp(node1.LAST_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      node0.isOr();
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.setOptionalArg(true);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      node0.isOr();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)113;
      node0.getAncestor((byte)37);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)51;
      node0.mayMutateGlobalStateOrThrow();
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.isEquivalentTo((Node) null, true, true, true);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      node0.isOr();
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.setOptionalArg(true);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(46, node0, node0, (-3987), 12);
      node1.getLastSibling();
      node0.isScript();
      node0.isAdd();
      node0.cloneNode();
      node1.getProp((-1373));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(132);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.areAllFlagsSet();
      int int0 = 239;
      Node node0 = new Node((-1663), 239, 1488);
      Node node1 = new Node(3179, node0, node0, node0, 4405, 3179);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      jSType0.isSubtype(jSType1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.hasOneChild();
      Node node3 = new Node(54, node2);
      Node node4 = new Node(1, node2, node0, node0, node1);
      node4.useSourceInfoFrom(node0);
      Node node5 = node4.useSourceInfoIfMissingFromForTree(node3);
      node5.setSideEffectFlags(int0);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = new Node(11, 37, 3179);
      node0.cloneTree();
      Node node1 = new Node(11, node0, node0, node0, 15, 47);
      node1.hasOneChild();
      Node node2 = new Node(88, node1);
      Node node3 = new Node(50, node2, node0, node1, node0);
      Node node4 = node3.useSourceInfoFrom(node0);
      node4.setSideEffectFlags(node_SideEffectFlags3);
      node4.useSourceInfoIfMissingFromForTree(node0);
      int int0 = 53;
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node node0 = new Node(36, 44, 115);
      node0.setDouble(44);
      String string0 = "iQ=-";
      int int0 = 115;
      int int1 = (-243);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = new Node(1246);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node3 = Node.newNumber(1.2);
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node0);
      node3.detachChildren();
      node1.isThrow();
      node0.isNumber();
      node3.getAncestors();
      node3.isHook();
      Node node4 = node2.getLastSibling();
      node0.isScript();
      node3.isExprResult();
      node4.getProp(30);
      Node.newString(112, "6OaU9(7m&PY5H!`T", 15, (-268));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(6, (Node) null, (Node) null);
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?7@ELFq~5@}J`Db(*{");
      Node node0 = Node.newString("?7@ELFq~5@}J`Db(*{");
      node0.getSourceOffset();
      node0.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node1 = new Node(53);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("DEBUGGER", node1, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) enumType1, (List<JSType>) arrayList0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSTypeArray0[0], (JSType) enumElementType0, (JSType) enumType0, (JSType) functionType0, (JSType) objectType0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) enumElementType0, immutableList0);
      jSTypeArray0[1] = (JSType) templatizedType0;
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      templateTypeMapReplacer0.caseTemplateType((TemplateType) null);
      jSTypeArray0[2] = null;
      FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
      jSTypeArray0[3] = (JSType) functionType1;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildToFront(node2);
      node0.putBooleanProp((-1), false);
      node0.isOnlyModifiesThisCall();
      node0.isAssign();
      Node.extractCharno(57);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber(1259.8, 0, 6373);
      Node node1 = new Node(39, node0, 1, 40);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isGetElem();
      node0.isInstanceOf();
      node1.isTypeOf();
      node0.isStringKey();
      Node node2 = new Node(54, node0, node0, node0, node0);
      Node node3 = new Node(node0.OPT_ARG_NAME, node0);
      node3.isOr();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-23), (-23), (-23));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = new Node(51);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(2537);
      node0.isWith();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isBlock();
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 57);
      node0.getQualifiedName();
      node1.checkTreeEqualsImpl(node1);
      node0.isThrow();
      node0.isNumber();
      node0.isHook();
      Node node2 = new Node(49, node1, node0, 2646, 77);
      node2.getChangeTime();
      node2.isOr();
      Node.newString((String) null, 47, 32);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(3468, 128, 8);
      Node node3 = node2.getLastSibling();
      node0.detachFromParent();
      node3.isScript();
      Node.newNumber(1951.61690075, 35, 1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 43);
      node0.isStringKey();
      node0.getSourceOffset();
      node0.isNull();
      node0.getSourcePosition();
      node0.wasEmptyNode();
      node0.isVarArgs();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = new Node(392);
      node0.isEquivalentToTyped(node1);
      node1.srcref(node0);
      node0.isSyntheticBlock();
      Node node2 = new Node((-196), node0, 126, 32);
      node1.isTypeOf();
      Node node3 = Node.newString(48, "Object#Element", 4095, 29);
      node0.replaceChildAfter(node1, node3);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 77;
      Node[] nodeArray0 = new Node[9];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<BooleanType> arrayList0 = new ArrayList<BooleanType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      nodeArray0[0] = node0;
      Node node1 = new Node(8, node0, node0);
      nodeArray0[1] = node1;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      nodeArray0[2] = null;
      String string0 = "!z";
      Node node2 = Node.newString(53, "!z");
      nodeArray0[3] = node2;
      Node node3 = null;
      try {
        node3 = new Node(12, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = new Node(1246);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node3 = Node.newNumber(1.2);
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node0);
      node3.detachChildren();
      node1.isThrow();
      node0.isNumber();
      node3.isHook();
      Node node4 = node2.getLastSibling();
      node0.isScript();
      node3.isExprResult();
      node4.getProp(30);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node2.isAssignAdd();
      node0.getStaticSourceFile();
      node2.isAssign();
      node1.useSourceInfoIfMissingFrom(node0);
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(46, node0, node0, (-3987), 12);
      Node node2 = node1.getLastSibling();
      node0.isScript();
      node1.isScript();
      node2.isExprResult();
      node2.getProp(12);
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node1.isGetterDef();
      node0.isInc();
      node1.isLocalResultCall();
      Node node3 = Node.newNumber((double) 8);
      node3.getQualifiedName();
      node2.checkTreeEqualsImpl(node1);
      node2.isThrow();
      node1.isNumber();
      node2.isHook();
      Node node4 = new Node(2, node0, node0, 39, 2);
      node2.getChangeTime();
      // Undeclared exception!
      try { 
        node0.isOr();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node1.isHook();
      Node node2 = new Node(49, node1, node0, 57, 16);
      node2.getLastSibling();
      Node node3 = Node.newString(113, "", 52, (-1808));
      node3.isScript();
      node1.isAdd();
      node1.getProp(37);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      Node node1 = new Node((-1614));
      node0.isEquivalentToTyped(node0);
      node0.getProp(39);
      node0.isWith();
      node0.isNull();
      node1.isWith();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node0.getInputId();
      node0.children();
      Node node2 = new Node(1246);
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      Node node3 = Node.newNumber(1.2);
      Node node4 = Node.newString(57, "com.google.common.collect.Iterators$12", (-1004), 1588);
      node3.addChildBefore(node0, node4);
      node3.checkTreeEqualsImpl(node0);
      node3.detachChildren();
      node1.isThrow();
      node0.isNumber();
      node3.isHook();
      node2.getLastSibling();
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQuotedString();
      node0.isQualifiedName();
      node0.isSetterDef();
      node0.getLength();
      node0.setCharno(50);
      Node node1 = new Node(40);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(36, node1, node0, node0, node0);
      node0.getAncestor(148);
      String string0 = node2.checkTreeEquals((Node) null);
      node1.isGetProp();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node_FileLevelJsDocBuilder0.append(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      node0.isOr();
      node0.isDo();
      node0.getSourceFileName();
      node0.setInputId((InputId) null);
      Node node1 = new Node((-325));
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("k");
      jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Not declared as a type name");
      Node node2 = new Node(155, node0, node1, node1, node1, 353, 57);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("<#}-z*BGHPx,I-Un", node2, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType0 = enumElementType1.getPrimitiveType();
      node_NodeMismatch0.equals(jSType0);
      node2.isVar();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString((-604), "GREATEST_FUNCTION_TYPE");
      node0.putIntProp(155, 120);
      Node node1 = new Node((-604), node0, node0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.newString("cannot store more than MAX_VALUE elements");
      node1.isRegExp();
      node0.isOptionalArg();
      node1.isNoSideEffectsCall();
      node0.putBooleanProp(16, false);
      Node node2 = new Node(16, 16, 124);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("c&)^n'Yq.zi4$T:");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber(57.0, 102, 16);
      node0.getDouble();
      Node node1 = node0.getChildBefore((Node) null);
      node0.setWasEmptyNode(true);
      node0.addSuppression("cannot store more than MAX_VALUE elements");
      Node.newString(352, "\n\nTree2:\n");
      node0.addChildrenToFront((Node) null);
      Node node2 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      node0.replaceChildAfter(node2, node2);
      String string0 = "IsEqualTo(";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      int int0 = 22;
      // Undeclared exception!
      try { 
        node0.putIntProp(node1.FLAG_ARGUMENTS_UNMODIFIED, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(518, nodeArray0);
      Node node1 = new Node(48, node0, node0, node0, node0, 47, 43);
      Node node2 = new Node((-2050), node1, node1);
      node2.addChildAfter(node1, node1);
      Node node3 = new Node(node1.QUOTED_PROP, node1);
      // Undeclared exception!
      try { 
        node2.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 43);
      node0.isStringKey();
      int int0 = Node.OPT_ARG_NAME;
      node0.isSyntheticBlock();
      Node node1 = new Node(12, node0, 4095, 1204);
      node1.isContinue();
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      node1.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      node1.getChildBefore(node0);
      node1.isNot();
      Node node2 = Node.newNumber((double) 57, 740, 5);
      Node node3 = new Node(434, (-1), 4431);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isIf();
      node1.isDebugger();
      node2.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags6.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 34);
      node0.isStringKey();
      node0.getSourceOffset();
      Node node1 = new Node(42, node0, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      node1.isFalse();
      node1.removeFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = (JSType) null;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templatizedType0, jSTypeArray0[0], jSTypeArray0[4], jSTypeArray0[2], jSTypeArray0[0]);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node((-604), (-604), (-604));
      node0.putIntProp(155, 120);
      Node node1 = new Node((-604), node0, node0);
      node1.hasChild(node1);
      Node.newString("cannot store more than MAX_VALUE elements");
      node1.isRegExp();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node1.isNoSideEffectsCall();
      node0.putBooleanProp(16, false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("c&)^n'Yq.zi4$T:");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("K%OA2m)}_");
      node_FileLevelJsDocBuilder0.append("p#2dO");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isArrayLit();
      JSType[] jSTypeArray0 = new JSType[7];
      String string0 = "?7@ELFq~5@}J`Db(*{";
      JSType.toMaybeTemplateType((JSType) null);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
      TemplatizedType templatizedType1 = templatizedType0.toMaybeTemplatizedType();
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, templatizedType1);
      TemplatizedType templatizedType2 = JSType.toMaybeTemplatizedType(jSType0);
      jSTypeArray0[0] = (JSType) templatizedType2;
      String string1 = "PUBLIC";
      int int0 = 1089;
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString((-604), "GREATEST_FUNCTION_TYPE");
      node0.putIntProp(155, 120);
      Node node1 = new Node((-604), node0, node0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node2 = Node.newString("cannot store more than MAX_VALUE elements");
      node1.isRegExp();
      node0.isOptionalArg();
      node1.isNoSideEffectsCall();
      node0.putBooleanProp(16, false);
      Node node3 = new Node(16, 16, 124);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.new FileLevelJsDocBuilder();
      node0.isNE();
      node1.isSyntheticBlock();
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node1.isGetterDef();
      node0.isInc();
      node1.isLocalResultCall();
      Node node3 = Node.newNumber((double) 8);
      node3.getQualifiedName();
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node0);
      node1.detachChildren();
      node0.isThrow();
      node2.isNumber();
      node0.isHook();
      Node node4 = node1.getLastSibling();
      node4.isScript();
      node2.isExprResult();
      node3.getProp(49);
      node3.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString((-604), "GREATEST_FUNCTION_TYPE");
      node0.putIntProp(155, 120);
      Node node1 = new Node((-604), node0, node0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.newString("cannot store more than MAX_VALUE elements");
      node1.isRegExp();
      node0.isOptionalArg();
      Node node2 = new Node(56, 28, 46);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isIf();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeRegistry0.resolveTypesInScope(objectType0);
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node0.isNoSideEffectsCall();
      node1.putBooleanProp((-2992), false);
      Node node2 = new Node(1, 4095, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("`NQl)nwmr0j");
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(36);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry1.createTemplateType("Object#Element");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry2.getGreatestSubtypeWithProperty((JSType) null, "Not declared as a constructor");
      node_NodeMismatch0.equals((Object) null);
      node1.isVar();
      node1.isTrue();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      node1.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(50);
      Node node2 = node1.getChildBefore(node0);
      Node node3 = new Node(324, node1, node1, node0);
      Node node4 = new Node(node3.STATIC_SOURCE_FILE);
      node4.checkTreeEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter1 = null;
      try {
        simpleErrorReporter1 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node1.isHook();
      Node node2 = new Node(49, node1, node0, 57, 16);
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = Node.newString(113, "", 52, (-1808));
      node4.isScript();
      node2.isOnlyModifiesThisCall();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 6;
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("", 37, 4647);
      int int1 = 83;
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = null;
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newNumber(1860.286877294);
      node0.setLineno((-1760));
      Node node2 = Node.newNumber((double) 29);
      node2.isLocalResultCall();
      node1.isEquivalentTo(node2);
      Node node3 = node1.getParent();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node4.getStaticSourceFile();
      node4.isFromExterns();
      Node node5 = new Node(4, (Node) null);
      node5.isWith();
      node2.isOnlyModifiesThisCall();
      node3.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node5.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("StringNode: str is null", "cannot store more than MAX_VALUE elements", 226, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.getAncestor(15);
      Node.newString(4095, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      node0.getChangeTime();
      Node.extractLineno(8);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isIf();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isReturn();
      Node node2 = node1.getLastSibling();
      node2.getSourceFileName();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node_NodeMismatch0.equals(jSType0);
      node3.isGetterDef();
      node3.isTrue();
      node2.isGetterDef();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 2, 2, 2);
      nodeArray0[0] = node0;
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      node0.setDirectives(hashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime((-706));
      node0.isTry();
      node0.setCharno(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isStringKey();
      node0.getSourceOffset();
      Node node1 = new Node((-1), node0, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isEquivalentTo(node0, true, true, false);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node1 = new Node(113, 48, (-1358));
      node1.isArrayLit();
      node0.setIsSyntheticBlock(true);
      int int0 = Node.INPUT_ID;
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node1.setSourceEncodedPositionForTree(12);
      node1.isInc();
      node0.isLabelName();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[0] = 'n';
      node0.isAdd();
      node0.getProp(4095);
      node0.isLabelName();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node((-15));
      Node node1 = new Node(39, node0, 1, 40);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isGetElem();
      node0.isInstanceOf();
      node1.isTypeOf();
      node0.isStringKey();
      Node node3 = new Node(54, node0, node0, node0, node0);
      Node node4 = new Node(node0.OPT_ARG_NAME, node0);
      node4.isOr();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "<y);~]2F&kmC=oukg6N";
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.getInputId();
      node0.siblings();
      Node node1 = new Node(1246);
      node0.addChildrenToFront(node0);
      node0.isLocalResultCall();
      node0.isCase();
      Node node2 = new Node((-46));
      Node node3 = new Node(0);
      node3.isEquivalentToTyped(node0);
      node0.isQuotedString();
      Node node4 = new Node(98, node0, 153, 50);
      int int0 = 35;
      int int1 = 2;
      Node node5 = Node.newString(int0, string0, int1, node2.DECR_FLAG);
      node5.isContinue();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*THl8A=9");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(668, node0);
      node1.isFunction();
      node1.children();
      String string0 = "b![C8";
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      Node node2 = enumElementType0.getPropertyNode(functionType0.NOT_A_CLASS);
      Node node3 = null;
      try {
        node3 = new Node(node0.FLAG_NO_THROWS, node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'B?+,nED}F?;Pt%)M");
      Node node0 = Node.newString("R %", 3130, 3130);
      Node node1 = new Node((-4255), node0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node2 = node1.removeChildren();
      node1.setType(29);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.checkTreeEquals(node1);
      node0.wasEmptyNode();
      Node node3 = Node.newNumber(0.0, (-4255), (-1553));
      node3.setWasEmptyNode(false);
      node0.isDebugger();
      node3.getChildCount();
      Node node4 = node2.cloneNode();
      node3.srcrefTree(node1);
      node4.getInputId();
      node2.setSourceEncodedPositionForTree(98);
      node1.setLineno(40);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(29, node0);
      node1.isGetElem();
      node0.isNew();
      Node node2 = new Node(4502, node1, node0, node0, node1);
      int int0 = 14;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("5", 5847, 220);
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 55, 2);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node0.getLastSibling();
      node0.setString("");
      Node node3 = new Node(42);
      node3.isAssignAdd();
      node2.getStaticSourceFile();
      node2.getSourcePosition();
      Node node4 = new Node(154, node2);
      node4.isVarArgs();
      node3.isNE();
      node3.hasChildren();
      node1.getExistingIntProp(node2.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node((-137), node0, node0, 166, 166);
      Node node2 = Node.newNumber((double) 31, 37, 51);
      node1.useSourceInfoFrom(node2);
      Node node3 = node0.getLastSibling();
      node1.isScript();
      node3.isExprResult();
      node3.getProp(8);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[5];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node2 = new Node((-1909), (-1165), (-3678));
      node0.isAdd();
      node2.getProp((-2253));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node1 = new Node(113, 48, (-1363));
      node1.isArrayLit();
      node0.setIsSyntheticBlock(true);
      Node.mergeLineCharNo(2, (-2425));
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node1.isInc();
      node0.isLabelName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'B?+,nED}F?;Pt%)M");
      Node node0 = Node.newString("R %", 3130, 3130);
      Node node1 = new Node((-4255), node0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node2 = node1.removeChildren();
      node1.setType(29);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.checkTreeEquals(node1);
      node0.wasEmptyNode();
      Node node3 = Node.newNumber(0.0, (-4255), (-1553));
      node3.setWasEmptyNode(false);
      node0.isDebugger();
      node3.getChildCount();
      Node node4 = node2.cloneNode();
      node3.srcrefTree(node1);
      node4.getInputId();
      node2.setSourceEncodedPositionForTree(98);
      node4.isComma();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(38, 77, 32);
      node1.isArrayLit();
      node1.setIsSyntheticBlock(true);
      Node.mergeLineCharNo(16, 86);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node1.isThis();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(15, nodeArray0, 51, (-2425));
      node2.isLabelName();
      node0.isCatch();
      Node node3 = new Node(31, node0);
      node3.isComma();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "<y);~]2F&kmC=oukg6N";
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isAssign();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isInc();
      Node node3 = new Node(42, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(99);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("}%b0#P6k}l[0vh", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, "#k6K&/&GE~2)M#(AkQ]");
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node1.isVar();
      node0.isTrue();
      node0.isGetterDef();
      node0.getLineno();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 2, 2, 2);
      nodeArray0[0] = node0;
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      node0.setDirectives(hashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime((-706));
      node0.isTry();
      node0.setCharno(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isStringKey();
      node0.getSourceOffset();
      Node node1 = new Node((-1), node0, node0, node0, node0);
      Node.newString("", (-2234), 4095);
      node0.checkTreeEqualsImpl(node1);
      node0.useSourceInfoIfMissingFrom(node0);
      node0.getDirectives();
      node0.getProp((-2708));
      node0.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(14, node0, 8232, 30);
      node1.getDouble();
      Stack<JSType> stack1 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LT 8232 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber(2163.15);
      node0.isOnlyModifiesThisCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(43, node0, 57, 303);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isSyntheticBlock();
      node1.setType(37);
      Node node3 = node2.srcrefTree(node0);
      node0.isAdd();
      node3.getDirectives();
      node2.toStringTree();
      node3.mayMutateGlobalStateOrThrow();
      node0.hasChildren();
      node2.siblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "NUMBER 2163.15 57\n");
      node2.appendStringTree(charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newNumber(1259.8, 0, 6373);
      Node node1 = new Node(39, node0, 1, 40);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isGetElem();
      node1.toString(true, true, false);
      int int1 = 29;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(14, node0, node0);
      node0.addChildToBack(node1);
      node1.isNot();
      Node node2 = Node.newNumber(29.0, (-971), 53);
      Node node3 = new Node(37, 43, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      node2.isIf();
      Node node4 = new Node(1178, 5, 40);
      node4.isDebugger();
      node4.toString(false, true, false);
      node4.isHook();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 2, 2, 2);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 31, 124, 56);
      node0.addChildrenAfter(node0, (Node) null);
      node1.isStringKey();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.ImmutableCollection$Builder");
      node0.setChangeTime(4095);
      node0.isDebugger();
      node1.isOr();
      node0.isWhile();
      node0.isEquivalentTo((Node) null, false, false, false);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString(3571, "cannot store more than MAX_VALUE elements", 3571, 3571);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node0.isFromExterns();
      Node node2 = new Node(2, node1);
      node1.getBooleanProp(2466);
      Node node3 = Node.newNumber(0.0);
      node0.removeChildren();
      node0.isStringKey();
      Node node4 = new Node(0, node2, node3, node2, node1);
      node4.checkTreeEqualsImpl(node0);
      node4.isFalse();
      node1.setSideEffectFlags(node2.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node1.isHook();
      Node node2 = new Node(49, node1, node0, 57, 16);
      node1.getSideEffectFlags();
      node2.getLastSibling();
      Node node3 = Node.newString(113, "", 52, (-1808));
      node3.isScript();
      node1.isAdd();
      node1.getProp(37);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(38, 77, 32);
      node1.isArrayLit();
      node1.setIsSyntheticBlock(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cannot store more than MAX_VALUE elements");
      Node.mergeLineCharNo(16, 86);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node1.isThis();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(15, nodeArray0, 51, (-2425));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      node0.isIf();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      node0.children();
      Node.newString("`?t;p`8w#_ #8", (-2338), 1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("`?t;p`8w#_ #8", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(36, node0);
      Node node2 = Node.newNumber(3935.991227025759);
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ejSV>Uj#<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ejSV>Uj#<");
      Node node0 = new Node(123);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildToFront((Node) null);
      node0.getQualifiedName();
      node0.isIn();
      node1.isEquivalentTo(node0);
      // Undeclared exception!
      try { 
        node0.isNE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node1 = new Node(113, 48, (-1363));
      node1.isArrayLit();
      node0.setIsSyntheticBlock(true);
      Node.mergeLineCharNo(2, (-2425));
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node1.isInc();
      node0.isLabelName();
      node0.isLabelName();
      node1.isCatch();
      Node node2 = new Node(52, node1);
      node2.isComma();
      node2.isOptionalArg();
      node1.isVoid();
      node2.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 34);
      Node node1 = Node.newNumber((double) 4095, 86, 296);
      Node node2 = Node.newString("cannot store more than MAX_VALUE elements");
      node2.isRegExp();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node1.isNoSideEffectsCall();
      node2.putBooleanProp(56, true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node0.isLabel();
      node0.isInc();
      node1.isLocalResultCall();
      Node node3 = Node.newNumber((double) 8);
      node3.getQualifiedName();
      node2.isThrow();
      node1.isNumber();
      node2.isHook();
      Node node4 = new Node(2, node0, node0, 39, 16);
      // Undeclared exception!
      try { 
        node2.getChangeTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(1407);
      Node node1 = new Node(233515, node0, 1407, 0);
      Node node2 = new Node(152, node1, node1, 43, 5291);
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      node0.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.setSourceEncodedPosition(834);
      node0.getProp(50);
      Node node1 = node0.getChildBefore(node0);
      int int0 = 324;
      node1.detachFromParent();
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isOptionalArg();
      node0.isIf();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isReturn();
      Node node2 = node1.getLastSibling();
      node2.getSourceFileName();
      node2.setInputId((InputId) null);
      Node node3 = new Node(1613);
      node3.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("XuI+PUT0jKT");
      jSTypeRegistry0.getGreatestSubtypeWithProperty(templateType0, "Not declared as a constructor");
      node1.isOptionalArg();
      node3.isGetterDef();
      node3.isTrue();
      node2.isParamList();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(51, node0, node0);
      Node node2 = new Node(42);
      node1.addChildToBack(node2);
      node2.isString();
      node0.isEmpty();
      Node node3 = node0.getLastSibling();
      node3.setString("38Ufw(xg_6=450!z{");
      int int0 = (-1447);
      Node node4 = null;
      try {
        node4 = new Node(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(3571, "", 3571, 3571);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node1.isFor();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber(0.0);
      node0.isStringKey();
      Node node4 = new Node(0, node2, node3, node2, node1);
      node3.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.isAssign();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node1.putIntProp(103, 2927);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node2 = new Node((-1909), (-1165), (-3678));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newString("|", 8, 300);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node0.isStringKey();
      node1.putIntProp(37, 15);
      Node node3 = Node.newNumber((double) 15);
      Node node4 = new Node(43, node1, node3, 2827, 4095);
      node4.checkTreeEquals(node1);
      node0.isInc();
      node4.getSourceOffset();
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node1.isHook();
      Node node2 = new Node(49, node1, node0, 57, 16);
      node2.isAssign();
      Node.newString(488, ")nd?tpQ6.'>l-pp", 39, (-1706));
      node1.useSourceInfoIfMissingFrom(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = new Node(2, nodeArray0, 11, 577);
      node3.getDirectives();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isSetterDef();
      node1.getLength();
      node0.setCharno((-6077));
      node0.setSourceFileForTesting(">1')W;NrO'?eRI");
      node0.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isThis();
      node0.getChildAtIndex(2393);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node1.isHook();
      Node node2 = new Node(49, node1, node0, 57, 16);
      Node node3 = node2.getLastSibling();
      Node node4 = Node.newString(32, "", 52, (-1808));
      node4.isScript();
      node1.isAdd();
      node1.getProp(37);
      node4.srcrefTree(node0);
      Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.setChangeTime(2803);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node1.isNumber();
      node1.isHook();
      Node node2 = new Node((-1142), node1, node1, 4, 55);
      node2.getLastSibling();
      Node node3 = Node.newString((-1006), "", 0, 56);
      node3.isScript();
      node1.isAdd();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("change_time");
      Node node1 = new Node(77, node0, node0);
      node1.isQuotedString();
      node0.addChildAfter(node1, node1);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("o{9M!U:OSLSo`<.");
      Node node1 = Node.newString("o{9M!U:OSLSo`<.", 3656, 11);
      node0.srcrefTree(node1);
      node0.getJSDocInfo();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      node0.setLineno(55);
      Node node1 = Node.newNumber((double) 8);
      node1.isLocalResultCall();
      node1.getJsDocBuilderForNode();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getType();
      node1.getSideEffectFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = null;
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType1 = FunctionType.getTopDefiningInterface((ObjectType) null, "Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, jSType0, (JSType) objectType1, (JSType) objectType0, (JSType) functionType0, (JSType) functionType0, jSType0, (JSType) functionType0, (JSType) functionType0, jSType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node2.isSwitch();
      node0.getString();
      node1.isName();
      node2.hasMoreThanOneChild();
      node2.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(668);
      int int0 = (-1363);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.removeChildAfter((Node) null);
      node_SideEffectFlags0.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.clearAllFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("5", 5847, 220);
      node0.isCall();
      node0.isOptionalArg();
      node0.isAssign();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString("XuI+PUT0jKT", 55, 2);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      node0.isString();
      node0.isEmpty();
      Node node2 = node0.getLastSibling();
      node0.setString("");
      node0.getType();
      node0.getSideEffectFlags();
      node1.isSwitch();
      node2.getString();
      node1.isName();
      node0.hasMoreThanOneChild();
      node1.isLocalResultCall();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection");
      Node node0 = new Node((-1104));
      Node node1 = Node.newString("9");
      node1.toString();
      node0.isEquivalentToTyped(node1);
      node1.addChildBefore(node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.children();
      // Undeclared exception!
      try { 
        node2.isSyntheticBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime((-1930));
      node0.setCharno(54);
      Node node2 = new Node((-3079));
      Node node3 = new Node(154);
      node3.isEquivalentToTyped(node1);
      node3.getProp(30);
      node0.isWith();
      node1.isNull();
      node3.isWith();
      node2.toStringTree();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection");
      Node node0 = new Node((-1104));
      Node node1 = Node.newString("9");
      node1.setLength(108);
      node1.toString();
      node0.isEquivalentToTyped(node1);
      node1.addChildBefore(node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.children();
      node2.isSyntheticBlock();
      String string1 = "p$+2ZQ";
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*THl8A=9");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = Node.newString("Object#Key", 2, 56);
      node1.isFunction();
      node1.children();
      String string0 = "b![C8";
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      Node node2 = enumElementType0.getPropertyNode(functionType0.NOT_A_CLASS);
      Node node3 = null;
      try {
        node3 = new Node(node0.FLAG_NO_THROWS, node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      Node node1 = new Node((-1614));
      node0.isEquivalentToTyped(node0);
      node0.getProp(39);
      node0.isWith();
      node0.isNull();
      node1.isWith();
      node0.toStringTree();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(14, node0, 8232, 30);
      Node node2 = new Node(30);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, true);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Key", node2, templateType0);
      enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter2, true);
      jSTypeRegistry3.getGreatestSubtypeWithProperty(objectType0, "}%b0#P6k}l[0vh");
      Object object0 = new Object();
      enumElementType0.getImplicitPrototype();
      JSType.toMaybeTemplateType((JSType) null);
      node_NodeMismatch0.equals((Object) null);
      node1.isVar();
      node2.isTrue();
      node0.isGetterDef();
      node1.getLineno();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(1750, "is_dispatcher");
      Node node1 = new Node(1750, node0, node0);
      Node node2 = new Node(1750, node1, 37, 47);
      node1.addChildrenToFront(node2);
      Node node3 = new Node(3656, node2, node1, node2, 4095, 740);
      node3.isThrow();
      String string0 = "NE";
      Node.newString(string0, node2.FREE_CALL, node2.COLUMN_MASK);
      Node node4 = node2.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node4.isNot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber((-931.4603572787));
      Node node1 = new Node((-839), node0, node0, 32, 47);
      Node node2 = new Node(83, node1, (-2256), 64);
      Node node3 = node2.removeFirstChild();
      Node node4 = Node.newString(57, "cannot store more than MAX_VALUE elements", (-3445), 52);
      node3.removeFirstChild();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node5 = new Node(456, node2, node0, node2, 1709, 47);
      node0.isVarArgs();
      node5.isSyntheticBlock();
      node0.setLength((-1556));
      node1.isCatch();
      node1.getJsDocBuilderForNode();
      node4.removeChildren();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString(3571, "", 3571, 3571);
      node0.hasOneChild();
      Node node1 = new Node(16, node0);
      node1.addChildrenAfter(node0, node0);
      node0.isFromExterns();
      Node node2 = null;
      try {
        node2 = new Node(node1.POST_FLAG, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isOr();
      Node node3 = new Node(31, node2, node1);
      node3.isDo();
      node0.isUnscopedQualifiedName();
      node1.isNE();
      node1.setOptionalArg(false);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node2.addChildToFront(node1);
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node0.isStringKey();
      node1.putIntProp(37, 15);
      Node node3 = Node.newNumber((double) 15);
      Node node4 = new Node(43, node1, node3, 2827, 4095);
      node4.checkTreeEquals(node1);
      node4.getChildBefore(node2);
      node0.isInc();
      node4.getSourceOffset();
      // Undeclared exception!
      try { 
        node4.isNE();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node2 = Node.newString("");
      node2.isNE();
      node0.isFromExterns();
      node1.isParamList();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      node1.isOr();
      Node node2 = Node.newNumber(1.0, 36, 83);
      node2.setWasEmptyNode(true);
      node2.isDebugger();
      node2.getChildCount();
      Node node3 = node1.cloneNode();
      node2.setSourceEncodedPositionForTree((-1930));
      node3.setLineno(2348);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node((-137), node0, node0, 155, 155);
      node1.isScript();
      node0.isGetterDef();
      node1.wasEmptyNode();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.isNoSideEffectsCall();
      node0.isCall();
      node0.isAssign();
      node0.isGetterDef();
      node0.isInc();
      Node node1 = Node.newString(")nd?tpQ6.'>l-pp", 15, 33);
      node0.addChildToBack(node1);
      node1.addChildrenToBack(node0);
      Node node2 = node1.getLastSibling();
      node2.isQualifiedName();
      node1.isUnscopedQualifiedName();
      node1.isNE();
      node0.isFromExterns();
      node0.hasOneChild();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesThis();
      Node node0 = new Node((-1367), (-1367), (-1367));
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      Node.mergeLineCharNo(4095, 46);
      node_SideEffectFlags6.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node0.isLabelName();
      node0.isLabelName();
      node0.isCatch();
      Node node1 = new Node(198, node0);
      node1.isComma();
      Node node2 = Node.newString(330, "");
      node2.isOptionalArg();
      node0.isVoid();
      node1.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ALWAYS_FALSE");
      Node node0 = new Node(116, (-57), (-57));
      node0.getString();
      int int0 = 2460;
      Node node1 = new Node(int0, node0, node0, node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        node1.getJsDocBuilderForNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BREAK is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(119, "com.google.javascript.rhino.Node", 119, 119);
      Node node1 = new Node(119, node0);
      node1.getLength();
      node1.isOr();
      node1.isWhile();
      node1.removeChildAfter(node0);
      node0.addChildrenAfter(node1, node1);
      // Undeclared exception!
      try { 
        node1.isIf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(38, 77, 32);
      node1.isArrayLit();
      node1.setIsSyntheticBlock(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Yd-2");
      Node.mergeLineCharNo(16, 86);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node1.isThis();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(15, nodeArray0, 51, (-2425));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      node0.isIf();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      Node node1 = new Node(785, node0, node0, node0);
      Node node2 = new Node(40);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      simpleErrorReporter2.warning("", "?7@ELFq~5@}J`Db(*{", 38, 31);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isNull();
      node1.setOptionalArg(false);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      node0.isOr();
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.getSourcePosition();
      Node node1 = Node.newNumber(1350.38, 50, 52);
      Node node2 = new Node(49, node0, node1, node1, node0);
      node0.addChildToFront(node2);
      node2.replaceChildAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node node1 = new Node(53, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node node2 = Node.newString("Object#Element");
      node1.isNE();
      node2.isFromExterns();
      node0.isParamList();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(10, "`?t;p`8w#_ #8");
      node0.getInputId();
      node0.children();
      Node node1 = Node.newString("`?t;p`8w#_ #8", (-2338), 1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("`?t;p`8w#_ #8", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getProp(15);
      node0.isWith();
      node1.isNull();
      Node node2 = Node.newNumber(1.2);
      node2.isWith();
      node2.setDouble((-1.0));
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(99);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("}%b0#P6k}l[0vh", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, "#k6K&/&GE~2)M#(AkQ]");
      node1.isVar();
      node0.isTrue();
      node0.isGetterDef();
      Node node2 = Node.newNumber((double) 0);
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3013);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = Node.newNumber(2.0);
      Node node1 = Node.newNumber(1.2, 3564, 296);
      Node node2 = node0.srcref(node1);
      Node node3 = new Node(54, node0, node2);
      node1.isDec();
      Node.newString("|Q]TrpfeGcd", 4095, 55);
      node3.srcrefTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(";`]f.jjKNx[sFu/n", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node4 = enumElementType1.getRootNode();
      JSDocInfo jSDocInfo0 = node4.getJSDocInfo();
      Node node5 = jSDocInfo0.getAssociatedNode();
      node5.srcref(node2);
      node5.isNew();
      // Undeclared exception!
      try { 
        node4.isNE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = new Node((-344), 2117, (-344));
      node0.isBlock();
      node0.isCall();
      node0.isInc();
      Node node1 = new Node(0);
      Node node2 = new Node(57, node0, node1);
      node1.addChildToBack(node2);
      node0.isGetElem();
      Node node3 = new Node((-4415), 4194304, 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newString("_xl>Ky5cr=(b", (-73), 57);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQuotedString();
      node0.isQualifiedName();
      node0.isEquivalentTo(node0);
      node0.getSourceOffset();
      node0.getQualifiedName();
      node0.getLength();
      node0.setCharno(50);
      Node node1 = new Node(36, node0);
      node0.isGetElem();
      node1.isNew();
      Node.newString((-4168), (String) null);
      int int0 = 30;
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOr();
      Node.newNumber(0.7, 29, 1);
      Node node1 = new Node(39, node0, 46, 36);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isGetElem();
      node0.isInstanceOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isWith();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-123), (Node) null, (Node) null, (Node) null);
      Node node2 = null;
      try {
        node2 = new Node(node1.SLASH_V);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node0.isHook();
      node0.isStringKey();
      node0.putIntProp(422, 422);
      Node node1 = Node.newNumber(2227.2438986);
      Node node2 = new Node(55, node0, node1, 1, 64);
      node0.checkTreeEquals(node1);
      node2.isInc();
      int int0 = 1617;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.hasMoreThanOneChild();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "sYLuJFdF,W";
      Node node0 = Node.newString("sYLuJFdF,W");
      Node node1 = new Node((-1102), node0, node0, 1, 0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setSourceEncodedPositionForTree(0);
      Node node3 = node2.clonePropsFrom(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.isLabelName();
      node3.setLength(668);
      node0.replaceChildAfter(node1, node3);
      int int0 = 30;
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString(83, "?7@ELFq~5@}J`Db(*{", 14, 770);
      node0.getSourceFileName();
      node0.getString();
      node0.getChangeTime();
      node0.isAssign();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      Node node1 = new Node(0);
      node1.detachChildren();
      node0.isNumber();
      node1.isHook();
      node1.getLastSibling();
      node0.isScript();
      node1.isExprResult();
      node0.getProp(48);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3132);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(3132, node0, node0, node0, node0);
      node2.addChildBefore(node0, node0);
      node1.isAssign();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack1 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack1);
      node0.setChangeTime(130);
      node0.setCharno(12288);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isCase();
      Node node1 = new Node(12);
      node1.isEquivalentToTyped(node0);
      node1.setChangeTime(2015);
      node0.isGetProp();
      node0.getSourcePosition();
      node1.isVarArgs();
      node0.hasChildren();
      Node.newString("");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node2 = Node.newString("");
      node2.isAssign();
      Node node3 = Node.newString(51, "Object#Element", 40, (-41));
      node1.useSourceInfoIfMissingFrom(node0);
      node3.getDirectives();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0, 2282, (-1153));
      Node node2 = Node.newString("S[2f~");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.isAssign();
      node0.getStaticSourceFile();
      node2.isLocalResultCall();
      node3.isEquivalentTo(node0);
      Node node4 = node0.getParent();
      node4.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node5 = new Node((-534), node3);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, false);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter1, true);
      ObjectType.cast((JSType) null);
      EnumType enumType0 = jSTypeRegistry3.createEnumType("ZN><", node3, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParentScope();
      node1.isScript();
      node1.isExprResult();
      node0.getProp(node1.SIDE_EFFECT_FLAGS);
      String string0 = "`iOs(horaDi2M";
      int int0 = 116;
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(99);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("}%b0#P6k}l[0vh", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, "#k6K&/&GE~2)M#(AkQ]");
      node1.isVar();
      node0.isTrue();
      node0.isGetterDef();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node2.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node1.isGetterDef();
      node0.isInc();
      node1.isNoSideEffectsCall();
      node1.isLocalResultCall();
      node1.addChildrenAfter(node2, node0);
      node0.isIf();
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(668);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(99);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(10, nodeArray0);
      node2.putIntProp(40, 56);
      Node.newNumber((double) 0);
      Node node3 = new Node(668, node1, node0, 366, (-1989));
      Node node4 = Node.newNumber((double) 57, (-4449), 29);
      node2.checkTreeEquals(node4);
      node0.isInc();
      Node node5 = new Node(57, nodeArray0, 49, (-1989));
      node2.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2);
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node5.isNE();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "z&#3>.YVbb";
      Node node0 = Node.newString("z&#3>.YVbb");
      Node node1 = new Node(1212, node0, 122, 29);
      node1.setLength(37);
      Node node2 = node0.detachFromParent();
      node0.useSourceInfoIfMissingFrom(node2);
      Node node3 = Node.newNumber(169.1758926, 551, 40);
      node1.isAssign();
      node1.isQualifiedName();
      node1.isDo();
      Node node4 = node3.copyInformationFrom(node0);
      node4.isEquivalentTo(node2);
      node1.isUnscopedQualifiedName();
      node1.isDec();
      node0.addChildrenAfter(node1, node1);
      node1.isComma();
      int int0 = 11;
      Node node5 = node0.getChildAtIndex(int0);
      // Undeclared exception!
      try { 
        node5.hasChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString((-3995), " 94Li", (-3995), (-3995));
      node0.getSourceFileName();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(124);
      Node node2 = Node.newNumber(0.0, (-215), 1);
      node2.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      EnumType enumType0 = jSTypeRegistry2.createEnumType("WH>b!=Q3(/xKSs[r ", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      jSTypeRegistry1.createAnonymousObjectType((JSDocInfo) null);
      enumType0.getSlot("2i2$gM");
      jSTypeRegistry1.getGreatestSubtypeWithProperty(enumType0, "^w`Dq1[");
      node1.isVar();
      node0.isTrue();
      node0.isGetterDef();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node0.isNew();
      node1.putIntProp(37, 15);
      Node node3 = Node.newNumber((double) 15);
      node1.isLabelName();
      node2.isCatch();
      node1.isScript();
      node3.isGetterDef();
      node0.wasEmptyNode();
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((-1.0));
      node0.siblings();
      node0.getChildCount();
      Node node1 = Node.newNumber(0.7);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
      node_NodeMismatch0.equals(templatizedType0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javasNr4pt.rhino.Node", 110, 110);
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.isEmpty();
      node0.getLastSibling();
      node0.setString("com.google.javasNr4pt.rhino.Node");
      Node node1 = new Node(56);
      node1.isAssignAdd();
      node0.getStaticSourceFile();
      node0.isAssign();
      Node node2 = Node.newString(31, "com.google.javasNr4pt.rhino.Node");
      node0.useSourceInfoIfMissingFrom(node2);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.replaceChild(node0, node0);
      boolean boolean0 = node2.isOr();
      node1.isWhile();
      boolean boolean1 = true;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2, boolean0, boolean1, boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      node0.isEquivalentTo(node0);
      node0.getSourceOffset();
      node0.getQualifiedName();
      node0.getLength();
      node0.setCharno(50);
      Node node1 = new Node(36, node0);
      Node node2 = new Node(536870912);
      node0.isObjectLit();
      Node node3 = Node.newString("?7@ELFq~5@}J`Db(*{");
      node3.getQualifiedName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node1.isLabelName();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) null);
      node1.isSwitch();
      node3.appendStringTree(charBuffer0);
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime(115);
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      node0.detachChildren();
      node0.isNumber();
      node0.isHook();
      Node node1 = node0.getLastSibling();
      node1.isScript();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isExprResult();
      node0.getProp(38);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry0.getType((StaticScope<JSType>) templateType0, "", "cannot store more than MAX_VALUE elements", 43, 30);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("$ t|@9i>P%gl", node1, templateType0);
      enumType0.toMaybeEnumType();
      Node node3 = node1.getLastSibling();
      node0.isScript();
      node3.isExprResult();
      node2.getProp(2);
      node1.isHook();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("Object#Element");
      stack0.add((JSType) null);
      node0.isNumber();
      node0.isHook();
      Node node1 = node0.cloneNode();
      Node node2 = new Node(34, node1, node0, node1, node0);
      node2.addChildBefore(node1, node0);
      node1.isAssign();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      node0.isTry();
      Node node1 = new Node(4095, node0, node0, node0, node0);
      node1.setCharno(1);
      node0.isEquivalentToTyped(node1);
      node0.isSyntheticBlock();
      Node node2 = new Node((-3531), node1, 56, 15);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isContinue();
      Node node3 = node0.copyInformationFrom(node2);
      node2.getChildBefore(node3);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newNumber(1.0);
      Node node2 = Node.newNumber(1.0, 16, 1023);
      Node node3 = node1.srcref(node2);
      Node node4 = new Node(15, node1, node2);
      node4.isTypeOf();
      Node node5 = new Node(42, node1);
      node4.isStringKey();
      int int0 = (-1940);
      Node node6 = new Node(int0, node0, node5, node3, node4);
      // Undeclared exception!
      try { 
        node2.srcref(node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(668);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.setIsSyntheticBlock(true);
      Node.mergeLineCharNo(2, (-2425));
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.isString();
      node0.isLabelName();
      node0.isLabelName();
      node0.isCatch();
      node0.isVar();
      node0.isTrue();
      node0.isGetterDef();
      Node node1 = node0.cloneTree();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString("", 122, 122);
      node0.isFunction();
      Node node1 = new Node(130, 130, 788);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isUnscopedQualifiedName();
      Node node3 = node1.cloneTree();
      node3.getSourceFileName();
      node2.isEquivalentToShallow(node1);
      node2.setLineno(33);
      node3.isFromExterns();
      node2.isCase();
      Node node4 = Node.newString(2, "", 30, 668);
      node4.checkTreeTypeAwareEqualsImpl(node2);
      node0.getSideEffectFlags();
      node2.siblings();
      node1.isCast();
      node3.children();
      node2.setDouble(1860.286877294);
      int int0 = 20;
      int int1 = 3093;
      Node.mergeLineCharNo(int0, int1);
      String string0 = "com.google.common.io.PatternFilenameFilter";
      node0.addSuppression(string0);
      node1.getType();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber(250.56288244885323);
      node0.isFalse();
      Node node1 = null;
      node0.setIsSyntheticBlock(false);
      node0.addChildBefore((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.isThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">hV");
      node0.isOr();
      Node node1 = Node.newNumber((double) 0);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node1.detachChildren();
      Node node2 = new Node(8, node1, node0, node0);
      node2.isThrow();
      node2.isNumber();
      node2.isHook();
      node2.isNew();
      node1.putIntProp(32, 41);
      Node node3 = Node.newNumber((double) 40);
      node1.isLabelName();
      node1.isCatch();
      node2.isScript();
      node3.isGetterDef();
      node2.wasEmptyNode();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      node0.isOr();
      Node node1 = Node.newNumber(0.7, 29, 1);
      Node node2 = new Node(39, node0, 46, 36);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isGetElem();
      node0.isInstanceOf();
      node2.isLabelName();
      node2.isGetterDef();
      node3.wasEmptyNode();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isNew();
      node1.putIntProp(37, 15);
      Node node3 = Node.newNumber((double) 15);
      node1.isLabelName();
      node2.isCatch();
      node1.isScript();
      node3.isGetterDef();
      node0.wasEmptyNode();
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(8, "dSTs#Z:", 8, 32);
      Node node1 = new Node(49, node0);
      node1.getLength();
      Node node2 = Node.newNumber((-2047.58374583493));
      node2.getQualifiedName();
      node1.checkTreeEqualsImpl(node2);
      node0.detachChildren();
      node1.isThrow();
      Node node3 = new Node(78, node1, node0, node1, node1);
      node3.isNumber();
      node1.isHook();
      node1.isNew();
      int int0 = 2466;
      // Undeclared exception!
      try { 
        node2.putIntProp(int0, node0.DIRECTIVES);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node0.isNew();
      node1.putIntProp(37, 15);
      Node node3 = Node.newNumber((double) 15);
      node1.isLabelName();
      node2.isCatch();
      node1.isScript();
      node3.isGetterDef();
      node0.wasEmptyNode();
      node1.copyInformationFromForTree(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(839);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.valueOf();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 4095, 86, 296);
      Node node2 = node0.srcref(node1);
      Node node3 = new Node(46, node0, node2);
      node3.isDec();
      node1.addChildToFront(node2);
      node3.replaceChildAfter(node0, node2);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(342);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      stack0.add((JSType) null);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(2275);
      node1.isInc();
      node0.isLabelName();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(21);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      Iterator<JSType> iterator0 = arrayDeque0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isLocalResultCall();
      Node node2 = new Node(38);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isHook();
      Node node3 = new Node(30, node1, node0, 103, 4);
      node3.getLastSibling();
      Node node4 = Node.newString(57, "&", 103, 85);
      node4.isScript();
      node4.getParent();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      node1.mayMutateArguments();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = node1.getLastSibling();
      node0.setString("In(");
      Node node3 = new Node(30);
      node1.isAssignAdd();
      node2.getStaticSourceFile();
      node1.isAssign();
      Node node4 = Node.newString(30, "<y);~]2F&kmC=oukg6N");
      node3.useSourceInfoIfMissingFrom(node4);
      node3.isCast();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime((-1930));
      node0.setCharno(54);
      Node node2 = new Node(48);
      Node node3 = new Node(154);
      node3.isEquivalentToTyped(node1);
      node0.isThrow();
      node2.isNumber();
      node3.isIf();
      node2.isNE();
      node0.toString();
      node2.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setChangeTime(130);
      node0.setCharno(130);
      node0.isCase();
      Node node1 = Node.newString(1, "Object#Element");
      Node node2 = new Node(1, node0, node1, 2, 4095);
      node2.isEquivalentToTyped(node2);
      node2.isSyntheticBlock();
      Node node3 = new Node(48, node1, 40, 4771);
      int int0 = 85;
      int int1 = 130;
      Node.newString(int0, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node1.QUOTED_PROP, int1);
      node3.isObjectLit();
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newNumber(34.0, 12, (-1540));
      node0.isInc();
      Node node2 = new Node(14, node0, node0);
      node2.isNot();
      Node node3 = Node.newNumber(29.0, 46, 53);
      Node node4 = new Node(37, 43, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.isExprResult();
      node2.getProp(2096);
      node3.isHook();
      node4.cloneTree();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      node1.checkTreeEqualsImpl(node0);
      node2.detachChildren();
      node0.isThrow();
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry0.getType((StaticScope<JSType>) templateType0, "", "cannot store more than MAX_VALUE elements", 43, 30);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("$ t|@9i>P%gl", node1, templateType0);
      enumType0.toMaybeEnumType();
      Node node3 = node1.getLastSibling();
      Node node4 = Node.newString("Ru^uJjB7nn4U;m2P39", 0, 2187);
      node1.srcrefTree(node4);
      node0.isScript();
      node3.isExprResult();
      node2.getProp(2);
      node1.isHook();
      node0.cloneTree();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      node1.isInc();
      Node node2 = new Node(41, 15, 50);
      node1.checkTreeEquals(node2);
      node0.isInc();
      int int0 = (-449);
      Node node3 = new Node(node1.COLUMN_BITS, node1, node1, node2, int0, node2.SIDE_EFFECT_FLAGS);
      // Undeclared exception!
      node3.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add(">W|[E~hHdekN##0");
      node0.detachChildren();
      node0.isNumber();
      node0.isHook();
      node0.isStringKey();
      node0.putIntProp(30, 43);
      Node node1 = Node.newNumber(1.0);
      node0.checkTreeEquals(node1);
      node0.isInc();
      node0.isOptionalArg();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(30, nodeArray0, 30, 1);
      node1.getSourceOffset();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.mayMutateArguments();
      node0.setChangeTime(2);
      node0.isTry();
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.getJSDocInfo();
      node1.isScript();
      Node node2 = Node.newNumber((-1.0));
      Node node3 = new Node(38, node2, node2, node1);
      node3.isExprResult();
      node1.getProp(15);
      node0.isAssignAdd();
      node2.isDo();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node0 = Node.newString(34, "BbJXGtSa?");
      node0.isAssign();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      node0.isNumber();
      node0.isHook();
      Node node1 = node0.getLastSibling();
      node0.isDo();
      node0.isExprResult();
      node0.getProp(1);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(3718, 307, 1904);
      Node node1 = new Node(63, node0, node0, 0, 8232);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getStaticSourceFile();
      node0.useSourceInfoFrom(node1);
      node2.setStaticSourceFile((StaticSourceFile) null);
      String string0 = node1.toString();
      node1.getSideEffectFlags();
      node0.setSideEffectFlags(8);
      node0.isOptionalArg();
      node1.setString(string0);
      node0.isScript();
      String string1 = "capacity must be >= 0 but was %s";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string0, string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3718
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = 64;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-284.978693148535), 64, (-1348));
      node0.siblings();
      node0.isQuotedString();
      node0.setLineno(64);
      node0.getProp((-1278));
      node0.isArrayLit();
      node0.isDo();
      node0.getJSDocInfo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node0.isDelProp();
      node0.getString();
      node0.isFor();
      Node node1 = null;
      node0.addChildToFront(node1);
      node0.putIntProp(int0, byte0);
      node0.removeProp(byte0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString(2493, "com.google.javasNr4pt.rhino.Node", 318, (-322));
      node0.isDo();
      node0.isAnd();
      node0.isNE();
      node0.isEmpty();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.newString("Object#Key");
      int int0 = Node.POST_FLAG;
      node0.isArrayLit();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javasNr4pt.rhino.Node", 110, 110);
      node0.isDo();
      node0.isEquivalentTo(node0, false, false, false);
      node0.isNE();
      node0.isEmpty();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(43, node0, node0, 47, 3819);
      JSType jSType0 = null;
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, jSType0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.AllType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString(119, "com.google.javascript.rhino.Node", 119, 119);
      node0.getString();
      node0.getChangeTime();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'([7k-0j");
      node0.isWith();
      Node node1 = Node.newString("com.google.common.collect.AbstractMapBasedMultimap$AsMap");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "ereu]>8JAz0Hr|b";
      Node node2 = null;
      ObjectType.cast((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "?7@ELFq~5@}J`Db(*{");
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node2, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node3 = enumElementType1.getRootNode();
      node3.isAssign();
      // Undeclared exception!
      try { 
        node1.getStaticSourceFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      Node node1 = new Node(114);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node1.isGetterDef();
      Node node2 = new Node(16);
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("com.google.javascript.rhino.Node");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      jSTypeRegistry2.getGreatestSubtypeWithProperty(templateType0, (String) null);
      Node node3 = new Node(154, node2);
      node_NodeMismatch0.equals(node3);
      node0.isVar();
      node2.isTrue();
      node3.isGetterDef();
      node1.isDefaultCase();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node1.toString(true, false, false);
      node0.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node1 = new Node(15, 29, 4);
      node0.isArrayLit();
      node1.setIsSyntheticBlock(false);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getDirectives();
      node2.isOptionalArg();
      node1.getChildAtIndex(4);
      int int0 = (-2903);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("", 122, 122);
      node0.isInc();
      Node node1 = new Node(130, 130, 788);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isUnscopedQualifiedName();
      Node node3 = node1.cloneTree();
      node3.getSourceFileName();
      node2.isEquivalentToShallow(node1);
      node2.setLineno(33);
      node3.isFromExterns();
      Node node4 = new Node(43, node2);
      Node.newString("com.google.javascript.rhino.Node", 16, 57);
      Node node5 = null;
      node4.isEquivalentToTyped((Node) null);
      node2.isSyntheticBlock();
      int int0 = 108;
      int int1 = 147;
      int int2 = 103;
      Node node6 = new Node(int0, node5, int1, int2);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.javascript.rhino.Node", 116, 116);
      Node node1 = Node.newNumber((double) 1);
      node0.getQualifiedName();
      Node node2 = new Node(51, node1);
      node2.checkTreeEqualsImpl(node1);
      node2.detachChildren();
      node0.isThrow();
      node1.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("j=,4*P)1&cK");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) templateType0, "j=,4*P)1&cK", "Object#Key", (-625), 2615);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("m{(~1d>]o_", node0, jSType0);
      enumType0.toMaybeEnumType();
      Node node3 = node2.getLastSibling();
      node3.isScript();
      node0.isExprResult();
      node1.getProp(4);
      node1.isHook();
      Node node4 = node3.cloneTree();
      node4.getChildAtIndex(39);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      node0.setDirectives(linkedHashSet0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      Node node1 = new Node(118, 53, 1);
      Node node2 = Node.newNumber(1855.35049139, (-954), 41);
      Node node3 = node1.srcref(node0);
      Node node4 = new Node(51, node2, node0, node1, 4095, 575);
      Node node5 = new Node(16, node2, node4);
      node3.isDec();
      node0.addChildToFront(node3);
      node4.replaceChildAfter(node0, node5);
      node4.isThis();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 4095, 86, 296);
      node0.isString();
      node1.isInc();
      node1.isLabelName();
      node1.isLabelName();
      node1.isCatch();
      node0.isFromExterns();
      node0.isDebugger();
      node1.isReturn();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(1432, "");
      Node node1 = new Node(1432, node0, node0, node0, node0, 46, (-936));
      node1.isOnlyModifiesThisCall();
      node1.isRegExp();
      Node node2 = Node.newString(".5");
      Node node3 = node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node.mergeLineCharNo(57, 4095);
      node0.checkTreeEqualsImpl(node3);
      node2.setSideEffectFlags(1);
      double double0 = (-1.0);
      Node.newNumber(double0);
      node1.setChangeTime(node3.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = new Node(113, 96, 113);
      node0.isWhile();
      node0.getJSDocInfo();
      node0.wasEmptyNode();
      node0.isQualifiedName();
      node0.getProp(29);
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node0.isNumber();
      node0.isHook();
      node0.isStringKey();
      node0.putIntProp(1024, 4262);
      Node node1 = Node.newNumber((double) 29);
      Node node2 = Node.newString("Ol}5%:pwX};0q?");
      Node node3 = Node.newString("Ol}5%:pwX};0q?");
      node1.putProp(52, node3);
      Node node4 = new Node(30, node1, node2, 4095, 4096);
      node4.copyInformationFromForTree(node0);
      node1.checkTreeEquals(node0);
      node4.getLength();
      node2.isInc();
      node4.isGetterDef();
      node1.mayMutateArguments();
      node4.isArrayLit();
      node2.setQuotedString();
      // Undeclared exception!
      try { 
        node3.useSourceInfoFromForTree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 1024
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(47);
      node0.isAssignAdd();
      node0.getStaticSourceFile();
      Node node3 = new Node(130, node0, node1, 52, 4095);
      Node node4 = node3.getLastSibling();
      node2.getQualifiedName();
      node3.checkTreeEqualsImpl(node4);
      node0.setSideEffectFlags(56);
      node2.setQuotedString();
      int int0 = 102;
      // Undeclared exception!
      try { 
        nodeArray0[0].setChangeTime(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javasNr4pt.rhino.Node", 110, 110);
      node0.isDo();
      Node node1 = node0.clonePropsFrom((Node) null);
      node0.isUnscopedQualifiedName();
      Node node2 = node1.cloneTree();
      // Undeclared exception!
      try { 
        node2.getSourceFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = new Node(120, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.detachChildren();
      node1.isThrow();
      Node node2 = new Node(152, node1);
      node2.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("j=,4*P)1&cK");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry1.getType((StaticScope<JSType>) templateType0, "E", "*G &T@=f?,Tk", 920, (-2582));
      EnumType enumType0 = jSTypeRegistry1.createEnumType("\n\nSubtree1: ", node0, templateType0);
      enumType0.toMaybeEnumType();
      node1.getLastSibling();
      node0.isScript();
      node1.isExprResult();
      node2.getProp(4095);
      node0.isHook();
      node2.cloneTree();
      node2.getChildAtIndex(55);
      node2.children();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(155, 12, 103);
      node0.isArrayLit();
      node1.setIsSyntheticBlock(false);
      Node.mergeLineCharNo(51, 103);
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      node0.isLabelName();
      node1.isLabelName();
      Node node2 = new Node(56, node1);
      node2.isCatch();
      node2.isFromExterns();
      node0.isDebugger();
      node0.isReturn();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isInc();
      Node node1 = new Node(169, 130, 788);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isUnscopedQualifiedName();
      Node node3 = node1.cloneTree();
      node3.getSourceFileName();
      node2.isEquivalentToShallow(node1);
      node2.setLineno(33);
      node3.isFromExterns();
      node2.isCase();
      Node node4 = new Node(668);
      node2.checkTreeEqualsImpl(node1);
      node1.isSetterDef();
      node1.getLength();
      node2.setSourceFileForTesting("(!F^SV9!yR99W");
      node3.isIn();
      Node.newNumber((double) 4);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) templateType0, "I8F)_N]u/#(%Q8!i", "Xh9cn", 4095, 29);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("I8F)_N]u/#(%Q8!i", node1, jSType0);
      enumType0.toMaybeEnumType();
      Node node2 = node1.getLastSibling();
      node0.isScript();
      node1.isExprResult();
      node0.getProp(54);
      node2.isHook();
      Node node3 = new Node(46, node1, node2, 38, 1);
      node0.getChildAtIndex(87855567);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(110, 110, 111);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(52);
      node0.isAssignAdd();
      node0.getStaticSourceFile();
      Node node2 = new Node((-1188), node0, node0, 2, 46);
      Node node3 = node1.getLastSibling();
      node0.getQualifiedName();
      node3.checkTreeEqualsImpl(node2);
      node3.setSideEffectFlags(12288);
      node3.setQuotedString();
      int int0 = 111;
      node2.setChangeTime(int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node0 = Node.newString(2001, "5");
      node0.isAssign();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
      node0.detachChildren();
      node0.isNumber();
      node0.isHook();
      Node node1 = new Node(31, 47, 116);
      Node node2 = node1.getLastSibling();
      node0.isDo();
      node2.isExprResult();
      node0.getProp(57);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node1.getQualifiedName();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node2.detachChildren();
      node0.isThrow();
      Node node3 = Node.newString("?7@ELFq~5@}J`Db(*{", 47, 11);
      node1.addChildToBack(node2);
      node3.addChildrenToBack(node1);
      node0.isString();
      node3.isEmpty();
      node3.setString("`gA/a{-:Zo");
      node0.getSideEffectFlags();
      node3.getString();
      node2.isName();
      node1.hasMoreThanOneChild();
      node3.isLocalResultCall();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = Node.newString(98, "com.google.javascript.rhino.jstype.NumberType", 30, (-745));
      Node node2 = new Node(48, node1);
      node1.getLength();
      Node node3 = Node.newNumber((double) 39);
      node0.getQualifiedName();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, (Node) null);
      node2.detachChildren();
      node1.isThrow();
      node2.isNumber();
      node1.isHook();
      node3.isNew();
      node2.putIntProp(4095, 37);
      Node node4 = Node.newNumber((double) 4095);
      node3.isLabelName();
      node2.isCatch();
      node0.isScript();
      node3.isGetterDef();
      node4.wasEmptyNode();
      node3.copyInformationFromForTree(node1);
      node0.isSwitch();
      Node node5 = new Node(30, (Node[]) null);
      node5.isOnlyModifiesThisCall();
      node4.isDo();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(47);
      node0.isAssignAdd();
      node0.getStaticSourceFile();
      node1.isUnscopedQualifiedName();
      Node node3 = new Node(node1.QUOTED_PROP, node1.FLAG_THIS_UNMODIFIED, node0.EMPTY_BLOCK);
      // Undeclared exception!
      try { 
        node3.getLastSibling();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 51 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      node0.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node0.isNumber();
      node0.isHook();
      node0.isStringKey();
      node0.putIntProp(1024, 4262);
      Node node1 = Node.newNumber((double) 29);
      Node node2 = Node.newString("Ol}5%:pwX};0q?");
      Node node3 = Node.newString("Ol}5%:pwX};0q?");
      node1.putProp(52, node3);
      Node node4 = new Node(30, node1, node2, 4095, 4096);
      Node node5 = node4.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      node5.setJSType(objectType0);
      node1.checkTreeEquals(node0);
      node4.hasChild(node5);
      node4.getLength();
      node2.isInc();
      node4.isGetterDef();
      node1.mayMutateArguments();
      node4.isArrayLit();
      node2.setQuotedString();
      node3.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(102, (-2123), (-983));
      node0.checkTreeEquals(node0);
      node2.isInc();
      Node node3 = new Node(54, node1, node1, node2, 90, 51);
      node1.isOptionalArg();
      Node node4 = new Node((-655), nodeArray0, (-895), 38);
      node2.getSourceOffset();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = 2939.8;
      Node node5 = Node.newNumber(double0);
      JSType jSType0 = node5.getJSType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isInc();
      Node node1 = new Node(103, node0, node0);
      node0.addChildToBack(node1);
      node1.isInc();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node2 = new Node((-2174));
      node1.isAssignAdd();
      Node node3 = new Node(55, node2, node2, 4095, 108);
      Node node4 = node1.getLastSibling();
      node4.getQualifiedName();
      node0.checkTreeEqualsImpl(node4);
      node1.setSideEffectFlags(55);
      node1.setQuotedString();
      node3.copyInformationFromForTree(node0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node4;
      Node node5 = new Node(node0.POST_FLAG, nodeArray0);
      node5.isSwitch();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node((-604), (-604), (-604));
      Node node1 = new Node((-604), node0, node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.wasEmptyNode();
      node1.putBooleanProp(53, false);
      node0.isParamList();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)91;
      node1.setLineno(38);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isNoSideEffectsCall();
      node0.setOptionalArg(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isAdd();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(47);
      node0.isAssignAdd();
      node2.getJsDocBuilderForNode();
      Node node3 = new Node(306, node2, 50, 0);
      Node.newString(2, "Object#Key", 1, 42);
      node0.isObjectLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(56);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      node0.isAssign();
      node0.isGetterDef();
      Node node2 = new Node(120);
      node2.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      Node node3 = new Node((-852), node0);
      node_NodeMismatch0.equals(simpleErrorReporter0);
      node1.isVar();
      Node node4 = new Node(4095, node1, node2);
      node4.isDefaultCase();
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node1);
      node3.isOptionalArg();
      node5.replaceChildAfter(node4, node3);
      node1.getJSDocInfo();
      node5.isLabel();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString(30, "#gk,");
      node0.getSourceOffset();
      node0.getLength();
      node0.setCharno(83);
      Node node1 = new Node(4095, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node node2 = new Node(53, 0, 15);
      node1.isGetElem();
      node0.isNew();
      Node node3 = Node.newString(55, "U2U_FUNCTION_TYPE");
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-729));
      node_SideEffectFlags0.setMutatesThis();
      node1.isAdd();
      node3.removeChildren();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node((-2004));
      Node node1 = new Node((-1236), 2147483645, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node2 = new Node(39);
      node2.isAssignAdd();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(112, nodeArray0);
      Node node4 = new Node(1, node2, node3, 21, 2954);
      node2.getLastSibling();
      node3.getQualifiedName();
      node3.checkTreeEqualsImpl(node1);
      node4.setSideEffectFlags((-1764));
      node1.setQuotedString();
      int int0 = 114;
      String string0 = "cannot store more than MAX_VALUE elements";
      int int1 = 1232;
      Node node5 = Node.newString(int0, string0, node0.NO_SIDE_EFFECTS, int1);
      node4.copyInformationFromForTree(node5);
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newNumber(34.0, 12, (-1540));
      node0.isInc();
      Node node2 = new Node(14, node0, node0);
      node2.isNot();
      node2.isLocalResultCall();
      Node node3 = new Node(42, node1, node2);
      Node node4 = new Node(37, 43, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isIf();
      node2.addChildToFront(node3);
      Node node5 = new Node(47, node4);
      node0.replaceChildAfter(node5, node4);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1677));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node0 = Node.newString(10, "BbJXGtSa?");
      node0.isAssign();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(57, node0, node0, node0);
      node1.getJsDocBuilderForNode();
      node1.getChildCount();
      node0.detachChildren();
      node0.isNumber();
      int int0 = 100;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      Node node3 = new Node(int0, node1, node2, node2, node2, node0.INCRDECR_PROP, node0.IS_NAMESPACE);
      node3.isHook();
      node2.getLastSibling();
      // Undeclared exception!
      try { 
        node1.isDo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(668);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isNumber();
      node0.isHook();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(99);
      node1.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(10, nodeArray0);
      node2.putIntProp(40, 56);
      Node node3 = Node.newNumber((double) 0);
      Node node4 = new Node(668, node1, node0, 366, (-1989));
      Node node5 = Node.newNumber((double) 57, (-4449), 29);
      node2.isTrue();
      node4.isGetterDef();
      node1.isDefaultCase();
      node4.useSourceInfoIfMissingFromForTree(node2);
      node5.isOptionalArg();
      String string0 = "j|_oO&XDzp,$sA";
      Node node6 = Node.newString(string0, node0.IS_NAMESPACE, node5.STATIC_SOURCE_FILE);
      node6.replaceChildAfter(node4, node3);
      node3.getJSDocInfo();
      // Undeclared exception!
      try { 
        node0.isLabel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = new Node(113, 96, 113);
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      Node.mergeLineCharNo(31, 1112);
      Node node1 = new Node(47, node0, 100, 100);
      Node node2 = Node.newString(55, "Object#Element", 112, 1);
      node2.isObjectLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node1 = new Node(15, 29, 4);
      node0.isArrayLit();
      node1.setIsSyntheticBlock(false);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = node0.srcref(node2);
      Node node4 = new Node((-1215), node3, node2);
      node3.isDec();
      node2.addChildToFront(node3);
      Node node5 = Node.newString(node0.VAR_ARGS_NAME, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, node2.INPUT_ID, node0.IS_DISPATCHER);
      node2.replaceChildAfter(node1, node5);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = new Node(85, 447, (-2862));
      Node node1 = new Node(2, node0, node0);
      Node node2 = node0.srcref(node1);
      Node node3 = new Node(52, node1, node2);
      node3.isDec();
      node1.addChildToFront(node2);
      int int0 = 57;
      Node node4 = new Node(int0, node2);
      int int1 = 76;
      node4.setLength(int1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      Iterator<JSType> iterator0 = arrayDeque0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      ImmutableList<JSType> immutableList2 = immutableList1.reverse();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList2);
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(49, node0, node0, node0, 2, 39);
      node1.siblings();
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeRegistry0.createNullableType(jSType0);
      Node node2 = Node.newNumber((-1.0), 57, 83);
      node0.isEquivalentTo(node2);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node3.isIf();
      node1.isAnd();
      node3.getSideEffectFlags();
      node0.hasChildren();
      Node node4 = node3.getParent();
      node4.mayMutateGlobalStateOrThrow();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(10);
      node0.getInputId();
      Node node1 = Node.newString("`?t;p`8w#_ #8", (-2364), 1);
      node1.getCharno();
      Node node2 = new Node((-436), node0, node0, node0, 36, 12);
      node2.isThrow();
      Node node3 = new Node(30, node1, node2, 4095, 39);
      Node.newNumber((-1.0));
      node3.setSideEffectFlags(52);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node((-32), (-32), (-32));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0, node0, node0);
      Node.mergeLineCharNo(16384, (-137));
      node1.isEquivalentTo(node1, false, false, false);
      node0.isInc();
      node0.isLabelName();
      node0.isLabelName();
      node0.isCatch();
      Node node2 = new Node(47, node1, node1, node0, node1);
      node2.isFromExterns();
      node2.isDebugger();
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1971), node0, node0, node0, node0);
      node1.setOptionalArg(true);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.getJSDocInfo();
      Node node3 = node2.srcref(node1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isOnlyModifiesThisCall();
      Node node4 = node1.useSourceInfoFromForTree(node3);
      node4.getBooleanProp(57);
      node1.setWasEmptyNode(true);
      node1.isFor();
      node2.isTypeOf();
      node1.getDirectives();
      node1.isContinue();
      node1.getBooleanProp(4095);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      Node node1 = new Node(114);
      node0.checkTreeEqualsImpl(node1);
      node0.isAssign();
      node1.isGetterDef();
      Node node2 = Node.newNumber((double) 37);
      node2.getQualifiedName();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node1);
      node0.detachChildren();
      node0.isThrow();
      node0.isNumber();
      node1.isHook();
      node0.isNew();
      node2.putIntProp(306, 6436);
      Node node3 = Node.newNumber((double) 16);
      node1.isLabelName();
      node3.isCatch();
      node0.isGetterDef();
      node2.wasEmptyNode();
      node1.copyInformationFromForTree(node0);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node1 = new Node(15, 29, 4);
      node0.isArrayLit();
      node1.setSourceEncodedPosition(1555);
      node1.setWasEmptyNode(false);
      node1.isGetProp();
      node0.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString(")nd?tpQ6.'>l-pp");
      node0.setChangeTime(347);
      Node node1 = new Node(31, 37, 4);
      node0.isUnscopedQualifiedName();
      node0.isDefaultCase();
      Node node2 = node1.srcrefTree(node0);
      node2.setDouble((-1099.599372375739));
      node1.getCharno();
      node1.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.mayMutateArguments();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DELPROP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = new Node(120, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.detachChildren();
      node1.isThrow();
      Node node2 = new Node(152, node1);
      node2.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.isInstanceOf();
      node1.isLabelName();
      node2.isGetterDef();
      node2.wasEmptyNode();
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = new Node(41);
      node0.isQualifiedName();
      Node node1 = new Node(4095, node0, node0, node0);
      node0.isEquivalentTo(node1);
      node1.getSourceOffset();
      node0.getLength();
      node1.setCharno(0);
      Node node2 = new Node((-1131), node1);
      node2.isGetElem();
      node0.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      Node node3 = node1.getParent();
      node2.hasChild(node3);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node0 = new Node(13, 121, 121);
      Node node1 = new Node(121, node0, node0);
      Vector<TemplateType> vector0 = new Vector<TemplateType>();
      ImmutableList.copyOf((Collection<? extends TemplateType>) vector0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[2] = jSType0;
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor1.caseBooleanType();
      jSTypeArray0[3] = jSType1;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isNoSideEffectsCall();
      Node node3 = Node.newString(1364, "Unknown class name");
      node3.addChildToBack(node1);
      node1.getIndexOfChild(node2);
      node0.clonePropsFrom(node1);
      node1.getDirectives();
      node3.getChildAtIndex(39);
      node0.isNE();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.getSourcePosition();
      Node node1 = Node.newNumber(1350.38, 50, 52);
      Node node2 = new Node(49, node0, node1, node1, node0);
      node0.addChildToFront(node2);
      node2.isGetProp();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'i';
      charArray0[2] = '$';
      charArray0[3] = '?';
      charArray0[4] = 'h';
      charArray0[5] = 'g';
      charArray0[6] = '(';
      charArray0[7] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      node0.appendStringTree(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(155, 12, 103);
      Node.mergeLineCharNo(51, 103);
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      Node node2 = new Node(31, 93, 2);
      node1.wasEmptyNode();
      node2.isInc();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node3.getSourceOffset();
      node0.isAssignAdd();
      node0.getJSDocInfo();
      node0.setJSDocInfo((JSDocInfo) null);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.javascript.rhino.Node", 116, 116);
      Node node1 = new Node(32, node0, node0, 2, 55);
      node0.getQualifiedName();
      node0.getLength();
      Node node2 = new Node(15, 2020, 38);
      node1.getJsDocBuilderForNode();
      Node.mergeLineCharNo(105, (-1082));
      node2.isInc();
      node0.isLabelName();
      node0.setSourceFileForTesting((String) null);
      node2.isCatch();
      node1.hasMoreThanOneChild();
      node0.isOptionalArg();
      node0.getStaticSourceFile();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = new Node(124, 124, 9);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(124, node0, node0, node0);
      Node.mergeLineCharNo(51, 52);
      node0.isEquivalentTo(node1, false, false, true);
      node0.isInc();
      node1.isLabelName();
      node1.isBreak();
      node0.isCatch();
      Node node2 = new Node(32, node1, node1, node0, node1);
      node2.isFromExterns();
      node1.isDebugger();
      node0.isWhile();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node0 = new Node(1930, 105, (-115));
      node_SideEffectFlags2.setMutatesArguments();
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = new Node((-123), 30, 2);
      node0.isArrayLit();
      node1.setIsSyntheticBlock(false);
      Node node2 = node1.clonePropsFrom(node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isOptionalArg();
      Node node3 = node1.getChildAtIndex(0);
      Node node4 = new Node(1617, (Node) null);
      node4.getExistingIntProp(node2.CHANGE_TIME);
      Node.mergeLineCharNo(node3.SIDE_EFFECT_FLAGS, node3.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.javascript.rhino.Node", 116, 116);
      Node node1 = new Node(32, node0, node0, 2, 55);
      node0.isDo();
      Node node2 = Node.newNumber((-971.4523995395));
      node2.isAnd();
      node0.isNE();
      node0.isEmpty();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node node3 = new Node(1, 15, 55);
      node3.isGetElem();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isIf();
      Node node4 = new Node(124);
      node1.putIntProp(1291, 0);
      node0.removeProp(2890);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = 64;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-284.978693148535), 64, (-1348));
      node0.copyInformationFrom((Node) null);
      node0.siblings();
      node0.isQuotedString();
      int int1 = (-1278);
      node0.setLineno(int0);
      node0.getProp(int1);
      node0.isArrayLit();
      node0.getJSDocInfo();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node1 = new Node((-2019), 105, (-115));
      node_SideEffectFlags2.setMutatesArguments();
      node1.isArrayLit();
      node1.setIsSyntheticBlock(false);
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = new Node((-123), 30, 2);
      node1.isArrayLit();
      node2.setIsSyntheticBlock(true);
      Node node3 = node2.clonePropsFrom(node1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node2.isOptionalArg();
      Node node4 = node2.getChildAtIndex(node0.SIDE_EFFECTS_ALL);
      Node node5 = new Node(node4.COLUMN_BITS, node1, node3, node3.INFERRED_FUNCTION, node1.SYNTHETIC_BLOCK_PROP);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = new Node(120, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.isThrow();
      Node node2 = new Node(152, node1);
      node2.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = node1.getLastSibling();
      node1.isExprResult();
      Object object0 = new Object();
      node0.setIsSyntheticBlock(false);
      node0.isHook();
      node2.getLastSibling();
      node3.isNot();
      node2.isLocalResultCall();
      node0.isExprResult();
      node2.getProp(16);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.javascript.rhino.Node", 116, 116);
      Node node1 = new Node(32, node0, node0, 2, 55);
      node0.getQualifiedName();
      node0.getLength();
      Node node2 = new Node(15, 2020, 38);
      node0.getLength();
      node1.getJsDocBuilderForNode();
      Node.mergeLineCharNo(105, (-1082));
      node2.isInc();
      node0.isLabelName();
      node1.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1));
      Node node3 = node0.getParent();
      node2.hasChild(node3);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.javascript.rhino.Node", 110, 110);
      node0.isDo();
      node0.isUnscopedQualifiedName();
      node0.isNE();
      node0.getSourcePosition();
      Node node1 = Node.newNumber(1350.38, 50, 52);
      Node node2 = new Node(49, node0, node1, node1, node0);
      node0.addChildToFront(node2);
      node2.isGetProp();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = new Node(113, 96, 113);
      node0.isArrayLit();
      node0.isHook();
      node0.isLabel();
      Node node1 = node0.cloneTree();
      node0.getChildAtIndex(54);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isEquivalentToShallow(node0);
      node0.setLineno(0);
      node1.isFromExterns();
      node0.isCase();
      Node node2 = Node.newString(2906, "}K,WXp&LC%zV9T`Vd", 16, 126);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.getSideEffectFlags();
      node0.siblings();
      node0.isCast();
      node0.isEquivalentToTyped(node0);
      Node node3 = Node.newString(16, "}K,WXp&LC%zV9T`Vd", 40, 536870912);
      Node node4 = new Node((-1960), node0, node2, node3);
      node4.getBooleanProp(55);
      node0.isNull();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(3246, node0, node0, node0);
      node0.getAncestor(2);
      jSTypeRegistry0.setLastGeneration(false);
      node1.isAdd();
      node0.copyInformationFromForTree((Node) null);
      int int0 = 883;
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(12, 42, 155);
      node_SideEffectFlags3.setMutatesArguments();
      node1.isArrayLit();
      node0.setIsSyntheticBlock(false);
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = new Node((-349), 0, 42);
      node2.isArrayLit();
      node2.setIsSyntheticBlock(false);
      Node node3 = node1.clonePropsFrom(node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node3.isOptionalArg();
      node2.getChildAtIndex((-4082));
      Node node4 = new Node(3656, node1);
      node3.getExistingIntProp(0);
      int int0 = (-290);
      Node.mergeLineCharNo(int0, node3.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = new Node(120, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.detachChildren();
      node1.isThrow();
      Node node2 = new Node(152, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node3 = new Node(1042, 47, 1814);
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      Node.mergeLineCharNo((-3768), 1112);
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node2.isInc();
      Node node4 = new Node(16, node3, node0, node0);
      node4.isLabelName();
      node0.isLabelName();
      node0.isCatch();
      Node node5 = new Node((-1605), node4);
      node1.isComma();
      node3.isVoid();
      node4.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = new Node((-1131), 1814, (-1131));
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.srcref(node2);
      Node node3 = new Node(32, node1, node2);
      node0.isDec();
      Node node4 = Node.newString(50, "Object#Key", 31, 30);
      node0.addChildToFront(node4);
      Node node5 = Node.newString((-1605), "E", 16, 53);
      node1.replaceChildAfter(node0, node5);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(34, 93, 108);
      Node node1 = new Node((-2779), node0);
      node1.isOptionalArg();
      Node node2 = node1.srcrefTree(node0);
      node1.setDouble(1);
      node2.getCharno();
      node2.getStaticSourceFile();
      node0.mayMutateArguments();
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2779
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node node0 = new Node(1042, 34, (-3203));
      node0.isArrayLit();
      node0.setIsSyntheticBlock(false);
      Node.mergeLineCharNo(0, 0);
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isString();
      node0.isInc();
      Node node1 = new Node(83, node0, node0, node0);
      Node node2 = Node.newString(51, "limit is negative");
      node2.isLabelName();
      node1.isLabelName();
      Node node3 = Node.newNumber(1909.0, 16, 41);
      node3.isCatch();
      Node node4 = new Node(4, node0);
      node1.isComma();
      node2.isVoid();
      node4.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(32, node0, node1, node1, node0);
      node2.addChildBefore(node0, node0);
      nodeArray0[0].isAssign();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0), 1571, 147);
      Node node1 = new Node(147, node0, 846, 1382);
      node1.getIntProp(36);
      node1.getLineno();
      node0.getSideEffectFlags();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(116, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node0.setChangeTime(0);
      node2.setCharno(4095);
      Node node3 = node1.srcrefTree(node0);
      node3.setDouble(57.0);
      node3.getCharno();
      // Undeclared exception!
      try { 
        node1.getStaticSourceFile();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BREAK 116 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(47);
      node0.isAssignAdd();
      node2.getJsDocBuilderForNode();
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(52, node0, node0, node0);
      node3.srcref(node1);
      node2.removeFirstChild();
      node0.isTrue();
      node2.isGetterDef();
      node0.mayMutateArguments();
      node2.isArrayLit();
      node0.setQuotedString();
      nodeArray0[0].isDebugger();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = 114;
      Node node0 = new Node(114);
      node0.isGetterDef();
      Node node1 = new Node(4095, 43, 53);
      node1.isUnscopedQualifiedName();
      Node node2 = node0.cloneTree();
      node1.isString();
      node1.setLineno(29);
      node0.isFromExterns();
      node2.isCase();
      String string0 = "";
      Node.newString(2513, "", (-2000), 0);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.getSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "{<J");
      ObjectType objectType1 = ObjectType.cast(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      // Undeclared exception!
      try { 
        enumType1.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isEquivalentTo(node0);
      Node node1 = new Node(722, 51, 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isThrow();
      node0.isNumber();
      node0.isHook();
      node1.isStringKey();
      node1.putIntProp(46, 32);
      Node node2 = Node.newNumber(1.0);
      Node node3 = new Node(35, node1, node2);
      Node node4 = new Node((-485), node0, node3, 38, 42);
      node4.isNoSideEffectsCall();
      node2.isInc();
      node2.isRegExp();
      Node node5 = node3.cloneNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node4.putProp((-3436), templateType0);
      node5.getBooleanProp(43);
      Node node6 = node4.copyInformationFrom(node5);
      node6.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50);
      node0.isAssign();
      node1.isGetterDef();
      node0.isInc();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isNoSideEffectsCall();
      node1.addChildrenAfter(node2, node0);
      node2.isVoid();
      node1.removeChild(node0);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      String string0 = "OBJECT_NUMBER_STRING_BOOLEAN";
      EnumType enumType0 = jSTypeRegistry0.createEnumType("OBJECT_NUMBER_STRING_BOOLEAN", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.toMaybeEnumElementType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newString("", 122, 122);
      node0.isFunction();
      Node node1 = new Node(141, 53, 787);
      node1.isUnscopedQualifiedName();
      Node node2 = node1.cloneTree();
      node1.isEquivalentToShallow(node1);
      node1.setLineno(33);
      node2.isFromExterns();
      node1.isCase();
      Node node3 = Node.newString(33, "", 30, 57);
      node2.isInc();
      node1.isContinue();
      Node.newString("?7@ELFq~5@}J`Db(*{");
      node3.isGetProp();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "second new child has existing sibling");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      simpleErrorReporter0.error("M+TS6iV0XA=C<dEzY7", (String) null, 10, (-1730));
      HashSet<BooleanType> hashSet0 = new HashSet<BooleanType>();
      LinkedList<BooleanType> linkedList0 = new LinkedList<BooleanType>(hashSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(1765, node0);
      BooleanType booleanType0 = mock(BooleanType.class, new ViolatedAssumptionAnswer());
      hashSet0.add(booleanType0);
      node1.isAnd();
      node1.children();
      Node node2 = node0.cloneTree();
      node0.useSourceInfoIfMissingFrom(node2);
      Node node3 = new Node(51);
      node0.addChildrenToFront(node3);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = new Node(124, 124, 9);
      node0.isOnlyModifiesArgumentsCall();
      Node.mergeLineCharNo(51, 52);
      node0.isFor();
      node0.isInc();
      boolean boolean0 = node0.isLabelName();
      node0.isSwitch();
      Node node1 = null;
      Node node2 = node0.getChildBefore((Node) null);
      node0.isNot();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) null, jSType0, jSType0, jSType0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      node3.toString(boolean1, boolean0, boolean2);
      int int0 = 89;
      // Undeclared exception!
      try { 
        Node.newNumber((double) node2.CHANGE_TIME, int0, node3.LENGTH);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("", 122, 122);
      Node node1 = new Node(130, 130, 788);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isUnscopedQualifiedName();
      Node node3 = node1.cloneTree();
      node2.isEquivalentToShallow(node1);
      node2.setLineno(33);
      node3.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isInstanceOf();
      node2.isLabelName();
      node0.isGetterDef();
      node2.wasEmptyNode();
      Node node4 = node3.copyInformationFromForTree(node2);
      node4.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = new Node((-4674));
      node0.getType();
      Node node1 = Node.newNumber((double) (-4674), 12, 51);
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("<y);~]2F&kmC=oukg6N");
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(37, "<y);~]2F&kmC=oukg6N");
      node1.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("<y);~]2F&kmC=oukg6N", "cannot store more than MAX_VALUE elements", (-1278), 77);
      node0.addChildToFront(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getProp(34);
      Node node2 = node1.getChildBefore(node1);
      node2.getFirstChild();
      node1.isNot();
      boolean boolean1 = true;
      node0.toString(boolean0, boolean1, boolean1);
      int int0 = 740;
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(155, 4, 47);
      node0.isArrayLit();
      Node.mergeLineCharNo(56, 113);
      Node node2 = new Node(2478, node1, 155, 1);
      Node node3 = Node.newString(16, "MI{zp)Q~8B=u", 727, 973);
      node1.isObjectLit();
      node2.removeFirstChild();
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newNumber(2782.289, (-1363), 4);
      Node node1 = new Node(120, node0);
      node1.detachChildren();
      node1.isThrow();
      Node node2 = new Node(152, node1);
      node2.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.isInstanceOf();
      node1.isLabelName();
      node2.isGetterDef();
      node2.wasEmptyNode();
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node0.isBreak();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0);
      Node node1 = new Node(43, node0, 115, 13);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node1.setDouble((-99.451));
      String string0 = "4WUi)=r5KS.P/y+3/";
      InputId inputId0 = new InputId(string0);
      node1.setInputId(inputId0);
      node1.addChildrenAfter(node0, node0);
      double double0 = (-881.83985611);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString(".mq_F,4i;C`6", 55, 3);
      node0.isFunction();
      Node node1 = new Node(4095, 8, (-1304));
      node1.isUnscopedQualifiedName();
      Node node2 = node0.cloneTree();
      node1.isEquivalentToShallow(node2);
      node0.setLineno(49);
      node0.isFromExterns();
      node0.isCase();
      Node node3 = Node.newString(2, ".mq_F,4i;C`6", 8, 49);
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.getSideEffectFlags();
      node2.siblings();
      node1.isCast();
      node3.isEquivalentToTyped(node1);
      Node.newString(86, "", 15, (-790));
      Node node4 = new Node(56, node3);
      node4.isReturn();
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(41, 41, 42);
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.isFromExterns();
      node1.siblings();
      Node node2 = new Node(1);
      node0.getLength();
      int int0 = Node.LAST_PROP;
      node1.addSuppression((String) null);
      node2.getType();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString(100, "com.gogle.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      Node node2 = new Node(29, node1);
      node0.children();
      node1.getLength();
      node0.isLabel();
      node0.isObjectLit();
      node2.getJSDocInfo();
      node1.setLineno(114);
      Node node3 = Node.newNumber((double) 31);
      node2.isLocalResultCall();
      node3.isEquivalentTo(node2);
      Node node4 = node0.getParent();
      Node node5 = Node.newString("com.gogle.javascript.rhino.Node");
      node5.children();
      node5.getStaticSourceFile();
      Node node6 = new Node(903, node2);
      node3.isWith();
      node6.isOnlyModifiesThisCall();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node0);
      node_NodeMismatch0.equals((Object) null);
      node5.cloneNode();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(41);
      node0.isQualifiedName();
      Node node1 = new Node(50, node0);
      node1.getLength();
      Node node2 = Node.newNumber(1.2);
      node0.getQualifiedName();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node1.detachChildren();
      node1.isThrow();
      String string0 = "?7@ELFq~5@}J`Db(*{";
      Node node3 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch", (-1134), 40);
      node0.addChildToBack(node1);
      Node node4 = Node.newNumber((double) 0, (-610), 4095);
      node3.addChildrenToBack(node3);
      node3.useSourceInfoFrom((Node) null);
      node3.isString();
      node3.isEmpty();
      node2.setString(string0);
      node4.getString();
      node4.isName();
      // Undeclared exception!
      try { 
        node0.hasMoreThanOneChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newString(100, "com.google.javascript.rhino.Node", 100, 100);
      Node node1 = new Node(100, node0);
      node1.getLength();
      node1.isOr();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.copyInformationFrom(node2);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(41, 41, 42);
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.isFromExterns();
      node1.siblings();
      Node node2 = new Node(1);
      node0.getLength();
      Node node3 = new Node(4095);
      Node node4 = node1.getLastSibling();
      node3.isScript();
      Node node5 = new Node((-1677), node0, node0, node4, node1, 1777, 2);
      node5.isVar();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(47);
      node0.isAssignAdd();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node3 = node1.getLastSibling();
      node3.isExprResult();
      node3.setIsSyntheticBlock(false);
      node1.isHook();
      node0.isLabel();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "input_id");
      node3.cloneTree();
      Node node4 = Node.newString(42, "Object#Key", 30, (-3295));
      Node node5 = Node.newNumber(531.1177474021187);
      node4.checkTreeEquals(node5);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(116, node0);
      node1.getLength();
      Node node2 = Node.newNumber((double) 16);
      node0.setChangeTime(0);
      node2.setCharno(4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.addSuppression((String) null);
      simpleErrorReporter0.error("E", "E", 36, 124);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isVoid();
      node0.cloneTree();
      node1.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node[] nodeArray0 = new Node[14];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, 51, 32);
      Node node2 = node0.cloneTree();
      node1.getSourceFileName();
      node2.isFromExterns();
      node1.siblings();
      Node node3 = new Node(52);
      node2.getLength();
      int int0 = Node.LAST_PROP;
      node2.addSuppression("d#cnWblt6j");
      node1.copyInformationFrom(node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "}/m i2UD;a0MHhgC-";
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, (String) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      // Undeclared exception!
      try { 
        enumElementType1.getRootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.areAllFlagsSet();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.toString(false, true, true);
      node0.isLabelName();
      node0.isGetterDef();
      node0.wasEmptyNode();
      Node node1 = new Node(43, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newString(109, "com.google.javasNr4pt.rhino.Node", 109, 109);
      Node node1 = Node.newNumber(3289.78009636259, 36, 109);
      Node node2 = Node.newString("StringNode: str is null");
      Node node3 = new Node(775, node2);
      node2.checkTreeEqualsImpl(node3);
      node0.detachChildren();
      node0.isThrow();
      Node node4 = new Node((-813), node1);
      node3.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("com.google.javasNr4pt.rhino.Node", "com.google.javasNr4pt.rhino.Node", 47, 35);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node5 = new Node(37, node0, 65535, 64);
      node5.getLastSibling();
      Node node6 = Node.newString("CharMatcher.ASCII", 775, 36);
      node6.setIsSyntheticBlock(false);
      node6.isHook();
      node4.isLabel();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node.newNumber((double) 31);
      node5.removeFirstChild();
  }
}
