/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:08:40 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber(1570.1696604646795);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags4);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      JSType[] jSTypeArray0 = new JSType[0];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "s{*%]`Gdu)a";
      int int0 = 17;
      Node node0 = Node.newString(547, "gM/KUD?pyc3[*+Z7#", 152, 152);
      JSType jSType0 = null;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null);
      immutableList0.asList();
      EnumType enumType0 = jSTypeRegistry0.createEnumType(templatizedType0.EMPTY_TYPE_COMPONENT, node0, jSType0);
      // Undeclared exception!
      try { 
        enumType0.toMaybeEnumType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(104);
      Node node1 = new Node(104, node0);
      node0.getSourceOffset();
      node0.setOptionalArg(false);
      Node node2 = node1.getChildAtIndex((-2509));
      node2.getSideEffectFlags();
      node0.toString();
      node1.setLineno(node0.JSDOC_INFO_PROP);
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.setStaticSourceFile(staticSourceFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node((-3743), (-3743), (-3743));
      Node node1 = new Node(3411, node0, node0, node0, 0, 3411);
      node0.getBooleanProp(901);
      node1.getChangeTime();
      node1.getBooleanProp((-1204));
      String string0 = null;
      Node node2 = Node.newString((String) null);
      node2.checkTreeEquals(node0);
      node2.wasEmptyNode();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node3.getString();
      // Undeclared exception!
      try { 
        node3.mayMutateArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("Cfd*]xNVFr&I!Ymz\"4", (-452), 0);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.getIntProp(9);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-1646);
      Node[] nodeArray0 = new Node[4];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("");
      Node node1 = new Node(2481, node0, node0, node0, node0, 0, 31);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node1, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      ImmutableList<JSType> immutableList0 = enumElementType1.getTemplateTypes();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      nodeArray0[0] = node2;
      String string0 = "|(dJ";
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(0);
      int int0 = (-704);
      Node node1 = new Node(0, node0, node0, node0);
      node0.addChildBefore(node1, node1);
      String string0 = null;
      int int1 = (-4096);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2602;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2602, (Node) null, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(57);
      Node node1 = new Node(512, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(51, node1, (-2326), 4);
      nodeArray0[1] = node2;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      nodeArray0[2] = null;
      jSDocInfo0.setNoAlias(false);
      Node node3 = new Node(0, nodeArray0);
      node3.getJsDocBuilderForNode();
      nodeArray0[2].getIndexOfChild(nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "";
      Node node0 = new Node(7, 11, (-1553));
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Element");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      String string1 = "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition";
      // Undeclared exception!
      try { 
        enumElementType0.getOwnPropertyJSDocInfo(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(37, 1192, (-3196));
      Node node1 = Node.newString("reflected_object", 481, 605);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isOnlyModifiesThisCall();
      node0.toStringTree();
      node0.getString();
      node2.getJSDocInfo();
      boolean boolean0 = node0.isExprResult();
      node2.isEquivalentTo(node0, boolean0, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(3086.109750807);
      node0.srcref((Node) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-512), nodeArray0);
      Node node1 = new Node(2, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.putProp((-512), (Object) null);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 19;
      Node[] nodeArray0 = new Node[4];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType(" [");
      jSTypeArray0[1] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
      jSTypeArray0[2] = (JSType) functionType0;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("", 536870912, 3849);
      int int0 = 0;
      Node node1 = Node.newNumber(0.0);
      node0.getChildBefore(node1);
      Node node2 = new Node(node0.LENGTH, node0, node0, node0, node0, node0.SIDE_EFFECTS_FLAGS_MASK, int0);
      node0.toString();
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      // Undeclared exception!
      try { 
        node3.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 117;
      Node node0 = Node.newString("<", 117, 117);
      node0.removeFirstChild();
      Node node1 = Node.newString("");
      node1.replaceChild(node0, (Node) null);
      node0.isVarArgs();
      // Undeclared exception!
      try { 
        node0.isSyntheticBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      nodeArray0[0] = node0;
      Node node1 = new Node(8, node0, (-130), 12);
      nodeArray0[1] = node1;
      Node node2 = new Node(47, node1, node1, node0, node0);
      nodeArray0[2] = node2;
      int int1 = 53;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1024;
      Node node0 = new Node(1024);
      node0.isAssign();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1024
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 48, 48);
      node0.isOnlyModifiesThisCall();
      node0.getInputId();
      node0.setSourceEncodedPositionForTree(1612);
      node0.getString();
      String string0 = "?";
      Node node1 = Node.newString(string0, node0.MAX_COLUMN_NUMBER, node0.SLASH_V);
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      Node node2 = new Node(53, node0, node0);
      nodeArray0[2] = node2;
      Node node3 = new Node(30, node1, node1);
      nodeArray0[3] = node3;
      Node node4 = new Node(111, nodeArray0, 911, 43);
      node4.getChildAtIndex(node1.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString((-1101), (String) null, (-1101), 1949);
      node0.isFromExterns();
      Node node1 = new Node(node0.FLAG_NO_THROWS, node0, node0, node0);
      char[] charArray0 = new char[7];
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      node1.copyInformationFromForTree(node0);
      Node node2 = Node.newNumber(0.0);
      node0.removeChild(node1);
      node2.isVarArgs();
      // Undeclared exception!
      try { 
        node1.wasEmptyNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("ytQU]]", 0, 43);
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(559);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      simpleSourceFile0.getLineOffset(108);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 83;
      Node.newString(83, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = null;
      JSType.toMaybeTemplatizedType((JSType) null);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, jSTypeArray0);
      // Undeclared exception!
      try { 
        templatizedType0.getTemplateTypeMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.setCharno(0);
      node1.removeProp(36);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.setSourceEncodedPosition(0);
      node0.isNot();
      node0.isOnlyModifiesArgumentsCall();
      node0.getFirstChild();
      node0.isFalse();
      node0.getLineno();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.toString(false, false, true);
      int int0 = 807;
      node0.setLineno(int0);
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1721
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "";
      simpleErrorReporter0.error("Object#Element", "", (-2298), 0);
      simpleErrorReporter0.warning("", "Object#Element", 0, 0);
      Node node0 = Node.newNumber((double) 706, 706, (-1878));
      Node node1 = new Node(4, node0);
      Node node2 = new Node(706, node0, node1, node1, node0);
      JSType jSType0 = jSTypeRegistry0.getType(string0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node2, jSType0);
      enumType0.clearResolved();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node3 = enumElementType0.getPropertyNode(jSType0.NOT_A_TYPE);
      // Undeclared exception!
      try { 
        node3.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node((-165));
      node0.getStaticSourceFile();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null);
      int int0 = 113;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      node0.getString();
      node0.mayMutateGlobalStateOrThrow();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node node2 = node0.getChildAtIndex(11);
      node0.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2866, 16, (-1044));
      Node node1 = new Node(2866, node0, node0, node0, node0, 12, 8);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(48, 48, 48);
      node0.getDirectives();
      Node node1 = new Node(77, node0, node0);
      node0.removeProp(8);
      node1.isOnlyModifiesArgumentsCall();
      node1.getLineno();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2866;
      Node node0 = Node.newNumber((double) 2866, 16, (-1044));
      Node node1 = new Node(706, node0, node0, node0, node0);
      node0.replaceChildAfter(node1, node1);
      Node node2 = new Node(int0, node0, node0, node0, node0, node0.COLUMN_BITS, node0.FLAG_NO_THROWS);
      node2.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-512), nodeArray0);
      Node node1 = new Node(2, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.putProp((-512), (Object) null);
      node0.isDec();
      Node node3 = new Node(1, node2, node1, node1, node1, (-1517), 55);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      node0.getString();
      node0.mayMutateGlobalStateOrThrow();
      Node node3 = new Node(36, node0, node1);
      Node node4 = new Node(node2.INPUT_ID, node3, node3);
      int int0 = 2716;
      Node[] nodeArray0 = null;
      int int1 = 1133;
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node node2 = node1.getChildAtIndex(32);
      node2.getIndexOfChild(nodeArray0[1]);
      // Undeclared exception!
      try { 
        nodeArray0[1].isVarArgs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      node0.getString();
      node0.mayMutateGlobalStateOrThrow();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isNew();
      node2.siblings();
      node0.isReturn();
      Node node3 = new Node(38, node2, node0);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node2);
      node3.useSourceInfoIfMissingFrom(node4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setThrows();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(2596, (Node[]) null, 2596, 1522);
      Node node1 = Node.newNumber((double) node0.FLAG_LOCAL_RESULTS, node0.NO_SIDE_EFFECTS, node0.COLUMN_BITS);
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-2);
      Node node0 = new Node((-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      int int1 = 35;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(63, nodeArray0, 4095, 0);
      int int2 = 455;
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getString();
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, (Node) null);
      node_NodeMismatch1.equals("second new child has existing sibling");
      node1.setVarArgs(true);
      node1.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node((-165));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = jSDocInfo0.getAssociatedNode();
      Node node2 = node0.useSourceInfoIfMissingFrom((Node) null);
      node2.addChildrenToBack(node1);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = null;
      try {  
      jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      } catch(NullPointerException e) {}
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      simpleSourceFile0.getLineOffset(108);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      Node node0 = new Node(0);
      node0.getStaticSourceFile();
      Node node1 = Node.newString(1504, "Not declared as a type name", 4, 29);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0);
      node1.setSourceEncodedPositionForTree(32);
      node0.getStaticSourceFile();
      Node node2 = new Node(1504, node0, node0, node0, 46, 4);
      Node node3 = Node.newNumber((double) 54);
      Node node4 = new Node(2989, node2, node3, node3, node3);
      node4.isNew();
      node2.setSourceEncodedPositionForTree(49);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(true);
      node0.getJsDocBuilderForNode();
      node1.setLength(46);
      node1.isWith();
      node1.setLength(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(886);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node1.isAdd();
      node0.siblings();
      node1.isReturn();
      Node node2 = new Node(42, node1, node0);
      Node node3 = jSDocInfo0.getAssociatedNode();
      node0.useSourceInfoIfMissingFromForTree(node3);
      Node node4 = node2.useSourceInfoIfMissingFrom(node0);
      node_SideEffectFlags2.setThrows();
      node3.isReturn();
      // Undeclared exception!
      try { 
        node4.isHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      Node node2 = new Node(53, node0, node0);
      nodeArray0[2] = node2;
      Node node3 = new Node(30, node1, node1);
      nodeArray0[3] = node3;
      node2.isDelProp();
      node0.getDirectives();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2866, 16, (-1044));
      node0.isVarArgs();
      node0.getAncestor(126);
      node0.wasEmptyNode();
      node0.isScript();
      Node node1 = node0.cloneNode();
      node0.getChildCount();
      node1.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      node0.isSyntheticBlock();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      int int0 = 9;
      Node node0 = new Node(9, 2989, 9);
      Node node1 = new Node((-729), node0);
      Node node2 = new Node(48, node1, 706, 1020);
      Node node3 = new Node((-729), node1, node1, node2, 53, 55);
      Node node4 = new Node(int0, node3, node3);
      node4.isLabelName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      simpleSourceFile0.getLineOffset(108);
      node1.getLineno();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      Node node2 = new Node(53, node0, node0);
      nodeArray0[2] = node2;
      node2.setDouble(2655.236439021);
      node0.isThrow();
      int int0 = (-2119);
      nodeArray0[2].setCharno(int0);
      int int1 = (-1729);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      Node.mergeLineCharNo((-2373), 39);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) objectType0, (JSType) templateType0);
      jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node2.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("ASSIGN_URSH", false);
      node2.cloneTree();
      simpleSourceFile0.getLineOffset((-102));
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node2.isScript();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      simpleSourceFile0.getLineOffset(108);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.isScript();
      node1.isOnlyModifiesThisCall();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      Node node1 = node0.getAncestor((-1516));
      node0.wasEmptyNode();
      node1.isScript();
      // Undeclared exception!
      try { 
        node1.cloneNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = new Node((-459), node0, node0, 125, 55);
      node2.addChildrenToBack(node1);
      boolean boolean0 = true;
      node0.setWasEmptyNode(boolean0);
      node2.isNull();
      node2.getInputId();
      int int0 = (-2317);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(31, 31, 13);
      Node node1 = new Node(41, node0, node0);
      Node node2 = new Node(41, node1, 0, 39);
      node2.isCase();
      node0.removeChildren();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node.extractLineno(2608);
      Node node0 = Node.newString((-381), "com.google.javascript.rhino.Node$ObjectPropListItem");
      Node node1 = new Node((-2454), node0, node0, 50, 0);
      node1.useSourceInfoFromForTree(node0);
      node0.siblings();
      Node node2 = Node.newString(13, "com.google.javascript.rhino.Node$ObjectPropListItem", 1463, 37);
      node1.setCharno(15);
      node2.wasEmptyNode();
      node2.children();
      Node node3 = new Node((-381), node1, node0);
      node1.getSideEffectFlags();
      node3.getChangeTime();
      node3.isNoSideEffectsCall();
      Node node4 = node3.srcref(node0);
      node4.getString();
      node1.isTry();
      // Undeclared exception!
      try { 
        node4.hasMoreThanOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      node1.getChildCount();
      node0.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 2608;
      Node.extractLineno(2608);
      Node node0 = Node.newString((-381), "com.google.javascript.rhino.Node$ObjectPropListItem");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags6);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.setLength(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -381
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(16);
      Node node1 = Node.newNumber((-1.0));
      node1.isArrayLit();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(30);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node0.isVarArgs();
      node1.wasEmptyNode();
      node0.isScript();
      node1.cloneNode();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      node1.isScript();
      node2.cloneNode();
      node2.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, 16, (-1044));
      node0.isVarArgs();
      Node node1 = new Node(51, node0, node0, 31, 37);
      node1.isSetterDef();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, (Node) null);
      node_NodeMismatch1.equals("second new child has existing sibling");
      node0.isDefaultCase();
      node0.setDouble(2513.46706245);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Unknown class name", false);
      simpleSourceFile0.getLineOffset(32);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile1);
      node0.isOnlyModifiesThisCall();
      node0.isScript();
      node2.isOnlyModifiesThisCall();
      node0.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(16);
      node0.getQualifiedName();
      Node node1 = Node.newNumber((-1.0));
      node1.isArrayLit();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(30);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node0.isVarArgs();
      node1.wasEmptyNode();
      node0.isScript();
      Node node2 = node1.cloneNode();
      node2.getDouble();
      node1.isLabelName();
      Node.newNumber((double) 38);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.getSourceFileName();
      node0.isNot();
      Node node4 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", false);
      Node node5 = node4.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node4.setStaticSourceFile(simpleSourceFile0);
      Node node6 = Node.newString("L*<a} C", 16, 1);
      node6.isOnlyModifiesThisCall();
      node5.siblings();
      node2.isScript();
      Node node7 = new Node(4095, node2);
      node7.getCharno();
      node4.addChildAfter(node6, node5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isComma();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Unknown class name", false);
      simpleSourceFile0.getLineOffset(32);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile1);
      node0.isOnlyModifiesThisCall();
      node0.isScript();
      node2.isOnlyModifiesThisCall();
      node0.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      Node node2 = new Node(53, node0, node0);
      nodeArray0[2] = node2;
      Node node3 = new Node(30, node1, node1);
      nodeArray0[3] = node3;
      node2.isDelProp();
      node0.setDouble(4095);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(16);
      node0.getQualifiedName();
      Node node1 = new Node((-1639), node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newNumber((double) 4);
      node2.removeChild(node1);
      node3.isVarArgs();
      // Undeclared exception!
      try { 
        node2.wasEmptyNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      Node node2 = new Node(53, node0, node0);
      nodeArray0[2] = node2;
      Node node3 = Node.newString((-964), "");
      Node node4 = new Node(40, node2, node3);
      node1.isDelProp();
      node2.getDirectives();
      node1.isVarArgs();
      node0.isObjectLit();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 40, 1, 132);
      node0.srcref(node1);
      node0.isSyntheticBlock();
      node0.isName();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node2.getJsDocBuilderForNode();
      node1.isInc();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.replaceChildAfter(node2, node1);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node((-4096), node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, (Node) null);
      node_NodeMismatch1.equals("second new child has existing sibling");
      Node.mergeLineCharNo(4621, 31);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      int int0 = (-1516);
      Node node1 = new Node(130, node0);
      node0.wasEmptyNode();
      node1.children();
      Node node2 = null;
      Node node3 = new Node(1, node1, node0);
      node1.getSideEffectFlags();
      node1.getChangeTime();
      JSType[] jSTypeArray0 = new JSType[6];
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node0.cloneNode();
      node2.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      simpleSourceFile0.getLineOffset(12);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getChildAtIndex(100);
      node3.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newNumber(0.0);
      node3.setLength(1023);
      node3.isWith();
      node1.setLength(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-378));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags(57);
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node2.getChildAtIndex(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      Stack<JSType> stack0 = null;
      try {
        stack0 = new Stack<JSType>();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry1.createFunctionType((JSType) objectType0, true, jSTypeArray0);
      Node node1 = Node.newString(119, "Unknown class name", 32, 0);
      node1.isNot();
      node1.setIsSyntheticBlock(true);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(1);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.getChildAtIndex(0);
      node0.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node(46, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      node1.checkTreeEqualsImpl((Node) null);
      boolean boolean0 = node0.isVoid();
      node1.setVarArgs(boolean0);
      node1.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isNoSideEffectsCall();
      Node.newString((-108), "Not declared as a type name");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node((-646));
      Node node1 = new Node((-646), node0);
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node((-3084));
      node0.getQualifiedName();
      Node node1 = Node.newNumber(3851.35142634);
      node0.isArrayLit();
      node1.isUnscopedQualifiedName();
      node0.setChangeTime((-1189));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1499);
      node1.isVarArgs();
      node0.wasEmptyNode();
      node0.isScript();
      Node node2 = node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      node3.getDouble();
      node3.isLabelName();
      node3.isOnlyModifiesArgumentsCall();
      Node node4 = node3.getChildAtIndex(node1.DIRECTIVES);
      node4.getIndexOfChild(node2);
      // Undeclared exception!
      try { 
        node2.isTypeOf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(16);
      Node node1 = Node.newNumber((double) 1);
      Node node2 = Node.newNumber(524.391212754639);
      Node node3 = new Node(31, node0, node0);
      Node node4 = new Node(53, node0, 8, 32);
      node4.setDouble(node2.FLAG_ARGUMENTS_UNMODIFIED);
      node1.isThrow();
      double double0 = 876.775646054688;
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(43, 43, 0);
      Node node1 = Node.newNumber((double) 39, 2329, 56);
      node1.getDirectives();
      node1.setLength(44);
      node0.isExprResult();
      node0.checkTreeEquals(node1);
      node0.getStaticSourceFile();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSType0.unboxesTo();
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node2.getJsDocBuilderForNode();
      node1.isInc();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.srcrefTree(node2);
      node1.getStaticSourceFile();
      node3.replaceChildAfter(node2, node1);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1121.4333209051229));
      node2.isArrayLit();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node2.isScript();
      Node node3 = node2.cloneNode();
      node3.getDouble();
      node0.isLabelName();
      Node.newNumber((-608.7612404817));
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node(46, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      node1.checkTreeEqualsImpl((Node) null);
      node0.isSwitch();
      node0.detachChildren();
      boolean boolean0 = node0.isVoid();
      // Undeclared exception!
      try { 
        node1.setVarArgs(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(31, 31, 13);
      Node node1 = new Node(41, node0, node0);
      node0.isNull();
      node1.getInputId();
      node0.putBooleanProp((-1782), false);
      Node node2 = null;
      node0.addChildToBack((Node) null);
      Node node3 = new Node(node0.IS_DISPATCHER, node0, node0);
      node0.isOnlyModifiesThisCall();
      int int0 = 103;
      Node node4 = null;
      try {
        node4 = new Node(int0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      modificationVisitor0.caseBooleanType();
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      node1.getChildCount();
      node0.toString(false, true, false);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node((-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      boolean boolean0 = node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.isNot();
      Node node1 = node0.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node0.getChildCount();
      node1.toString(true, false, false);
      int int0 = 2093;
      nodeArray0[2].putBooleanProp(int0, boolean0);
      String string0 = "';Wt>)8]|CBvSq0pn";
      // Undeclared exception!
      try { 
        nodeArray0[1].setSourceFileForTesting(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      node1.setJSDocInfo(jSDocInfo0);
      Node node2 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node2.getSourceFileName();
      node0.isNot();
      Node node3 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", false);
      node3.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node node4 = Node.newString("L*<a} C", 16, 1);
      node2.isSetterDef();
      node4.isQuotedString();
      Node.extractLineno(46);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, 16, (-1044));
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(51, node0, node0, 31, 37);
      node0.isNumber();
      Node node2 = Node.newString("quoted");
      node2.siblings();
      node1.isScript();
      Node node3 = new Node(53, node0);
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("ytQU]]", 0, 0);
      node0.isArrayLit();
      node0.removeChildren();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(47, node0, node0);
      node1.isDelProp();
      node0.getDirectives();
      node1.isVarArgs();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      node2.setLength(1023);
      node2.isWith();
      node1.setLength(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-378));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(57);
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(stack0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.setOptionalArg(true);
      node1.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node(46, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      node1.checkTreeEqualsImpl(node2);
      node0.isVoid();
      Node node3 = new Node((-1516), 40, (-3215));
      node2.putProp(54, node3);
      node1.setVarArgs(false);
      node1.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.isWhile();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node2.isScript();
      Node node3 = node2.cloneNode();
      node3.getDouble();
      node0.isLabelName();
      Node.newNumber((-608.7612404817));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node0.setChangeTime(8);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node3.isVarArgs();
      node3.wasEmptyNode();
      node0.isScript();
      node1.cloneNode();
      node0.getDouble();
      node0.isLabelName();
      double double0 = 0.7;
      Node node4 = Node.newNumber(double0);
      node2.isComma();
      node4.isFalse();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "second new child has existing sibling";
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node(46, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setQuotedString();
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      Node node3 = null;
      node1.checkTreeEqualsImpl((Node) null);
      node0.isVoid();
      // Undeclared exception!
      try { 
        node1.isHook();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(8, 8, 8);
      Node node1 = new Node(8, node0, node0, 56, 119);
      node1.setSideEffectFlags(2379);
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      node2.setLength(1023);
      node2.isWith();
      node1.setLength(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-378));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node node3 = Node.newString("mZS", 85, 2221);
      node3.getExistingIntProp((-33));
      node2.getInputId();
      node0.isNull();
      node1.hasOneChild();
      node0.isOptionalArg();
      int int0 = (-5098);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.clearSideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      Node node1 = Node.newString("RM[9+-M{3", 36, 36);
      Node node2 = Node.newString("");
      node2.getInputId();
      node2.isNull();
      node1.hasOneChild();
      node0.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(120);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      node0.isSyntheticBlock();
      Node node1 = new Node(39, 1540, 2);
      node0.checkTreeEquals(node1);
      node0.getStaticSourceFile();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = "W})CF,8!&Uh+!1a\\l";
      JSType jSType0 = null;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      // Undeclared exception!
      try { 
        enumElementType1.getOwnerFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.isWhile();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.newNumber((double) 40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node2.isScript();
      Node node3 = node2.cloneNode();
      node3.getDouble();
      node3.isScript();
      Node node4 = node1.cloneNode();
      node4.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-3084));
      node0.getQualifiedName();
      Node node1 = Node.newNumber(3851.35142634);
      node0.isArrayLit();
      node1.isUnscopedQualifiedName();
      node0.setChangeTime((-1189));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1499);
      node1.isVarArgs();
      node0.wasEmptyNode();
      node0.isScript();
      Node node2 = node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = new Node(52, node1, node2, node0, node1);
      node3.isNot();
      node0.cloneNode();
      node0.setIsSyntheticBlock(true);
      node0.isComma();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(32);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.addChildToBack(node2);
      Node node4 = new Node(57, node1, (Node) null);
      node0.isOnlyModifiesThisCall();
      Node node5 = null;
      Node node6 = new Node(node4.FLAG_GLOBAL_STATE_UNMODIFIED, node5, node0);
      node3.isDelProp();
      node0.getLastChild();
      double double0 = 2120.3540493037563;
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(31, 31, 13);
      Node node1 = new Node(41, node0, node0);
      node0.isNull();
      node1.getInputId();
      node1.detachChildren();
      node1.isSyntheticBlock();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("y!@crO2&{Gb", (-3335), 621);
      node0.isCall();
      node0.children();
      node0.getStaticSourceFile();
      node0.hasOneChild();
      Node node1 = Node.newNumber((double) 15, 26, 4095);
      Node node2 = new Node(2, node0, node0, node1);
      node0.checkTreeEquals(node2);
      node2.getSideEffectFlags();
      int int0 = (-287);
      node2.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node0.getIntProp(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString(11, "second new child has existing sibling", 11, (-4149));
      Node node1 = new Node(46, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      templateType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node2 = Node.newString(18, "com.google.javascript.rhino.Node$NumberNode", (-1323), (-925));
      node0.isNot();
      Node node3 = node2.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.getJsDocBuilderForNode();
      node3.isInc();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.replaceChildAfter(node0, node4);
      Node node5 = new Node(node2.SYNTHETIC_BLOCK_PROP, node4);
      int int0 = (-1465);
      Node node6 = new Node(node3.IS_DISPATCHER, node0, node5, node4, int0, node2.DIRECT_EVAL);
      node6.hasMoreThanOneChild();
      node5.isInc();
      node3.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      Node node1 = Node.newNumber((double) 12, (-1137), 1196);
      Node node2 = new Node(49, node1, node1, node1, 147, 30);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node1.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node2.checkTreeEqualsImpl(node0);
      node3.isVoid();
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node1);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      jSTypeArray0[6] = (JSType) objectType0;
      jSTypeArray0[7] = (JSType) objectType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isDefaultCase();
      node2.setDouble(43);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(" is not a number node", 12, 33);
      node0.removeFirstChild();
      Node node1 = Node.newString(" is not a number node");
      node0.replaceChild((Node) null, node1);
      node1.isVarArgs();
      boolean boolean0 = node1.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node0.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(43, 43, 0);
      Node node1 = Node.newNumber((double) 39, 2329, 56);
      node1.getDirectives();
      node1.removeProp(37);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setSourceEncodedPosition((-984));
      node0.isNot();
      node1.isOnlyModifiesArgumentsCall();
      Node node3 = new Node(31, node2);
      Node node4 = node3.getFirstChild();
      Node[] nodeArray0 = new Node[26];
      Node node5 = Node.newString(1525, "#'/", 49, (-4536));
      nodeArray0[0] = node5;
      nodeArray0[1] = node4;
      nodeArray0[2] = node4;
      nodeArray0[3] = node4;
      nodeArray0[4] = node1;
      nodeArray0[5] = node2;
      nodeArray0[6] = node2;
      nodeArray0[7] = node1;
      Node node6 = new Node(42, nodeArray0);
      node6.isFalse();
      nodeArray0[4].getLineno();
      nodeArray0[6].getNext();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.setCharno(0);
      node1.setLength(37);
      node2.isExprResult();
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 49);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      objectType0.isNumberObjectType();
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      Node node1 = new Node(55, node0, 35, (-818));
      node0.isCase();
      node0.removeChildren();
      node1.mayMutateArguments();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node((-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(35, node0, node0, node0, node0, 455, 30);
      node0.copyInformationFromForTree(node1);
      node0.isHook();
      node0.isFalse();
      node0.setSourceEncodedPosition((-2));
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("ttQU]]", 0, 43);
      node0.isVar();
      node0.getStaticSourceFile();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(43, 43, 0);
      Node node1 = Node.newNumber((double) 39, 2329, 56);
      node1.getDirectives();
      node1.setLength(44);
      node0.isExprResult();
      node1.isVarArgs();
      node0.wasEmptyNode();
      node0.isScript();
      node0.cloneNode();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1121.4333209051229));
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node2.isScript();
      Node node3 = node2.cloneNode();
      node3.getDouble();
      node0.isLabelName();
      Node.newNumber((double) 52);
      node1.isSwitch();
      node2.setSourceFileForTesting("8LXs");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      modificationVisitor0.caseBooleanType();
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      node1.getChildCount();
      Node node2 = Node.newNumber((double) 4);
      node2.isComma();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString(1, "MuDq`v^4=:i", 0, 83);
      Node node1 = new Node(40);
      node0.replaceChild(node1, node1);
      node0.isVarArgs();
      int int0 = 39;
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node1.isTry();
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isComma();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Unknown class name", false);
      simpleSourceFile0.getLineOffset(32);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile1);
      node0.isOnlyModifiesThisCall();
      node0.isScript();
      node2.isOnlyModifiesThisCall();
      node0.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.getSourceFileName();
      node0.isNot();
      Node node4 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", true);
      Node node5 = node4.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node4.setStaticSourceFile(simpleSourceFile0);
      Node node6 = Node.newString("L*<a} C", 16, 1);
      node6.isOnlyModifiesThisCall();
      node5.siblings();
      node2.isScript();
      Node node7 = new Node(4095, node2);
      node7.getCharno();
      node4.isNew();
      node1.children();
      node5.isSwitch();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node2 = Node.newString(32, "");
      Node node3 = new Node((-409), node2, node0);
      node0.isDelProp();
      node0.getDirectives();
      node1.isVarArgs();
      node0.setType(152);
      node0.isObjectLit();
      node0.getStaticSourceFile();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      node0.getQualifiedName();
      Node.newNumber((double) 30);
      node0.isArrayLit();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      SimpleErrorReporter.getMessage1("mZS", (Object) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node((-3084));
      Node node1 = new Node((-5265), node0, node0);
      Node node2 = Node.newNumber((double) 54);
      node2.setLength((-3051));
      node2.isWith();
      node1.setLength(123);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-592));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(3071);
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.setOptionalArg(false);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      Node node1 = Node.newNumber(0.0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("Not declared as a constructor", 126, 54);
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node3 = new Node(600, nodeArray0, 4, 51);
      int int0 = (-1136);
      Node node4 = new Node(int0, node0, nodeArray0[2], node0, nodeArray0[4], node1.REFLECTED_OBJECT, node3.REFLECTED_OBJECT);
      nodeArray0[4].copyInformationFromForTree(node0);
      node4.isHook();
      // Undeclared exception!
      try { 
        nodeArray0[2].isFalse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getQualifiedName();
      node0.isSyntheticBlock();
      node0.checkTreeEquals(node0);
      node0.isSetterDef();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(0, 0, (-1959));
      node0.getQualifiedName();
      Node node1 = Node.newNumber((double) 52);
      node0.isVoid();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(278);
      node0.isDefaultCase();
      node1.wasEmptyNode();
      node1.isScript();
      node0.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      int int0 = 85;
      Node node3 = new Node(int0, node0, node1);
      node3.getDouble();
      node2.isLabelName();
      // Undeclared exception!
      try { 
        node3.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node((-3084));
      node0.getQualifiedName();
      Node node1 = Node.newNumber(3851.35142634);
      node0.isArrayLit();
      node1.isUnscopedQualifiedName();
      node0.setChangeTime((-1189));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1499);
      node0.wasEmptyNode();
      node0.isScript();
      Node node2 = node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.getDouble();
      node2.isLabelName();
      node1.isOnlyModifiesArgumentsCall();
      Node node3 = node2.getChildAtIndex(48);
      node3.getIndexOfChild(node2);
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      objectType0.isNumberObjectType();
      Node node1 = new Node(12);
      node1.isSyntheticBlock();
      node1.setIsSyntheticBlock(true);
      node0.toString(false, false, false);
      node0.getAncestor(3269);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry2.createParameters((List<JSType>) linkedList0);
      Node node3 = node1.useSourceInfoFrom((Node) null);
      node3.getSourceOffset();
      node2.isUnscopedQualifiedName();
      Node node4 = Node.newString(objectType0.NOT_A_TYPE);
      // Undeclared exception!
      try { 
        node4.isLocalResultCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.getSourceFileName();
      node0.isNot();
      Node node4 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", false);
      Node node5 = node4.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node4.setStaticSourceFile(simpleSourceFile0);
      node3.setIsSyntheticBlock(false);
      node2.isFromExterns();
      node5.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("STRING L*<a} C\n", false);
      node0.getChildCount();
      node0.toString(false, true, false);
      node2.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.getSourceFileName();
      node0.isNot();
      Node node4 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", false);
      Node node5 = node4.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node4.setStaticSourceFile(simpleSourceFile0);
      Node.NodeMismatch node_NodeMismatch0 = node5.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node5);
      node2.isDefaultCase();
      Node node6 = new Node(47, node1, node0, node1, (-480), 4095);
      double double0 = Double.POSITIVE_INFINITY;
      node6.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString("ttQU]]", 0, 43);
      node0.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getStaticSourceFile();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n", (-1837), (-1837));
      node0.isLabel();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      objectType0.isNumberObjectType();
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      node0.getAncestor(1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = Node.newNumber(4158.1172);
      Node node3 = node2.useSourceInfoFrom(node0);
      node0.getSourceOffset();
      node1.isUnscopedQualifiedName();
      node2.isLocalResultCall();
      Node node4 = new Node(43, node3, node3, (-867), 16);
      Node node5 = Node.newString(36, "", 49, 52);
      node5.isSetterDef();
      node4.isQuotedString();
      node4.checkTreeEqualsImpl((Node) null);
      node1.getStaticSourceFile();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isNew();
      node0.siblings();
      node0.isReturn();
      Node node1 = new Node(1181, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(87);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node node3 = Node.newString("Not declared as a constructor", 40, 29);
      node0.getIndexOfChild(node2);
      node3.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.isWhile();
      Node node3 = Node.newString("mZS", (-1134), 83);
      node2.srcrefTree(node3);
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node2.getInputId();
      node0.isNull();
      node1.hasOneChild();
      node2.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2110);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node2.isSyntheticBlock();
      node0.getDirectives();
      node3.setLineno(21);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("ttQU]]", 0, 43);
      node0.setSideEffectFlags(102);
      node0.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "mZS";
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      node0.isSyntheticBlock();
      Node node1 = new Node(63, node0);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node(39, 1540, 2);
      node0.isScript();
      Node node3 = node0.cloneNode();
      node3.getDouble();
      node2.isLabelName();
      double double0 = 3198.691316551763;
      Node.newNumber(double0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(1570.1696604646795);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString((String) null, 1581, (-497));
      node1.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.getString();
      node0.toStringTree();
      Node node1 = new Node(3103, 37, 39);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 16, 52);
      node2.getDirectives();
      node2.setLength(57);
      node1.getBooleanProp(48);
      node1.copyInformationFromForTree(node0);
      node1.isExprResult();
      node2.checkTreeEquals(node0);
      node2.getStaticSourceFile();
      node0.addChildAfter(node2, node1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString(117, "node is not a child");
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      node0.isReturn();
      boolean boolean0 = node0.isHook();
      node0.setVarArgs(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      jSTypeArray0[0] = jSType0;
      JSTypeRegistry jSTypeRegistry1 = null;
      try {
        jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 116, 1978);
      int int0 = 461845907;
      Node node1 = new Node(461845907, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.children();
      node1.setSourceEncodedPositionForTree(117);
      node2.setSourceFileForTesting("");
      node0.isCall();
      node0.isEquivalentToTyped(node2);
      node1.getChangeTime();
      node1.isDefaultCase();
      Node.extractCharno(57);
      Node node3 = node1.detachFromParent();
      node0.isName();
      int int1 = 36;
      Node node4 = node3.getAncestor(int1);
      node4.setDouble(node0.INFERRED_FUNCTION);
      // Undeclared exception!
      try { 
        node1.isFor();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 9;
      Node node0 = new Node(9, 9, 9);
      node0.srcrefTree((Node) null);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(1024);
      Node node1 = Node.newString("prev is not a child of this node.", 154, 30);
      node0.isLabel();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(57, (-1479), (-1258));
      node0.isAssign();
      Node node1 = Node.newNumber((-1852.9303399507446), 2542, 1946);
      node0.getDirectives();
      node1.setLength((-3661));
      node1.isExprResult();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString(49, "STRING L*<a} C\n", 12, 152);
      node3.getSourceFileName();
      node0.isNot();
      Node node4 = node1.cloneNode();
      node1.setIsSyntheticBlock(false);
      node0.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING L*<a} C\n", false);
      Node node5 = node4.cloneTree();
      simpleSourceFile0.getLineOffset(51);
      node2.isEquivalentTo(node4);
      node4.setStaticSourceFile(simpleSourceFile0);
      node5.isLabelName();
      Node.newNumber((double) 50);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      Node node1 = Node.newNumber(1.2, 159, 5734);
      node1.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node2.setLength(3039);
      node1.isExprResult();
      node0.checkTreeEquals(node1);
      node1.getStaticSourceFile();
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber(3086.109750807);
      Node node1 = new Node(12, (Node) null, node0, 32, 15);
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(3324, "", 3324, 3324);
      node0.detachChildren();
      node0.getType();
      Node node1 = new Node(63, 49, 54);
      node1.detachChildren();
      node1.addChildrenToBack(node0);
      node0.replaceChildAfter(node1, node1);
      Node.newString(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(8192, (Node[]) null);
      Node node1 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.isStringKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      node2.setLength(1023);
      node2.isWith();
      node1.setLength(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-378));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(57);
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(stack0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.setOptionalArg(true);
      node1.getIndexOfChild(node3);
      node2.isDec();
      node1.isOr();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString(0, "missing prop: ", 0, 52);
      Node node1 = Node.newNumber(49.0);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node0.isReturn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isHook();
      node0.setVarArgs(false);
      Node node3 = Node.newNumber(0.5);
      node2.isEquivalentToShallow(node3);
      node2.isDec();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node((-3084));
      node0.getQualifiedName();
      Node node1 = Node.newNumber(3851.35142634);
      node0.isArrayLit();
      node1.isUnscopedQualifiedName();
      node1.toStringTree();
      node0.setChangeTime((-1189));
      node0.getDirectives();
      node1.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1499);
      node0.wasEmptyNode();
      Node node2 = node1.cloneNode();
      node2.getDouble();
      node1.addChildToFront(node0);
      node2.isLabelName();
      node1.isOnlyModifiesArgumentsCall();
      Node node3 = node2.getChildAtIndex(48);
      node1.isString();
      node3.isNew();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.toStringTree();
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoCompile(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.setCharno(0);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node3.setWasEmptyNode(false);
      node0.setSourceEncodedPosition(0);
      node0.isNot();
      node0.isOnlyModifiesArgumentsCall();
      node0.getFirstChild();
      node0.isFalse();
      node0.getLineno();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-708.429));
      Node node1 = Node.newNumber(1.2);
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setMutatesArguments();
      node0.isReturn();
      node1.isHook();
      node0.setVarArgs(false);
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      Node node3 = Node.newString(39, "mZS", 48, (-2504));
      node3.isArrayLit();
      node1.isUnscopedQualifiedName();
      node3.setChangeTime(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node2.getDouble();
      node2.isOnlyModifiesArgumentsCall();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2882, 39, (-1044));
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(51, node0, node0, 31, 37);
      Node node2 = Node.newString("quoted");
      node2.siblings();
      node1.isScript();
      node0.getLength();
      Node node3 = new Node(53, node0);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setChangeTime((-1101));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(57, (-1479), (-1258));
      node0.isAssign();
      Node node1 = Node.newNumber((-1852.9303399507446), 2542, 1946);
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      node1.isVarArgs();
      InputId inputId0 = new InputId("");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(34, nodeArray0);
      node2.setInputId(inputId0);
      node1.getIntProp(12);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      nodeArray0[1] = node1;
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = new Node((-1827), node1, node0, 50, (-808));
      Node node3 = Node.newString("quoted");
      node2.siblings();
      Node node4 = new Node(4095, 47, 4095);
      Node node5 = new Node(8, node4, node0, node3, node4);
      node5.isScript();
      int int0 = (-1793);
      Node node6 = new Node(int0, nodeArray0[1]);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(57, (-1479), (-1258));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      node0.setJSType(functionType0);
      node0.isAssign();
      Node node1 = Node.newNumber((-1852.9303399507446), 2542, 1946);
      node0.getDirectives();
      node1.setLength((-3661));
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(3277, 3277, (-1874));
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      node0.isStringKey();
      Node node1 = Node.newString(656, "");
      node1.getJSType();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.hasMoreThanOneChild();
      Node node3 = Node.newString("mZS", (-1134), 83);
      Node node4 = node2.srcrefTree(node3);
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.wasEmptyNode();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.getInputId();
      node0.isNull();
      node1.hasOneChild();
      node2.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node2.isReturn();
      node0.isHook();
      node3.setVarArgs(true);
      node4.isEquivalentToShallow(node3);
      Node.extractLineno(37);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      Node.newNumber((double) 47);
      Node node1 = Node.newString(37, "    ", 43, (-1531));
      node1.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(31);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node1.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, 16, (-1087));
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(51, node0, node0, 31, 37);
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(310);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      node0.isStringKey();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(39);
      node0.isSyntheticBlock();
      node0.isOnlyModifiesArgumentsCall();
      node0.putBooleanProp(1265, true);
      node0.isEmpty();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "node is not a child";
      Node node0 = Node.newString(117, "node is not a child");
      node0.detachChildren();
      Node node1 = new Node(49, node0, node0, node0, 32, 52);
      node0.detachChildren();
      node1.addChildrenToBack(node0);
      node1.replaceChildAfter(node0, node0);
      Node.newString(string0);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[1] = node0;
      Node node1 = new Node(31, 46, 57);
      node1.getStaticSourceFile();
      node1.isNew();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(42, nodeArray0);
      Node node1 = new Node(2186, node0, node0, 301, 12);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(53, node1, node1, node2, node2, 29, 57);
      node3.getChildBefore(node1);
      node0.isTrue();
      node1.isUnscopedQualifiedName();
      node3.setChangeTime(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node2.getDouble();
      node2.isOnlyModifiesArgumentsCall();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      objectType0.isNumberObjectType();
      node0.putBooleanProp(1, false);
      objectType0.getDisplayName();
      Node node1 = Node.newNumber((double) 30, 119, 0);
      Node node2 = null;
      Node node3 = new Node(54, node1, node1, (Node) null, 3470, 54);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node3);
      node1.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = null;
      try {
        node_NodeMismatch0 = new Node.NodeMismatch(node4, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(3277, 3277, (-1874));
      node0.getStaticSourceFile();
      node0.isVar();
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node0.getFirstChild();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3277
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      Node node1 = Node.newString("GREATEST_FUNCTION_TYPE", 1023, 8);
      node1.isExprResult();
      node0.isDelProp();
      node1.getDirectives();
      node1.getSourceOffset();
      node1.isVarArgs();
      node1.isObjectLit();
      node0.getProp(53);
      Node.newString((-1481), "", 559, 48);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(52, 2, 2);
      double double0 = 1.0;
      node0.getString();
      int int0 = (-274);
      // Undeclared exception!
      try { 
        Node.newNumber(double0, int0, node0.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 2 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node1.isParamList();
      Node node3 = Node.newString("mZS", (-1134), 83);
      node2.srcrefTree(node3);
      node0.isGetProp();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setAllFlags();
      node2.isVarArgs();
      node2.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(39);
      node_SideEffectFlags1.clearAllFlags();
      node3.isStringKey();
      Node.newString(57, "Dt`+B");
      node3.getJSType();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.detachChildren();
      node0.isSyntheticBlock();
      Node node1 = new Node(4095, node0);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node((-4442), 2285, 30);
      Node node3 = new Node(1, node0, node2, node1);
      node3.isScript();
      Node node4 = node1.cloneNode();
      node4.getDouble();
      double double0 = 891.537296904;
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(105, "<");
      Node node2 = new Node(0, node0, node1);
      Node.newString(46, "");
      Node node3 = Node.newNumber((double) 37, 153, (-3891));
      Node node4 = new Node(112, node2, node3);
      node1.isDelProp();
      node2.getDirectives();
      node3.isVarArgs();
      node1.isObjectLit();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(0.0);
      node0.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(44);
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = Node.newString(120, (String) null);
      node2.isStringKey();
      String string0 = "\"2C~!='R-";
      Node node3 = Node.newString(node1.NO_SIDE_EFFECTS, string0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      // Undeclared exception!
      try { 
        node3.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(3302, 3302, (-1874));
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      node0.isStringKey();
      Node node1 = Node.newString(656, "");
      node1.removeChildren();
      node1.getJSType();
      Iterable<Node> iterable0 = new HashSet<Node>();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      Node node1 = Node.newString(51, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(50, node0, node0);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(53, node1, node1, node2, node2, 29, 57);
      node3.getChildBefore(node1);
      node3.isTrue();
      node0.isUnscopedQualifiedName();
      Node node4 = new Node(47, node0, (Node) null);
      int int0 = 929;
      // Undeclared exception!
      try { 
        node4.setChangeTime(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "@Z=?s8M";
      Node node0 = new Node(52, 52, 176128);
      Node node1 = new Node(3132, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree((Node) null);
      int int0 = (-1883);
      Node node3 = Node.newString(node2.SIDE_EFFECT_FLAGS, string0, int0, node1.IS_NAMESPACE);
      Node node4 = new Node(node3.REFLECTED_OBJECT, node2, node3, node2, node3.DIRECT_EVAL, node1.FLAG_LOCAL_RESULTS);
      node4.getSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber((-1003.3254567838), 42, 79);
      node0.getDirectives();
      node0.setLength(2053);
      node0.isExprResult();
      Node node1 = null;
      node0.checkTreeEquals((Node) null);
      node0.getStaticSourceFile();
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(2445, "com.google.javascript.rhino.Node$AncestorIterable");
      nodeArray0[0] = node0;
      Node node1 = new Node(16, nodeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node_NodeMismatch0.equals(jSDocInfo0);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(2445, "com.google.javascript.rhino.Node$AncestorIterable");
      nodeArray0[0] = node0;
      Node node1 = new Node(16, nodeArray0);
      Node.newNumber(0.0, 52, (-1200));
      Node node2 = new Node(87855567, nodeArray0);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.isWhile();
      node2.isParamList();
      Node.newString("mZS", (-2129), (-467));
      Node node3 = node1.srcrefTree(node2);
      node2.isGetProp();
      node0.setChangeTime(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      node0.isOnlyModifiesArgumentsCall();
      node2.wasEmptyNode();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(57);
      node_SideEffectFlags1.clearAllFlags();
      node0.isStringKey();
      Node node4 = Node.newString(1, "o(Xp");
      node3.getJSType();
      node0.children();
      node3.addChildToBack(node4);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      Node node3 = Node.newString("mZS", 26, 52);
      Node node4 = node1.srcrefTree(node3);
      node2.isUnscopedQualifiedName();
      node1.setChangeTime(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(586);
      node3.isVarArgs();
      node3.wasEmptyNode();
      node4.getInputId();
      Node.newString((String) null, 32, 1685);
      node0.hasOneChild();
      node0.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(node2.QUOTED_PROP);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      // Undeclared exception!
      try { 
        node0.isSyntheticBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("L*<a} C");
      node0.getDirectives();
      Node node1 = new Node(1513, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = Node.newString(",/WOWPY");
      Node node3 = node0.cloneNode();
      node2.setIsSyntheticBlock(true);
      node1.isComma();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("originalname", false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, 2885, (-1044));
      Node node1 = new Node(51, node0, node0, 31, 37);
      node0.isNumber();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setNoCompile(true);
      node0.getJsDocBuilderForNode();
      node0.setLength(1023);
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = Node.newNumber(1.0, 2, 64);
      node2.isAdd();
      node2.isVarArgs();
      node0.isObjectLit();
      Node.newString(29, "", 112, 35);
      Node node3 = node1.srcref(node2);
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(57, (-1479), (-1258));
      node0.isAssign();
      Node node1 = Node.newNumber((-1852.9303399507446), 2542, 1946);
      node1.setSourceEncodedPosition(36);
      node0.getDirectives();
      Node node2 = Node.newNumber((double) 48, 42, 40);
      node2.cloneNode();
      node0.isNew();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      Node node1 = new Node((-1479), node0, 47, 2455);
      node0.isCase();
      node1.removeChildren();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      Node node1 = node0.srcrefTree(node0);
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node1, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.toMaybeEnumElementType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("ytQU]]", 0, 43);
      Node.newNumber(4089.6523547985);
      node0.getStaticSourceFile();
      node0.isRegExp();
      node0.setChangeTime(43);
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getInputId();
      node0.setSourceEncodedPositionForTree(1612);
      HashSet<String> hashSet0 = new HashSet<String>(2);
      node0.setDirectives(hashSet0);
      String string0 = node0.getString();
      Node node1 = Node.newString(string0, node0.MAX_COLUMN_NUMBER, node0.SLASH_V);
      node1.getInputId();
      Node[] nodeArray0 = null;
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(35, 1493, 1493);
      Node node1 = new Node(1493, node0, node0);
      Node node2 = node0.detachFromParent();
      node2.isLocalResultCall();
      Node node3 = node0.copyInformationFrom(node2);
      Node node4 = new Node(1668, node2, (Node) null, node3);
      InputId inputId0 = node4.getInputId();
      node3.putProp(node1.IS_DISPATCHER, inputId0);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        node1.appendStringTree(appendable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "c~$03smwiC\\";
      Node node0 = Node.newString("c~$03smwiC");
      node0.removeFirstChild();
      node0.getInputId();
      node0.setIsSyntheticBlock(true);
      node0.isThrow();
      Node.newNumber((double) 37, 15, 49);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c~$03smwiC", "c~$03smwiC");
      Locale locale0 = null;
      String string1 = "com.google.common.collect.ImmutableMapKeySet";
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(2885);
      Node node1 = new Node(37, node0, node0, 37, (-1230));
      node0.isEquivalentTo(node1);
      node0.isThis();
      Node node2 = Node.newString("'0Zz]ODEL`", 15, 15);
      node2.setSourceEncodedPosition(29);
      Node node3 = Node.newString("BITXOR");
      node2.isEquivalentTo(node3);
      node3.setQuotedString();
      node3.getAncestors();
      Node node4 = Node.newString("");
      node2.isAdd();
      node2.hasChildren();
      node2.isAssignAdd();
      Node node5 = Node.newString("BITXOR");
      node3.isNoSideEffectsCall();
      node0.hasMoreThanOneChild();
      Node.newString(112, (String) null, 32, 15);
      node5.isRegExp();
      node4.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(4095, node0, node0);
      node1.putBooleanProp(54, false);
      objectType0.getDisplayName();
      Node node2 = node0.cloneNode();
      node2.isComma();
      Node node3 = new Node(1016, node1, node1);
      node3.isHook();
      node1.isDec();
      Node node4 = new Node(32, 655, (-951));
      node4.isOr();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isNot();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node0.getChildCount();
      node0.isSyntheticBlock();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isNot();
      Node node1 = node0.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isEquivalentTo(node1, false, false, false);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.getChildCount();
      node1.toString(false, true, false);
      nodeArray0[1].isSyntheticBlock();
      // Undeclared exception!
      try { 
        nodeArray0[1].isName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node0.isStringKey();
      Node node1 = Node.newString(15, "o(Xp");
      node0.getJSType();
      Iterable<Node> iterable0 = new Vector<Node>(29);
      node1.addChildToBack(node0);
      node0.getLastSibling();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.setLength(3160);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = Node.newString(30, "$g>VqU &rlz^`", 15, 50);
      Node node2 = node0.cloneNode();
      node0.setIsSyntheticBlock(false);
      node2.isComma();
      Node node3 = new Node((-755), node1, node2);
      node3.isHook();
      node0.isDec();
      node3.isOr();
      node3.isNE();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      node_NodeMismatch0.equals(linkedList0);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node(3124, node0, node0, node0, node0);
      node1.isVarArgs();
      node1.isObjectLit();
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = new Node(5734);
      node2.srcref(node1);
      node2.isString();
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(43, 43, 0);
      Node node1 = new Node(0, node0, node0, node0, node0, 42, 12);
      node1.getDirectives();
      node1.setSourceEncodedPosition(48);
      node1.getDirectives();
      Node node2 = new Node(8202, 1528, 3325);
      node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(47);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("@uo5mokL@\"|Ronx3", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      ImmutableList<JSType> immutableList0 = enumElementType1.getTemplateTypes();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node4.isNew();
      // Undeclared exception!
      try { 
        node1.isExprResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, node0, node0, 38, 37);
      nodeArray0[1] = node1;
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BITXOR");
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
      node1.putIntProp(1842, 130);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      Node node2 = Node.newNumber((-1140.49354223673));
      node2.isWhile();
      node2.isParamList();
      Node node3 = Node.newString("mZS", (-2129), 55);
      Node node4 = node1.srcrefTree(node2);
      node2.isGetProp();
      node3.cloneTree();
      node0.setChangeTime(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node4.hasChildren();
      node4.isAssignAdd();
      Node.newString("mZS");
      node1.isNoSideEffectsCall();
      node2.hasMoreThanOneChild();
      Node node5 = Node.newString(87855567, "BITXOR", 57, 698);
      node5.isRegExp();
      node3.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, 16, (-1044));
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(51, node0, node0, 31, 37);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isEquivalentTo(node2, true, false, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.getQualifiedName();
      node0.replaceChildAfter(node1, node1);
      String string0 = "+7\"#&&Qf4mv]9Gl";
      Node.newString(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber(264.5634, (-1903), (-1903));
      node0.isCase();
      node0.getQualifiedName();
      node0.setOptionalArg(false);
      node0.isThrow();
      node0.isThrow();
      node0.isAnd();
      Node.extractCharno(8);
      Node node1 = Node.newString("source_file");
      node1.removeProp(13);
      node0.isTry();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      objectType0.isNumberObjectType();
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      node0.isContinue();
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getRootNode();
      node0.addChildrenToBack((Node) null);
      node0.wasEmptyNode();
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      node0.getStaticSourceFile();
      node0.getSourceOffset();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
      node0.getJSDocInfo();
      node0.isNot();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("c~$03smwiC");
      Node node1 = new Node(13, node0, node0, node0, node0, 2097152, 56);
      Node node2 = Node.newNumber((double) 0);
      node1.isWhile();
      Node.newString("c~$03smwiC", 30, 110);
      Node node3 = node1.srcrefTree(node2);
      node0.isUnscopedQualifiedName();
      node3.setChangeTime(1);
      node0.isVarArgs();
      Node node4 = new Node(304, node1, node3);
      node4.wasEmptyNode();
      node0.getInputId();
      node1.isNull();
      node2.hasOneChild();
      node1.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node node5 = Node.newString(4095, "c~$03smwiC");
      node5.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2336, 2336, 2336);
      node0.isExprResult();
      node0.isFor();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber(2962.0, (-405), (-405));
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      node0.isExprResult();
      node0.isName();
      // Undeclared exception!
      try { 
        node0.getStaticSourceFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node.newString(",(pyoFl");
      Node node0 = Node.newString("|zzqR?&90jD:4,0Hg", (-1850), 0);
      Node node1 = Node.newNumber((double) 29);
      node1.setLength(49);
      node1.isWith();
      Node node2 = new Node(3249, node1, node1, node1, (Node) null, 4, 49);
      node2.setLength(node1.SYNTHETIC_BLOCK_PROP);
      String string0 = "l<C>9Po(wK";
      int int0 = (-1);
      Node node3 = Node.newString(string0, node0.COLUMN_BITS, int0);
      node3.getExistingIntProp(node0.DECR_FLAG);
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(3198.691316551763);
      Node node1 = Node.newString("originalname", 15, 42);
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(35, 1493, 1493);
      Node node1 = new Node(1493, node0, node0);
      Node node2 = node0.detachFromParent();
      node2.isLocalResultCall();
      node2.cloneTree();
      Node node3 = node0.copyInformationFrom(node2);
      node3.getJsDocBuilderForNode();
      Node node4 = new Node(1668, node2, (Node) null, node3);
      InputId inputId0 = node4.getInputId();
      node3.putProp(node1.IS_DISPATCHER, inputId0);
      node2.getDirectives();
      Appendable appendable0 = null;
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "s95rfC*fdvf \"WzH^rC";
      Node node0 = Node.newString("s95rfC*fdvf \"WzH^rC");
      Node node1 = new Node(599, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.srcref(node1);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node1.children();
      node1.isCall();
      Node.newString("'0Zz]ODEL`");
      node2.setString("BITXOR");
      Node node3 = node2.getLastSibling();
      Node node4 = node3.copyInformationFrom(node2);
      // Undeclared exception!
      try { 
        node4.getJSDocInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 599
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(4, nodeArray0);
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl(nodeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "mZS";
      Node node0 = Node.newString("mZS");
      Node node1 = new Node(56, node0, node0, node0, node0, 32, 42);
      node0.setLineno(1915);
      Node node2 = Node.newNumber((-2230.92897754559));
      node2.isArrayLit();
      node0.isUnscopedQualifiedName();
      node1.setChangeTime(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node2.isVarArgs();
      node2.isCast();
      Node node3 = node1.cloneNode();
      node2.isScript();
      node0.getQualifiedName();
      node1.isScript();
      Node node4 = Node.newNumber((double) 50);
      node4.replaceChildAfter(node0, node0);
      node3.isInc();
      // Undeclared exception!
      try { 
        node1.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "aU%~V uY)Pa4";
      Node.newString("aU%~V uY)Pa4");
      Node node0 = Node.newString("aU%~V uY)Pa4", 39, 54);
      node0.setLength(1023);
      node0.setString("BITXOR");
      node0.isWith();
      node0.setLength(47);
      Node node1 = Node.newString("aU%~V uY)Pa4", 85, 4);
      node1.getExistingIntProp(16);
      InputId inputId0 = new InputId(string0);
      node1.getString();
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 16
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString("Not declared as a type name", 98, 49);
      Node node2 = node0.srcrefTree(node1);
      node1.isGetProp();
      Node node3 = node0.cloneTree();
      node3.setChangeTime(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1999));
      node3.hasChildren();
      node3.isAssignAdd();
      Node node4 = Node.newString("Object#Key");
      node4.isNoSideEffectsCall();
      node0.hasMoreThanOneChild();
      Node node5 = Node.newString((-1703), "Object#Key", 159, (-1959));
      Node node6 = new Node(29, (Node) null, node1, 1, 4095);
      node6.isRegExp();
      node4.hasMoreThanOneChild();
      node2.getChildCount();
      node1.useSourceInfoFrom(node5);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(1056.650107099831);
      Node node1 = Node.newString(54, "");
      Node node2 = Node.newNumber((double) 55, 2, 32);
      node2.appendStringTree((Appendable) null);
      int int0 = (-1831);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isNot();
      node0.cloneNode();
      node0.setIsSyntheticBlock(false);
      node0.isNull();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.isExprResult();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "change_time";
      Node node0 = Node.newString((-3045), "change_time");
      Node node1 = new Node((-3045), node0, node0, node0, node0);
      node1.putIntProp(4, 48);
      node1.isGetElem();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isQualifiedName();
      node0.isOnlyModifiesArgumentsCall();
      node2.isEquivalentToShallow(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.putProp(57, "change_time");
      node1.addChildAfter(node0, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.checkTreeEquals(node2);
      // Undeclared exception!
      try { 
        FileSystemHandling.shouldAllThrowIOExceptions();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      boolean boolean0 = node0.isQuotedString();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(105, "<");
      Node node2 = new Node(0, node0, node1);
      String string0 = "";
      Node node3 = Node.newString(46, "");
      Node node4 = new Node(105, node3, node3, node0);
      node3.getInputId();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      node1.putProp(node2.VAR_ARGS_NAME, simpleSourceFile0);
      // Undeclared exception!
      try { 
        node4.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber(1.2);
      node0.isWhile();
      Node node1 = Node.newString("Object#Key", 43, 50);
      node1.srcrefTree(node0);
      node0.setChangeTime(2228);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      Node node2 = new Node((-653), node0, node1);
      node2.isVarArgs();
      node2.wasEmptyNode();
      Node node3 = new Node((-897), 8, 8232);
      node3.getInputId();
      node0.isNull();
      node2.hasOneChild();
      node0.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(4096);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("h1PWfjNovZx&a`A&)z");
      Node node1 = new Node(63, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.srcref(node2);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.children();
      node1.isCall();
      String string0 = "'0Zz]O\\DEL`";
      Node node3 = Node.newString("'0Zz]ODEL`");
      node1.setString("*>P*z=hE05");
      Node node4 = node3.getLastSibling();
      node3.copyInformationFrom(node4);
      // Undeclared exception!
      try { 
        node4.getJSDocInfo();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ARRAYLIT is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(77);
      Node node1 = new Node(77, node0);
      node0.setOptionalArg(false);
      Node node2 = node1.getChildAtIndex((-2509));
      node0.getSideEffectFlags();
      node1.setLineno(29);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.mayMutateArguments();
      node2.siblings();
      node1.setSourceEncodedPositionForTree(46);
      node1.setLength((-1060));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node1.isVarArgs();
      Node.newString("");
      node2.isFunction();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 159, 159);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.setLength((-609));
      node0.isExprResult();
      simpleErrorReporter0.warning("0", "=CyUJ|=UQ3|Ta#3", 911, 57);
      node1.getStaticSourceFile();
      Node node2 = Node.newString(1661, "Ja~Z");
      Node node3 = new Node(43, node0, node0, 4096, (-1062));
      node3.useSourceInfoFrom(node0);
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.removeChildAfter((Node) null);
      Node[] nodeArray0 = new Node[0];
      String string0 = "5kft";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "com.google.common.collect.ImmutableSet";
      Node node0 = Node.newString((-945), "com.google.common.collect.ImmutableSet", (-945), 159);
      node0.detachChildren();
      node0.getType();
      Node node1 = new Node(29, 153, 49);
      node0.detachChildren();
      node0.addChildrenToBack(node1);
      Node node2 = null;
      node0.replaceChildAfter((Node) null, node1);
      Node node3 = Node.newString(string0);
      node3.addChildToBack(node2);
      // Undeclared exception!
      try { 
        node3.isLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString((-3378), "");
      node0.copyInformationFrom(node1);
      Node.newNumber((double) 52, 4, 15);
      Node node2 = new Node(60, node0, node1);
      node1.isDelProp();
      node2.getDirectives();
      node1.isVarArgs();
      node1.isObjectLit();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.putBooleanProp(3203, false);
      Node node1 = Node.newString("RM[9+-M{3", 36, 36);
      Node node2 = new Node(2124, node0, node1, node0);
      node2.isScript();
      node0.isScript();
      Node.newNumber((-429.5717037509743));
      Node node3 = node0.getLastSibling();
      node2.copyInformationFrom(node1);
      node2.getJSDocInfo();
      node0.isQuotedString();
      Node node4 = Node.newString(46, "");
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node5.useSourceInfoFrom(node3);
      node4.getLength();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString(".", 4, 3887);
      Node node2 = new Node(1902, node1, node1, node0, 2, (-3045));
      Node node3 = node2.srcrefTree(node0);
      node0.isUnscopedQualifiedName();
      Node node4 = new Node((-1351), node2, node1, node0);
      node4.setChangeTime(node1.LAST_PROP);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.isVarArgs();
      node2.wasEmptyNode();
      // Undeclared exception!
      try { 
        node2.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2271));
      node0.isExprResult();
      node0.hasChild(node0);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = Node.newNumber((double) 6, 2, 0);
      Node.newNumber((-1568.2625359509), 31, 38);
      Node node2 = new Node(32, node1, node1, 2147483645, 4095);
      Node node3 = new Node(43, node2, node0, node2, 2, 2);
      node3.replaceChild(node0, node0);
      node1.setChangeTime(node2.JSDOC_INFO_PROP);
      node1.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newNumber(2962.0, 2336, (-2271));
      node0.isTypeOf();
      node0.isVarArgs();
      node0.isObjectLit();
      Node node1 = new Node(37);
      Node node2 = new Node(48);
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3160, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      Node node1 = Node.newString("RM[9+-M{3", 36, 36);
      node0.isVoid();
      Node node2 = new Node(15, node1, 42, 43);
      node2.replaceChildAfter(node1, node1);
      node2.isInc();
      jSType0.autoboxesTo();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      node0.getProp(57);
      Object object0 = new Object();
      String string0 = "free_call";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, string0, (Object[]) nodeArray0);
      node0.appendStringTree(printWriter0);
      // Undeclared exception!
      try { 
        node0.isNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPosition(3501);
      Node node1 = Node.newString("8{l/");
      Node node2 = new Node(105);
      node0.isEquivalentTo(node2);
      node0.setQuotedString();
      node2.getAncestors();
      Node node3 = Node.newString("<");
      node1.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      node_SideEffectFlags0.setAllFlags();
      node2.checkTreeEquals(node3);
      node3.getStaticSourceFile();
      node1.addChildAfter(node0, node3);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(43, 43, 0);
      Node node1 = null;
      node0.isEquivalentTo((Node) null);
      // Undeclared exception!
      try { 
        node0.isThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(2885);
      Node node1 = new Node(37, node0, node0, 37, (-1230));
      Node node2 = Node.newNumber((-734.482), 57, 230);
      node2.getDirectives();
      node0.setLength(2233);
      node1.isExprResult();
      String string0 = node1.checkTreeEquals(node0);
      int int0 = (-487);
      int int1 = 13;
      Node.newString(string0, int0, int1);
      node0.isNew();
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2885
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      int int0 = 44;
      Node node0 = new Node(44);
      node0.isSyntheticBlock();
      node0.isOnlyModifiesArgumentsCall();
      node0.putBooleanProp(1265, true);
      node0.setDouble(44);
      node0.isFor();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString(117, "node is not a child");
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 53, 154, 50);
      node0.setSourceEncodedPosition(29);
      node1.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3202);
      node1.isVarArgs();
      node0.getStaticSourceFile();
      node1.isNew();
      node0.isIf();
      node1.getChildAtIndex(12);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      Node node1 = new Node(35, node0, node0, 37, 100);
      Node node2 = Node.newNumber(310.2, 49, 48);
      Node node3 = Node.newString("this", 42, 83);
      Node node4 = new Node(2788, node2, node3, 53, 55);
      node2.clonePropsFrom(node4);
      node1.getDirectives();
      node0.setLength(54);
      node2.isExprResult();
      node1.checkTreeEquals(node0);
      Node node5 = Node.newString("<", (-504), 746);
      node2.isNew();
      node5.isIn();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node((-2196), (-1463), (-1258));
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.cloneTree();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) null);
      int int0 = 42;
      node1.setChangeTime(int0);
      int int1 = 871;
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, node0, node0, 38, 37);
      nodeArray0[1] = node1;
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'0Zz]ODEL`");
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(49.0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.isObjectLit();
      Node node2 = Node.newString(37, "#WNL,}1[|mN_", 51, 57);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString("Not declared as a type name", 98, 49);
      node0.srcrefTree(node1);
      node1.isGetProp();
      Node node2 = node0.cloneTree();
      node2.setChangeTime(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1999));
      node2.hasChildren();
      node2.isAssignAdd();
      Node node3 = Node.newString("Object#Key");
      node1.isThis();
      node0.hasMoreThanOneChild();
      node0.hasMoreThanOneChild();
      Node node4 = Node.newString(29, "Object#Element", (-27), 52);
      node3.isRegExp();
      node1.isLabel();
      node2.useSourceInfoIfMissingFrom(node4);
      Node.extractCharno(2546);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2336, 2336, (-2271));
      node0.isExprResult();
      node0.isName();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(44);
      node0.isSyntheticBlock();
      Node node1 = node0.cloneTree();
      node1.setChangeTime(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node0.hasChildren();
      node0.isAssignAdd();
      Node node2 = Node.newString("'0Zz]ODEL`");
      node0.isNoSideEffectsCall();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newString(40, "'0Zz]ODEL`", 57, 30);
      node3.checkTreeEqualsImpl(node2);
      node0.isRegExp();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(77);
      Node node1 = Node.newNumber(1270.459501399, 4095, 57);
      node1.isEquivalentToShallow(node0);
      Node node2 = node0.srcref(node1);
      node2.isOptionalArg();
      node0.isExprResult();
      node1.isFor();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPosition(3501);
      Node node1 = Node.newString("8{l/");
      Node node2 = new Node(54);
      node0.isEquivalentTo(node2);
      node0.setQuotedString();
      node1.isSetterDef();
      Node node3 = new Node(3931, node0, node2, node0, node0, (-1749), 4393);
      node3.isQuotedString();
      node3.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(1394, 117, 117);
      node0.isTry();
      Node node1 = new Node(117, node0, node0, node0, 4095, 8);
      node1.setLength(57);
      node0.isWhile();
      Node node2 = new Node((-1549), node1);
      node2.checkTreeEquals(node0);
      node2.getStaticSourceFile();
      int int0 = 37;
      Node node3 = new Node(int0, node2);
      // Undeclared exception!
      try { 
        node3.addChildAfter(node2, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1549
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node((-2), (-2), (-2));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isNot();
      node0.setIsSyntheticBlock(false);
      node0.isFromExterns();
      node0.getChildCount();
      node0.isSyntheticBlock();
      node0.isName();
      node0.isFunction();
      node0.setString("})A7 S&");
      nodeArray0[1].isStringKey();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(54, node0, node0, node0, node0, 4095, 4095);
      Node node2 = Node.newNumber((double) 52);
      Node node3 = Node.newNumber(0.5);
      node3.isWhile();
      node1.isParamList();
      Node node4 = Node.newString("&^@2VkJH'U", 931, 32);
      node4.srcrefTree(node2);
      node4.isGetProp();
      Node node5 = node1.cloneTree();
      node5.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.hasChildren();
      node3.isAssignAdd();
      Node node6 = Node.newString("&^@2VkJH'U");
      node4.isNoSideEffectsCall();
      Node node7 = new Node((-3438), node6);
      node7.hasMoreThanOneChild();
      Node.newString(763, "this", 50, 30);
      node2.isRegExp();
      node6.isLabel();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getQualifiedName();
      node0.isSyntheticBlock();
      node0.checkTreeEquals(node0);
      node0.isSetterDef();
      node0.isLabel();
      Node node1 = new Node(4095, node0, node0, node0, node0, 1160, 108);
      node0.useSourceInfoIfMissingFrom(node0);
      Node.extractCharno((-1531));
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isArrayLit();
      node0.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":SaGH\u0003]0KLyv#b");
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node0.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      Node node1 = new Node(53, node0, node0, node0);
      node0.isEquivalentToShallow(node1);
      node0.isAssign();
      node0.isReturn();
      node1.addSuppression("{M9G-:");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isTypeOf();
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isNot();
      Node node1 = new Node(1, node0, node0, node0, node0, 50, 1);
      node0.useSourceInfoIfMissingFrom(node1);
      int int0 = Node.SLASH_V;
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getQualifiedName();
      node0.isSyntheticBlock();
      node0.checkTreeEquals(node0);
      node0.isSetterDef();
      node0.isLabel();
      Node node1 = new Node(39, node0, node0);
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.isNull();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^SaD", true);
      node2.isExprResult();
      node1.addChildToFront(node2);
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2885, (-1044), 2885);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(4095, node0, node0, 48, 16);
      Iterable<Node> iterable0 = new ArrayDeque<Node>(4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      node0.isFunction();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16, 2885, 52);
      Node node1 = new Node(1, node0, node0, 2497, 29);
      Node node2 = Node.newString((-346), "CI*+QM>9]#rncYBn", 4, 2489);
      node2.isNumber();
      Node node3 = Node.newString("CI*+QM>9]#rncYBn");
      node1.siblings();
      node2.isScript();
      Node node4 = new Node(30, node2);
      node3.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(0, 0, 1);
      node0.getStaticSourceFile();
      node0.getSourceOffset();
      node0.isCatch();
      node0.setSourceEncodedPositionForTree(0);
      node0.isCall();
      Node node1 = new Node((-62), node0, node0);
      node0.isEquivalentToTyped(node1);
      node1.getChangeTime();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node2 = enumElementType1.getRootNode();
      nodeArray0[1] = null;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node3 = new Node((-395), nodeArray0, 39, 47);
      node3.isEquivalentTo(node1);
      int int0 = Node.DECR_FLAG;
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 48, 48);
      node0.getInputId();
      node0.isDo();
      node0.getStaticSourceFile();
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(48);
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = new Node((-1721));
      Node node1 = node0.getLastSibling();
      node0.getType();
      node0.isIn();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(57, (-1479), (-1258));
      node0.isTry();
      Node node1 = new Node(40, node0, node0, node0, 37, 56);
      node0.setLength(1);
      node1.removeChildAfter(node0);
      int int0 = 85;
      String string0 = "q{AC{Ru?&+TyX/!I4";
      // Undeclared exception!
      try { 
        Node.newString(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(2885);
      Node node1 = new Node(37, node0, node0, 37, (-1230));
      node0.isEquivalentTo(node1);
      node0.isThis();
      Node node2 = Node.newString("'0Zz]ODEL`", 15, 15);
      node2.setSourceEncodedPosition(29);
      Node node3 = Node.newString("BITXOR");
      node2.isEquivalentTo(node3);
      node3.setQuotedString();
      node3.getAncestors();
      Node node4 = Node.newString("");
      node2.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      node_SideEffectFlags0.setAllFlags();
      Node.newNumber((double) 52);
      node4.isReturn();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(105, "<");
      Node node2 = new Node(0, node0, node1);
      Node node3 = Node.newString(46, "");
      node2.addChildrenToFront(node3);
      Node node4 = Node.newNumber((double) 37, 153, (-3891));
      Node node5 = new Node(112, node2, node4);
      node1.isDelProp();
      node2.getDirectives();
      node4.isVarArgs();
      node3.isObjectLit();
      Node.newNumber((double) 52);
      node3.isReturn();
      node1.isCast();
      node4.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getQualifiedName();
      node0.isDebugger();
      node0.checkTreeEquals(node0);
      node0.isSetterDef();
      node0.isQuotedString();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = new Node(54);
      Node node1 = node0.getLastSibling();
      node0.getType();
      node0.isIn();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, node0, node0, 38, 37);
      nodeArray0[1] = node1;
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node1.setLength(57);
      node1.isWith();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-679));
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.newNumber((-2427.62493385035), 30, 31);
      node1.isAdd();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)77;
      Node node2 = node1.cloneNode();
      node1.setChangeTime(1);
      node1.getDouble();
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putBooleanProp(3124, false);
      objectType0.getDisplayName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeRegistry0.createOptionalNullableType(objectType0);
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      modificationVisitor0.caseBooleanType();
      Node node1 = Node.newString((-1516), "D;,$Xi4(q->^kG", 52, 31);
      node0.isNot();
      node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.isFromExterns();
      node1.isSyntheticBlock();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a type name", false);
      node1.getChildCount();
      Node node2 = Node.newNumber((double) 4);
      node2.isComma();
      node0.isFalse();
      node2.isStringKey();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-514), 130, 130);
      Node node1 = new Node(130, node0, node0, 1189, 5760);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node1.getLastChild();
      node2.isIn();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node.extractCharno(24);
      node2.getProp(155685);
      Node node3 = node0.removeChildAfter(node2);
      node3.isDelProp();
      String string0 = "";
      node3.setString(string0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("mZS");
      node0.getQualifiedName();
      node0.isSyntheticBlock();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(47, nodeArray0, 2538, 37);
      node0.checkTreeEquals(node1);
      node1.isSetterDef();
      Node node2 = Node.newString("3<+:sCti`E!?{D");
      node2.isLabel();
      Node node3 = new Node(16, node0, node2);
      Node node4 = node0.cloneNode();
      node1.setIsSyntheticBlock(true);
      node4.isNull();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node3.isExprResult();
      Node node5 = new Node((-640), nodeArray0);
      node5.addChildToFront(node1);
      node3.isGetElem();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newNumber(0.0);
      nodeArray0[0] = node0;
      Node node1 = new Node(38, node0, node0, 38, 37);
      nodeArray0[1] = node1;
      node1.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'0Zz]ODEL`");
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.isReturn();
      node0.isHook();
      node0.setVarArgs(false);
      node1.isEquivalentToShallow(node1);
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.extractCharno(24);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.valueOf();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "BITXOR";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BITXOR");
      Node node0 = new Node(1);
      Node node1 = new Node(1, node0, 56, 50);
      node1.replaceChild(node0, node0);
      node1.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString("Not declared as a type name", 98, 49);
      Node node2 = node0.srcrefTree(node1);
      node1.isGetProp();
      Node node3 = node0.cloneTree();
      node3.setChangeTime(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1999));
      node3.hasChildren();
      node3.isAssignAdd();
      Node node4 = Node.newString("Object#Key");
      node1.getQualifiedName();
      node2.isFor();
      node2.putIntProp(4095, 4);
      node4.getJSDocInfo();
      node0.getCharno();
      node4.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newNumber((-1140.49354223673));
      node0.isWhile();
      node0.isParamList();
      node0.isGetProp();
      node0.hasMoreThanOneChild();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node1 = node0.copyInformationFromForTree((Node) null);
      node1.addChildToFront(node0);
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = new Node(54);
      Node node1 = node0.getLastSibling();
      node0.isIn();
      node1.isFromExterns();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node((-2271));
      Node node1 = new Node(49, node0, node0, 120, 13);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.getLastChild();
      Node node2 = new Node(12, node0);
      node2.isIn();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      // Undeclared exception!
      try { 
        Node.extractCharno(node0.INPUT_ID);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "{";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BITXOR");
      Node node0 = Node.newString(97, "{", (-1077), 98);
      node0.setSourceFileForTesting("this");
      Node node1 = new Node(97, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node2.getChildBefore(node1);
      node1.setIsSyntheticBlock(boolean0);
      node1.checkTreeEqualsImpl(node0);
      node1.getSideEffectFlags();
      node2.setSideEffectFlags(node3.DECR_FLAG);
      node1.getSourcePosition();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(54, node0, node0, node0, 46, 55);
      Node node2 = Node.newNumber((double) 52);
      Node node3 = new Node(46, node2, node1, node2, node2);
      node3.isWhile();
      node1.isParamList();
      Node node4 = Node.newString("&^@2VkJH'U", 931, 32);
      Node node5 = node4.srcrefTree(node2);
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(130);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node6 = Node.newNumber((double) 15, 83, 434);
      node1.isAdd();
      node6.isVarArgs();
      node1.getJsDocBuilderForNode();
      node3.isOptionalArg();
      node4.isObjectLit();
      Node node7 = new Node(1);
      node6.addChildrenToFront(node0);
      node6.getQualifiedName();
      node5.srcref(node2);
      node6.isString();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = Node.newString(122, "\n\nTree2:\n");
      node1.isExprResult();
      node1.isArrayLit();
      node1.isUnscopedQualifiedName();
      node1.putBooleanProp(105, true);
      node1.isContinue();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n\nTree2:\n", false);
      linkedList0.remove((Object) simpleSourceFile0);
      node0.wasEmptyNode();
      node1.isScript();
      node0.getDouble();
      node0.getString();
      node1.isWhile();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(152);
      node0.isExprResult();
      node0.isFor();
      node0.isAssign();
      node0.setChangeTime(962);
      node0.mayMutateGlobalStateOrThrow();
      node0.isAssignAdd();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(114, 114, 77);
      node0.getQualifiedName();
      node0.isSyntheticBlock();
      Node node1 = new Node(101, node0, node0);
      node0.checkTreeEquals(node1);
      node0.isSetterDef();
      node1.isLabel();
      Node node2 = new Node(4, node1, node1);
      Node node3 = node1.cloneNode();
      Node node4 = new Node(46, node2, node3, node3, 15, 147);
      node4.setIsSyntheticBlock(false);
      node4.isNull();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("BITXOR", false);
      node3.isExprResult();
      node1.addChildToFront(node2);
      node4.isGetElem();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(117, "<");
      node0.isExprResult();
      node0.isArrayLit();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(105, "<");
      Node node2 = new Node(0, node0, node1);
      Node.newString(46, "");
      Node node3 = Node.newNumber((double) 37, 153, (-3891));
      Node node4 = new Node(112, node2, node3);
      Set<String> set0 = new LinkedHashSet<String>();
      node3.isVarArgs();
      node2.isEquivalentToShallow(node1);
      node4.isSetterDef();
      node4.isAnd();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(38);
      Node node1 = new Node(77, node0);
      node0.setOptionalArg(true);
      Node node2 = node1.getChildAtIndex((-2509));
      node0.getSideEffectFlags();
      node1.setLineno(29);
      node0.mayMutateArguments();
      node1.setSourceEncodedPositionForTree(46);
      node1.setLength((-1060));
      Node node3 = new Node(4, node0);
      node2.isExprResult();
      node2.isEquivalentToTyped(node3);
      node2.isBlock();
      node3.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(77);
      Node node1 = new Node(77, node0);
      node0.setOptionalArg(true);
      Node node2 = node1.getChildAtIndex((-2509));
      node0.getSideEffectFlags();
      node1.setLineno(29);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.mayMutateArguments();
      node2.siblings();
      node1.setSourceEncodedPositionForTree(46);
      node1.setLength((-1060));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node0.getLastSibling();
      node0.isIn();
      node2.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getQualifiedName();
      node0.isDebugger();
      node0.setVarArgs(true);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(36, node0, node0, 48, 57);
      Node node2 = new Node(41);
      node2.useSourceInfoIfMissingFrom(node1);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DEFAULT_CASE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-l=2ZtytpB2=Xy5_LU");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString("JP^7XjvwH)UkW\"", 391, 391);
      Node node1 = new Node(533, node0, 1, 113);
      Node.newNumber(0.0);
      node1.isGetElem();
      node0.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = Node.newString(1231, "DEFAULT_CASE");
      node2.toString(false, false, true);
      node1.addChildToBack(node0);
      String string0 = "NOT_NULL";
      Node node4 = Node.newString(node0.FLAG_ARGUMENTS_UNMODIFIED, string0, node1.REFLECTED_OBJECT, node0.REFLECTED_OBJECT);
      node2.putIntProp(node1.FLAG_GLOBAL_STATE_UNMODIFIED, node4.NO_SIDE_EFFECTS);
      node0.toString();
      node1.isDelProp();
      node0.checkTreeEqualsImpl(node3);
      node2.replaceChildAfter(node0, node0);
      node1.isTry();
      node1.wasEmptyNode();
      node1.isNull();
      boolean boolean0 = true;
  }
}
