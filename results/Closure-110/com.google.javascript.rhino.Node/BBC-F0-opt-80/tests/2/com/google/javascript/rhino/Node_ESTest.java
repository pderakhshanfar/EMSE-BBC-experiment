/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:09:22 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      // Undeclared exception!
      try { 
        node0.cloneNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "]VF-C-.oYx~U1\"";
      Node node0 = new Node(2083, (Node) null, (Node) null, (-1496), 2083);
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(string0, node0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "ogQ$Hv~Cj#D";
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      node0.getExistingIntProp((-1709));
      node0.isOr();
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1709
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("And(", 31, 31);
      Node node1 = new Node(39, node0, node0, node0, 0, 16);
      boolean boolean0 = false;
      boolean boolean1 = true;
      node0.checkTreeEquals(node1);
      node0.isEquivalentTo(node1, boolean0, boolean0, boolean1);
      node0.hasChild(node1);
      // Undeclared exception!
      try { 
        node0.isReturn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      int int1 = 0;
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage0("Object#Element");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJSDocInfo();
      Node node1 = node0.cloneTree();
      node0.addChildrenToFront(node1);
      node1.getExistingIntProp(57);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 57
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(1097, 0, (-1319));
      Node node1 = new Node((-1319), node0, node0, 47, 1073741824);
      node0.addChildToBack(node1);
      node1.removeProp(116);
      node1.setString("new child has existing sibling");
      node1.isReturn();
      node0.getChildBefore(node1);
      int int0 = 2001;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesArguments();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1319
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 2583;
      Node node0 = new Node(2583, 2583, (-1787));
      Node node1 = Node.newString(2665, "", 29, 0);
      node0.setSideEffectFlags((-1787));
      node0.setQuotedString();
      Node node2 = new Node(int0, node0, node0);
      Node.newNumber((double) node0.INPUT_ID);
      // Undeclared exception!
      try { 
        node1.getJSDocInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2583
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber((-1618.0929755000886), 148, 148);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildBefore(node1, node1);
      node0.isTypeOf();
      node0.checkTreeEquals(node1);
      Node[] nodeArray0 = new Node[5];
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      Node node3 = node2.srcrefTree(node0);
      node2.isSetterDef();
      node0.checkTreeEquals(node2);
      node2.isAdd();
      node0.addChildrenToBack(node2);
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node3.srcrefTree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(12, "", 12, 12);
      node0.type = 0;
      node0.isOnlyModifiesArgumentsCall();
      node0.removeProp(12);
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      Node.newString("", 57, 16);
      node0.getString();
      node0.isBreak();
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-2768), 0);
      node0.getString();
      int int0 = 0;
      Node.newNumber((double) node0.REFLECTED_OBJECT, int0, node0.FLAG_LOCAL_RESULTS);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node2.getJSDocInfo();
      node1.addChildrenToBack(node0);
      node1.removeFirstChild();
      node2.addChildToBack(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("MHjJfN~6V 2^ur0", (Node) null, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      String string0 = null;
      JSDocInfo jSDocInfo0 = enumElementType1.getOwnPropertyJSDocInfo(string0);
      jSDocInfo0.getAssociatedNode();
      int int0 = 1333;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1370;
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newString((-170), "WL22%u7L{Sugdh$~6", 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(85, (-2300), 25);
      nodeArray0[1] = node1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      jSTypeArray0[0] = (JSType) functionType1;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[2] = node2;
      Node node3 = Node.newString(36, "Unknown class name", (-2140), 43);
      nodeArray0[3] = node3;
      Node node4 = new Node(3666, node2);
      nodeArray0[4] = node4;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.JSTypeRegistry", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getRootNode();
      nodeArray0[5] = null;
      Node node5 = new Node(1370, nodeArray0, 2, 0);
      int int1 = (-2036);
      Node node6 = new Node(int0, node5, node1, nodeArray0[5], nodeArray0[1], node5.EMPTY_BLOCK, int1);
      node6.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("R");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl((Node) null);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(jSDocInfo_Visibility0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-689));
      node0.children();
      node0.getDirectives();
      node0.isVoid();
      node0.getAncestors();
      node0.setWasEmptyNode(false);
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 3209;
      Node node0 = Node.newString(0, "String node not created with Node.newString");
      Node node1 = new Node(0, node0, node0, node0, node0, 32, 0);
      Node node2 = Node.newString("", (-721), 46);
      Node node3 = new Node(3209, node1, node0, node0, node2);
      int int1 = 16777216;
      Node node4 = new Node(int0, node3, node2.QUOTED_PROP, int1);
      node4.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(46);
      node1.addSuppression("p{<F}Hx-!EUq!\"m=7");
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isDelProp();
      node0.isFalse();
      node1.toString(true, false, true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      String string0 = "<j5]dk;m|k";
      Node node0 = new Node(64);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      jSTypeRegistry0.createConstructorType((JSType) templateType0, true, jSTypeArray0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0);
      // Undeclared exception!
      try { 
        immutableList0.subList(node0.POST_FLAG, node0.SIDE_EFFECTS_ALL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-1993);
      Node node0 = Node.newNumber((-1.0), (-2572), (-2572));
      Node node1 = new Node((-1993), node0, node0);
      node0.getSourceFileName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setLineno(52);
      node1.setChangeTime(2);
      Node node2 = node1.detachFromParent();
      int int1 = (-2538);
      node2.getBooleanProp(int1);
      int int2 = 4556;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-666);
      Node node0 = Node.newString("<", 262144, (-666));
      node0.removeFirstChild();
      node0.clonePropsFrom((Node) null);
      node0.getBooleanProp(int0);
      // Undeclared exception!
      try { 
        node0.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "com.google.javascript.rhino.Node";
      Node node0 = new Node(0, (Node) null, (Node) null, (Node) null);
      JSType jSType0 = null;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSType0);
      // Undeclared exception!
      try { 
        JSType.toMaybeFunctionType((JSType) templatizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      Node node1 = new Node(57, node0, node0, node0, 56, 0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(1045, nodeArray0);
      node0.addChildAfter(node2, node2);
      node0.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-2663);
      Node node0 = Node.newString((String) null, (-2663), 537);
      Node node1 = new Node(int0, node0, node0, node0.CHANGE_TIME, node0.INFERRED_FUNCTION);
      // Undeclared exception!
      try { 
        node1.isThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node((-2904), 0, 0);
      Node node1 = new Node(0, node0, node0, 31, (-918));
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1024;
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node(1024);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) null, (Node) null);
      jSTypeArray0[0] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry1.createEnumType("yUX~", node0, jSTypeArray0[0]);
      jSTypeArray0[1] = (JSType) enumType0;
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      FunctionType functionType1 = jSTypeRegistry1.createInterfaceType("Object#Element", node0, immutableList0);
      jSTypeArray0[2] = (JSType) functionType1;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType0;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(371);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesArguments();
      int int0 = 0;
      Node[] nodeArray0 = new Node[9];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      nodeArray0[0] = node0;
      String string0 = "";
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseFunctionType((FunctionType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getRootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createUnionType(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(126, node0, node0);
      node1.setSideEffectFlags(51);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null, 0, (-1));
      node1.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        node1.removeFirstChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(519);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(39, "$IA_^kdj,.>YI2u,5X!");
      Node node1 = Node.newString("$IA_^kdj,.>YI2u,5X!", 0, 4095);
      node0.isEquivalentToTyped(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.newString("$IA_^kdj,.>YI2u,5X!", 0, 1);
      Node.newString("qM/pp,[qV+a,e@*", (-1412), (-3383));
      node0.setSourceEncodedPositionForTree(32);
      Node.newNumber((double) 57);
      node0.setType(39);
      node1.isInc();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("/}^&");
      node0.isNoSideEffectsCall();
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isVarArgs();
      node0.removeChildren();
      node1.hasChildren();
      Node node3 = node0.useSourceInfoFrom(node2);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getBaseType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[3];
      node0.useSourceInfoIfMissingFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(8, node0, 50, 768);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) null);
      simpleErrorReporter0.warning("", "!:J<nxp5B8aA", 8192, 8);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.toString();
      node0.getDirectives();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39);
      Node node1 = new Node(57);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.addSuppression("com.google.common.base.Predicates$NotPredicate");
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      boolean boolean0 = node1.isDelProp();
      node1.removeChild(node2);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        node0.toString(boolean1, boolean1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = null;
      Node.newString(105, (String) null);
      String string1 = "(oZ7IQE";
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node node2 = node1.clonePropsFrom(node0);
      node2.getBooleanProp(node1.INFERRED_FUNCTION);
      node0.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node1.LAST_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node0.putProp(30, ")O%D^lVmo");
      node1.isVoid();
      node1.addChildToFront(node0);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(1097, 0, (-1319));
      Node node1 = new Node((-1319), node0, node0, 47, 1073741824);
      node0.addChildToBack(node1);
      node0.isBreak();
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType1);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      JSType jSType1 = null;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) templateType1, (JSType) functionType1, jSType1, (JSType) templateType0);
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType1, (List<JSType>) immutableList0);
      JSTypeRegistry jSTypeRegistry1 = null;
      try {
        jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(1097, 0, (-1319));
      Node node1 = new Node((-1319), node0, node0, 47, 1073741824);
      node0.addChildToBack(node1);
      node0.isBreak();
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
      node1.putProp(1265, ")O%D^lVmo");
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node node2 = new Node(52);
      node2.getString();
      node1.isBreak();
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      node0.setSourceEncodedPositionForTree((-143));
      Node.newNumber(0.0);
      node0.isInc();
      node0.putIntProp((-1316), 1073741824);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(8, node0, 50, 768);
      node1.getLength();
      node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-1529), (Node) null, (-1529), (-2738));
      node1.addChildToBack(node0);
      String string0 = "QTAd%Q9TTm2";
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString((-3550), "first new child has existing sibling", 77, 97);
      Node node1 = new Node(54, node0, node0, node0, node0, 113, 53);
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.documentBlock("");
      Node node0 = Node.newNumber((-2222.0));
      Node.extractCharno((-1543));
      node0.isSyntheticBlock();
      node0.setQuotedString();
      int int0 = (-2980);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesThis();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getSourceName();
      Locale locale0 = new Locale("*`Gms7y!d", "|/M~Zpq%s!\"Q=t");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSDocInfo0.setModifies(set0);
      jSDocInfo0.documentBlock("");
      Node node0 = Node.newNumber((-2222.0));
      Node.extractCharno((-1543));
      node0.isSyntheticBlock();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node((-2904), 0, 0);
      Node node1 = new Node(0, node0, node0, 31, (-918));
      node1.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node.newNumber((double) 39);
      Node node0 = new Node(57);
      node0.addSuppression("com.google.common.base.Predicates$NotPredicate");
      node0.isDelProp();
      node0.removeChild(node0);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node1.toString(false, true, true);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString((-3550), "first new child has existing sibling", 77, 97);
      Node node1 = new Node(54, node0, node0, node0, node0, 113, 53);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node((-689), (-689), (-689));
      Node node1 = new Node((-488), node0);
      Node node2 = new Node(494, node1, node1, node1, 1410, 1370);
      Node node3 = Node.newString(57, "directives");
      node3.setSourceEncodedPositionForTree(1691);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.replaceChild(node0, node1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node3;
      nodeArray0[1] = node4;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      Node node5 = new Node(node0.QUOTED_PROP, nodeArray0);
      // Undeclared exception!
      try { 
        node5.getFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.getType();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.putProp(100, node2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1410);
      Node node1 = new Node(39);
      node1.checkTreeEqualsImpl(node0);
      node0.addSuppression(")}");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      node2.putIntProp(54, 723);
      node0.removeChild(node1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      node2.toString(boolean0, boolean1, boolean2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(449, node0, node0);
      node1.getJSType();
      Node node2 = node1.getChildBefore(node0);
      Node node3 = new Node(36, (Node) null);
      node2.isAssign();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber((double) 52, 751619276, 751619276);
      Node node1 = Node.newString((-2140), "X+q6<gqJgfPWRq", 1, 1077);
      Node node2 = new Node(3709, node0, node0);
      Node node3 = new Node(52, node2);
      node3.isStringKey();
      node3.isAnd();
      node0.children();
      node3.isDebugger();
      node1.removeChild(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      String string0 = "ie";
      node_FileLevelJsDocBuilder0.append(string0);
      String string1 = "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ";
      node_FileLevelJsDocBuilder0.append(string1);
      String string2 = "com.google.common.collect.ImmutableMap";
      // Undeclared exception!
      try { 
        node_FileLevelJsDocBuilder0.append(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node(49, nodeArray0);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      node0.isBreak();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      jSTypeArray0[0] = (JSType) templateType1;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(unionType0).toString();
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      jSTypeArray0[1] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSTypeArray0[0], jSType0, (JSType) templateType0, (JSType) templateType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      jSTypeArray0[2] = (JSType) functionType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node((-1319));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.documentBlock("");
      Node node1 = Node.newNumber((double) 4);
      node1.getJSDocInfo();
      Node.extractCharno(2);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(55, node1, node0, (-582), 39);
      node0.useSourceInfoFrom(node2);
      node0.toString();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node0.isNE();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node1.isStringKey();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      boolean boolean0 = node1.isSetterDef();
      Node node2 = new Node((-3796), node1);
      node0.putProp(72, node2);
      Node node3 = Node.newString("(", 103, 0);
      Node node4 = Node.newString(")O%D^lVmo");
      Node node5 = new Node((-1385), node4, node4, node1, (-582), (-1253));
      node3.setVarArgs(boolean0);
      int int0 = 38;
      node3.putProp(int0, node2);
      node3.isOnlyModifiesArgumentsCall();
      int int1 = (-5564);
      node0.getAncestor(int1);
      node0.isEquivalentToShallow(node3);
      node4.getString();
      // Undeclared exception!
      try { 
        node0.isVoid();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(1097, 0, (-1319));
      Node node1 = new Node(4, node0, node0, node0, 8, 4095);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(1, nodeArray0, 4095, 57);
      node0.addChildrenToFront(node2);
      boolean boolean0 = true;
      Node node3 = null;
      try {
        node3 = new Node(node0.SIDE_EFFECTS_ALL, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node((-1319));
      Node node1 = new Node(55, node0, node0, node0, 2, 1);
      node0.addChildToBack(node1);
      node1.removeProp(116);
      node1.setString("new child has existing sibling");
      node1.isReturn();
      node0.getChildBefore(node1);
      int int0 = 2001;
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(3709, (-1474), (-2764));
      Node node1 = new Node(42, node0, node0, 40, 50);
      node1.isSwitch();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node((-2904), 0, 0);
      Node node1 = new Node(0, node0, node0, 31, (-918));
      node1.getSourceOffset();
      node1.isSwitch();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getJSType();
      Node node1 = node0.getChildBefore(node0);
      node1.getChildBefore(node0);
      // Undeclared exception!
      try { 
        node1.isAssign();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("/}^&");
      node0.isNoSideEffectsCall();
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isVarArgs();
      Node node3 = node0.removeChildren();
      node2.isQuotedString();
      node1.hasChildren();
      Node node4 = node0.useSourceInfoFrom(node2);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setInterface(true);
      jSDocInfo0.getBaseType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.toString();
      node3.isCast();
      int int0 = 1611;
      // Undeclared exception!
      try { 
        node4.removeProp(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((-1618.0929755000886), 148, 148);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node1 = new Node(29, node0, node0, node0, 38, (-2221));
      nodeArray0[0] = node1;
      Node node2 = new Node(32, nodeArray0);
      int int0 = (-2626);
      Node node3 = new Node(node0.SIDE_EFFECT_FLAGS, node0, node2, node0.SIDE_EFFECTS_FLAGS_MASK, int0);
      Node node4 = new Node(node0.SIDE_EFFECTS_ALL, node0, node3);
      node1.setSideEffectFlags(node3.LENGTH);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node2.getJSDocInfo();
      node1.addChildrenToBack(node0);
      node1.removeFirstChild();
      node2.addChildToBack(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJSDocInfo();
      Node node1 = node0.cloneTree();
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString((-3510), "@A=N*ZDf_]1UtWw");
      node2.getProp((-1));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = new Node(39, node3);
      node4.isBreak();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      Node.newString((-918), "'tjf,5{U");
      node0.getProp(0);
      node0.isBreak();
      JSType[] jSTypeArray0 = new JSType[3];
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isNE();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node1.isStringKey();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node1.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node node2 = node1.removeChildren();
      Node.newNumber(2262.59448847, (-1180), 48);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      node1.getJSDocInfo();
      Node node3 = Node.newNumber((double) 37);
      node3.addChildrenToBack((Node) null);
      node2.removeFirstChild();
      node1.addChildToBack(node2);
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      node1.toString(false, true, false);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39);
      Node node1 = new Node(57);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.addSuppression("com.google.common.base.Predicates$NotPredicate");
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.toString();
      node2.useSourceInfoIfMissingFrom(node3);
      // Undeclared exception!
      try { 
        node3.getLineno();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      Node node1 = Node.newString((-918), "'tjf,5{U");
      node0.getProp(0);
      node0.isBreak();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      node0.isGetterDef();
      node1.getChangeTime();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      node0.isNull();
      node0.isOr();
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 56, 124, 1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isBreak();
      node1.isGetterDef();
      node0.getChangeTime();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 2360);
      node0.setSourceEncodedPositionForTree((-143));
      Node node1 = Node.newNumber(0.0);
      node1.setVarArgs(false);
      node1.removeChildren();
      node0.isEquivalentToTyped(node0);
      node0.putIntProp((-1316), 1073741824);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      Node node2 = new Node((-3796), node1);
      node1.getInputId();
      node0.putProp(72, node2);
      node2.setChangeTime(30);
      Node node3 = new Node(57, 4095, 8);
      node3.useSourceInfoFrom(node1);
      Node node4 = new Node(2, node0, node2, 48, 152);
      node2.isSwitch();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node0.isNE();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node node2 = Node.newNumber((double) 37);
      node0.setSourceFileForTesting("");
      Node.extractCharno((-1044));
      node1.isSyntheticBlock();
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = Node.newString("Object#Element");
      node0.isLocalResultCall();
      jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      Node node1 = new Node(57, node0, node0);
      node1.setSideEffectFlags(51);
      String string0 = "yCp'+aN.atK";
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString(1704, "/'Z<xg#x{ql");
      Node node1 = new Node(590, node0, node0, 31, 1981);
      node0.addChildToBack(node1);
      node0.isBreak();
      node0.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node1.putProp(29, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node2 = new Node(2, (-1869), 2869);
      Node node3 = new Node(30, (Node) null, node0, node2, (-1188), 29);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node1.toString(false, true, false);
      node1.isCall();
      node0.isVoid();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJSDocInfo();
      Node node1 = node0.cloneTree();
      node0.addChildrenToFront(node1);
      int int0 = Node.SLASH_V;
      node1.addChildrenToBack(node0);
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 941);
      node2.setSourceEncodedPositionForTree(495);
      node1.isSwitch();
      node2.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      node0.checkTreeEquals(node1);
      Node node3 = node2.srcrefTree(node0);
      node2.isSetterDef();
      node0.checkTreeEquals(node2);
      node2.isAdd();
      node0.addChildrenToBack(node2);
      node2.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node3.addChildrenToBack(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      node0.isNull();
      node0.isOr();
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber((double) 56, 124, 1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ogQ$Hv~Cj#D", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node1 = enumElementType1.getRootNode();
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setOptionalArg(true);
      node0.isVarArgs();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 941);
      node2.setSourceEncodedPositionForTree(495);
      node1.isOr();
      node2.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      node0.putIntProp(155, 3996);
      node1.isHook();
      Node.newString(32, "h");
      node1.isEquivalentTo(node2);
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      node0.setSourceEncodedPositionForTree(894);
      node1.replaceChild(node0, node0);
      int int0 = 2147483645;
      Node node2 = Node.newNumber((double) node1.IS_DISPATCHER, int0, node0.NO_SIDE_EFFECTS);
      Node node3 = node2.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(node3.FLAG_NO_THROWS);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.clearSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isNE();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node2.isTypeOf();
      node1.setLineno(57);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(19, node0);
      node1.isDelProp();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      boolean boolean0 = node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node2.getJSDocInfo();
      node1.addChildrenToBack(node0);
      node2.addChildToBack(node0);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      node0.setSourceEncodedPositionForTree(908);
      Node node2 = Node.newNumber((double) 47, 2147483645, 15);
      node2.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(8);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isEquivalentToTyped(node2);
      node0.children();
      node1.setString("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39);
      Node node1 = new Node(57);
      Node node2 = new Node(55, 56, 2147483645);
      node1.isLocalResultCall();
      Node node3 = new Node((-1168), node1, node2, 16, 2445);
      Node node4 = new Node(50, node2, node2, node1, node1, 1950, 39);
      Node node5 = new Node(node0.DECR_FLAG, node3, node1, node4, node0);
      int int0 = (-1287);
      node5.setSourceEncodedPositionForTree(int0);
      node1.isSwitch();
      node4.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node((-2418));
      Node node1 = Node.newNumber(860.75305571482);
      node0.isNE();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.getInputId();
      node0.putProp(4, (Object) null);
      node0.setChangeTime(16);
      Node node2 = new Node((-679), 113, 4095);
      node0.useSourceInfoFrom(node2);
      Node node3 = new Node(2898, node0, node2, 3140, 56);
      node1.isSwitch();
      Node node4 = new Node((-2067), node2, node3, node0, node2, 32, 2136);
      node4.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      node2.setType(12);
      node1.toString(false, true, true);
      node2.isCall();
      node2.isVoid();
      node0.isContinue();
      node2.mayMutateArguments();
      Node.newString(12, (String) null, 8, 36);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 941);
      node2.setSourceEncodedPositionForTree(495);
      node2.isStringKey();
      node0.isTypeOf();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node2.getJSDocInfo();
      node1.addChildrenToBack(node0);
      node1.removeFirstChild();
      node2.addChildToBack(node0);
      node1.mayMutateGlobalStateOrThrow();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      nodeArray0[0] = node0;
      Node node1 = new Node((-258), nodeArray0, 49, 2256);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.mayMutateArguments();
      node2.getQualifiedName();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node4 = new Node(36, node1, node3, node0, 36, 8);
      node4.checkTreeEquals(nodeArray0[0]);
      node1.srcrefTree(node3);
      // Undeclared exception!
      try { 
        node4.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node.newString("NMAjy+4Np_o*7Jgr");
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr", 116, 32);
      node0.setSourceEncodedPositionForTree(29);
      Node node1 = Node.newNumber(3709.0);
      node0.setVarArgs(false);
      node1.removeChildren();
      Node node2 = new Node(2);
      node0.isEquivalentToTyped(node2);
      node1.putIntProp(48, 26);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      Node node2 = new Node((-3796), node1);
      node1.getInputId();
      node0.putProp(72, node2);
      node2.setChangeTime(30);
      Node node3 = new Node(57, 4095, 8);
      node3.useSourceInfoFrom(node1);
      node3.setSideEffectFlags((Node.SideEffectFlags) null);
      int int0 = 152;
      Node node4 = new Node(node3.POST_FLAG, node0, node2, node3.DIRECTIVES, int0);
      node2.isSwitch();
      // Undeclared exception!
      try { 
        node0.isFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = node0.srcref(node0);
      node1.setType(43);
      node0.toString(false, false, false);
      node0.isCall();
      node0.isVoid();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node1.toString(false, true, false);
      node1.isEquivalentToTyped(node2);
      node1.getString();
      node2.putIntProp(node0.COLUMN_BITS, node1.FLAG_NO_THROWS);
      node1.isComma();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      Node node2 = new Node((-3796), node1);
      node1.getInputId();
      node0.putProp(72, node2);
      node2.setChangeTime(30);
      Node node3 = new Node(57, 4095, 8);
      node3.useSourceInfoFrom(node1);
      node3.getBooleanProp(4095);
      node3.isNoSideEffectsCall();
      Node node4 = new Node(2, node0, node2, 48, 152);
      node2.isSwitch();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node((-3123), 4, (-1855));
      node1.getProp((-258));
      node1.isBreak();
      Node node2 = new Node(49, (Node[]) null, 50, 53);
      node2.isGetterDef();
      node0.getChangeTime();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node2 = new Node(119, nodeArray0);
      // Undeclared exception!
      try { 
        nodeArray0[2].isEquivalentTo(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(155);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setReturnsTainted();
      node_SideEffectFlags7.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setThrows();
      node_SideEffectFlags11.clearAllFlags();
      node_SideEffectFlags9.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Node node0 = Node.newString((-414), "Object#Element");
      node0.isStringKey();
      Node node1 = new Node(17, node0, node0);
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.putIntProp(1910, 114);
      node0.isHook();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      node0.isNull();
      node0.isOr();
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 56, 124, 1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("ogQ$Hv~Cj#D");
      node_FileLevelJsDocBuilder0.append("D23'f7");
      node_FileLevelJsDocBuilder0.append("D23'f7");
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(57, 56, 113);
      node2.checkTreeEquals(node0);
      node1.isDec();
      int int1 = (-415);
      Node[] nodeArray0 = null;
      Node node3 = new Node(int1, nodeArray0);
      // Undeclared exception!
      try { 
        node1.isEquivalentTo(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      node0.putIntProp(155, 3996);
      node1.isHook();
      Node node4 = Node.newString(32, "h");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      Node node5 = new Node(50, node2, node4, node4, 2, 103);
      nodeArray0[3] = node5;
      nodeArray0[4] = node1;
      nodeArray0[5] = node3;
      nodeArray0[6] = node3;
      Node node6 = new Node(node0.LAST_PROP, nodeArray0);
      node0.isEquivalentTo(node2);
      // Undeclared exception!
      try { 
        nodeArray0[1].checkTreeEquals(nodeArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node((-2418));
      node0.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getInputId();
      node0.putProp(4, (Object) null);
      node0.setChangeTime(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.getJsDocBuilderForNode();
      node0.setLineno(3996);
      Node node1 = node0.clonePropsFrom(node0);
      String string0 = "";
      node1.setString(string0);
      // Undeclared exception!
      try { 
        Node.mergeLineCharNo(node1.JSDOC_INFO_PROP, node0.LAST_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      node0.setSourceEncodedPositionForTree((-143));
      Node node1 = Node.newNumber(0.0);
      node0.isInc();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.toString();
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node0.getLineno();
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      int int0 = Node.SIDE_EFFECTS_ALL;
      node0.isNull();
      node0.isOr();
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 56, 124, 1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplateType((JSType) null);
      node0.toString(false, true, false);
      node1.isCall();
      node1.isEquivalentTo(node0, false, false, true);
      node1.isVoid();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node1.mayMutateGlobalStateOrThrow();
      node2.setType(43);
      Node node3 = node0.cloneTree();
      node1.toString(false, true, false);
      node1.isCall();
      node0.isVoid();
      node0.isContinue();
      node3.isRegExp();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(51, node0, node0, node0, 50, 32);
      node0.checkTreeEquals(node1);
      node0.setOptionalArg(true);
      node0.isVarArgs();
      node0.detachChildren();
      node0.setIsSyntheticBlock(true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node.extractCharno(2333);
      Node node0 = Node.newNumber(2461.1032479538853, 331, 43);
      Node node1 = new Node(101, node0, node0, node0, 57, (-884));
      node1.isArrayLit();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 8232);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 8232);
      node2.setSourceEncodedPositionForTree(495);
      node1.isOr();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.srcref(node0);
      node0.putIntProp(1910, 114);
      node0.isHook();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node(195, 50, 63);
      Node node2 = node0.srcrefTree(node1);
      node1.isSetterDef();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      nodeArray0[6] = node2;
      Node node3 = new Node((-144), nodeArray0, 36, 40);
      node3.checkTreeEquals(node1);
      node3.isAdd();
      // Undeclared exception!
      try { 
        nodeArray0[3].addChildrenToBack(nodeArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      node0.checkTreeEquals(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node3 = Node.newNumber((double) 37);
      node2.setSourceFileForTesting((String) null);
      Node.extractCharno(19);
      Node node4 = new Node(1077, node3, (-418), 16);
      node0.isSyntheticBlock();
      node3.isAdd();
      node4.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node.extractCharno(2333);
      Node node0 = Node.newString("jZ9cg", 101, 2333);
      node0.putIntProp(2333, (-1227));
      node0.isHook();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0, 1, 3);
      Node node2 = new Node((-507), node1, node0, node1, 51, 1138);
      node1.isArrayLit();
      node2.isOptionalArg();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(1310);
      Node node1 = node0.getLastSibling();
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(4095, node1);
      node0.getInputId();
      Node node3 = new Node(42, node2, node0);
      int int0 = (-4673);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node.newString(53, "Ob:b{!vg'z", (-2451), 15);
      Node node1 = new Node(13, node0, node0);
      Node node2 = new Node((-2451), node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      int int0 = (-1774);
      int int1 = (-1857);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getSourceFileName();
      boolean boolean1 = true;
      Node node1 = Node.newString((String) null, 42, 2076);
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        nodeArray0[0].isEquivalentTo(node1, boolean2, boolean0, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString((-3796), "xJ&*hZ'EMHY=n", (-3796), 3996);
      node0.putIntProp((-582), 3996);
      node0.isHook();
      Node node1 = Node.newString((-3796), "Undefined");
      node1.isEquivalentTo((Node) null);
      JSType[] jSTypeArray0 = null;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isQuotedString();
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31);
      Node node1 = Node.newNumber((double) 48);
      Node node2 = node0.srcref(node1);
      node0.setType(56);
      Node node3 = node2.cloneTree();
      node2.toString(true, false, false);
      node3.isCall();
      node2.isVoid();
      node2.isContinue();
      Node node4 = null;
      try {
        node4 = new Node(node0.LENGTH, node2, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, (-1826));
      node0.putProp(1, "$IA_^kdj,.>YI2u,5X!");
      Node node2 = new Node((-1826), node0, node0);
      node2.isVoid();
      node0.addChildToFront(node2);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node((-19), (-19), (-19));
      node0.isOnlyModifiesThisCall();
      node0.getInputId();
      node0.isSetterDef();
      node0.isLocalResultCall();
      Node node1 = new Node(32, node0, node0, 46, 57);
      node1.setVarArgs(false);
      node1.isOr();
      node0.isFromExterns();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      node0.appendStringTree(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      node0.setLength(323);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node0.putIntProp(2, 16);
      node0.isComma();
      node1.isFor();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("", 5200, 5200);
      Node.newNumber((double) 56, 12, 5200);
      node0.isQualifiedName();
      Node node1 = Node.newString(461845907, "");
      node1.detachChildren();
      Node node2 = Node.newNumber(713.2468689, (-4192), 51);
      node2.useSourceInfoFromForTree(node0);
      node2.setSourceFileForTesting(" t");
      node1.type = 32;
      node2.getJsDocBuilderForNode();
      node1.getBooleanProp(8199);
      node1.isLocalResultCall();
      node0.getBooleanProp(5200);
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      node0.getExistingIntProp(37);
      node0.getDirectives();
      int int0 = 1624;
      node1.getExistingIntProp(int0);
      node1.mayMutateGlobalStateOrThrow();
      node2.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 37
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      node0.setLength(323);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node1.isStringKey();
      node0.isTypeOf();
      node1.isAssign();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node((-985), node0, node0, node0, node0);
      node0.hasChild(node1);
      node1.isGetProp();
      node0.getExistingIntProp(115);
      node0.addChildAfter(node1, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 115
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getQualifiedName();
      Node node1 = new Node(7, node0, node0, node0, 49, (-1904));
      node1.setType(1);
      node0.toString(true, false, true);
      node1.isCall();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.isVoid();
      Node node3 = null;
      Node node4 = null;
      Node node5 = new Node(node2.SIDE_EFFECTS_FLAGS_MASK, node3, node3, node4, node2);
      // Undeclared exception!
      try { 
        node5.isContinue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(42);
      node0.setSourceEncodedPositionForTree(42);
      Node node1 = Node.newString("inferred");
      Node node2 = new Node(47, node0, node0);
      node2.isBreak();
      node0.isGetterDef();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node0.isDo();
      node2.mayMutateArguments();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      node0.setLength((-2634));
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isNE();
      node0.isFunction();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isCall();
      node0.isVoid();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      node1.cloneTree();
      node1.toString(false, false, true);
      node1.isCall();
      node0.isVoid();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node1.mayMutateGlobalStateOrThrow();
      node2.setType(43);
      Node node3 = node0.cloneTree();
      node1.toString(false, true, false);
      node1.isCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = new Node(12, node2, node2, node3, node0, 47, 2);
      Node node5 = new Node(1, node1, node0, node0);
      node5.isVoid();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node node2 = new Node(43);
      node0.setSourceEncodedPositionForTree(40);
      Node node3 = Node.newString("Object#Element");
      Node node4 = new Node(12, node1, node0);
      Node node5 = new Node(13, node2, 4095, 57);
      node5.isBreak();
      node3.isNot();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node3.isDo();
      node5.mayMutateArguments();
      node2.setSideEffectFlags((-1731));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(38);
      node0.setLength(323);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = new Node(1016, node1, node0, (-2231), 30);
      node2.isSwitch();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node(195, 50, 63);
      node0.srcrefTree(node1);
      node1.isSetterDef();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node.newString(147, "khDM`=G|0B)f|!e!", 37, 63);
      Node node2 = new Node(2, node0, node1, node0, node0, 29, 1024);
      node0.isEquivalentTo(node1);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isString();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node.extractCharno(2333);
      Node node0 = Node.newString("jZ9cg", 101, 2333);
      node0.putIntProp(2333, (-1227));
      node0.getDouble();
      node0.isHook();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.isSwitch();
      node0.isEquivalentTo(node0, true, true, false);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = Node.newString("1)h");
      Node node2 = new Node(147, node0, node0);
      Node node3 = new Node(25, node2, 1, 1);
      node3.isBreak();
      node1.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.isDo();
      node0.mayMutateArguments();
      node3.setSideEffectFlags(8);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 8232);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 8232);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      node2.isGetterDef();
      node2.getChangeTime();
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.getLastSibling();
      node1.isSetterDef();
      Node node2 = new Node((-3796), node1);
      node1.getInputId();
      node0.putProp(72, node2);
      node2.setChangeTime(30);
      Node node3 = new Node(57, 4095, 8);
      node2.cloneTree();
      String string0 = node0.toString(false, true, true);
      node1.isCall();
      node0.isVoid();
      int int0 = (-2803);
      Node.newString(string0);
      Node[] nodeArray0 = new Node[7];
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), (-1168));
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      node0.setSourceFileForTesting("");
      Node node2 = node1.cloneTree();
      node1.toString(false, false, true);
      node0.isEquivalentToTyped(node2);
      node2.children();
      node2.setString("HOOK");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 306654252;
      int int1 = 114;
      Node node0 = Node.newNumber((double) 306654252);
      Node node1 = new Node(16, node0, node0);
      Node node2 = new Node(114, node1, node0, node1, 8192, 1);
      Node node3 = new Node(int1, node2, node0, node1);
      Node node4 = new Node(int0, node3, node0.IS_CONSTANT_NAME, node1.REFLECTED_OBJECT);
      // Undeclared exception!
      try { 
        node4.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = new Node(2506, node0, node0, node0, (-2807), 54);
      Node node3 = new Node(57, node2);
      Node node4 = node3.setJSDocInfo(jSDocInfo0);
      node0.mayMutateArguments();
      node0.getQualifiedName();
      Node node5 = new Node(4095, node1, node1, node0, 1, (-466));
      double double0 = (-1784.1193347);
      int int0 = 46;
      int int1 = 51;
      node4.setLineno(int1);
      Node node6 = Node.newNumber(double0, int0, node3.FLAG_ARGUMENTS_UNMODIFIED);
      node5.checkTreeEquals(node6);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "<";
      Node node0 = Node.newString("<", 262144, (-666));
      Node node1 = node0.clonePropsFrom(node0);
      node0.getBooleanProp((-666));
      Node node2 = new Node(118, node1, node0, node1, 2835, Integer.MIN_VALUE);
      node0.isOptionalArg();
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      String string1 = "F/-MF-D2>d='%X";
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "F/-MF-D2>d='%X");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string1;
      objectArray0[4] = (Object) node0;
      objectArray0[5] = (Object) node0;
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(16, node0, node0, 16, 38);
      node1.getSideEffectFlags();
      node1.setSideEffectFlags((-3901));
      int int0 = 379;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got GT
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(32, node0, node0, node0, 2452, 8);
      node0.setSourceEncodedPositionForTree(54);
      Node node2 = Node.newNumber((double) 1, 57, 8192);
      Node node3 = node1.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(4);
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node3.toString(true, false, false);
      node_SideEffectFlags3.clearSideEffectFlags();
      node3.isEquivalentToTyped(node1);
      node2.children();
      node1.setString("7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      Locale locale0 = Locale.FRENCH;
      String string0 = "53AuLq|0d";
      mockPrintStream0.format(locale0, string0, (Object[]) jSTypeArray0);
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32768);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node_SideEffectFlags5.setAllFlags();
      node0.getJSDocInfo();
      node2.addChildrenToBack(node1);
      Node node3 = node2.removeFirstChild();
      node2.addChildToBack(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node node2 = node1.removeChildren();
      Node node3 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node4 = new Node(54, (Node) null, node3);
      node2.isBreak();
      node4.isGetterDef();
      int int0 = null;
      try {  
      int0 = Node.FLAG_LOCAL_RESULTS;
      } catch(NullPointerException e) {}
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      Node node2 = node1.cloneTree();
      Node node3 = Node.newString("\"LT+t'Uy7zID@");
      Node node4 = Node.newNumber((double) 56, 42, 487470);
      node2.getChangeTime();
      node3.getJSDocInfo();
      node2.isDo();
      node4.getNext();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString("synthetic");
      node1.setSourceEncodedPositionForTree(122);
      Node node2 = Node.newString("Unexpected node in type expression: ");
      Node node3 = new Node(46, node2, node2);
      simpleErrorReporter0.warning("com.google.javascript.rhino.Node$AbstractPropListItem", "Object#Element", 487424, 4095);
      Node node4 = new Node((-1350), node2, 29, 628);
      node4.isBreak();
      node0.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node5 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node5.isDo();
      node3.mayMutateArguments();
      node1.setSideEffectFlags(node2.IS_DISPATCHER);
      // Undeclared exception!
      try { 
        node2.isNot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      Node node1 = new Node(12, node0, node0, node0, 1092, 111);
      node0.checkTreeEquals(node1);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(36, node0, 56, 51);
      String string0 = "ceZ&g@A|U";
      int int0 = 20;
      Node node3 = Node.newString(node1.INPUT_ID, string0, int0, node1.SIDE_EFFECTS_ALL);
      Node node4 = node2.copyInformationFromForTree(node3);
      // Undeclared exception!
      try { 
        node4.detachFromParent();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      node0.isSwitch();
      node0.isEquivalentTo((Node) null, true, false, false);
      double double0 = 0.5;
      Node node1 = Node.newNumber(double0);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(38, node0, node0);
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      Node node2 = node1.clonePropsFrom(node0);
      node2.getAncestors();
      node2.setSourceFileForTesting("2ld*S(1s");
      node0.setLineno(0);
      node0.putProp(30, ")O%D^lVmo");
      node1.setSourceEncodedPositionForTree(1200);
      node0.isSwitch();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node node0 = Node.newNumber((double) 16, 1687, 16);
      node0.putIntProp(1697, 110);
      node0.isFor();
      Node node1 = Node.newNumber(146.45, 2258, (-1817));
      Node node2 = new Node((-1921), node1, node0, node1, 31, 2);
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(3709, (-1474), (-2764));
      Node node1 = new Node(45, node0, (-539), 40);
      node1.isSyntheticBlock();
      node0.isWhile();
      node1.toString(true, false, true);
      Node.newString(54, "");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node1.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node node3 = node2.copyInformationFromForTree(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node3.setSideEffectFlags(node_SideEffectFlags3);
      Node node4 = node1.useSourceInfoIfMissingFrom(node3);
      node3.getSourceOffset();
      node4.toString();
      Node.extractLineno(node0.REFLECTED_OBJECT);
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(51, node0, node0, node0, 50, 32);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(39, node1, 51, (-1498));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>();
      ArrayDeque<TemplateType> arrayDeque1 = arrayDeque0.clone();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque1);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.isSyntheticBlock();
      node0.isObjectLit();
      node1.toString(true, true, true);
      Node.newString(37, "VOID_TYPE");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = (-2074);
      Node node0 = Node.newString((String) null);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
      node0.setLineno(4095);
      node0.getInputId();
      node0.putProp(4095, (Object) null);
      node0.isVoid();
      Node node1 = new Node(2, node0, node0, node0, (-1826), 751616000);
      node0.isUnscopedQualifiedName();
      node0.addChildToFront(node1);
      node0.addChildToFront(node1);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setType(154);
      node0.toString(true, true, true);
      Node node1 = Node.newString(39, "Object#Element");
      node0.isEquivalentToTyped(node1);
      node0.getString();
      int int0 = 49;
      int int1 = 1;
      node1.putIntProp(int0, int1);
      // Undeclared exception!
      try { 
        node0.isComma();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING_KEY is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 2, 1, 2);
      node0.checkTreeEquals(node1);
      node0.setOptionalArg(true);
      node0.isVarArgs();
      node0.detachChildren();
      node0.setIsSyntheticBlock(true);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      int int0 = (-1855);
      node0.setLength((-1855));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      node0.srcref((Node) null);
      int int1 = 127;
      node0.setType(int1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int2 = (-1524);
      int int3 = 57;
      Node node1 = Node.newNumber((double) node0.FREE_CALL, int2, int3);
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("And(", 31, 31);
      Node node1 = Node.newString(29, "", 125, 115);
      Node node2 = new Node(4095, node1, node1);
      Node node3 = new Node(1305, node0);
      node0.isStringKey();
      node3.isAnd();
      node1.children();
      boolean boolean0 = node3.isDebugger();
      node0.removeChild(node3);
      node2.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean1 = false;
      boolean boolean2 = false;
      node1.toString(boolean1, boolean0, boolean2);
      int int0 = (-3250);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber((double) 52, 751619272, 751619272);
      Node node1 = new Node(15, node0, node0, node0, 1428, (-2454));
      String string0 = node0.checkTreeEquals(node1);
      node1.isEquivalentTo(node0, false, false, false);
      Node node2 = new Node(103, node0, 1428, 55);
      int int0 = 39;
      Node.newString(int0, string0, node0.SIDE_EFFECT_FLAGS, node1.DIRECTIVES);
      node0.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber((double) 52, 751619272, 751619272);
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node0.setSourceEncodedPositionForTree(20);
      Node node1 = Node.newNumber((double) 2, 50, 49);
      node1.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.clearSideEffectFlags();
      node1.isEquivalentToTyped((Node) null);
      node1.children();
      String string0 = "";
      int int0 = (-4684);
      int int1 = 1428;
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, 3709, 124);
      Node node1 = Node.newString(1077, "X+q6<gqJgfPWRq", 376, 98);
      Node node2 = new Node(42, node0, node0);
      Node node3 = new Node(4098, node1);
      boolean boolean0 = node2.isStringKey();
      boolean boolean1 = node1.isAnd();
      node2.children();
      Node node4 = Node.newString((-258), "expectedValuesPerKey must be >= 0 but was %s", 57, 42);
      node2.removeChild(node4);
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean2 = false;
      node4.toString(boolean2, boolean0, boolean1);
      int int0 = (-1168);
      int int1 = 12288;
      node1.putIntProp(int0, int1);
      node3.isHook();
      // Undeclared exception!
      try { 
        node2.isThrow();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node0.putProp(30, ")O%D^lVmo");
      Node node2 = new Node((-859009025), node1, node0, 30, (-4632));
      node0.getSourceOffset();
      node1.isSwitch();
      node0.isDebugger();
      Node.mergeLineCharNo(155, 46);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString("Object#Element");
      Node node1 = Node.newNumber((double) 52);
      Node node2 = Node.newString(37, "Object#Element");
      node2.putIntProp(152, 0);
      node1.isInstanceOf();
      Node node3 = new Node(32, node0, 52, 37);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
      node0.isNumber();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.getJSDocInfo();
      node1.toString();
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node2.addChildToBack(node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node3.removeChildren();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-236), 8232);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = new Node(905, node0, node1, 53, 8232);
      node2.setSourceEncodedPositionForTree(495);
      node1.isOr();
      node1.isVar();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = new Node(229, node0, node1, node0, (-2467), 147);
      node0.cloneTree();
      int int0 = 114;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node3 = new Node(47, nodeArray0);
      int int1 = 50;
      Node node4 = new Node(int0, node2, node0, node3, int1, node1.JSDOC_INFO_PROP);
      node1.isTrue();
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(86, "", 86, 86);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node1 = Node.newNumber(1.0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isQualifiedName();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node4 = node1.cloneTree();
      Node node5 = node1.useSourceInfoFromForTree(node2);
      node4.isThis();
      Node.AncestorIterable node_AncestorIterable0 = node5.getAncestors();
      node_AncestorIterable0.iterator();
      Node node6 = new Node(57, node1, node1, node5);
      node6.isQuotedString();
      node1.addChildrenAfter(node6, node3);
      node5.isNot();
      node5.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node1.isEquivalentTo(node0, false, false, false);
      Node node2 = new Node(51, node0, 39, 36);
      Node.newString(51, "", 46, 3709);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ModificationVisitor", (-258), 122);
      Node node1 = new Node(40, 31, 54);
      Node node2 = Node.newString(113, "", 5760, 1224);
      Node node3 = new Node(16777216, node2, node1, 11, 39);
      node2.getSourceOffset();
      Node node4 = Node.newNumber((double) 47);
      node4.isSwitch();
      node0.isDebugger();
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 3709, 3709, 124);
      Node node1 = Node.newString(1077, "X+q6<gqJgfPWRq", 2, 98);
      Node node2 = new Node(42, node0, node0);
      Node node3 = new Node(4098, node1);
      node2.isStringKey();
      node1.isAnd();
      node3.mayMutateArguments();
      node2.children();
      Node node4 = new Node(38, node2);
      node3.detachChildren();
      node4.setOptionalArg(false);
      node2.isVarArgs();
      node4.detachChildren();
      node3.setIsSyntheticBlock(false);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2);
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>();
      arrayDeque0.clone();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSyntheticBlock();
      node0.isObjectLit();
      node1.toString(true, true, false);
      Node.newString(2285, "VOID_TYPE");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.getProp(0);
      Node node1 = new Node((-2100));
      node0.setSourceEncodedPositionForTree(0);
      Node node2 = Node.newString("New Collection violated the Collection spec", 1, 43);
      Node node3 = new Node((-1350), node0, node1);
      node2.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isNot();
      node2.isRegExp();
      node3.isVoid();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node2.isInc();
      node1.putIntProp((-2153), 30);
      node0.isFor();
      Node node3 = new Node(50, node0, node1, node2, (-1156), 57);
      node3.isTrue();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      node0.checkTreeEquals(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node3 = Node.newNumber((double) 37);
      node2.setSourceFileForTesting((String) null);
      Node.extractCharno(19);
      node1.useSourceInfoFrom(node2);
      node1.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "h";
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(2938.834550794);
      boolean boolean0 = false;
      node0.mayMutateArguments();
      node0.removeFirstChild();
      node0.addChildToBack((Node) null);
      ErrorReporter errorReporter0 = null;
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = Node.newString(52, "Object#Key");
      node1.isStringKey();
      node1.setSourceEncodedPosition(52);
      node1.getProp(116);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isScript();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node((-518), node0, node0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.putIntProp(110, 36);
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isComma();
      node0.getString();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(3709, (-1474), (-2764));
      Node node1 = new Node(42, node0, node0, 40, 50);
      node1.copyInformationFromForTree(node0);
      node1.isSwitch();
      node0.isFromExterns();
      Node.newNumber(1.0, 46, 1411);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
      node0.setLineno(4095);
      node0.getInputId();
      node0.putProp(4095, (Object) null);
      node0.isVoid();
      Node node1 = new Node(2, node0, node0, node0, (-1826), 751616000);
      Node node2 = Node.newNumber((-766.41894808), 2583, 53);
      node2.getChangeTime();
      node0.isDo();
      node0.getNext();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("h", 0, 0);
      Node node1 = new Node(644, 43, 46);
      node0.isLocalResultCall();
      Node node2 = new Node(18, node0, node1, 98, (-1324));
      node2.setSourceEncodedPositionForTree((-323));
      node0.isSwitch();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node1 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node node2 = new Node(52, node0, 4095, 53);
      node0.wasEmptyNode();
      Node.newString(112, "%", 497, 153);
      Node node3 = Node.newString("Object#Key");
      node3.useSourceInfoIfMissingFromForTree(node1);
      node3.copyInformationFromForTree(node2);
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setCharno(38);
      Node.extractCharno(16);
      node0.isCall();
      node0.isTrue();
      Node[] nodeArray0 = new Node[6];
      Node node1 = new Node(29, node0, node0, node0, node0);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node2 = new Node((-889), nodeArray0, 36, 36);
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isScript();
      node2.isRegExp();
      node3.getChildAtIndex(29);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(195, 50, 63);
      Node node2 = node0.srcrefTree(node1);
      node2.isEquivalentToShallow(node2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.newString(29, "Object#Element", 57, 1);
      node2.detachFromParent();
      int int0 = 39;
      Node.extractCharno(int0);
      int int1 = 52;
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-518));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isStringKey();
      node0.isTypeOf();
      node0.isAssign();
      Node node3 = node2.getLastSibling();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(0, "h");
      node0.isWhile();
      Node node1 = new Node(47);
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h");
      Node node3 = new Node(47, node0, 1, 49);
      node3.checkTreeEquals(node1);
      node2.isBreak();
      node3.isGetterDef();
      int int0 = null;
      try {  
      int0 = Node.SIDE_EFFECT_FLAGS;
      } catch(MockIllegalStateException e) {}
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(39, node0, node0, 4, 53);
      Node node2 = node1.srcref(node0);
      node1.isQualifiedName();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node3;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      Node node4 = new Node(57, nodeArray0, 47, 919);
      Node node5 = node4.cloneTree();
      Node node6 = node5.useSourceInfoFromForTree(node1);
      node0.isThis();
      int int0 = 13;
      Node node7 = null;
      try {
        node7 = new Node(int0, nodeArray0[4], node5, node0, node4.MAX_COLUMN_NUMBER, node6.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      node0.removeChild(node1);
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Object#Key");
      node0.setSourceEncodedPositionForTree(8);
      node0.setLineno(26);
      node0.getInputId();
      Object object0 = new Object();
      node0.putProp(15, object0);
      node0.isVoid();
      Node node1 = new Node(42, node0, node0, node0, 48, 37);
      Node node2 = Node.newNumber((-1.0), 12, 118);
      node2.getChangeTime();
      node0.isDo();
      node2.getNext();
      node1.isCatch();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.parallelStream();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.putIntProp(2329, 0);
      node1.isHook();
      node1.isThrow();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      node2.isNumber();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = Node.newString("1)h");
      Node node2 = new Node(147, node0, node0);
      Node node3 = new Node(25, node2, 1, 1);
      node3.isBreak();
      node1.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.isDo();
      node4.getDouble();
      node0.mayMutateArguments();
      double double0 = (-437.7659023);
      Node.newNumber(double0);
      node3.setSideEffectFlags(node4.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        node0.isNot();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.getJSDocInfo();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(38, nodeArray0, 1, 51);
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node1.addChildToBack(node0);
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = null;
      try {
        node3 = new Node(node1.VAR_ARGS_NAME, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$z)Hcl{&eS&");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.isSwitch();
      node0.isEquivalentTo(node0, true, true, false);
      node0.isQualifiedName();
      node0.getSourceOffset();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node0.isTry();
      Node node3 = new Node(31, node2, node1);
      node2.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isNot();
      node1.isRegExp();
      node4.isGetProp();
      node4.setString("com.google.javascript.rhino.Node$ObjectPropListItem");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node((-217), node1, node1);
      Node node3 = node2.srcrefTree(node1);
      node3.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node node4 = Node.newNumber(1.0);
      node4.detachFromParent();
      int int0 = 39;
      Node.extractCharno(node4.NO_SIDE_EFFECTS);
      int int1 = (-997);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1168), 304, (-1168));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thisType");
      Node node1 = new Node((-1168), node0, node0);
      node1.getAncestors();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thisType");
      Node node2 = node1.cloneNode();
      node0.isName();
      node0.isAdd();
      Node[] nodeArray0 = new Node[5];
      Node node3 = Node.newString("+6ljH.~4U67P:3]<wk", 43, 42);
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node1;
      Node node4 = Node.newNumber((double) 1, 196645, 18);
      nodeArray0[3] = node4;
      nodeArray0[4] = node1;
      node4.copyInformationFrom(node3);
      Node node5 = new Node(3768, nodeArray0);
      node1.replaceChildAfter(node5, nodeArray0[1]);
      node4.isAssign();
      node2.isVoid();
      nodeArray0[3].srcrefTree(node2);
      nodeArray0[4].mayMutateArguments();
      node0.isAnd();
      nodeArray0[0].isNE();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#3(^^:kjl1iW'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.mergeLineCharNo(798, 102);
      Node node0 = Node.newNumber((double) 798, 906, 906);
      node0.isNoSideEffectsCall();
      node0.isGetProp();
      node0.getChildCount();
      node0.getJSDocInfo();
      Node node1 = null;
      node0.hasChild((Node) null);
      node0.checkTreeEquals((Node) null);
      Node node2 = node0.srcref(node1);
      node0.isCase();
      node2.srcref(node1);
      node0.isObjectLit();
      node2.isWith();
      node2.isContinue();
      // Undeclared exception!
      try { 
        node2.useSourceInfoFrom(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 306;
      Node node0 = new Node(39);
      Node node1 = new Node(306, node0, node0, node0, 49, 36);
      Node node2 = node0.srcrefTree(node1);
      int int1 = 21;
      int int2 = 2600;
      ImmutableList<String> immutableList0 = ImmutableList.of("", "6$iZ`m", "6$iZ`m", (String) null, "", (String) null, "OBJECT_NUMBER_STRING", "OBJECT_NUMBER_STRING", "6$iZ`m", "", (String) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(immutableList0);
      int int3 = 2406;
      node2.setCharno(int3);
      node1.setDirectives(linkedHashSet0);
      // Undeclared exception!
      try { 
        node1.detachChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 2, 1, 2);
      node0.checkTreeEquals(node1);
      node0.isVarArgs();
      node0.detachChildren();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newNumber(0.0, 154, 2110);
      node2.toStringTree();
      Node.newString(148, "NUMBER 0.0 154\n", 32, 416);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.setSourceEncodedPositionForTree(8);
      Node.newString("1)h");
      Node node1 = new Node(147, node0, node0);
      Node node2 = new Node(25, node1, 1, 1);
      node2.isBreak();
      Node node3 = Node.newNumber((double) 8, 46, 0);
      node2.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(30);
      node3.getSourceOffset();
      node_SideEffectFlags1.setReturnsTainted();
      node3.isThrow();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1168), 304, (-1168));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thisType");
      Node node1 = new Node((-1168), node0, node0);
      node1.getAncestors();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thisType");
      Node node2 = node1.cloneNode();
      node0.isName();
      node0.isAdd();
      int int0 = 3768;
      Node[] nodeArray0 = new Node[5];
      Node node3 = Node.newString("+6ljH.~4U67P:3]<wk", 43, 42);
      nodeArray0[0] = node1;
      Node node4 = new Node(37, node2, node2, node3, node0, 209, 46);
      int int1 = 57;
      Node node5 = new Node(node1.NO_SIDE_EFFECTS, nodeArray0[0], node4, node1, int1, int0);
      node5.checkTreeEquals(node2);
      Node.newNumber((double) node3.LENGTH);
      node5.isLabelName();
      node5.isNE();
      Node node6 = null;
      try {
        node6 = new Node(node3.CHANGE_TIME, node0, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      int int0 = 101;
      Node node1 = Node.newString("XE 3", 101, 261);
      node1.isEquivalentTo(node0, true, false, true);
      node0.setDouble(46);
      node1.getBooleanProp(int0);
      node0.getSourceFileName();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isIn();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      Node node1 = Node.newNumber((double) 37, 4095, 0);
      node1.setLength(49);
      node1.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 32, 0, 2);
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      node2.getJSDocInfo();
      node1.addChildrenToBack(node0);
      node1.removeFirstChild();
      node2.addChildToBack(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, (-1845));
      node1.isEquivalentTo(node0);
      Node node2 = new Node(53, node1, node1, (-852), 4);
      node1.isThrow();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node((-217), node1, node1);
      node0.isBreak();
      node2.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.isDo();
      Node node4 = new Node(880, node0, node2);
      node4.mayMutateArguments();
      node4.isEmpty();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.identifyNonNullableName("ASSIGN");
      Node node0 = Node.newString("Object#Key");
      node0.removeProp(119);
      node0.isVar();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Ty]+D!{8pH,aVy $");
      Node node0 = Node.newNumber(1.0);
      Node node1 = node0.useSourceInfoFromForTree((Node) null);
      node0.setType(node1.INPUT_ID);
      node0.putIntProp(node1.SYNTHETIC_BLOCK_PROP, node1.NO_SIDE_EFFECTS);
      node1.isFor();
      int int0 = 52;
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node1, node0.IS_DISPATCHER, node1.DECR_FLAG);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 3709);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "![h^<@+l6/)VFPO");
      Node node3 = new Node(12, node0, 2, 31);
      node3.toString(true, true, false);
      Node node4 = Node.newNumber((-2359.3683169));
      node0.addChildrenToFront(node4);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(8232, 8232, 8232);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      Node node2 = new Node(905, node0, node1, 53, 8232);
      node2.removeFirstChild();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node3 = Node.newString(1650, "$IA_^kdj,.>YI2u,5X!", 37, 31);
      node3.addChildToBack(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = new Node(4, node0, node1, node1, node1, 37, 29);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node(1085);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node0.getAncestor((-1317));
      node0.getSourceOffset();
      node0.children();
      int int0 = 2276;
      // Undeclared exception!
      try { 
        node0.getAncestor(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.identifyNonNullableName("Lz\"s");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.isVar();
      node0.isBreak();
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = Node.newString("h");
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      node0.isOnlyModifiesThisCall();
      node0.getJSDocInfo();
      Node node3 = new Node(4292, node0, (-1752), 57);
      node3.hasChild(node1);
      node2.checkTreeEquals(node3);
      Node node4 = node2.srcref(node0);
      node0.isAssign();
      Node node5 = new Node(node3.EMPTY_BLOCK, node3, node4, node3.IS_DISPATCHER, node2.SIDE_EFFECTS_FLAGS_MASK);
      node2.isObjectLit();
      // Undeclared exception!
      try { 
        node2.isWith();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4292
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node1.getSideEffectFlags();
      node1.setSourceEncodedPositionForTree(46);
      Node node2 = Node.newString("h", 56, 2);
      Node node3 = new Node(86, node0, node2);
      node3.isCast();
      node0.setString("quoted");
      node2.removeFirstChild();
      node1.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node2 = Node.newNumber(0.5);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node0.isStringKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      Node node5 = node4.useSourceInfoFromForTree(node3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.cloneTree();
      Node node6 = node3.useSourceInfoFromForTree(node2);
      node5.isThis();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node6;
      nodeArray0[1] = node5;
      nodeArray0[2] = node3;
      nodeArray0[3] = node4;
      Node node7 = new Node(51, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node7.getAncestors();
      node_AncestorIterable0.iterator();
      String string0 = "J";
      Node node8 = Node.newString(string0);
      Node node9 = new Node(node2.VAR_ARGS_NAME, node3, node8, nodeArray0[3], nodeArray0[0], node4.FLAG_NO_THROWS, node5.IS_NAMESPACE);
      // Undeclared exception!
      try { 
        node9.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString(98, "XE 3");
      Node.newString(13, "$IA_^kdj,.>YI2u,5X!");
      node0.getInputId();
      Node node1 = Node.newString(124, "ic9et");
      Node node2 = Node.newString("XE 3");
      node0.addChildToFront(node2);
      Node.extractLineno(83);
      node0.addChildrenToFront(node2);
      Node node3 = node2.srcref(node0);
      node3.copyInformationFrom(node2);
      node0.isAnd();
      node3.getDirectives();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Object#Key");
      node0.setSourceEncodedPositionForTree(23);
      node0.getSourceFileName();
      Node node1 = Node.newString("C1,XD", 1735, 1023);
      node1.isEquivalentTo(node0, true, true, false);
      Node node2 = Node.newNumber((double) 30);
      node2.setDouble(31);
      node2.getBooleanProp(3725);
      node0.getSourceFileName();
      Node node3 = new Node((-1441), (Node[]) null);
      node1.hasChild(node0);
      int int0 = (-447);
      Node node4 = new Node(int0);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node node1 = new Node(105, 36, 51);
      node1.toString(true, false, true);
      Node node2 = Node.newNumber((double) 36);
      node0.addChildrenToFront(node2);
      node1.isDefaultCase();
      node2.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isSwitch();
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isEquivalentTo(node1, true, false, false);
      node1.isQualifiedName();
      node0.getSourceOffset();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 8, 16, 8);
      node0.putIntProp(41, 110);
      node0.isFor();
      Node node1 = new Node(46, node0, node0, node0, 13, 197);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString(8, "Object#Key", 8, 8);
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = new Node(147, node0, node0);
      Node node2 = new Node(25, node1, 1, 1);
      node2.isBreak();
      node0.isIf();
      node1.isRegExp();
      node0.setString("Object#Key");
      node2.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(37, 1810, 28);
      node0.setSourceEncodedPositionForTree(51);
      node0.isNull();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 3709);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      Node node3 = new Node(12, node0, 2, 31);
      node3.toString(true, true, false);
      node3.isNumber();
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(42, node0, node1, node0);
      node2.mayMutateGlobalStateOrThrow();
      node2.setType(0);
      Node node3 = new Node(47, 57, 37);
      node1.toString(false, true, false);
      node2.isCall();
      node0.isVoid();
      node3.isContinue();
      node2.addChildAfter(node3, node1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(86, "", 86, 86);
      node0.setSourceEncodedPositionForTree(86);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node1 = Node.newNumber(1.0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.setType(52);
      node2.isInc();
      node2.putIntProp(15, 4);
      node0.isFor();
      Node node3 = new Node(49, node1, node1, (-2974), 43);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.isDo();
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(36, 748, 12);
      Node node1 = new Node(1336, node0, node0, node0, node0, 155, 32);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.srcrefTree(node1);
      node0.addSuppression("23S");
      node0.getExistingIntProp(12);
      node0.getCharno();
      node2.setDouble(node1.DECR_FLAG);
      node1.isDefaultCase();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 798, 906, 906);
      node0.isNoSideEffectsCall();
      node0.isGetProp();
      Node node1 = new Node(103, node0, node0);
      node1.hasChild(node0);
      Node node2 = new Node(5372);
      node1.isThrow();
      node0.getIntProp(103);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString(0, "h", 0, 0);
      node0.isWhile();
      Node node1 = new Node(77);
      node0.setType(1);
      node1.isEquivalentToTyped(node0);
      node0.getString();
      Node node2 = Node.newString(32, "h");
      Node node3 = new Node(48, node2);
      node3.isStringKey();
      node2.toStringTree();
      Node node4 = new Node(55, node2, node3);
      node3.isTypeOf();
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.mergeLineCharNo(102, 51);
      Node node0 = Node.newNumber((double) 417843, 51, (-1174));
      node0.isNoSideEffectsCall();
      node0.isGetProp();
      Node node1 = new Node(124, node0, node0);
      node1.getChildCount();
      Node node2 = new Node((-479), node0, node1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 941);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(0, nodeArray0, 4095, 2);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isDelProp();
      Node node2 = new Node(32, node0, (-2079), 39);
      node1.toString(false, false, false);
      node2.isNumber();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(1085);
      Node node1 = new Node(3572, 47, 56);
      Node node2 = node0.srcref(node1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setType(1857);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.isEquivalentToTyped(node0);
      node2.getString();
      String string0 = "u^7 .uosDI&-\\1i";
      Node.newString(node0.MAX_COLUMN_NUMBER, string0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.incrementGeneration();
      Stack<JSType> stack0 = null;
      try {
        stack0 = new Stack<JSType>();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1857
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString("QqZ4CPrV'k,Mb3x+E", (-258), (-1174));
      Node node1 = new Node(2, (-1268), (-1268));
      int int0 = 124;
      node1.setDouble(30);
      Node node2 = new Node(int0, node0, node1, node1.JSDOC_INFO_PROP, node1.FLAG_NO_THROWS);
      node0.getSourceOffset();
      node2.isSwitch();
      node2.isDebugger();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setType(43);
      node1.isEquivalentToTyped(node2);
      Node node3 = new Node(4, 1534, 16);
      node3.setSourceEncodedPositionForTree(32);
      node3.isNull();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.siblings();
      node0.isEquivalentToShallow(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node1.isEquivalentTo(node0, true, false, true);
      Node node2 = new Node(51, node0, 39, 36);
      node1.addChildrenToFront(node2);
      node1.isFromExterns();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-518));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = Node.newString(4095, "{k, //Hb:F?[c`");
      Node node3 = new Node(1534, node0, node2, 29, 261);
      node0.setSourceEncodedPositionForTree(29);
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node1 = new Node(105, 36, (-1826));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags7.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags7.setMutatesArguments();
      node0.isStringKey();
      node0.isTypeOf();
      node1.isAssign();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber(30.0, 699, 2143);
      node0.addChildToFront((Node) null);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(1813, 3804, 3804);
      node0.toStringTree();
      double double0 = 357.41874886;
      Node node1 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node0.srcrefTree(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1813
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node.newString("Object#Element");
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.isNE();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-518));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(55, node0, 53, (-1668));
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.copyInformationFromForTree(node3);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(20, node0, node0, node0, 119, 46);
      node0.checkTreeEquals(node1);
      node1.isEquivalentTo(node0, false, false, false);
      Node node2 = new Node(51, node0, (-4096), (-236));
      node2.isNE();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(124);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(43, 1289, 1);
      node1.srcrefTree(node0);
      node1.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node2 = Node.newNumber((double) 52);
      node2.detachFromParent();
      int int0 = Node.DECR_FLAG;
      int int1 = (-46);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isSwitch();
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isEquivalentTo(node1, false, true, true);
      node1.isQualifiedName();
      node1.getSourceOffset();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("ogQ$Hv~Cj#D", 114, 114);
      int int0 = Node.SIDE_EFFECTS_ALL;
      node0.isNull();
      node0.isOr();
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(40, node0, node0, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplateType((JSType) null);
      node0.toString(false, true, false);
      node1.isCall();
      node1.isEquivalentTo(node0, false, false, true);
      node1.isVoid();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(42, node0, node1, node0);
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = Node.newString(4308, "UAOh7(?M;+b3pcb", 2, 55);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UAOh7(?M;+b3pcb");
      node2.replaceChildAfter(node3, node3);
      node2.setType(node1.SIDE_EFFECTS_ALL);
      Node node4 = new Node(node2.IS_DISPATCHER, node2.REFLECTED_OBJECT, node1.OPT_ARG_NAME);
      boolean boolean0 = false;
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), (-258));
      Node node1 = new Node(105, 36, 51);
      node1.useSourceInfoIfMissingFrom(node0);
      Node node2 = node0.detachFromParent();
      Node.extractCharno(node0.COLUMN_MASK);
      Node node3 = new Node(node2.EMPTY_BLOCK, node2, node0.POST_FLAG, node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v)D}+6m 23B?=MD:%,&");
      int int0 = 33;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(33, "2");
      node0.toString();
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setQuotedString();
      node1.isUnscopedQualifiedName();
      node0.getIntProp(int0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("/3+%D{a", 3106, 112);
      Node node1 = Node.newNumber(0.0);
      Node node2 = Node.newString(50, "L<e.I'l*dPo-QXk=", 986, 36);
      Node node3 = node2.removeFirstChild();
      node0.removeChild((Node) null);
      node0.getJsDocBuilderForNode();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node3;
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node0 = new Node(4, 36, (-1826));
      node0.isInstanceOf();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber((double) 32, 49, 36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isStringKey();
      node0.isTypeOf();
      node1.isAssign();
      node1.isEmpty();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      node0.appendStringTree(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 8, 16, 8);
      node0.putIntProp(41, 110);
      node0.isFor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(46, node0, node0, node0, 13, 197);
      node1.isTrue();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(42, node0, node1, node0);
      node0.isTypeOf();
      Node node3 = Node.newString(4308, "UAOh7(?M2+b3pcb", 2, 55);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UAOh7(?M2+b3pcb");
      node3.useSourceInfoFrom(node0);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setInterface(false);
      jSDocInfo0.getBaseType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.toString();
      node3.isCast();
      node3.removeProp((-1356));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      node0.setType(50);
      node0.isInc();
      node0.getBooleanProp(46);
      node1.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(40, 43, (-515));
      node1.toString(false, false, false);
      Node node3 = Node.newNumber((double) 50);
      Node.newString(105, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.addChildrenToFront(node2);
      node1.isDefaultCase();
      Node.newString(1286, "uZ:~PG}9&YQu");
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(125);
      node0.srcref(node0);
      Node node1 = new Node(38, 53, 8);
      node1.srcref(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParameters((List<JSType>) linkedList0);
      node0.isString();
      Node.newNumber((double) 1);
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      node0.isCatch();
      node0.isSwitch();
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isEquivalentTo(node1, true, false, false);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isQualifiedName();
      node0.getSourceOffset();
      node1.isIf();
      node2.putBooleanProp(46, false);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      Node node4 = Node.newNumber((double) 4095);
      node3.addChildrenToFront(node1);
      node4.isBlock();
      node3.isWhile();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isIn();
      Node.extractCharno(122);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8, 8, 8);
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = new Node(147, node0, node0);
      Node node2 = new Node(25, node1, 1, 1);
      node2.isEquivalentToTyped(node2);
      node0.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node1.toString();
      node2.isCast();
      node1.removeProp((-3549));
      node2.isOnlyModifiesArgumentsCall();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("", 55, 55);
      node0.putIntProp((-1227), 4095);
      node0.isLocalResultCall();
      node0.isReturn();
      node0.getDouble();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isAnd();
      node0.children();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.isBreak();
      Node node1 = new Node(50, node0, (-3397), 19);
      node1.useSourceInfoFrom(node0);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node((-258), 941, (-258));
      Node node1 = new Node(105, 36, 51);
      Node node2 = new Node(53, node1, node1, 36, 4);
      node2.removeChildAfter(node1);
      node2.getAncestors();
      node1.isSwitch();
      // Undeclared exception!
      try { 
        node1.isFromExterns();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node2.getBooleanProp(57);
      node0.isLabel();
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node(52, 48, 40);
      node1.toString(false, false, false);
      Node.newNumber(2960.257918);
      Node node4 = new Node(53, node3, node1);
      Node node5 = node4.srcrefTree(node3);
      node2.isCast();
      node1.isFromExterns();
      node3.clonePropsFrom(node5);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(3709, (-1168), 3709);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      Node node3 = new Node(12, node0, 2, 31);
      Node node4 = Node.newNumber((double) 57);
      node4.isFromExterns();
      node4.isThis();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString("/}^&");
      node0.isNoSideEffectsCall();
      Node node1 = new Node((-6), node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isVarArgs();
      Node node3 = node0.removeChildren();
      node2.isQuotedString();
      node0.isFor();
      Node node4 = node0.useSourceInfoFrom(node2);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setInterface(false);
      jSDocInfo0.getBaseType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.toString();
      node3.isCast();
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node0.isFromExterns();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -6
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      Node node1 = Node.newNumber((-914.0));
      Node node2 = node1.srcref(node0);
      Node node3 = new Node(47, node0, node0, node0, node1);
      node3.setType(49);
      boolean boolean0 = node2.isTry();
      node2.removeChildAfter(node1);
      Node node4 = new Node(node3.FLAG_LOCAL_RESULTS, node2, node0);
      node3.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.detachChildren();
      // Undeclared exception!
      try { 
        node4.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 8, 16, 8);
      int int0 = 41;
      node0.putIntProp(41, 110);
      boolean boolean0 = node0.isFor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      node0.setDouble((-2757.14436800612));
      byteArray0[1] = (byte)24;
      int int1 = Node.FLAG_LOCAL_RESULTS;
      node0.toString();
      node0.isCast();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      node0.removeProp(int0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      node0.isInc();
      node0.getBooleanProp(46);
      node1.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(12, node0, node1, node1, 53, 1);
      node1.toString(false, false, false);
      Node.newNumber((double) 50);
      Node.newString(105, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.isDefaultCase();
      Node.newString(1286, "uZ:~PG}9&YQu");
      node2.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node1.mayMutateGlobalStateOrThrow();
      node2.setType(43);
      node1.checkTreeEqualsImpl(node2);
      node0.cloneTree();
      node1.mayMutateGlobalStateOrThrow();
      node1.toString(false, false, false);
      node1.isCall();
      node0.isVoid();
      node0.isContinue();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.isInstanceOf();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isReturn();
      node2.getDouble();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(40, node0, node1, node1, node1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      Node node4 = Node.newNumber((double) 4095);
      node3.addChildrenToFront(node1);
      node4.isBlock();
      // Undeclared exception!
      try { 
        node3.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      node0.setType(43);
      node0.getBooleanProp(57);
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(52, 48, 40);
      Node node3 = new Node(56, 56, 47);
      Node.newString(1, "5{(dYTyJ-b\"SmN", 39, 4);
      node1.setSourceEncodedPositionForTree(56);
      Node node4 = new Node(110, node0);
      node4.isNull();
      node4.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1187), 3709);
      node0.setLength((-1855));
      node0.siblings();
      node0.isCase();
      Node node1 = new Node(13, node0, node0, node0, 119, 46);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(1103, node1, node2, node0, 3709, 3814);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 8, 16, 8);
      node0.putIntProp(41, 110);
      node0.isFor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(46, node0, node0, node0, 13, 197);
      node1.isTrue();
      node1.hasOneChild();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mYoahr?0");
      node0.toString(false, false, true);
      Node node2 = Node.newNumber(424.3548306058349);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(46, nodeArray0);
      node0.addChildrenToFront(node3);
      node2.isDefaultCase();
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
      node_NodeMismatch0.equals("duplicate child");
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Object#Key");
      node0.setSourceEncodedPositionForTree(23);
      node0.getSourceFileName();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractIterator");
      Node node1 = Node.newString("C1,XD", 1735, 1023);
      node1.toString(true, false, true);
      Node node2 = Node.newString(47, "CharMatcher.ANY");
      node2.isReturn();
      node1.replaceChild(node0, node2);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(30, node1, 54, 16);
      node2.mayMutateGlobalStateOrThrow();
      node2.setType(0);
      Node node3 = new Node(47, 57, 37);
      node1.toString(true, true, false);
      node2.isCall();
      node0.isVoid();
      node2.isOptionalArg();
      node2.addChildAfter(node3, node1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      node0.isInc();
      node0.getBooleanProp(46);
      node0.isVar();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(12, node0, node1, node1, 53, 1);
      node1.toString(false, false, false);
      Node.newNumber((double) 50);
      Node.newString(105, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.isDefaultCase();
      Node.newString(1286, "uZ:~PG}9&YQu");
      node2.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      node1.setType(43);
      node1.isInc();
      node1.putIntProp(31, 30);
      node0.isFor();
      node0.isRegExp();
      node1.isNull();
      node0.isFor();
      node0.hasOneChild();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(137);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      node2.isInc();
      Node node3 = new Node(31, node2, node1);
      node2.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isNot();
      node1.isRegExp();
      node4.isDebugger();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber((double) 23, (-1335), 1726);
      Node node1 = new Node(23, node0, node0, node0);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(51, node0, node0, node0, 50, 32);
      Node node2 = Node.newString("Object#Key", (-117), 49);
      node1.copyInformationFromForTree(node2);
      node0.setOptionalArg(true);
      node0.isVarArgs();
      node0.detachChildren();
      node0.setIsSyntheticBlock(true);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.mayMutateGlobalStateOrThrow();
      node0.setType((-2));
      Node node1 = new Node(108, node0, node0);
      node0.srcref(node1);
      node0.toString(false, true, true);
      node0.isCall();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isVoid();
      node0.isContinue();
      Node node3 = Node.newString(node2.IS_CONSTANT_NAME, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node3, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(941, 941, 941);
      Node node1 = new Node(9, 32, 112);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(754, node1, node0, 113, 220);
      node2.srcrefTree(node3);
      Node node4 = node0.copyInformationFrom(node2);
      node4.isSwitch();
      node1.isFromExterns();
      node3.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getCharno();
      node0.isAssignAdd();
      node3.getQualifiedName();
      node3.isInc();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.isEquivalentToTyped(node0);
      node0.putIntProp(4095, 52);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber(1.0);
      node1.setType(39);
      node0.getBooleanProp(56);
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(37, 108, 37);
      Node node3 = new Node(56, 154, (-1492));
      Node.newString((-3114), "5{(dYTyJ-b\"SmN", 1838, 116);
      node3.setSourceEncodedPositionForTree((-1131));
      Node node4 = new Node((-176), node3);
      node0.isNull();
      node4.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString("/3+%D{a", 3106, 3106);
      Node node1 = Node.newNumber((-391.3785539), 57, (-1915));
      node0.putIntProp(54, 15);
      node0.isFor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)37;
      node0.getCharno();
      node0.isAssignAdd();
      node0.getQualifiedName();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isCatch();
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.isQualifiedName();
      node0.getSourceOffset();
      node0.isStringKey();
      Node node2 = Node.newNumber(399.0, (-256), (-606));
      Node node3 = new Node(4, node0, node1, node0, node2, 56, 1209);
      node0.putProp(56, node3);
      node0.isAdd();
      Node node4 = node0.cloneNode();
      node1.addChildrenAfter(node4, (Node) null);
      node4.getChildAtIndex(72);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(0, "NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      Node node3 = node2.srcrefTree(node0);
      node2.isSetterDef();
      node0.checkTreeEquals(node2);
      node2.isAdd();
      node0.addChildrenToBack(node2);
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node3.srcrefTree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node node2 = Node.newString(36, "Object#Element", 56, 4244);
      node2.setSourceEncodedPositionForTree(2);
      node1.setLineno(53);
      Object object0 = new Object();
      node0.putProp(12, "Object#Element");
      node0.isVoid();
      Node node3 = new Node((-160), node1, node0, node2, 2, 115);
      Node.newNumber((-616.6), 8, 147);
      node0.getChangeTime();
      node3.isDo();
      node1.getNext();
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node.extractCharno(318);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(1190);
      Node node1 = Node.newNumber(1.0);
      node1.setType((-88));
      Node node2 = Node.newNumber((double) 47, 52, 162);
      node2.getBooleanProp(37);
      node0.isLabel();
      node2.isEquivalentToShallow(node0);
      Node node3 = new Node((-636), 31, 4);
      Node node4 = new Node(4095, (-546), 31);
      Node node5 = Node.newString(50, "6}H%", 112, (-1115));
      node5.setSourceEncodedPositionForTree(38);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node6 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node7 = new Node(4, node6);
      node4.isNull();
      node3.hasMoreThanOneChild();
      node5.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.getInputId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setType(43);
      node1.isEquivalentToTyped(node2);
      Node node3 = new Node(4, 1539, 16);
      node1.setSourceFileForTesting("Q~<#hV");
      node3.setSourceEncodedPositionForTree(32);
      node3.isNull();
      node0.isParamList();
      node2.getAncestor(42);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      node0.getBooleanProp(57);
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      node0.isScript();
      Node node2 = new Node(30, 42, (-1299));
      node2.cloneNode();
      node0.replaceChildAfter(node2, node1);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node0.hasMoreThanOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("NMAjy+4Np_o*7Jgr");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      Node node2 = new Node(0, node0, node0, node0, 1, 12);
      node2.setType(12);
      node1.toString(false, true, false);
      node2.isCall();
      node2.isVoid();
      node0.isContinue();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = 125;
      Node node0 = new Node(125);
      Node node1 = new Node(4, node0, node0, 56, 37);
      Node node2 = node1.srcref(node0);
      node2.setType(43);
      ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = null;
      try {
        node3 = new Node(50, node0, node1, node1, 29, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(0, "", 0, 0);
      node0.isWhile();
      Node node1 = new Node(115, node0, node0);
      node0.getQualifiedName();
      node0.isBreak();
      node1.isGetterDef();
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.isDo();
      node0.isThrow();
      node0.getCharno();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(42, node0, node0, node0);
      node1.mayMutateGlobalStateOrThrow();
      node1.setType(0);
      node0.toString(false, true, false);
      node1.isCall();
      node0.isVoid();
      node1.isContinue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node1.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEquals(node0);
      node0.setOptionalArg(true);
      node0.isDec();
      node0.detachChildren();
      node0.isDefaultCase();
      Node node1 = Node.newString(91, "Lwsl%&Xiy0]");
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      node0.isInc();
      node0.getBooleanProp(46);
      node0.isVar();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(12, node0, node1, node1, 53, 1);
      node1.toString(false, false, false);
      Node.newNumber((double) 50);
      Node.newString(105, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.isDefaultCase();
      node2.isEquivalentToShallow(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newNumber((-553.6279), 47, 47);
      node0.putIntProp(47, 150);
      node0.isFor();
      node0.getDirectives();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(53, node0, node0, node0, 57, 49);
      node1.replaceChildAfter(node0, node0);
      node1.isTrue();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.getInputId();
      node0.isEmpty();
      node2.setType(43);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isEquivalentToTyped(node0);
      node0.putIntProp(30, 39);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = new Node(30, node0, node0, 36, 31);
      Node node2 = node1.srcref(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node4.getCharno();
      node0.isAssignAdd();
      node3.getQualifiedName();
      node3.isInc();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("Xgn?<R1}t%]*");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2061, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node0.isDec();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(941);
      Node node1 = new Node(43, node0, 51, 0);
      node0.srcref(node1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.setType(15);
      node1.isCatch();
      node1.isTrue();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newNumber((-1834.41), 31, (-79));
      int int0 = 105;
      node0.type = 31;
      Node node1 = Node.newNumber(1.0, 30, 57);
      Node node2 = new Node(49, node0, node1, node1);
      Node node3 = new Node(52, node2, node2, node1, node0, (-2016), 48);
      node3.srcrefTree(node2);
      node0.addChildrenToBack(node3);
      node0.isLocalResultCall();
      node0.getProp(int0);
      node0.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      node0.setType(50);
      node0.isInc();
      node0.getBooleanProp(46);
      node1.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(40, 43, (-515));
      node1.isString();
      Node node3 = Node.newNumber(87.5274685202112);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)48;
      node1.getJSDocInfo();
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-34);
      node2.isInstanceOf();
      node2.isAdd();
      node2.srcref(node1);
      node3.isTry();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEquals(node0);
      node0.setOptionalArg(true);
      node0.isDec();
      node0.detachChildren();
      node0.isDefaultCase();
      node0.toString(false, true, false);
      node0.getChildAtIndex(32);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1168), (-1168), (-1168));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thisType");
      Node node1 = node0.cloneNode();
      node0.isName();
      node0.isAdd();
      node1.isSetterDef();
      node0.isVarArgs();
      Node.newString(31, "PgJ_@");
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      node0.setType(43);
      Node node2 = new Node(33, (-4096), 3540);
      Node node3 = new Node(2130, 105, 54);
      Node node4 = new Node(1073741823, node3, node1, (-5911), 49);
      node3.cloneNode();
      node3.isSwitch();
      node3.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(3106, (-1187), (-1187));
      Node node1 = new Node((-4096), (-1187), 56);
      Node node2 = null;
      Node node3 = node0.useSourceInfoFrom((Node) null);
      int int0 = 43;
      int int1 = 49;
      Node node4 = null;
      try {
        node4 = new Node(int0, node0, node3, int1, node1.OPT_ARG_NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-518));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node node2 = Node.newString("The new child node has siblings.", 30, 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node3 = new Node(16, nodeArray0);
      node2.isSetterDef();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(150);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = Node.newNumber((double) 2);
      node1.isQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.cloneTree();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(48);
      node1.isNE();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags7.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setReturnsTainted();
      node_SideEffectFlags4.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags9 = new Node.SideEffectFlags(54);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags8.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      Node node2 = Node.newString(39, "C1,XD");
      node0.isStringKey();
      Node node3 = new Node((-3573), node2, node1);
      Node node4 = Node.newString("C1,XD");
      node4.isTypeOf();
      node3.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.isGetElem();
      node2.setType(43);
      node0.cloneTree();
      Node.newNumber(124.0, 32, 46);
      node2.getChangeTime();
      node1.isDo();
      node0.getNext();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      node0.setLineno(26);
      node0.getInputId();
      Object object0 = new Object();
      node0.isStringKey();
      node0.isTypeOf();
      node0.isAssign();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mYoahr?0");
      node0.toString(false, false, true);
      Node node2 = Node.newNumber(424.3548306058349);
      node1.getJSDocInfo();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.addChildrenToFront(node2);
      node0.isBlock();
      node0.isWhile();
      Node node3 = node1.getChildAtIndex(49);
      node3.isNE();
      node0.checkTreeEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(53, node1, node1, 36, 4);
      node2.srcrefTree(node0);
      node2.copyInformationFrom(node0);
      node1.isSwitch();
      node1.isFromExterns();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      String string0 = "Y})L{q4#['";
      Node node0 = Node.newString((-2), "Y})L{q4#['", (-2), (-2));
      node0.setSourceEncodedPositionForTree((-2));
      node0.setLineno(26);
      Object object0 = new Object();
      node0.putProp(89, object0);
      node0.isVoid();
      Node node1 = new Node(89, node0, node0, node0, 48, 37);
      Node node2 = Node.newString(57, "Y})L{q4#['");
      node2.useSourceInfoIfMissingFrom((Node) null);
      Node.newString(string0);
      node1.isStringKey();
      node1.isAdd();
      // Undeclared exception!
      try { 
        node0.cloneNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newNumber((-553.6279), 47, 47);
      node0.putIntProp(47, 150);
      node0.isFor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)83;
      node0.getDouble();
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      Node node1 = new Node(53, node0, node0, node0, 57, 49);
      Node.newNumber((double) 4095);
      node1.checkTreeEquals(node0);
      node1.isTrue();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNullType();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.checkTreeEquals(node0);
      node0.isEquivalentTo(node1, true, false, false);
      Node node2 = new Node((-1333), node0, 115, 245);
      node0.isNE();
      node2.removeFirstChild();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(3709, 3709, (-1168));
      node0.siblings();
      node0.isEquivalentToShallow(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.mayMutateArguments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setString("Object#Key");
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(125);
      Node.newNumber((double) 30);
      Node node1 = new Node(1021, 53, (-1009));
      node0.toString(true, false, false);
      Node.newNumber(30.0);
      Node node2 = new Node(1, 49, 98);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.addChildrenToFront(node3);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = new Node(147, node0, node0);
      node1.putProp(898, (Object) null);
      node0.getInputId();
      Node node2 = node1.getLastSibling();
      node0.addChildAfter(node1, node2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-236), 8232);
      Node node1 = new Node(105, 36, (-1826));
      Node node2 = Node.newString(15, "@v~IVxY)di2>Zi>_,", 55, 36);
      node2.putProp(130, node1);
      node1.setSourceEncodedPositionForTree(37);
      Node node3 = new Node(4095, node2);
      node0.isNull();
      node2.useSourceInfoFrom(node0);
      node0.hasMoreThanOneChild();
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(43);
      Node node1 = Node.newNumber(1.0);
      int int0 = (-778);
      node0.setType((-778));
      node1.isInc();
      node0.getBooleanProp(4095);
      node0.isLabel();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node1.isEquivalentToShallow((Node) null);
      int int1 = (-2869);
      int int2 = 201;
      Node node2 = null;
      try {
        node2 = new Node(int1, int0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-258), 8232);
      Node node1 = new Node(105, 36, (-1826));
      node0.isLocalResultCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = new Node(905, node0, node1, 53, 8232);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      node2.isGetterDef();
      node2.getChangeTime();
      node2.isDo();
      node1.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getCharno();
      node0.isLabelName();
      Node node1 = new Node(40, node0, node0, node0, 45, (-660));
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = Node.newString("The new child node has siblings.", 30, 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      Node node4 = new Node(16, nodeArray0);
      node4.replaceChild(node1, node2);
      node3.isSetterDef();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString((-2), "Y})L{q4#['", (-2), (-2));
      node0.setSourceEncodedPositionForTree((-2));
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(101);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = Node.newString(3328, "{k, //Hb:F?[c`");
      Node node2 = new Node(48, node1, node0, 16, 153);
      node1.setSourceEncodedPositionForTree((-3010));
      node2.getChildAtIndex((-278));
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString((-259), "$IA_^kdj,.>YI2u,5X!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isVarArgs();
      node0.cloneTree();
      Node node1 = Node.newString("$IA_^kdj,.>YI2u,5X!");
      node1.isThis();
      node0.getIndexOfChild(node1);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S?x4/ey%w!Z&j;L");
      Node node0 = Node.newString("S?x4/ey%w!Z&j;L", 52, (-349));
      Node node1 = new Node((-955), node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.setVarArgs(true);
      node0.isVar();
      node0.removeProp((-349));
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newNumber(858.0);
      Node node1 = Node.newString(38, "{whhoEFfK]2N");
      Node node2 = node0.srcref(node1);
      node1.isUnscopedQualifiedName();
      Node node3 = new Node(3, node0, node0, node0, node0);
      Node node4 = new Node(105, node3, node2, node3, 52, (-2557));
      node4.removeChild(node3);
      node4.setType(node2.FLAG_NO_THROWS);
      node4.isTry();
      node2.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      // Undeclared exception!
      try { 
        node2.detachChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node1 = Node.newString("v*6V,3~?=~v*`uc+", 4406, 55);
      node0.checkTreeEquals(node1);
      node0.isIn();
      Node node2 = null;
      Node node3 = node0.copyInformationFromForTree((Node) null);
      int int0 = (-212);
      Node node4 = new Node(int0, node2);
      node4.addChildrenAfter(node1, node3);
      double double0 = 0.5;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newNumber(3069.3495);
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(42, node0, node0, node1, node0, 29, (-1));
      node2.mayMutateArguments();
      node0.addChildrenToBack(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node3 = node0.removeChildren();
      node0.hasMoreThanOneChild();
      node3.replaceChild(node0, node0);
      String string0 = "P";
      int int0 = 43;
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      Node node2 = new Node(53, node1, node1, 36, 4);
      Node node3 = node2.srcrefTree(node0);
      node2.copyInformationFrom(node0);
      node1.isSwitch();
      node1.isFromExterns();
      node3.isSetterDef();
      node3.removeFirstChild();
      node2.isFunction();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3106, (-46), (-46));
      node0.siblings();
      Node node1 = Node.newString("/3+%D{a");
      node0.isEquivalentToShallow(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNullType();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(3106, node0, 1, (-1313));
      node0.isEquivalentTo(node2, false, false, true);
      Node node3 = new Node(512125, node2, 16, 1);
      node3.replaceChildAfter(node2, node1);
      node1.isNE();
      node0.removeFirstChild();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      Node node2 = new Node(57, node0, node0, node1, 1, 37);
      Node node3 = node1.srcrefTree(node0);
      node2.copyInformationFrom(node0);
      node1.isSwitch();
      node1.isFromExterns();
      node3.isSetterDef();
      node0.isExprResult();
      node1.wasEmptyNode();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEquals(node0);
      node0.setOptionalArg(true);
      node0.isDec();
      node0.detachChildren();
      node0.isDefaultCase();
      Node node1 = new Node(1209, node0);
      node1.isWith();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("Y})L{q4#['");
      node0.setSourceEncodedPositionForTree(8);
      Node node1 = new Node(147, node0, node0);
      Node node2 = new Node(25, node1, 1, 1);
      node2.isBreak();
      node0.isFor();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node3 = new Node(31);
      node2.setChangeTime((-1901));
      node3.isNE();
      node1.removeFirstChild();
      node1.isFunction();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 2, 1, 2);
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" [", "Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nNUMBER 2.0 1\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: NUMBER 2.0 1\n", 1724, 2244);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = Node.newNumber(1.0, 31, 55);
      node1.getChangeTime();
      node1.isDo();
      node0.getNext();
      node2.useSourceInfoIfMissingFrom(node1);
      node1.isCatch();
      node0.putBooleanProp(2, true);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(30, 30, 3047);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">P+[XTrfjl09+{");
      node0.setChangeTime(8);
      node0.getJsDocBuilderForNode();
      node0.getBooleanProp(30);
      node0.isQualifiedName();
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 38, 215, 53);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.mergeLineCharNo(124, (-1238));
      Node node0 = Node.newString((String) null);
      node0.getChangeTime();
      int int0 = (-960);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getCharno();
      node0.isLabelName();
      Node node1 = new Node(43, node0, node0, node0, 125, 385);
      node1.useSourceInfoFrom(node0);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(30, 30, 3047);
      node0.getProp(3047);
      Node node1 = Node.newString("{w?7|2Kj}", 102, 54);
      node1.getString();
      node0.isBreak();
      Node node2 = new Node(37, node1, 115, 36);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node2;
      nodeArray0[7] = node2;
      nodeArray0[8] = node0;
      Node node3 = Node.newString(46, "{w?7|2Kj}", 50, 1);
      node0.useSourceInfoFrom(node3);
      node0.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(3709, 3709, 3709);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      Node node3 = new Node(12, node0, 2, 31);
      Node node4 = Node.newNumber((double) 57);
      node4.setSourceFileForTesting("h/K<9Lj(}(kh|'7i*,");
      node4.isFromExterns();
      node0.isGetterDef();
      Node.newNumber(424.3548306058349);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      Node node1 = new Node(1, 36, 51);
      Node node2 = new Node(53, node1, node1, 36, 4);
      Node node3 = node2.srcrefTree(node0);
      node3.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("incrdecr");
      node3.putProp(4095, templateType0);
      node3.getInputId();
      node0.getLastSibling();
      node0.addChildAfter(node1, node3);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.listIterator();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
      Node node1 = node0.copyInformationFrom((Node) null);
      // Undeclared exception!
      try { 
        node1.isContinue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, 3709, 3709);
      node0.siblings();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0, 37, 748);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isDelProp();
      Node node3 = new Node(12, node0, 2, 31);
      Node node4 = Node.newNumber((double) 57);
      node4.isFromExterns();
      node0.setJSType((JSType) null);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = new Node(1294);
      Node node1 = Node.newNumber((double) 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Le:");
      node1.toString(true, true, true);
      Node node2 = Node.newNumber((-1745.023703));
      node0.getJSDocInfo();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.putIntProp(51, 51);
      node1.addChildrenToFront(node0);
      node0.isBlock();
      node1.isWhile();
      Node node3 = node2.getChildAtIndex(1);
      node3.isNE();
      node3.checkTreeEqualsImpl(node2);
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node0.putProp(30, ")O%D^lVmo");
      node1.isVoid();
      node1.addChildToFront(node0);
      node0.isAnd();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isNE();
      node0.isFunction();
      Node node2 = new Node(43);
      node0.setSourceEncodedPositionForTree(40);
      Node node3 = Node.newString("Object#Element");
      Node node4 = new Node(12, node1, node0);
      Node node5 = new Node(13, node2, 4095, 57);
      node5.isBreak();
      node1.detachFromParent();
      node5.getLength();
      node3.isNot();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node3.isDo();
      node5.mayMutateArguments();
      node2.setSideEffectFlags((-1731));
      node4.isOr();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.setType((-309));
      node0.isInc();
      Node node1 = new Node(8, node0, node0);
      node1.isName();
      node0.isAdd();
      node0.isSetterDef();
      Node node2 = Node.newNumber(1.0, 4, 56);
      node2.removeChildren();
      node2.getSideEffectFlags();
      node2.isVarArgs();
      Node node3 = Node.newString(1, "com.google.javascript.rhino.Node$SideEffectFlags");
      node1.isEquivalentToShallow(node3);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(30, 30, 3047);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">P+[XTrfjl09+{");
      node0.setChangeTime(8);
      Node node1 = new Node(12, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setVarArgs(true);
      node2.isVar();
      node1.removeProp(1);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", 100, (-259));
      Node node1 = Node.newString("{^>0]JlKr;y", 12, 56);
      node1.checkTreeEquals(node0);
      node0.isIn();
      Node node2 = new Node(56, node0, node1, node0, node1, 37, 29);
      Node node3 = node2.copyInformationFromForTree(node0);
      Node node4 = Node.newNumber((double) 0, 31, 36);
      node3.addChildrenAfter(node4, node1);
      node3.isRegExp();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node1 = new Node(105, 36, (-1826));
      Node node2 = Node.newString("$IA_^kdj,.>YI2u,5X!");
      node2.isThis();
      node2.appendStringTree((Appendable) null);
      int int0 = 8;
      node0.setSourceEncodedPosition(int0);
      node2.getIndexOfChild(node1);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = new Node(30, 30, 3047);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">P+[XTrfjl09+{");
      node0.setChangeTime(8);
      node0.getJsDocBuilderForNode();
      node0.getBooleanProp(30);
      node0.type = 40;
      node0.isQualifiedName();
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 38, 215, 53);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), 124);
      Node node1 = Node.newNumber((-914.0));
      Node node2 = node1.srcref(node0);
      Node node3 = new Node(47, node0, node0, node0, node1);
      node3.setType(49);
      node2.isTry();
      Node node4 = null;
      Node node5 = node2.removeChildAfter((Node) null);
      Node node6 = new Node(node5.IS_CONSTANT_NAME, node4, node0);
      node3.isCast();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.getSourceOffset();
      // Undeclared exception!
      try { 
        node1.isCatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString(150, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(137, 137, 137);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(1);
      node2.setType(43);
      node2.isInc();
      Node node3 = new Node(31, node2, node1);
      node1.isName();
      node3.isAdd();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isSetterDef();
      node0.isVarArgs();
      Node node4 = Node.newString(15, "GETELEM");
      node4.isLocalResultCall();
      node3.isEquivalentToShallow(node4);
      node3.srcrefTree(node4);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(1, node0, 53, 49);
      node0.getBooleanProp(57);
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("$IA_^kdj,.>YI2u,5X!", 751619276, (-1082));
      node2.isVarArgs();
      node1.getChildBefore(node2);
      int int0 = (-180);
      node2.setSourceEncodedPositionForTree(int0);
      node1.isNull();
      // Undeclared exception!
      try { 
        node0.isParamList();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = node1.srcref(node0);
      node2.getInputId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setType(43);
      Node node3 = new Node(15, node2, node2, node0, node2);
      node3.isVarArgs();
      node3.setSourceEncodedPositionForTree(32);
      Node node4 = Node.newNumber((double) 1, 57, 51);
      node0.copyInformationFrom(node4);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.newString("Object#Element", 41, 124);
      Node node3 = new Node(0, 4269, 30);
      node2.isWhile();
      node0.isAssignAdd();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(1959, node0, node0, node0, 252, 4);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = node0.copyInformationFrom(node2);
      node0.isSwitch();
      node3.isFromExterns();
      Node node4 = Node.newNumber(0.0, 44, 42);
      node4.isSetterDef();
      Node node5 = Node.newString(2570, "Object#Key");
      node5.isExprResult();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isObjectLit();
      node0.isString();
      node0.setLineno((-1591));
      node0.getInputId();
      Object object0 = new Object();
      node0.isStringKey();
      node0.setSourceEncodedPositionForTree((-1));
      node0.isNull();
      node0.isParamList();
      node0.getAncestor((-1));
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getCharno();
      node0.isLabelName();
      Node node1 = new Node(43, node0, 57, 12);
      node0.isAdd();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-934), (-934), 9);
      Node node1 = new Node(30, node0, node0, node0);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(43, node1, node1, node1, (-934), 37);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = jSDocInfo0.getAssociatedNode();
      node1.removeChild((Node) null);
      node2.setType(node3.SIDE_EFFECT_FLAGS);
      node1.isTry();
      // Undeclared exception!
      try { 
        node1.isCast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEquals(node0);
      node0.isAdd();
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.cloneNode();
      node0.removeProp(5623);
      node0.putProp(1561, node1);
      node1.isSyntheticBlock();
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(105, 105, 182);
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(57);
      node1.setType(1693);
      node2.isInc();
      node0.isName();
      node2.isAdd();
      node0.isCatch();
      node1.isVarArgs();
      Node node3 = Node.newString(37, "5usU");
      Node node4 = node3.copyInformationFromForTree(node2);
      node0.isEquivalentToShallow(node1);
      node3.checkTreeEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isNE();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node1.setSourceEncodedPositionForTree(10);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.useSourceInfoFrom(node1);
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", 100, (-259));
      Node node1 = Node.newString("{^>0]JlKr;y", 12, 56);
      node1.checkTreeEquals(node0);
      node0.isIn();
      Node node2 = new Node(56, node0, node1, node0, node1, 37, 29);
      Node node3 = node2.copyInformationFromForTree(node0);
      Node.newNumber((double) 0, 31, 36);
      node3.isNull();
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.siblings();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node((-733), nodeArray0, 2786, 57);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isDelProp();
      Node node3 = new Node(748, node2, 52, 16);
      Node node4 = Node.newNumber((double) 39);
      Node.newString(101, "Node has existing properties.", 48, 37);
      node4.isFromExterns();
      node0.detachFromParent();
      node3.addChildBefore(node4, node4);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNullType();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.checkTreeEquals(node0);
      Node node2 = new Node(52, node0, node0, 3550, 52);
      node2.getChangeTime();
      node2.isSwitch();
      node2.isFromExterns();
      node1.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), (-259));
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", 4, 1);
      node0.putIntProp(39, (-455));
      node0.getDouble();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newNumber((-438.67489824151));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.checkTreeEqualsImpl((Node) null);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node((-258), 941, (-258));
      Node node1 = new Node(105, 36, 51);
      Node node2 = new Node(53, node1, node1, 36, 4);
      Node node3 = Node.newString(38, "1S+F$w5RuO=#Z3}H");
      node1.useSourceInfoIfMissingFrom(node2);
      node3.isStringKey();
      node1.isAdd();
      node0.cloneNode();
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(2);
      Node node2 = new Node(16384, 971, (-941));
      node2.isInc();
      Node node3 = new Node(38, node1, node1, node2, node2);
      node3.isName();
      node1.isAdd();
      node2.isCatch();
      Node node4 = new Node(15);
      node4.isVarArgs();
      Node.newString(971, "5usU");
      Node node5 = node1.copyInformationFromForTree(node2);
      node5.isEquivalentToShallow(node1);
      node1.checkTreeEqualsImpl(node0);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(105, 105, 182);
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(57);
      Node node3 = node0.srcref(node1);
      node3.getInputId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setType((-2557));
      Node node4 = new Node(30, node1, node1);
      Node node5 = new Node(47, node3, node3, node0, node4);
      node3.setSourceEncodedPositionForTree(16);
      node1.isNull();
      node0.isParamList();
      node2.getAncestor(119);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = node0.srcref(node0);
      node1.getInputId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.setType(43);
      Node node2 = new Node(15, node1, node1, node0, node1);
      node2.setSourceEncodedPositionForTree(32);
      node2.isNull();
      node0.isParamList();
      node1.getAncestor(42);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = Node.newNumber(0.5, 86, 885);
      node0.isString();
      node0.setLineno(308);
      Object object0 = new Object();
      node0.isAssign();
      Node node1 = new Node(31);
      Node node2 = Node.newString(47, "v*6V,3~?=~v*`uc+");
      Node node3 = new Node(0, node0, node2);
      node1.copyInformationFrom(node3);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(3047, 3047, 3047);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$IA_^kdj,.>YI2u,5X!");
      node0.setChangeTime((-3669));
      node0.getJsDocBuilderForNode();
      node0.isCast();
      node0.isQualifiedName();
      node0.isQualifiedName();
      node0.isArrayLit();
      node0.isLabelName();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-934), (-934));
      Node node1 = new Node(38, node0, node0, 53, 0);
      node0.isAssignAdd();
      node0.getSourceFileName();
      Node.newString(31, "com.google.javascript.rhino.Node$NodeMismatch", 48, 47);
      node1.isUnscopedQualifiedName();
      Node node2 = node1.cloneTree();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      node0.isIn();
      Node node1 = new Node(55, node0, node0, node0, 12, 49);
      node0.copyInformationFromForTree(node1);
      Node.newNumber((double) 56, 1, 482);
      node1.addChildrenAfter(node0, node0);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = node0.getLastSibling();
      Node node2 = Node.newString((String) null, (-745), 2210);
      node2.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node2.isString();
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", 950, (-261));
      Node node1 = new Node(38, 51, 125);
      Node node2 = new Node(119, node1, node1, 0, 15);
      Node.newString((-2260), "$IA_^kdj,.>YI2u,5X!");
      node0.isReturn();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node(150);
      node0.isInc();
      node0.getBooleanProp(46);
      node0.getChangeTime();
      node0.isSetterDef();
      Node node1 = new Node(43, node0, 15, 50);
      node1.getProp(39);
      node0.putProp(52, (Object) null);
      node1.isVoid();
      node1.isQualifiedName();
      node0.addChildToFront(node1);
      node1.isAnd();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = node0.getLastSibling();
      node1.isOnlyModifiesThisCall();
      node1.isSetterDef();
      node1.isString();
      node1.addChildrenToBack(node0);
      node1.addChildToFront(node0);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node1.DIRECTIVES);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(106, 106, 106);
      Node node1 = Node.newNumber((double) 57);
      node1.setType(49);
      Node node2 = new Node(51, node0, node1, 47, 52);
      node0.getChangeTime();
      node1.isDelProp();
      node2.getInputId();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node2.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12, 12, 12);
      node0.getProp(118);
      Node node1 = new Node(12, node0, node0, 0, 55);
      node1.getChangeTime();
      node1.isDelProp();
      node1.addChildBefore(node0, node0);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newNumber(858.0);
      Node node1 = Node.newString(38, "{whhoEFfK]2N");
      Node node2 = node0.srcref(node1);
      node1.isUnscopedQualifiedName();
      Node node3 = new Node(42, node1, node1);
      node3.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isNot();
      node2.isGetProp();
      Node.extractCharno(120);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-453), 497, 37);
      Node node1 = new Node((-453), node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node((-1168));
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(986, node0, 12, 122);
      node1.getBooleanProp(122);
      node1.isLabel();
      node1.isEquivalentToShallow(node0);
      node1.isScript();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), (-259));
      Node node1 = new Node(105, 36, (-1826));
      node0.clonePropsFrom(node1);
      node1.isWhile();
      node1.isAssignAdd();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = Node.newNumber((double) 885);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildBefore((Node) null, (Node) null);
      node0.getInputId();
      node1.addChildAfter(node0, node0);
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.isNE();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = new Node(105, 105, 182);
      Node node1 = Node.newNumber((double) 57);
      node0.isInc();
      node0.isName();
      node0.isAdd();
      node0.addChildrenToFront(node1);
      node0.isDefaultCase();
      node0.getAncestors();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString(1204, "r6OeAxs~Z~KS$(.u!yr");
      Node node1 = new Node(112, node0, node0);
      Node node2 = node1.cloneNode();
      node1.isEquivalentTo(node0, false, false, true);
      Node node3 = node1.removeChildren();
      node3.isUnscopedQualifiedName();
      node3.getChildCount();
      node3.getSourcePosition();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node2.getDirectives();
      node2.addChildBefore(node1, node0);
      int int0 = 1704;
      boolean boolean0 = true;
      node0.putBooleanProp(int0, boolean0);
      node3.getSourceFileName();
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      node2.children();
      node3.getBooleanProp(node1.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString(879, "LB", 879, 124);
      node0.removeProp(4280);
      node0.isHook();
      node0.isHook();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LB");
      Node.extractCharno(1574);
      node0.removeProp(1574);
      Node.extractLineno((-1627));
      Node node1 = new Node(55, node0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, charset0);
      node0.appendStringTree(outputStreamWriter0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.removeChild(node1);
      double double0 = (-1486.4079);
      int int0 = (-478);
      Node node3 = Node.newNumber(double0, node0.JSDOC_INFO_PROP, int0);
      int int1 = (-1304);
      node3.type = int1;
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node1 = new Node(105, 36, (-1826));
      node1.copyInformationFromForTree(node0);
      node1.setVarArgs(true);
      node1.isVar();
      node1.removeProp(31);
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(43, node0);
      Node node2 = new Node(43, 40, 38);
      Node node3 = new Node(55, node2, node1, node2, 568, 148);
      node3.isQualifiedName();
      node3.isArrayLit();
      node1.isLabelName();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", 2785, 950);
      Node node1 = new Node(16, 50, 1);
      Node node2 = new Node(1, node1, node0, 36, 47);
      Node.newString(48, "$IA_^kdj,.>YI2u,5X!");
      node2.isReturn();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = new Node(885, 86, 885);
      node0.type = 118;
      Node node1 = Node.newString((-3329), "luGq");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node2.isEquivalentToTyped(node0);
      node0.isAdd();
      Node node3 = node0.cloneNode();
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), (-259));
      Node node0 = new Node(113, 36, (-1785));
      node0.isWhile();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString("$IA_!kdj,.>YI2u,5X2", (-259), (-259));
      Node node1 = new Node(105, 36, (-1826));
      Node node2 = new Node(4, node0, node0, node1, 29, 21);
      node2.isQualifiedName();
      node0.isArrayLit();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = new Node(105, 105, 182);
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(120, node0, node1, node1, 2, 1694);
      Node node3 = node2.srcrefTree(node0);
      Node node4 = node3.copyInformationFrom(node1);
      node4.isSwitch();
      node2.isFromExterns();
      node0.isSetterDef();
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      simpleErrorReporter0.warning("", "Object#Key", 39, 51);
      Node node1 = new Node(12, 4095, 39);
      node1.isNE();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = Node.newString("The new child node has siblings.", 30, 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isLocalResultCall();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      Node node4 = new Node(16, nodeArray0);
      node4.replaceChild(node1, node2);
      node1.isCase();
      node4.addChildAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      Node node2 = new Node(15, node1, node0, node1, 57, 1);
      Node node3 = node2.srcrefTree(node0);
      Node node4 = node3.removeChildren();
      node4.setDouble((-546.47992428607));
      node1.isSwitch();
      // Undeclared exception!
      try { 
        node1.isFromExterns();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(114, 57, 57);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0gW-xn>u0?@C");
      Node node1 = new Node(27, node0, node0, 87, 37);
      node1.wasEmptyNode();
      node1.addSuppression(")}");
      node1.checkTreeEquals(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isLabel();
      node2.setType(2520);
      node1.isVarArgs();
      node0.isTrue();
      node1.isRegExp();
      node1.isExprResult();
      node0.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = Node.newString("vWJ");
      node0.type = 118;
      Node node1 = Node.newString((-3329), "luGq");
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isEquivalentToTyped(node0);
      node0.isAdd();
      Node node4 = node0.cloneNode();
      node4.getQualifiedName();
      node0.getIndexOfChild(node1);
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node(30, 30, 3055);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">P+[XTrfjl09+{");
      node0.setChangeTime(8);
      Node node1 = new Node(12, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setVarArgs(true);
      node2.isVar();
      node1.removeProp(1);
      node0.toString();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-382), (-382));
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2101);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.setAllFlags();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile");
      node0.setSourceEncodedPositionForTree(111);
      Node node2 = new Node(56, node0, node0);
      Node node3 = new Node(30, node2, (-1399), 2094);
      node3.isBreak();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node3.isDo();
      node2.mayMutateArguments();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.setSideEffectFlags(312);
      Node node4 = new Node((-113));
      node4.isNot();
      Node node5 = new Node(54, node1, node4, 2, 53);
      Node node6 = new Node(2307, node2, node5, node3, node4);
      node6.isLabelName();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node.newString("Object#Element");
      Node node0 = new Node(39);
      Node node1 = Node.newNumber(1746.4398688, 48, 590);
      Node node2 = new Node(55, node1, node0, node1, 568, 148);
      node2.isQualifiedName();
      node2.isArrayLit();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getCharno();
      node0.isLabelName();
      Node node1 = new Node(42, node0, 57, 12);
      node1.isDec();
      node1.isThis();
      node1.removeChildren();
      node0.setQuotedString();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      node0.setLength((-4096));
      node0.siblings();
      Node node2 = new Node(51, node1, node1, node1, (-1719), 4095);
      node0.checkTreeEquals(node2);
      node0.cloneTree();
      node1.isEquivalentTo(node0, false, false, false);
      node0.setLength(39);
      node1.setSourceEncodedPositionForTree((-2332));
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(1, 36, 51);
      Node node2 = new Node(31);
      node2.setType(1693);
      Node.newNumber(906.0, 48, 29);
      Node node3 = new Node(47, node1, node1, node0, 55, 44);
      node2.isQualifiedName();
      node0.isArrayLit();
      node3.cloneTree();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.setType(28);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(4, 51, (-1338));
      node0.isFor();
      Node.newString(102, "Object#Element");
      Node node2 = Node.newString(53, "Object#Key", 2097152, 30);
      node1.copyInformationFromForTree(node2);
      Node node3 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node3.isEquivalentToShallow(node2);
      node1.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      node0.isNot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")](*p");
      Node node1 = new Node(31, node0, 42, 93);
      node1.isDebugger();
      node1.isCase();
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.replaceChild(node2, node1);
      node2.isFalse();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newNumber((-825.8), 14, 434);
      Node node1 = new Node(98, node0, node0, node0, node0, 15, 506);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isFromExterns();
      node2.srcrefTree(node0);
      node1.getSourceOffset();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-237), 8252);
      Node node1 = new Node(105, 36, (-1826));
      node0.isEquivalentToTyped(node1);
      node1.isAdd();
      Node node2 = node1.cloneNode();
      node2.getQualifiedName();
      node0.isDo();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = new Node(150);
      node0.setType(50);
      node0.isInc();
      node0.getBooleanProp(46);
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(1, 57, 37);
      Node node2 = new Node(8, 48, 1023);
      node0.isInstanceOf();
      Node node3 = node1.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      node3.setJSType(jSType0);
      node0.getSourceOffset();
      node1.isCatch();
      node3.getJSType();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-934), (-934), 9);
      Node node1 = new Node(30, node0, node0, node0);
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isNot();
      node1.isGetProp();
      node0.srcrefTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$StringNode", 41, (-3964));
      node0.checkTreeEquals(node1);
      node0.isIn();
      Node node3 = new Node(2, node2, node2, node1, node1, 4, 4095);
      node0.copyInformationFromForTree(node3);
      Node node4 = Node.newNumber((double) 12, (-117), (-160));
      Node node5 = Node.newNumber((double) 32);
      node3.addChildrenAfter(node5, node1);
      node4.isRegExp();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newString(8, "length");
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(38, node1, node0, node2, 49, 57);
      Node node4 = node3.useSourceInfoIfMissingFrom(node0);
      node3.isEquivalentToTyped(node4);
      node4.getString();
      node0.isAdd();
      node1.cloneNode();
      int int0 = 17;
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = new Node(12, 4095, 39);
      node1.isNE();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.newString("The new child node has siblings.", 2739, 57);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isLocalResultCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = new Node(35, nodeArray0);
      Node node4 = new Node(39, node3, node3, 32, 57);
      node4.replaceChild(node2, node2);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = Node.newString("", 86, 583);
      node0.getString();
      node0.isBreak();
      Node node1 = new Node(16, node0, 43, 29);
      Node node2 = new Node(1, node0, node0, node1, node0, 46, 1);
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getQualifiedName();
      Node node1 = new Node(154, 22, 48);
      node0.isLocalResultCall();
      node0.isGetterDef();
      int int0 = Node.MAX_COLUMN_NUMBER;
      node0.isDo();
      Node node2 = new Node(16, node1);
      node2.isHook();
      Node node3 = node2.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[1] = jSType1;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isAdd();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isLocalResultCall();
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, (-722), (-722));
      node1.useSourceInfoFrom(node0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = new Node(24, (-4474), (-4474));
      Node node1 = new Node(160, 154, 98);
      Node node2 = new Node(130, node1, node0, 8, 4);
      node2.getChangeTime();
      node0.isSwitch();
      node2.isFromExterns();
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("vAJ");
      Node node1 = Node.newString(",v`!A}(K_*C4G");
      Node node2 = Node.newString(31, " is not a string node");
      Node node3 = Node.newString("Object#Element", (-423), 46);
      node2.useSourceInfoFrom(node3);
      Node node4 = node1.useSourceInfoIfMissingFrom(node3);
      Node node5 = new Node(152, node4, 2, 15);
      node0.isEquivalentToTyped(node5);
      node4.isAdd();
      node5.cloneNode();
      node3.getQualifiedName();
      node1.isDo();
      node4.isBreak();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = Node.newNumber((double) 30);
      node0.getInputId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setType(16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(37, node0, node0, node1, 4395, 256);
      node2.useSourceInfoFrom(node0);
      Node.newNumber((double) 57);
      node0.isTrue();
      node0.hasOneChild();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3709, (-1168), (-1168));
      node0.setType(8);
      node0.isInc();
      Node node1 = new Node(111, node0, node0);
      node1.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = node1.cloneNode();
      node1.getQualifiedName();
      node2.getIndexOfChild(node1);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.warning("Lz\"s", "", 885, 86);
      Node node0 = Node.newString("vWJ");
      node0.type = 118;
      Node node1 = Node.newString((-3329), "luGeq");
      node1.useSourceInfoFrom(node0);
      node1.siblings();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isVar();
      Node node3 = new Node(1397, node0, node0, node1);
      Node node4 = new Node(47, node1, node3, node1, node3, (-3958), (-1782));
      node4.isBreak();
      node3.isFunction();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString(2088, ")HA", 2088, 277);
      Node node1 = new Node(2088, node0, 205, 8);
      node1.removeProp(47);
      node1.getQualifiedName();
      node1.cloneNode();
      node1.isStringKey();
      node1.addChildrenToBack(node0);
      node1.hasOneChild();
      node1.isFalse();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSDocInfo0.setShouldPreserveTry(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(42, node0, 52, 53);
      node0.setType(1693);
      node1.isInc();
      Node node2 = new Node(63, node1, node1);
      node1.isEquivalentTo(node1, false, false, false);
      node2.isAdd();
      node0.isCatch();
      node2.isArrayLit();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!", (-259), 950);
      Node node1 = new Node(105, 36, (-1799));
      node1.isFor();
      Node node2 = Node.newString(53, "u<K6-N\repxA[5B,%v");
      Node node3 = node1.copyInformationFromForTree(node2);
      node0.isEquivalentToShallow(node2);
      node1.checkTreeEqualsImpl(node3);
      node3.getAncestor(0);
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      node0.addChildrenToFront((Node) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = null;
      try {
        node1 = new Node(node0.INCRDECR_PROP, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(42, node0, 52, 53);
      node1.isInc();
      Node node2 = new Node(63, node1, node1);
      node1.isEquivalentTo(node1, false, false, false);
      node2.isAdd();
      node2.toString(false, false, false);
      node2.getChildAtIndex((-536870912));
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = new Node(105, 105, 182);
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(47, node1, node1);
      node1.setType(1693);
      node2.isInc();
      node0.isName();
      node1.isDo();
      node0.isCatch();
      node1.isVarArgs();
      node0.clonePropsFrom(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = Node.newString(37, "5usU");
      Node node4 = node3.copyInformationFromForTree(node2);
      node0.isEquivalentToShallow(node1);
      node3.checkTreeEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = new Node(32, node0, node0);
      node1.isUnscopedQualifiedName();
      node1.isDelProp();
      node0.getInputId();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString("Y})L{q4#['");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = new Node(32, node0, node0);
      node1.isGetElem();
      node0.isCast();
      Node.extractCharno(50);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newNumber((double) 30);
      node0.children();
      node0.setLength((-4096));
      node0.siblings();
      Node node2 = new Node(51, node1, node1, node1, (-1719), 4095);
      node0.checkTreeEquals(node2);
      node1.getChangeTime();
      node2.isSwitch();
      node1.isFromExterns();
      node2.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(1, node0, node0);
      node0.isLabel();
      node0.copyInformationFrom(node1);
      node1.isSwitch();
      node1.isFromExterns();
      node1.isSetterDef();
      node1.isExprResult();
      node1.isScript();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.setType(28);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isContinue();
      Node node2 = new Node((-1362), node1, node0);
      node2.getIndexOfChild(node0);
      node1.isDec();
      node0.setDouble((-1361.8456982950129));
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 30);
      node1.getChangeTime();
      node1.isSetterDef();
      Node node2 = new Node(16, node1, (-1129), 50);
      node1.getProp(125);
      node0.putProp((-1951), (Object) null);
      node2.isVoid();
      node0.isQualifiedName();
      Node node3 = node0.useSourceInfoFrom(node2);
      node3.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = new Node(150);
      Node node1 = Node.newNumber((double) 30);
      Node.newString("1.+O", 2274, 0);
      Node node2 = new Node(114, 4095, (-240));
      Node node3 = node2.copyInformationFromForTree(node0);
      node3.setVarArgs(false);
      node1.isVar();
      node3.removeProp(56);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newString((-1), "Object#Key");
      Node node1 = Node.newNumber((double) 57);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(30, node0, node0);
      node0.isDelProp();
      node1.getInputId();
      node2.isDebugger();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setChangeTime((-452));
      Node node1 = new Node(154, 22, 48);
      node0.isLocalResultCall();
      node0.isGetterDef();
      int int0 = Node.MAX_COLUMN_NUMBER;
      node0.isDo();
      Node node2 = new Node(16, node1);
      node2.isHook();
      Node node3 = new Node(40);
      node1.isCase();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newNumber(1291.46833);
      node0.setType(28);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isContinue();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FBJ`eJD15UYx");
      Node node2 = new Node(114, node1, 1039, 126);
      node2.useSourceInfoFrom(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node((-259), nodeArray0);
      node1.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = new Node(49, node0, node0);
      node1.removeChild(node0);
      Node node2 = new Node(40, 13, 54);
      node2.hasOneChild();
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = Node.newString("$IA_^kdj,.>YI2u,5X!");
      node0.isFalse();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setString("$IA_^kdj,.>YI2u,5X!");
      Node node1 = new Node(49, node0, node0);
      node1.removeChild(node0);
      Node node2 = new Node(40, 13, 54);
      node2.hasOneChild();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("vWJ");
      node0.type = 38;
      Node node1 = Node.newString((-3329), "luGq");
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isEquivalentToTyped(node0);
      node0.isAdd();
      Node node4 = node0.cloneNode();
      node4.getQualifiedName();
      node0.isDo();
      node2.copyInformationFromForTree(node3);
      node1.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[8];
      Node node0 = new Node(88);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(" is not a number node", node0, jSType0);
      jSTypeArray0[0] = (JSType) enumType0;
      EnumElementType enumElementType0 = enumType0.getElementsType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0);
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) enumType0, jSType0, (List<JSType>) immutableList0);
      jSTypeArray0[1] = jSType1;
      jSTypeRegistry0.getType("]f7'{P");
      jSTypeArray0[2] = null;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.JSType", node0, jSTypeArray0[0]);
      EnumElementType enumElementType1 = enumType1.getElementsType();
      enumElementType1.getImplicitPrototype();
      jSTypeArray0[3] = (JSType) null;
      enumType0.getConstructor();
      jSTypeArray0[4] = (JSType) null;
      enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeArray0[5] = (JSType) objectType0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType2 = jSTypeRegistry1.createNullableType(enumType0);
      jSTypeArray0[6] = jSType2;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType3 = modificationVisitor0.caseFunctionType((FunctionType) null);
      jSTypeArray0[7] = jSType3;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.mayMutateArguments();
  }
}
