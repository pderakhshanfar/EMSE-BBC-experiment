/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 14:17:32 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((-10.00079283921267));
      Node node1 = new Node(42);
      node1.copyInformationFromForTree(node0);
      node1.isCast();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = Node.newString(44, "Q&~?yiM0Grb\"%", 105, 54);
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node(57, node0, 47, 86);
      node0.copyInformationFromForTree(node2);
      node0.isDefaultCase();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(4645.078888983, 15, 38);
      node0.putIntProp(41, 44);
      // Undeclared exception!
      try { 
        node0.toString(true, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getQualifiedName();
      node0.isContinue();
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(154, node0, 16, 307);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isOptionalArg();
      node0.setLineno(113);
      node0.isGetterDef();
      node0.isCase();
      node0.getSideEffectFlags();
      Node node1 = Node.newString(91, "u7Fn`28_Y");
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node(40, node0, node0, 39, 47);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(116);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      Node node1 = new Node(41, node0, node0, 57, 0);
      node1.useSourceInfoFromForTree(node0);
      node0.checkTreeEquals(node1);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = new Node(40, node0, node0, node0, 40, 4095);
      node0.checkTreeEquals(node1);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(116);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.isContinue();
      node0.isEquivalentToTyped(node0);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newNumber(0.7);
      Node node1 = new Node(1822, node0, node0, node0, node0);
      Node node2 = node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = new Node(2, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.useSourceInfoIfMissingFrom(node2);
      Node.newString(2060, "", 79, (-1739));
      node1.isTypeOf();
      node1.isGetElem();
      node2.isName();
      node2.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.cllect.ImmutableSorteAsList");
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.addChildrenAfter(node1, node0);
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      node0.getProp(57);
      node0.setJSDocInfo((JSDocInfo) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isSetterDef();
      node1.isCase();
      node1.isEquivalentTo(node1, true, true, false);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(56, node0, node0, node0);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(35, "EXPR_RESULT");
      Node node2 = new Node(122, node0, node0, node1, node1, 90, 57);
      Node node3 = node2.srcref(node0);
      node3.isOnlyModifiesThisCall();
      node2.hasChild(node2);
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.isSetterDef();
      node1.isCase();
      node1.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 122);
      Node node1 = Node.newString(42, "^`v0rEnesF^_C#M", 370, 2171);
      Node node2 = new Node(37, node0);
      node1.getQualifiedName();
      node1.isAssignAdd();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isFalse();
      Node[] nodeArray0 = new Node[1];
      Node node1 = Node.newString("iterables");
      nodeArray0[0] = node1;
      Node node2 = new Node(1, nodeArray0, 42, 4095);
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(43, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isNoSideEffectsCall();
      node1.getQualifiedName();
      node0.isAssignAdd();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.setWasEmptyNode(true);
      node0.toString(true, true, true);
      node0.isDebugger();
      Node node1 = new Node(40, node0, node0, node0, 40, 4095);
      node1.useSourceInfoFromForTree(node0);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(13, 11, 11);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isEmpty();
      node0.getStaticSourceFile();
      Node node1 = Node.newString("RBFhOrqoJGADr");
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(30, 57, 57);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isSwitch();
      Node node1 = Node.newString("[$", 8199, 30);
      Node node2 = new Node(147, node0, node1, node0, 30, 47);
      node0.isArrayLit();
      node0.isNE();
      node1.getNext();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.cllect.ImmutableSorteAsList");
      Node node1 = new Node(42, 0, 4095);
      Node node2 = new Node(4095, node1, node1, node0, node0);
      Node node3 = node2.copyInformationFromForTree(node1);
      node3.getBooleanProp(31);
      node3.addChildrenAfter(node2, node1);
      node2.removeChildAfter(node1);
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node.newNumber((-1.0));
      Node node0 = Node.newString(38, "\")");
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.cllect.ImmutableSorteAsList");
      Node node1 = new Node(42, 0, 4095);
      Node node2 = new Node(4095, node1, node1, node0, node0);
      Node node3 = node2.copyInformationFromForTree(node1);
      node3.addChildrenAfter(node2, node1);
      node2.removeChildAfter(node1);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(131072, 131072, 131072);
      Node node1 = Node.newNumber((double) 52, 31, 2);
      Node node2 = new Node(42, node0, node0, node0, node1);
      node2.setIsSyntheticBlock(false);
      node0.addChildrenToFront(node2);
      node0.isSwitch();
      node0.getAncestor(43);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(41, (-1), 41);
      node0.isCall();
      node0.isOnlyModifiesThisCall();
      node0.isTry();
      node0.getInputId();
      node0.isEmpty();
      node0.isQuotedString();
      Node node1 = Node.newString((-1051), "tPTT^.E&je8xCg+!", 87, 15);
      node1.isNoSideEffectsCall();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(120, 2264, (-478));
      node0.getJSDocInfo();
      node0.isAssign();
      Node node1 = node0.cloneTree();
      node1.getAncestor(3318);
      node0.isEquivalentTo(node0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = node0.cloneNode();
      node2.clonePropsFrom(node0);
      node2.getIndexOfChild((Node) null);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isOptionalArg();
      Node node1 = Node.newNumber((-1.0), (-747), 2);
      node0.useSourceInfoFrom(node1);
      node0.setLineno(113);
      node0.isGetterDef();
      node0.isCase();
      node0.isUnscopedQualifiedName();
      Node.newNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(38, 30, 30);
      node0.cloneNode();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.wasEmptyNode();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isSwitch();
      Node node1 = new Node(36, node0, node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newString(41, "R}l<fXsn7O", 57, 37);
      node0.isStringKey();
      Node node2 = new Node(33, node1);
      node2.getQualifiedName();
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString((-2966), "r,+,\"6/9JF4V/", 85, (-2966));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(85, node0, node0, node0, node0, 15, 4095);
      node1.isCast();
      node0.setString("r,+,\"6/9JF4V/");
      node1.useSourceInfoFromForTree(node0);
      node1.isVarArgs();
      node0.isEquivalentTo(node1, false, false, true);
      node1.isQuotedString();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(38, 53, 53);
      node0.isBlock();
      node0.getBooleanProp(38);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.documentReturn("com.google.common.collect.RegularImmutableBiMap");
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = Node.newString(105, " c}S11'zMlPqcI}A]");
      node0.getString();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      Node node1 = new Node(50);
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(151, 151, 151);
      node0.isUnscopedQualifiedName();
      node0.isStringKey();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      Node node0 = new Node(85);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Shg}[/]v^;*Kf\">f'W", node0, jSType1);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) enumType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, true, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = Node.newString(29, "{^^OQaw)(24p:Vp?<#(");
      Node node2 = node0.srcref(node1);
      Node.newString(42, "{^^OQaw)(24p:Vp?<#(", 1108, 93);
      node2.isStringKey();
      node2.isUnscopedQualifiedName();
      node1.getQualifiedName();
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isOptionalArg();
      node0.setLineno(114);
      node0.isDo();
      node0.isGetterDef();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO 114 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      Node.newNumber((double) 32, 56, (-1999));
      // Undeclared exception!
      try { 
        node1.setString("com.google.javascript.rhino.Node");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(122, 650, 50);
      node0.isAdd();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(63, node0, node0, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeEquals(node1);
      node0.mayMutateGlobalStateOrThrow();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(38);
      node0.isCast();
      Node node1 = new Node(571, 31, 48);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(154);
      node0.isAssignAdd();
      node0.isDebugger();
      Node node1 = node0.cloneNode();
      node1.copyInformationFromForTree(node0);
      node0.isVar();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(123, 123, 123);
      Node node1 = new Node(37, 43, 86);
      Node node2 = new Node((-1179), node0, node0, node0, node1);
      node2.removeChildAfter(node0);
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(124);
      node0.getLength();
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      node0.isSetterDef();
      node0.isCast();
      node1.isEquivalentTo(node1, true, true, false);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(102, (-1526), 116);
      node0.isThrow();
      Node node1 = new Node(38, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isOr();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(120, nodeArray0);
      Node node1 = new Node(37, nodeArray0);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(0);
      Node node1 = new Node(38, node0, node0, 4095, 53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.cloneTree();
      Node node3 = node2.cloneTree();
      node2.putBooleanProp(30, true);
      node1.isGetterDef();
      node0.isDebugger();
      node3.isVoid();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(32, "D$c", 32, 32);
      node0.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      node0.isQualifiedName();
      Node node1 = Node.newString(93, "D$c", 47, 52);
      node1.isAssignAdd();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node1.cloneTree();
      node0.isFunction();
      node0.getIntProp(50);
      node2.isSyntheticBlock();
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("EYB}02E_h[R(JD;fiS");
      Node node1 = Node.newString("EYB}02E_h[R(JD;fiS", 37, (-284));
      node1.isCase();
      Node node2 = Node.newString("[N'7vORDFds}3@");
      node2.isThis();
      node0.isNew();
      node2.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node1.setChangeTime((-2595));
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node3 = new Node(110, node0, node0);
      node3.isDelProp();
      node1.isBlock();
      node0.isEmpty();
      node0.detachChildren();
      Node node4 = Node.newString("Object#Element", 30, 55);
      node2.checkTreeEquals(node4);
      node3.replaceChild(node0, node4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(40, 40, (-2408));
      node0.siblings();
      Node node1 = new Node(259, node0, node0, node0);
      node0.clonePropsFrom(node1);
      node0.isGetterDef();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(51);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.checkTreeEquals(node2);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.getBooleanProp(2030);
      Node node1 = Node.newString("tPTT^.E&je8xCg+!");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node1.putProp(33, simpleErrorReporter1);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(44, 44, 1098);
      node0.isComma();
      node0.getChangeTime();
      node0.setVarArgs(false);
      node0.isUnscopedQualifiedName();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      simpleErrorReporter0.warning("<invalid>", "    ", 1, 1);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      InputId inputId0 = new InputId("%EV^");
      node2.setInputId(inputId0);
      node0.isUnscopedQualifiedName();
      node2.isNoSideEffectsCall();
      node0.isQualifiedName();
      node1.isAssignAdd();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = node2.cloneTree();
      node3.isFunction();
      node1.getIntProp(29);
      node1.isSyntheticBlock();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 306654252);
      node0.getBooleanProp(18);
      Node node1 = Node.newString("a4");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.putProp(42, node0);
      // Undeclared exception!
      try { 
        node1.mayMutateArguments();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateGlobalStateOrThrow();
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = new Node(50, node0, node0, node0, node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(52);
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.srcrefTree(node0);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sZ");
      Node node0 = Node.newNumber((-1138.95766813322));
      node0.setChangeTime(345);
      node0.getChangeTime();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1138.95766813322 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(102);
      node0.getBooleanProp(102);
      node0.isInc();
      node0.getBooleanProp(102);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE 43 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node((-2684));
      node0.getInputId();
      node0.getSideEffectFlags();
      Node node1 = node0.getAncestor(0);
      node1.getSourceFileName();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(151, 151, 151);
      node0.addSuppression("Node tree inequality:\nTree1:\n");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      node0.isDelProp();
      node0.addSuppression("sZ");
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(1738, ":#RJ~&", 39, 132);
      Node node1 = Node.newString(132, "9W+? .9N");
      node1.isScript();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isArrayLit();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.putIntProp(32, (-503));
      node0.isLabelName();
      node0.toString();
      Node node1 = new Node((-675), node0);
      Node node2 = new Node(30, node1, node1, node1, node1, 30, 54);
      node2.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -675
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      Node node2 = new Node(43, (-1111), 29);
      Node node3 = new Node(30, node2);
      node3.isNew();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isAdd();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("GG[A8Fn");
      node_NodeMismatch0.equals(templateType0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(47);
      node0.isCast();
      Node node2 = node1.cloneNode();
      node2.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 8, 4095);
      node1.useSourceInfoFrom(node0);
      node1.isEquivalentToShallow(node1);
      node1.addChildAfter(node1, node0);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.getSourceOffset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.addChildToFront(node1);
      Node node2 = node0.getLastChild();
      node2.isFromExterns();
      node2.setType(152);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(35, "EXPR_RESULT");
      Node node2 = new Node(122, node0, node0, node1, node1, 90, 57);
      node2.hasChild(node2);
      node2.isCatch();
      node0.getQualifiedName();
      node0.removeFirstChild();
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(153);
      Node node1 = new Node(55, node0, node0);
      node0.srcref(node1);
      int int0 = Node.SIDE_EFFECT_FLAGS;
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(36, 154);
      node0.toString(true, true, true);
      node0.isDefaultCase();
      node0.mayMutateGlobalStateOrThrow();
      node0.getLastSibling();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("String has leading or trailing whitespace");
      Node node1 = Node.newString("String has leading or trailing whitespace", 2, 30);
      node1.isCase();
      Node node2 = Node.newString("R");
      node0.isThis();
      node0.isNew();
      node2.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node0.setChangeTime(30);
      Node.newNumber(1343.7494175349);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node3 = new Node(105, node0, node1);
      node0.isDelProp();
      node0.checkTreeEqualsImpl(node2);
      node0.isBlock();
      node0.isEmpty();
      node2.detachChildren();
      node0.isSwitch();
      node3.replaceChild(node1, node2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(52, 52, 52);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      Node node0 = Node.newString("Named type with empty name component");
      Node node1 = new Node(43, node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getParentScope();
      enumElementType0.findPropertyType("AN|W1D\"tR9W;nANT3l");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Not declared as a type name", "Not declared as a type name", 44, 1);
      jSTypeRegistry0.getObjectIndexKey();
      JSType[] jSTypeArray0 = new JSType[2];
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      jSTypeArray0[0] = (JSType) enumElementType1;
      jSTypeArray0[1] = (JSType) enumType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, false, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      node1.isFor();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      jSTypeRegistry1.getType("no next sibling.");
      jSTypeRegistry1.createFunctionType((JSType) null, false, jSTypeArray0);
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node0.isGetElem();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(149);
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      node0.isSetterDef();
      node0.isCast();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 4095 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(473, nodeArray0, 473, 1331);
      Node node1 = new Node(24, node0, node0);
      Node node2 = new Node(113, node1);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node1.isEmpty();
      Node node3 = node0.detachFromParent();
      node0.getNext();
      node0.isFalse();
      // Undeclared exception!
      try { 
        node3.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(33, "", 948, 33);
      node0.siblings();
      node0.isComma();
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("mn3nC6(.:.k1Z_^~I4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mn3nC6(.:.k1Z_^~I4");
      node0.detachChildren();
      Node node1 = new Node(4, node0, node0, node0);
      node1.removeProp(77);
      node0.addChildToFront(node1);
      node0.getIntProp((-971));
      node0.isUnscopedQualifiedName();
      node0.getString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newString("YH", 4, 4095);
      node0.getString();
      node1.isFromExterns();
      node1.getIntProp((-4096));
      node0.getJsDocBuilderForNode();
      node1.isQuotedString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node0.getAncestor(57);
      node3.useSourceInfoFrom(node2);
      jSDocInfo0.setNoSideEffects(false);
      node2.setJSDocInfo(jSDocInfo0);
      node1.getLastChild();
      node2.isVoid();
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node(57, node0, node0, node0, node0, (-6571), 31);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n\nSubtree2: ");
      node2.isEquivalentTo(node1, true, true, true);
      node1.isFor();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node((-755));
      Node node1 = new Node(42, node0, node0, node0, 29, 27);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      node0.isWhile();
      node0.isVarArgs();
      Node node1 = Node.newNumber((-1.0));
      node1.getSourceOffset();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node((-2245));
      Node node1 = new Node(4, node0, node0, node0, node0, 279, 538);
      Node node2 = Node.newNumber((double) (-2245));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.setCharno(8287);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mU a<ozO2}!QS$3BC]l");
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getSideEffectFlags();
      node1.setChangeTime(901);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -2245.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.putIntProp(36, 154);
      node0.toString(true, true, true);
      node0.isDefaultCase();
      node0.isWhile();
      node0.getChildCount();
      Node node1 = Node.newString(43, "STRING_KEY 154 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002]", (-822), 55);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.isOnlyModifiesArgumentsCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(56, nodeArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(149);
      Node node1 = new Node(38, node0, node0, node0, 4095, 47);
      node0.isSetterDef();
      node0.isCast();
      node1.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getQualifiedName();
      node0.isAssign();
      node0.isGetElem();
      Node node1 = new Node(44, node0, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(34);
      node1.removeFirstChild();
      node0.clonePropsFrom(node1);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(100, 35, 100);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node1.isDelProp();
      node1.isEquivalentTo(node0, false, false, true);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      // Undeclared exception!
      try { 
        node0.getAncestor((-1983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(759.25);
      Node node1 = new Node(38, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.getLastChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.copyInformationFrom(node2);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node1.detachChildren();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(45);
      Node node1 = new Node(40);
      Node node2 = node1.cloneTree();
      node1.isSetterDef();
      Node node3 = Node.newString("9W+? .9N", 86, 50);
      Node node4 = new Node(4063, node0, node3, node0, node2, 12, 56);
      node4.isCast();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterable<? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      Node node2 = Node.newString(47, "'Gj~%y1i,@mc9g];#N", (-2706), (-3495));
      node2.cloneNode();
      node1.isOr();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Gj~%y1i,@mc9g];#N");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isArrayLit();
      node1.isEquivalentToShallow(node0);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      node0.isThrow();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-19);
      node0.getSideEffectFlags();
      Node node1 = node0.getAncestor(0);
      node1.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(82.5189);
      Node node1 = new Node(39, node0, node0);
      node0.isEquivalentTo(node1, false, true, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.isSyntheticBlock();
      Node node2 = node1.copyInformationFrom(node0);
      node2.setChangeTime((-4619));
      node1.setOptionalArg(false);
      node1.getNext();
      node1.isQualifiedName();
      node1.getExistingIntProp(56);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("): ");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      node0.putProp(31, locale0);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isLabel();
      Node node1 = node0.cloneTree();
      node0.isCast();
      node0.isEquivalentTo(node1, false, false, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      node0.setWasEmptyNode(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isSyntheticBlock();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(116);
      node0.children();
      node0.getBooleanProp(2582);
      node0.isTry();
      node0.isObjectLit();
      Node node1 = node0.cloneNode();
      node1.getIntProp(42);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(41);
      Node node1 = new Node(41, node0, 38, 36);
      node1.putBooleanProp(64, false);
      node1.copyInformationFromForTree(node0);
      node1.addSuppression("&");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(49, 4178, (-1794));
      Node node1 = Node.newString("7tl/_Szffd*(A)HA3", 42, 46);
      node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got THROW
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(21);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.cllect.ImmutableSorteAsList");
      Node node1 = new Node(42, 0, 4095);
      Node node2 = new Node(4095, node1, node1, node0, node0);
      node1.getStaticSourceFile();
      node2.getChildBefore(node0);
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(47, (-1539), 38);
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node0.isDelProp();
      node0.isEquivalentTo(node1, false, true, false);
      int int0 = Node.SIDE_EFFECT_FLAGS;
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.setSourceFileForTesting("com.google.common.collect.ImmutableSortedAsList");
      Node node1 = Node.newString(2, "com.google.common.collect.ImmutableSortedAsList");
      node0.isLabelName();
      node1.addChildrenToFront(node0);
      Node node2 = new Node(47, node1, node1, node1);
      node2.srcref(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.isTrue();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(29);
      node0.putIntProp(50, 36);
      node0.toString(false, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node(57, node0, node0, node0, node0, (-6571), 31);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeEquals(node1);
      node1.addChildBefore(node2, node0);
      Node node3 = node2.srcref(node0);
      // Undeclared exception!
      try { 
        node3.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 44, 44, 44);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":| ");
      Node node1 = new Node(44, node0, node0, node0, node0, (-648), 8);
      nodeArray0[0] = node1;
      Node node2 = new Node(44, nodeArray0);
      Node node3 = node2.srcref(node1);
      node3.isNoSideEffectsCall();
      node2.getJsDocBuilderForNode();
      node0.toString(false, true, true);
      node2.isEquivalentToTyped(node1);
      node0.isDo();
      Node node4 = node1.getFirstChild();
      node4.removeFirstChild();
      node0.setLineno(16);
      node4.isObjectLit();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(45);
      Node node1 = new Node(55);
      node1.isNot();
      node1.getDirectives();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = Node.newString("PYK {]BotfM1V", 0, 31);
      node2.isNoSideEffectsCall();
      node1.isEquivalentToShallow(node2);
      node0.isUnscopedQualifiedName();
      node1.isOptionalArg();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node1.getProp(33);
      node_NodeMismatch0.equals((Object) null);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString(86, "N-");
      Node node1 = Node.newNumber((double) 12, 31, 57);
      Node node2 = new Node(8, node0, node1, node1);
      node2.isNE();
      node1.getBooleanProp(33);
      node1.getProp((-2901));
      node1.isContinue();
      node2.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(36, 154);
      node0.mayMutateArguments();
      node0.toString();
      node0.isFor();
      node0.isStringKey();
      Node node1 = new Node(64, 53, 1);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-606));
      Node node1 = new Node(63, node0, node0);
      node0.isQuotedString();
      Node node2 = new Node((-606), node1, 42, 36);
      node2.isDebugger();
      Node node3 = Node.newNumber((-1560.2691982726), 0, 12);
      Node node4 = node2.getFirstChild();
      node4.isOnlyModifiesArgumentsCall();
      node1.removeChildren();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        node3.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(45);
      Node node1 = Node.newString("): ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      node1.putProp(46, locale0);
      node1.toString();
      Node node2 = Node.newNumber((-3053.0), 42, 40);
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(103);
      node0.getSideEffectFlags();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = Node.newString(4095, "is_namespace", 57, 12);
      Node node2 = new Node(15, node0, node1, node1, node0);
      node2.isAssignAdd();
      Node node3 = Node.newString("is_namespace", 43, (-3928));
      node3.isDo();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 8, 4095);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.setChangeTime(47);
      node0.isArrayLit();
      node1.isCase();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isLabel();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("second new child has existing sibling");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        node0.appendStringTree(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(154);
      node0.isNoSideEffectsCall();
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 42, (-1621), 31);
      Node node2 = new Node(62, node1, 128, 50);
      node0.srcref(node2);
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.putIntProp(32, (-503));
      node0.toString(true, true, true);
      node0.isLabelName();
      node0.mayMutateArguments();
      node0.toString();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(108);
      node0.isObjectLit();
      Node node1 = node0.cloneTree();
      try { 
        node1.setString("S:0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(31);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setWasEmptyNode(true);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(2, node0);
      node0.isQuotedString();
      node0.isLocalResultCall();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("Wx\"XO<%6uO`z|");
      node0.setSourceFileForTesting((String) null);
      Node node1 = Node.newString(16, "MOD");
      Node node2 = node0.cloneTree();
      node2.setVarArgs(true);
      Node node3 = new Node(2, node1, node2, (-1), 2601);
      Node node4 = node3.srcrefTree(node0);
      node4.isVarArgs();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("MZ3ly83VH", 9, 85);
      Node node1 = new Node((-72), node0, node0, node0);
      Node node2 = new Node((-72), node1, 30, 2280);
      Node node3 = new Node(85, node2);
      node3.isComma();
      node1.getJsDocBuilderForNode();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(300);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -72
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(33);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node0.isDelProp();
      node0.isEquivalentTo(node1, true, true, true);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0);
      Node node1 = new Node(51, node0, node0, node0, node0, 43, (-1501));
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEquals(node1);
      Node node3 = Node.newString((-452), "Node tree inequality:\nTree1:\nVOID\n\n\nTree2:\nIN\n    VOID\n\n\nSubtree1: VOID\n\n\nSubtree2: IN\n    VOID\n");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(35);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node1.isDelProp();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("C-", 13, 103);
      node0.isFromExterns();
      node0.isFromExterns();
      node0.setSourceFileForTesting("C-");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node node1 = new Node(41, node0, node0, node0);
      node1.isQualifiedName();
      node0.isFalse();
      Node node2 = Node.newNumber(0.0);
      node1.addChildrenToBack(node2);
      node0.hasOneChild();
      node1.useSourceInfoFrom(node0);
      node1.children();
      node2.isEmpty();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node((-2684));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[8];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = modificationVisitor0.caseStringType();
      jSTypeArray0[1] = jSType1;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.collect.ImmutableMap", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getParentScope();
      jSTypeArray0[2] = (JSType) null;
      enumElementType0.findPropertyType("Object#Key");
      jSTypeArray0[3] = null;
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[4] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, false, jSTypeArray0);
      jSTypeArray0[5] = (JSType) functionType0;
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(131072);
      Node node1 = Node.newString(37, "1$c", 130, (-1438));
      Node node2 = Node.newNumber((double) 52, (-523), 2);
      Node node3 = new Node(42, node0, node1, node1, node2);
      node1.addChildrenToFront(node3);
      node1.removeChildren();
      node2.getProp(48);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(152, 152, 152);
      Node node1 = new Node(1169, node0, node0, node0, node0, 8199, 1);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1169
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node(36, node0, node0, node0, node0, 47, 31);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.checkTreeEquals(node1);
      node0.isSwitch();
      node1.removeChildren();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-536));
      node0.getJSDocInfo();
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.isComma();
      node0.setOptionalArg(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("+,R'%I@");
      Node node2 = new Node(1086, node0, node0, node1);
      node0.detachFromParent();
      node0.isQualifiedName();
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(305);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 305
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = Node.newString("{proxy:");
      node1.addChildrenToBack(node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.clonePropsFrom(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isUnscopedQualifiedName();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(123);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(36, node0, node0, node0, node1, (-178), 1);
      node0.isEquivalentToShallow(node2);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(109, 109, 109);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = Node.newNumber((double) 32);
      Node node2 = new Node(4095, node0, node1, node1, node0);
      node0.isEquivalentToShallow(node2);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39, 39, 39);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(39, node0, node0, node0);
      node1.srcrefTree(node0);
      node1.getIntProp(12);
      node1.getJSType();
      node0.isArrayLit();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node1.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("kH+Pz %");
      node0.setSourceFileForTesting("kH+Pz %");
      Node node1 = new Node(42, node0);
      Node node2 = node1.cloneTree();
      node0.isLabelName();
      Node node3 = new Node(47, node1, node2, node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isTrue();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.children();
      node0.getSourceOffset();
      node0.getBooleanProp(2582);
      InputId inputId0 = new InputId("%-GKoav");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isDefaultCase();
      node0.isWhile();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      InputId inputId1 = node0.getInputId();
      node_NodeMismatch0.equals(inputId1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node(0);
      node1.wasEmptyNode();
      node1.isOr();
      Node node2 = new Node(42, 4095, 12);
      node2.isEquivalentTo(node0);
      node2.getBooleanProp(43);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.children();
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.toString(true, true, false);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "String has leading or trailing whitespace";
      Node node0 = Node.newString("String has leading or trailing whitespace");
      Node node1 = new Node(1);
      Node node2 = new Node(2, 57, 39);
      node2.isCase();
      Node node3 = Node.newString("R");
      node1.isThis();
      node1.isNew();
      node3.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node1.setChangeTime(30);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node4 = new Node(42, 41, 42);
      node4.copyInformationFrom(node2);
      Node node5 = new Node(105, node0, node2);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(41);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(147, nodeArray0);
      node0.isFromExterns();
      node0.children();
      node0.isOnlyModifiesArgumentsCall();
      node0.isEmpty();
      Node node1 = Node.newNumber((double) 4095, 15, 0);
      node0.srcref(node1);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      InputId inputId0 = new InputId("0d");
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      Node node1 = new Node(118, 12, 52);
      Node node2 = new Node((-636), node0);
      node1.addChildToFront(node2);
      node1.isVar();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(103);
      node0.getStaticSourceFile();
      node0.isLabelName();
      Node node1 = new Node(49);
      Node node2 = node1.cloneTree();
      node2.isDelProp();
      node2.isEquivalentTo(node0, false, true, false);
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(35);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node1.isDelProp();
      node1.isEquivalentTo(node0, false, true, false);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(123);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getType();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      int int0 = (-1296);
      Node node1 = new Node(42, node0, node0, (-1296), 0);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      node1.setJSDocInfo(jSDocInfo0);
      Node node2 = null;
      try {
        node2 = new Node(123, nodeArray0, 30, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(123);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isEmpty();
      Node node1 = new Node(63, node0, node0, node0, node0);
      node1.isLabel();
      node0.isOr();
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isAssign();
      try { 
        node1.setString("a`D%5RC");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ARRAYLIT is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(32);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isComma();
      node0.getJsDocBuilderForNode();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isAdd();
      node0.isNew();
      node0.isRegExp();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.children();
      Node node1 = new Node((-2722), node0, node0);
      node0.useSourceInfoFrom(node1);
      node0.getSourceOffset();
      node0.getBooleanProp(2595);
      node0.isContinue();
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 53
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("com.gIogle.common.collect.ImmutableSortedAsList");
      Node node1 = new Node(31, node0, node0, node0, 2, 0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.setDirectives(treeSet0);
      Node node2 = node1.cloneTree();
      node0.setVarArgs(true);
      node1.checkTreeEquals(node2);
      node0.isUnscopedQualifiedName();
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.children();
      Node node1 = new Node(15, node0);
      node0.srcref(node1);
      node0.getSourceOffset();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isDelProp();
      node0.isFor();
      node0.getProp(116);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(57, 154);
      node0.toString(true, true, true);
      node0.getIntProp((-2230));
      node0.isLabelName();
      try { 
        node0.setString("STRING_KEY 154 [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000002]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING_KEY 154 [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(154);
      node0.isCast();
      node0.isGetterDef();
      node0.getSourceOffset();
      node0.getDirectives();
      node0.getBooleanProp(42);
      node0.isContinue();
      Node node1 = new Node(54);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(629, "77b Jt.`x*>", 1712, 629);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8E|rg");
      Node node1 = new Node(122, node0, 1990, 46);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.setQuotedString();
      Node.newString(96, "77b Jt.`x*>");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 629
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("String has leading or trailing whitespace");
      Node node1 = new Node(1);
      Node node2 = new Node(2, 57, 39);
      node2.isCase();
      Node node3 = Node.newString("R");
      node1.isThis();
      node1.isNew();
      node3.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node1.setChangeTime(30);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node4 = new Node(42, 41, 42);
      Node node5 = new Node(105, node0, node2);
      node3.addChildrenToFront(node5);
      node5.getProp(42);
      node5.isFalse();
      node4.clonePropsFrom(node3);
      Node.newString("Object#Element");
      node2.getAncestor(45);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(36, 154);
      Node node1 = Node.newNumber((double) 42, 1, 154);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(101, node1, node0, node2, node0);
      node3.isRegExp();
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(675, 675, 675);
      node0.isCase();
      Node node1 = Node.newString("R");
      node0.isThis();
      node0.isNew();
      node0.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      node0.setChangeTime(1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node2 = new Node(46, 38, (-1265));
      Node node3 = new Node(40, node2, node2);
      node1.isDelProp();
      node0.isBlock();
      node3.isEmpty();
      node3.detachChildren();
      Node node4 = Node.newString("Object#Key", 40, 0);
      node3.checkTreeEquals(node4);
      node4.isContinue();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(101);
      node0.detachChildren();
      Node node1 = new Node(34, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      node1.getIndexOfChild(node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.children();
      node0.getSourceOffset();
      Node node1 = new Node(737, node0);
      node0.srcrefTree(node1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isDelProp();
      node0.isFor();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(51);
      node0.isComma();
      Node node1 = Node.newNumber((double) 50);
      node1.setSourceFileForTesting("new child has existing parent");
      node1.isAdd();
      Node node2 = new Node(43, node1, node1, node0);
      node2.getSourceOffset();
      node1.isNew();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.setSourceFileForTesting("com.google.common.collect.ImmutableSortedAsList");
      Node node1 = node0.cloneTree();
      node0.isDelProp();
      node1.getStaticSourceFile();
      node0.isEquivalentTo(node1, true, true, true);
      node1.isSwitch();
      node1.getSourceOffset();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(103);
      node0.getBooleanProp(103);
      node0.addChildToFront(node0);
      node0.isInc();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("#Adj)S y");
      // Undeclared exception!
      node0.appendStringTree(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.isFromExterns();
      node0.children();
      node0.isLabel();
      node0.isOr();
      Node node1 = new Node(30, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isAssign();
      Node node3 = Node.newString((-269), "T", 48, (-857));
      node3.setString("T");
      node0.isNoSideEffectsCall();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node.newString("com.google.ommon.collect.ImmutableSortedAsList");
      Node node0 = new Node(40);
      // Undeclared exception!
      try { 
        node0.setString("com.google.ommon.collect.ImmutableSortedAsList");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.isFromExterns();
      node0.children();
      node0.getSourceOffset();
      Node node1 = Node.newString(34, "p2'9&", 3328, 1361);
      node0.useSourceInfoIfMissingFromForTree(node1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isSwitch();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(1150, node0);
      node0.setVarArgs(true);
      Node node2 = new Node(108, 546, 43);
      node2.isCase();
      Node.newString("");
      node2.isThis();
      node0.isNew();
      node0.isNoSideEffectsCall();
      node2.isOr();
      node2.useSourceInfoIfMissingFrom(node1);
      try { 
        node0.setString("fty");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BREAK [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      Node node0 = Node.newString(42, "lkjh", 131, 42);
      node0.isQualifiedName();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 8, 4095);
      node1.isEquivalentToShallow(node1);
      node1.addChildAfter(node1, node0);
      Node.newString("(y@Y;z.U@ H.fE_", (-433), 56);
      // Undeclared exception!
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString(96, "com.google.javascript.rhino.Node$SiblingNodeIterable", 96, 1910);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node0.isFunction();
      Node node1 = new Node(39, 152, 38);
      Node node2 = node1.clonePropsFrom(node0);
      node2.isVarArgs();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(154);
      node0.setLineno(154);
      node0.isEquivalentToTyped(node0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isVoid();
      node0.isLabelName();
      node0.isUnscopedQualifiedName();
      node0.isQualifiedName();
      Node node1 = new Node((-1702), node0, node0, node0, node0, 29, 3001);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(147, nodeArray0);
      node0.isFromExterns();
      node0.children();
      Node node1 = Node.newNumber((double) 49, 31, 1035);
      Node node2 = new Node(33, node0, node1);
      node0.getStaticSourceFile();
      node1.getBooleanProp(219);
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((-147.0));
      node0.isComma();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(33);
      Node node1 = node0.cloneNode();
      node1.setLength((-3049));
      node0.isSetterDef();
      node1.getAncestor(53);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestors();
      Node node2 = new Node(15, node0, node0);
      node2.getProp(1029);
      node0.addChildToBack(node2);
      node1.getBooleanProp(50);
      node2.detachChildren();
      node0.isVoid();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node3, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString((-462), "Object#Key");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(328, node0, node0, node1);
      node2.isTypeOf();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node((-3075), node0, node0, node0, node0, (-6571), 31);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isTrue();
      node1.isLabelName();
      Node node2 = new Node(38, node1, node1, node1, node1);
      // Undeclared exception!
      try { 
        node2.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(117);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isAdd();
      node0.isCatch();
      node0.cloneTree();
      node0.isDelProp();
      Node node1 = Node.newString("SYNTAX_ERROR_TYPE", (-5728), (-247));
      node1.isBlock();
      node0.isEmpty();
      node0.isInstanceOf();
      node0.isUnscopedQualifiedName();
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      Node node1 = new Node((-3075), node0, node0, node0, node0, (-6571), 31);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.checkTreeEquals(node1);
      node0.getAncestors();
      node1.addChildBefore(node2, node0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.extractLineno(64);
      Node node0 = new Node(39, (-669), 3345);
      Node node1 = new Node(0, node0);
      node1.getQualifiedName();
      node0.isEquivalentTo(node1, false, false, true);
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(101, 387, 387);
      node0.isSwitch();
      Node node1 = new Node(8, node0, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = node0.detachFromParent();
      node2.getInputId();
      node2.isArrayLit();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.isFromExterns();
      node0.children();
      node0.getSourceOffset();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isSwitch();
      node0.isArrayLit();
      node0.isContinue();
      Node node1 = new Node((-632));
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      Node node1 = new Node(37, node0, node0, node0, 52, 47);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      Node node1 = Node.newString(38, "R}l<fXsn7O");
      node1.getAncestor(36);
      node1.getQualifiedName();
      Node node2 = new Node(262144, node1, node1, node1);
      node1.isQualifiedName();
      Node node3 = null;
      try {
        node3 = new Node(42, node1, (Node) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(29);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getBooleanProp(37);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isAdd();
      node0.isNew();
      Node node1 = Node.newNumber((double) 37, 30, 2);
      node1.isNoSideEffectsCall();
      Node node2 = new Node(403, node1, node1, node0);
      node2.removeChild(node1);
      node2.isTypeOf();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isBreak();
      node0.isNoSideEffectsCall();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node0.setSourceFileForTesting("synthetic");
      node0.isAnd();
      node0.isTry();
      node0.isBreak();
      Node node1 = new Node(53, node0, node0, node0, 125, 1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DEC
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(123);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isTry();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node0.isDelProp();
      node0.getBooleanProp((-1865));
      node1.isEquivalentTo(node0, true, true, true);
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber((-147.0));
      Node node1 = new Node(49, node0, 2, 4095);
      node1.isComma();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(4311, 4311, 4311);
      Node node1 = new Node(2, node0);
      node1.isNE();
      node1.isDelProp();
      node1.isEquivalentTo(node1, false, false, false);
      node1.isOr();
      node0.detachChildren();
      Node node2 = new Node(31, node1);
      node1.isLocalResultCall();
      node2.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      Node node1 = new Node(40, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isRegExp();
      node0.isExprResult();
      node2.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node((-956), (-956), (-956));
      Node node1 = new Node(15, node0, node0, node0, node0, 53, 4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.isFromExterns();
      node0.children();
      node0.getSourceOffset();
      node0.isBlock();
      node0.isBreak();
      node0.cloneTree();
      node0.isName();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(154);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isAdd();
      node0.isCatch();
      node0.cloneTree();
      Node node1 = new Node(36, 16, 31);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(141, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      node0.setSourceFileForTesting("The new child node has siblings.");
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(1);
      Node node1 = new Node(57, node0, node0, node0, 112, 32);
      node0.addChildrenToBack(node1);
      node0.putIntProp(1, 63);
      node0.isObjectLit();
      node1.removeFirstChild();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(119);
      node0.getBooleanProp(119);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isBreak();
      node0.toString();
      node0.isArrayLit();
      node0.isWith();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("String has leading or trailing whitespace");
      Node node1 = new Node(1);
      Node node2 = new Node(4095, node1);
      node2.setVarArgs(true);
      node2.isCase();
      Node node3 = Node.newString("");
      node1.isThis();
      node1.isNew();
      node3.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node1.setChangeTime(30);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node4 = jSTypeRegistry1.createParameters((List<JSType>) arrayList0);
      Node node5 = new Node(42, 41, 42);
      Node node6 = new Node(105, node4, node2);
      node1.isDelProp();
      node0.isBlock();
      node1.isEmpty();
      node4.detachChildren();
      Node.newString("String has leading or trailing whitespace", 2, 38);
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber(192.5204);
      Node node1 = new Node(39, node0, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getBooleanProp(1);
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = new Node(36, 1, 42);
      node0.isInstanceOf();
      node1.isEquivalentTo(node0, false, false, true);
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(103);
      ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Key", 46, 55);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = new Node(52);
      node2.isLabel();
      node0.isOr();
      node2.useSourceInfoIfMissingFrom(node1);
      node0.isAssign();
      try { 
        node2.setString("Object#Key");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 46 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      node0.isDefaultCase();
      node0.isScript();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(12);
      node0.isLabel();
      node0.isOr();
      Node node1 = new Node(1515, 46, 54);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node0.isAssign();
      String string0 = "h)I]hR";
      // Undeclared exception!
      try { 
        node1.setString("h)I]hR");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1515
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(123, 123, 123);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = Node.newString("h>o`+1|%k>2.");
      node0.isOnlyModifiesArgumentsCall();
      Node.extractCharno(0);
      node0.getQualifiedName();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(31);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(0, node0, node0);
      node0.isDelProp();
      node0.isBlock();
      node1.isEmpty();
      node0.detachChildren();
      Node node2 = Node.newString(": ", 16, 83);
      Node node3 = new Node(630784, (-854), (-852));
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 630784
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(154);
      node0.setLineno(154);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node0.isAnd();
      node0.isTry();
      node0.cloneNode();
      node0.setLineno(16);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(111);
      node0.getJSDocInfo();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isNoSideEffectsCall();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      Node node2 = Node.newString(12, "O]e&Z3]/SgY}f", 2707, 55);
      node2.isDo();
      node0.copyInformationFromForTree(node1);
      node0.isOnlyModifiesThisCall();
      node2.isGetterDef();
      node1.hasMoreThanOneChild();
      node2.isFor();
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 97, 4095);
      Node node2 = new Node(53, 31, 1);
      node2.getBooleanProp(46);
      node1.isRegExp();
      Node node3 = new Node(4, node2, node1);
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(154);
      node0.setLineno(154);
      node0.isEquivalentToTyped(node0);
      node0.isGetElem();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(154);
      node0.putIntProp(36, 154);
      node0.toString(true, true, true);
      node0.isSetterDef();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(131072);
      Node node1 = Node.newString(";T;W:-G6*$dH\u0004CZ", (-940), 119);
      node0.isFromExterns();
      Node node2 = new Node(47, (-1050), (-787));
      node2.isComma();
      node2.setOptionalArg(true);
      Node.newString(26, "^L|");
      node1.getString();
      Node.newString(3510, ";T;W:-G6*$dH\u0004CZ", 155, 55);
      node2.getQualifiedName();
      Node node3 = new Node(37, node2);
      Node node4 = Node.newNumber((-147.0), 101, 2);
      node3.srcrefTree(node4);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1994));
      node0.setSourceFileForTesting("3@-N)QDi7");
      Node node1 = new Node(147, node0, 12, 48);
      Node node2 = new Node((-1994), node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node2.isVar();
      node3.isReturn();
      node1.cloneTree();
      node2.getAncestor(770);
      node3.isFunction();
      node0.toString();
      node0.isArrayLit();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(192.5204);
      Node node1 = new Node(39, node0, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getBooleanProp(1);
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isReturn();
      Node node2 = node1.cloneTree();
      node2.getAncestor(40);
      node2.isFunction();
      // Undeclared exception!
      try { 
        node2.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      Node node0 = new Node(51, 51, 51);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isInstanceOf();
      node0.isNoSideEffectsCall();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(4311);
      Node node1 = new Node(2, node0);
      node1.isNE();
      node1.isDelProp();
      node1.isEquivalentTo(node1, false, false, false);
      node1.isEmpty();
      node0.detachChildren();
      Node node2 = Node.newString(": ", 52, 40);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node2;
      Node node3 = null;
      try {
        node3 = new Node(130, nodeArray0, 54, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      Iterable<Node> iterable0 = new Vector<Node>();
      node0.getStaticSourceFile();
      node0.getBooleanProp(103);
      node0.addChildToFront(node0);
      node0.isEquivalentTo(node0, false, false, false);
      node0.isSwitch();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(192.5204);
      Node node1 = Node.newNumber((double) 4);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getBooleanProp(1);
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isNumber();
      Node node3 = new Node(117, 50, 3184);
      node3.clonePropsFrom(node0);
      node3.isCase();
      node3.addChildToFront(node2);
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString(96, "-", 96, 1910);
      Node node1 = Node.newString(38, "new child has existing parent", 101, 51);
      node1.isComma();
      node0.isArrayLit();
      node1.isUnscopedQualifiedName();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      Node node0 = new Node(51, 51, 51);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.removeProp(51);
      node0.isInstanceOf();
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("Object#Element", 775, 51);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isBreak();
      node0.isDefaultCase();
      node0.isWith();
      node0.isReturn();
      node0.cloneTree();
      node0.getAncestor(51);
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isVarArgs();
      node0.isGetterDef();
      Node node1 = new Node(52, node0, node0, node0, 54, 16);
      node1.useSourceInfoFromForTree(node0);
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isLocalResultCall();
      Node node1 = new Node(401407, node0, node0);
      node0.getStaticSourceFile();
      node1.getBooleanProp(421996);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(116, nodeArray0);
      node0.isFromExterns();
      node0.children();
      Node node1 = Node.newNumber((double) 49, 31, 1033);
      Node node2 = new Node(33, node0, node1);
      node2.getStaticSourceFile();
      node1.getBooleanProp(219);
      node2.removeChildAfter(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = Node.newNumber((double) 46, 1588, 53);
      node3.addChildToFront(node4);
      node2.isInc();
      node1.isSwitch();
      node0.getAncestors();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isAnd();
      node0.setOptionalArg(false);
      Node node1 = Node.newString(37, "");
      node1.getString();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("56");
      Node node4 = new Node(38, node0, node3, node0);
      node2.isTypeOf();
      node3.isGetElem();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(81);
      Node node1 = new Node(32);
      node0.addSuppression("q(");
      node1.wasEmptyNode();
      node1.setLineno(36);
      node1.isDefaultCase();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString((-456), ": ", (-456), (-456));
      Node node1 = new Node((-456), node0);
      node1.getInputId();
      node1.setInputId((InputId) null);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(103);
      node0.children();
      node0.isFromExterns();
      node0.cloneTree();
      node0.getBooleanProp(30);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isDelProp();
      node0.setOptionalArg(false);
      node0.isQualifiedName();
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(101);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getIntProp((-262));
      node0.isQualifiedName();
      node0.isNew();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(120, 2428, 108);
      node0.getJSDocInfo();
      Node node1 = new Node(4, node0, node0);
      node1.isReturn();
      Node node2 = node0.cloneTree();
      node2.getAncestor(12);
      node2.isFunction();
      node1.toString();
      node2.isArrayLit();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      Node node1 = new Node(103, node0, 154, (-1));
      node0.addChildrenToBack(node1);
      node1.isDo();
      Node.newString(0, "Object#Key", 46, 55);
      int int0 = Node.SIDE_EFFECTS_ALL;
      node1.isOr();
      // Undeclared exception!
      try { 
        node1.setSourceEncodedPositionForTree(147);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1994));
      node0.setSourceFileForTesting("3@-N)QDi7");
      Node node1 = new Node(147, node0, 12, 48);
      node1.getQualifiedName();
      Node node2 = new Node((-1994), node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node2.isVar();
      node0.isGetElem();
      node3.getQualifiedName();
      node3.isReturn();
      node0.siblings();
      node0.getJSDocInfo();
      node1.toStringTree();
      node3.isDelProp();
      node2.clonePropsFrom(node3);
      Node node4 = null;
      try {
        node4 = new Node(286, node0, node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(103);
      node0.children();
      node0.isFromExterns();
      node0.getBooleanProp(30);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isDelProp();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.isAdd();
      node1.isNew();
      node0.isCatch();
      Node node2 = node1.cloneTree();
      node2.isEquivalentTo(node1);
      node0.isAdd();
      node2.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getAncestors();
      Node node1 = Node.newString("LABEL_NAME");
      node0.copyInformationFromForTree(node1);
      node0.isCatch();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(2, (-383), 2717);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node1.mayMutateArguments();
      Node node2 = node1.getLastChild();
      node2.getSourceFileName();
      String string0 = "'_E";
      Node.newString("'_E");
      node1.cloneNode();
      // Undeclared exception!
      try { 
        Node.newString(49, (String) null, 9, (-1473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-462), "'_E", (-462), 4752);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.setSourceFileForTesting("ji<y");
      node0.getSourceOffset();
      Node node1 = Node.newString("ji<y", 51, 57);
      node1.getString();
      node0.isHook();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isComma();
      node0.isString();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.cloneNode();
      Node node1 = new Node(8192);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString("-", 13, 123);
      node0.isFromExterns();
      node0.isVoid();
      node0.setSourceFileForTesting("&");
      node0.isGetterDef();
      node0.isTry();
      node0.setOptionalArg(true);
      node0.isString();
      node0.getSourceFileName();
      Node node1 = new Node(77, node0, node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      Node node1 = new Node(32, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(57, node0, 1, 54);
      Node node4 = new Node(3233, 42, 2);
      node2.isEquivalentTo(node4, false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setOptionalArg(true);
      Node node5 = new Node(39, node3, 36, 114);
      node1.srcrefTree(node3);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      Node node1 = Node.newString(98, "-", 42, (-1173));
      node1.getBooleanProp((-3696));
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isDelProp();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("LABEL_NAME", ",", 54, (-3484));
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ArrayList<JSType> arrayList1 = new ArrayList<JSType>();
      node0.getLastSibling();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1216);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1216
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) treeSet0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newNumber(0.0, 43, 8);
      node0.removeProp(12);
      node1.isNot();
      node1.setLineno((-5249));
      node1.children();
      Node node2 = new Node(52, node1, node1, node0, node0);
      Node node3 = node1.getParent();
      jSTypeRegistry0.identifyNonNullableName(".I");
      node2.isLabelName();
      node0.putProp((-4676), "Object#Key");
      node0.copyInformationFromForTree(node3);
      node2.isAssign();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node.newNumber((double) 306654252, 306654252, 812);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.putProp(42, node1);
      node0.toString();
      node0.getIntProp(30);
      Node node2 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node2.isNoSideEffectsCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(77, 16384, 1920);
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(37, node0, node0);
      node0.getIntProp(64);
      node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(0, 1047, (-517));
      node0.isReturn();
      node0.siblings();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isTry();
      node0.setOptionalArg(false);
      node0.isString();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 43
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isVarArgs();
      node0.isGetterDef();
      node0.isIn();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.copyInformationFromForTree(node0);
      node0.isContinue();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("'_", 103, 108);
      Node node1 = new Node(49, node0, node0, node0, 4095, 16);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isEquivalentTo(node2);
      node2.removeChildren();
      node1.isVar();
      // Undeclared exception!
      try { 
        node1.addChildBefore((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      Node node0 = new Node(51, 51, 51);
      node0.getBooleanProp(1649);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.isReturn();
      Node node1 = node0.cloneTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(node0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[5];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeArray0[0] = (JSType) objectType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[1] = jSType0;
      Node node0 = new Node((-9));
      Node node1 = new Node(1, node0, node0, node0, node0, (-2002), 8388608);
      Node node2 = new Node(0, node1, 55, 4);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node2, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParentScope();
      jSTypeArray0[2] = (JSType) null;
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[3] = (JSType) templateType0;
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, immutableList0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType1 = templateTypeMapReplacer0.caseNoObjectType();
      jSTypeArray0[4] = jSType1;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1994));
      node0.setSourceFileForTesting("3@-N)QDi7");
      Node node1 = new Node(147, node0, 12, 48);
      node1.getQualifiedName();
      Node node2 = new Node((-1994), node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node2.isVar();
      node0.isGetElem();
      node3.getQualifiedName();
      node3.isReturn();
      node0.siblings();
      node0.getJSDocInfo();
      node1.toStringTree();
      node3.isDelProp();
      node3.cloneTree();
      Node node4 = node3.removeChildren();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node4.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(32);
      node1.getType();
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = new Node(113, node1);
      node0.srcrefTree(node1);
      node1.getJSType();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(120, 2264, (-478));
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      node1.getAncestor(3318);
      node1.isFunction();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = node0.cloneNode();
      node2.getIndexOfChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(1, 1047, (-517));
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(96, "-", 96, 1910);
      Node node1 = Node.newString("new child has existing parent");
      Node node2 = new Node(420);
      node0.setVarArgs(true);
      node1.isCase();
      Node node3 = Node.newString("");
      node3.isThis();
      node2.isNew();
      node3.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node0.setChangeTime(50);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      jSTypeRegistry1.createParameters((List<JSType>) arrayList0);
      Node node4 = new Node((-2843), 51, (-1641));
      Node node5 = new Node(2, node4, node3);
      node5.isDelProp();
      node1.isBlock();
      node3.isEmpty();
      node4.detachChildren();
      Node node6 = Node.newString(": ", 1047, 39);
      node0.checkTreeEquals(node6);
      node5.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.isTry();
      node0.setOptionalArg(false);
      node0.isString();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = node0.cloneNode();
      node0.isStringKey();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      Node node0 = new Node(51, 51, 51);
      node0.getBooleanProp(1649);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isIn();
      node0.removeProp(113);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber(192.5204);
      Node node1 = new Node(52);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getBooleanProp(71);
      node1.isInc();
      Node node2 = new Node(49, 53, 1950);
      node2.removeProp(131072);
      Node node3 = Node.newNumber((double) 47, 15, 57);
      Node node4 = new Node((-3416), node0, node1, node0, node3, 39, (-1372));
      node4.addChildToFront(node2);
      node3.isInc();
      node4.isSwitch();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(57, node0);
      node1.clonePropsFrom(node0);
      node0.checkTreeEqualsImpl(node1);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(131072);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[D$c");
      Node node1 = Node.newString(32, "[D$c", 113, (-1438));
      Node node2 = Node.newNumber((double) 52, 55, 2);
      Node node3 = new Node(42, node0, node1, node1, node2);
      Node node4 = node3.copyInformationFromForTree(node0);
      node4.isCatch();
      node2.isDec();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      node0.isDefaultCase();
      node0.isScript();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(12);
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      Node node2 = Node.newNumber((-147.0));
      node2.isAssign();
      node0.isLabelName();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isFromExterns();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      node1.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      Node node2 = new Node(125, node1, 46, 198);
      node0.isOptionalArg();
      node0.putBooleanProp(0, false);
      node2.isCast();
      node0.getIntProp(43);
      node1.isTypeOf();
      node2.isBreak();
      node2.isLabel();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 8, 4095);
      node1.isEquivalentToShallow(node1);
      node0.putBooleanProp(26, true);
      InputId inputId0 = new InputId((String) null);
      node0.setInputId(inputId0);
      node1.removeProp(35);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.isBreak();
      node0.isLabel();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      StringWriter stringWriter0 = new StringWriter(48);
      // Undeclared exception!
      try { 
        node2.appendStringTree(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      Node node0 = Node.newNumber(685.7953536871155);
      Node node1 = new Node(41, node0);
      Node node2 = node1.srcrefTree(node0);
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.ImmutableSortedAsList");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getBooleanProp(119);
      node0.isInc();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.isInstanceOf();
      node0.putBooleanProp(49, true);
      node0.isIn();
      node0.removeProp(49);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isVarArgs();
      node0.isGetterDef();
      node0.isIn();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isContinue();
      node0.isLabel();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString("-");
      node0.isFromExterns();
      Vector<Node> vector0 = new Vector<Node>(57);
      node0.isFromExterns();
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node.newString(37, "-");
      node0.getString();
      Node node1 = new Node(38);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(43);
      node0.children();
      node0.isDebugger();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node0.isAnd();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = node0.cloneNode();
      node0.setLineno(154);
      node0.isFunction();
      node1.isCatch();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isVarArgs();
      node0.isGetterDef();
      node0.isLocalResultCall();
      Node node1 = Node.newString(2, ".equivalentTo(");
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEquals(node0);
      node2.getAncestors();
      Node node3 = node0.copyInformationFromForTree(node1);
      node3.isCatch();
      node0.isDec();
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 8, 4095);
      node1.isEquivalentToShallow(node1);
      node0.putBooleanProp(26, true);
      node1.addChildAfter(node1, node0);
      node1.isGetElem();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      node0.isDefaultCase();
      node0.isScript();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(12);
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = Node.newString(54, "com.google.javascript.rhino.Node$NumberNode");
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = Node.newNumber((-147.0));
      node2.isAssign();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(36);
      Node node1 = Node.newNumber((double) 1, 46, 3433);
      node1.isQualifiedName();
      Node node2 = new Node((-106), node1, 100, 0);
      Node node3 = new Node(0, 29, 4);
      node3.getBooleanProp(31);
      node0.isRegExp();
      Node node4 = new Node(3, node2, node3);
      node4.addSuppression("05^=Ah}V.Ulk{>6az#L");
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("-", 13, 103);
      node0.isFromExterns();
      node0.isFromExterns();
      node0.setSourceFileForTesting("&");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node node1 = new Node(41, node0, node0, node0);
      node0.isNot();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = new Node(2, node0);
      Node node2 = node0.clonePropsFrom(node1);
      Node.newString(2060, "", 79, (-1739));
      node1.isTypeOf();
      node1.isGetElem();
      node2.isName();
      node2.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("OLg>x", 126, 126);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1500);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isIn();
      node1.isQualifiedName();
      node1.isWith();
      node1.putBooleanProp(51, true);
      node0.getBooleanProp(38);
      node0.isCase();
      node0.isBlock();
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1122
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString(103, "-", 103, 103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.setSourceFileForTesting("-");
      node0.getSourceOffset();
      Node node1 = Node.newString("-", 114, 2);
      node1.getString();
      Node.newString("-");
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(32);
      Node node1 = new Node(2553, 32, 46);
      node1.removeProp(31);
      node0.isInc();
      node1.isSwitch();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1994));
      node0.setSourceFileForTesting("3@-N)QDi7");
      Node node1 = new Node(147, node0, 12, 48);
      node1.getQualifiedName();
      Node node2 = new Node((-1994), node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node2.isVar();
      node3.isOr();
      node3.getQualifiedName();
      node3.isReturn();
      node0.siblings();
      node0.getJSDocInfo();
      node1.toStringTree();
      node3.isDelProp();
      node2.getIntProp(57);
      node2.checkTreeEquals(node3);
      node0.isNew();
      node2.isUnscopedQualifiedName();
      node2.isFunction();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.getType();
      node2.isLabelName();
      node3.isComma();
      node0.isVar();
      Node.newNumber((double) 37, (-1994), (-396));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 580, 580);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node1.isObjectLit();
      node0.setVarArgs(false);
      node0.isScript();
      Node node4 = Node.newString("com.google.common.collect.Iterables");
      node4.isBreak();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.setSideEffectFlags(119);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newNumber((-147.0));
      Node node1 = new Node(49, node0, 97, 4095);
      node1.removeChild(node0);
      node1.isComma();
      node1.isEquivalentTo(node0, false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setOptionalArg(true);
      Node node2 = new Node(52, node0, 53, (-1413));
      Node node3 = node2.srcrefTree(node0);
      node3.isEquivalentToTyped(node2);
      node3.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isFromExterns();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      node1.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      Node node2 = new Node(125, node1, 46, 198);
      node0.isOptionalArg();
      node0.putBooleanProp(0, false);
      node2.isCast();
      node0.getIntProp(43);
      node1.isTypeOf();
      node2.isBreak();
      node2.isLabel();
      node1.getParent();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber((-147.0));
      Node node1 = new Node(49, node0, 97, 4095);
      node1.removeChild(node0);
      node1.isComma();
      node1.isObjectLit();
      node0.setVarArgs(false);
      node1.isScript();
      node0.isBreak();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(2506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(0, 1047, (-517));
      node0.isReturn();
      Node node1 = node0.cloneTree();
      node1.cloneNode();
      node0.putIntProp((-517), (-1337));
      node0.isScript();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("", (-1813), 2864);
      node0.isFromExterns();
      node0.isFromExterns();
      node0.setSourceFileForTesting("");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node node1 = new Node((-776), node0, node0, node0);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1994));
      node0.setSourceFileForTesting("3@-N)QDi7");
      Node node1 = new Node(147, node0, 12, 48);
      node1.getQualifiedName();
      Node node2 = new Node((-1994), node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node2.isVar();
      node3.isOr();
      node3.getQualifiedName();
      node3.isReturn();
      node0.siblings();
      node0.getJSDocInfo();
      node1.toStringTree();
      node3.isDelProp();
      node0.getQualifiedName();
      node2.getIntProp(57);
      node2.checkTreeEquals(node3);
      node0.isNew();
      node2.isUnscopedQualifiedName();
      node2.isFunction();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.getType();
      node2.isLabelName();
      node0.isEquivalentToTyped(node2);
      // Undeclared exception!
      try { 
        node2.setString("QMARK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1994
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-512));
      node0.isReturn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      jSTypeArray0[0] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.copyInformationFromForTree(node1);
      Node node2 = node0.cloneTree();
      node0.children();
      node2.getIndexOfChild(node0);
      Node node3 = new Node(43, node2, node2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node_NodeMismatch0.equals(node1);
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node1.isGetProp();
      node1.isComma();
      node1.putIntProp(1, 0);
      node1.isIf();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = new Node(2553, 32, 46);
      node1.removeProp(31);
      node0.isInc();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 97, 4095);
      Node node2 = node1.srcrefTree(node1);
      node2.getBooleanProp(2);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString(": ");
      Node node1 = Node.newString("-", 30, 16);
      node1.setIsSyntheticBlock(true);
      node1.checkTreeEquals(node0);
      node0.getDirectives();
      node1.srcrefTree(node0);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-512));
      node0.isReturn();
      Node node1 = Node.newString(0, "com.google.common.collect.AbstractMapBasedMultimap$KeySet");
      node1.getString();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.clonePropsFrom(node0);
      Node node2 = Node.newString(4095, "pS9<b|q0oD,", 152, 4095);
      node0.clonePropsFrom(node2);
      node1.isTypeOf();
      node2.getBooleanProp(12);
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isContinue();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString(115, "Of", 21, 21);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.getBooleanProp(30);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isWith();
      node0.putBooleanProp(103, false);
      node0.getBooleanProp(30);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node already has a parent.");
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isQualifiedName();
      node2.isWith();
      node0.putBooleanProp(105, false);
      node1.getBooleanProp(518);
      // Undeclared exception!
      try { 
        node1.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isGetProp();
      node0.isComma();
      node0.putBooleanProp(126, false);
      node0.isCast();
      node0.getIntProp(111);
      node0.isTypeOf();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isScript();
      node0.isBreak();
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.getBooleanProp(30);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isDelProp();
      node1.isBlock();
      Node node2 = new Node((-23), node0);
      node2.isBreak();
      node0.isLabel();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isDebugger();
      node0.isDefaultCase();
      node0.isWith();
      Node node1 = new Node(16, node0, node0, node0, node0, 2, 51);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.removeChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("-", 13, 103);
      node0.isFromExterns();
      node0.siblings();
      node0.isFromExterns();
      node0.setSourceFileForTesting("-");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setOptionalArg(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = Node.newString(37, "-");
      node0.getString();
      Node node2 = new Node(155, 0, 16);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("'_E", false);
      simpleSourceFile0.getLineOffset(154);
      node2.setStaticSourceFile(simpleSourceFile0);
      node0.removeProp(15);
      node2.isInc();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node((-2494), 198, 198);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(1911, node0, node0, (-1808), 39);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isIn();
      node2.isQualifiedName();
      node1.isWith();
      node2.putBooleanProp(3418, true);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ImmutableList.of(node0, node0, node0, node2, node3, node1, node3, node1, node1, node0, node0);
      node3.removeProp(51);
      node1.isFromExterns();
      node1.isCast();
      Node.newString((-1), "Object#Key");
      node3.putIntProp(26, 1076);
      node3.isRegExp();
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 306654252);
      node0.isNot();
      Node node1 = new Node((-2053), node0, node0, node0, node0, 37, 42);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.removeChildren();
      node1.isNE();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node2, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(152);
      Node node1 = new Node(130, node0);
      node1.getInputId();
      node1.cloneTree();
      node1.isExprResult();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.isAnd();
      node0.isVarArgs();
      Node node1 = Node.newString("The new child node has siblings.");
      node1.setLineno(64);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(2397, "8f6bzn8DF", 97, (-1179));
      Node node1 = Node.newString("8f6bzn8DF", 1266, 16);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)55;
      Node node2 = Node.newString("8f6bzn8DF");
      Node.newString(832, "8f6bzn8DF");
      node2.getJSDocInfo();
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(97, node0, node0, node1);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node0);
      node4.isOnlyModifiesArgumentsCall();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isDebugger();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.isAnd();
      node0.isVarArgs();
      Node node1 = node0.cloneNode();
      node1.setLineno(30);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 575);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node1.isEquivalentTo(node2, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node2.isContinue();
      node2.copyInformationFrom(node0);
      node3.hasChildren();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node0.isEquivalentToShallow(node0);
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.isNull();
      node1.isWith();
      node0.putBooleanProp(105, false);
      node0.getBooleanProp(518);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node2.isWhile();
      node1.getQualifiedName();
      node0.isFalse();
      Node.newNumber((double) 38);
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentToShallow(node1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isNull();
      node2.isWith();
      node0.putBooleanProp(2, false);
      node1.getBooleanProp(518);
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      node3.isWhile();
      node2.getQualifiedName();
      node2.isCatch();
      node0.isDec();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(2341.5, 2908, 83);
      Node node1 = new Node(2908, node0, node0, (-198), 1023);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("2Gc1x#siX4DzYz^", true);
      simpleSourceFile0.getLineOffset(79);
      simpleSourceFile0.getLineOffset(15);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.getDirectives();
      node0.children();
      node1.isFromExterns();
      node0.isVar();
      node0.isParamList();
      Node.newString("");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 575);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node1.isEquivalentTo(node2, false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.isComma();
      node0.setOptionalArg(false);
      node3.getIntProp(0);
      node3.isSyntheticBlock();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isFromExterns();
      node0.children();
      node0.isFromExterns();
      node0.getBooleanProp(30);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) arrayList0);
      node1.isDelProp();
      node0.isBlock();
      node0.useSourceInfoFromForTree(node1);
      node1.isEmpty();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(1908, 31, 152);
      Node node1 = new Node(152, node0);
      node1.getInputId();
      Node node2 = node1.cloneTree();
      node2.isExprResult();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isIf();
      node0.getQualifiedName();
      node1.isNew();
      node0.isScript();
      node2.isName();
      node1.isQualifiedName();
      Node node3 = new Node(457, node0, node2, node2, 53, 43);
      node3.setSourceFileForTesting("\"");
      node3.isFromExterns();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node1 = new Node(103, node0, 154, (-1));
      node0.addChildrenToBack(node1);
      node1.isDo();
      node1.getFirstChild();
      node0.wasEmptyNode();
      Node node2 = null;
      try {
        node2 = new Node(54, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node0.isEquivalentToShallow(node0);
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.isNull();
      node0.putBooleanProp(105, false);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node2.isWhile();
      node1.getQualifiedName();
      node0.isFalse();
      node0.isArrayLit();
      node0.isOnlyModifiesArgumentsCall();
      Node node3 = Node.newNumber((-193.573058813554), 8, (-1447));
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isFromExterns();
      node0.children();
      node0.isTrue();
      node0.getBooleanProp(30);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isDelProp();
      node1.isBlock();
      node1.isDebugger();
      node0.useSourceInfoFromForTree(node1);
      Node node2 = Node.newString(37, "Object#Key", 4095, 103);
      node2.isDelProp();
      Node.newNumber((-397.738463296341));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.newNumber((double) 2, 102, 2157);
      node0.removeProp((-1241));
      node0.isCall();
      node0.isOptionalArg();
      node0.setLineno((-1241));
      node0.children();
      Node node1 = new Node(11, node0, node0, node0, node0);
      Node node2 = node0.getParent();
      jSTypeRegistry0.identifyNonNullableName("com.google.javascript.rhino.Node$SideEffectFlags");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.putProp(120, node0);
      node1.copyInformationFromForTree(node2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node2.isAssign();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 16, 4095, 47);
      node1.getJSDocInfo();
      node0.getBooleanProp(38);
      node1.addChildToFront(node0);
      node0.putBooleanProp((-1286), true);
      node0.getIntProp(1073741823);
      node1.isTypeOf();
      node1.isScript();
      node1.isBreak();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getBooleanProp(50);
      node0.isRegExp();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isInstanceOf();
      node1.isDebugger();
      node2.isComma();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString(8, "Object#Key");
      node2.hasChildren();
      node2.isWith();
      node0.putBooleanProp(105, false);
      node1.getBooleanProp(518);
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      node3.isWhile();
      node2.getQualifiedName();
      node1.isFalse();
      Node.newNumber((double) 38);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.getBooleanProp((-397));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isIn();
      Node node3 = new Node(2157, 4095, 43);
      node3.removeProp(2512);
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.isBreak();
      node4.isLabel();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        node3.appendStringTree(mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2157
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.hasAnyTemplateTypes();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) enumType0;
      node0.isNot();
      node0.isComma();
      node0.setOptionalArg(true);
      Node.newString(1, "Named type with empty name component");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 3.06654252E8 470060 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000340] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "0123456789ABCDEF", "0123456789ABCDEF", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      modificationVisitor0.caseTemplateType((TemplateType) null);
      jSType0.testForEquality((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isThrow();
      node0.isFunction();
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getSideEffectFlags();
      Node node1 = node0.getAncestor(0);
      node0.isContinue();
      node0.isFromExterns();
      node0.srcrefTree(node1);
      Node node2 = Node.newNumber((double) 37, 46, 37);
      jSTypeRegistry0.createUnionType(jSTypeArray0);
      node2.getLength();
      Node node3 = node0.cloneTree();
      node3.removeChildren();
      Node node4 = Node.newString("Not declared as a type name");
      node4.setType(2885);
      node3.removeChildren();
      node0.isVoid();
      node1.addChildToBack(node4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.hasChildren();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isEmpty();
      node0.isInstanceOf();
      node0.setLength((-939));
      node0.setCharno((-939));
      Node node1 = new Node(38, node0, node0, node0, node0, 31, 22);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.toStringTree();
      Node node3 = Node.newString(39, "");
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getBooleanProp((-2426));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isDelProp();
      node1.isBlock();
      node1.checkTreeEquals(node0);
      node1.isEmpty();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13", 10, 10);
      Node node1 = new Node(87, node0, node0, node0, node0, 30, 1023);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node0.setSourceFileForTesting("com.google.common.base.CharMatcher$13");
      node0.putBooleanProp(40, true);
      node2.getBooleanProp(301);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isEquivalentTo(node2, false, false, false);
      node0.getQualifiedName();
      node1.isNew();
      node0.isScript();
      node2.isName();
      node1.toString(false, false, false);
      node1.isTypeOf();
      node0.getBooleanProp((-2810));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(335, ".", (-3461), (-4152));
      node0.checkTreeEqualsImpl(node0);
      node0.isGetElem();
      node0.getDirectives();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node0.isSetterDef();
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = node1.srcref(node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.getInputId();
      node1.addSuppression(".");
      node1.hasChildren();
      node0.isScript();
      node1.isEmpty();
      node0.isInstanceOf();
      node1.setLength(17);
      node0.setCharno(39);
      Node node3 = node1.copyInformationFromForTree(node2);
      Node.newString(2, "empty_block");
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13", 10, 10);
      Node node1 = new Node(87, node0, node0, node0, node0, 30, 1023);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.checkTreeEquals(node2);
      node2.getAncestors();
      node0.copyInformationFromForTree(node1);
      node1.isCatch();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newNumber((double) 544);
      node0.getDirectives();
      node0.setDouble(544);
      node0.toStringTree();
      node0.isInstanceOf();
      Node node1 = new Node(38, node0, node0, 1039, 29);
      node1.isGetProp();
      node0.isComma();
      node0.isTypeOf();
      node0.isScript();
      node1.isBreak();
      node1.toStringTree();
      node1.isDebugger();
      node1.useSourceInfoFromForTree(node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.addSuppression("KNzC?z:Wh@");
      node1.isBlock();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-147.0));
      Node node1 = new Node(49, node0, 97, 4095);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.checkTreeEqualsImpl(node1);
      node1.isHook();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newNumber((double) 544);
      node0.getDirectives();
      node0.setDouble(544);
      node0.toStringTree();
      node0.isInstanceOf();
      Node node1 = new Node(38, node0, node0, 1039, 29);
      node1.isGetProp();
      node0.isComma();
      node1.putIntProp(0, 2);
      node0.isIf();
      node0.isCatch();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node has siblings.");
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isGetProp();
      node0.isComma();
      node0.isTry();
      Node node1 = new Node(1535, node0, node0, node0);
      node1.setOptionalArg(false);
      node0.isString();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = node0.cloneNode();
      node2.setLineno(57);
      Node node3 = node0.cloneTree();
      Node.newNumber((double) 50, 43, 4034);
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      HashSet<Node> hashSet0 = new HashSet<Node>();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("z?Edu\"Lq(vRg3PS^pn", node0, jSType0);
      enumType0.hasAnyTemplateTypes();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(42, (-1280), 55);
      node2.removeProp(8);
      node1.isInc();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.isTrue();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node((-2607), 57, 57);
      node1.isReturn();
      Node node2 = node1.cloneTree();
      node2.getIndexOfChild(node1);
      Node node3 = new Node(57, node0, node2);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(131072);
      Node node1 = Node.newString(32, " D&$c", 113, (-1438));
      Node node2 = Node.newNumber((double) 52, (-523), 2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = Node.newString("Object#Element");
      node3.putIntProp(51, 12);
      node2.mayMutateArguments();
      node3.isIf();
      node3.isCatch();
      Node node4 = Node.newString(" D&$c", 50, 49);
      Node node5 = new Node(2137, node2, node1, node2, node1);
      Node node6 = new Node(57, node0, node5, node4);
      node4.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node1.setSourceFileForTesting("Number");
      node1.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isLabel();
      node0.setOptionalArg(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node2 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.putIntProp(2, 3202);
      node2.isIf();
      node2.isCatch();
      Node node3 = Node.newString("KFEo0G{jJuqk'$=Ju", 43, (-785));
      node3.getStaticSourceFile();
      Node node4 = new Node(1, node2, node1, node3, node3);
      Node node5 = Node.newNumber((-24.481193), 30, 33);
      Node node6 = new Node((-850), node0, node0, node5);
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-536));
      Node node1 = Node.newString((-5491), "oXP:$,E6j&)Q:Nhh2ns");
      Node node2 = new Node(419949, node0);
      node1.copyInformationFromForTree(node0);
      node0.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("", "Object#Key", 26, 29);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeArray0[1] = jSType0;
      jSType0.isObject();
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSType1.isNullable();
      jSTypeArray0[6] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSTypeArray0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChildCount();
      immutableList0.indexOf(jSTypeArray0[1]);
      jSType0.matchesStringContext();
      node0.getJSType();
      node0.isIn();
      InputId inputId0 = new InputId(" [p%,f0mdcf9K' E@A");
      node0.setInputId(inputId0);
      node0.removeProp(0);
      ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      node0.setLineno(1);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isName();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      simpleErrorReporter0.error(": ", "PWD`JTAUuArE9p8gXwe", (-666), 4095);
      node1.setSourceFileForTesting("com.google.javascript.rhinoSourcePosition");
      Node node2 = new Node(125, node1, 46, 198);
      Node node3 = new Node(12, 57, 48);
      node0.isOptionalArg();
      node3.mayMutateArguments();
      node0.putBooleanProp(52, false);
      node3.isCast();
      node0.getIntProp(43);
      Node node4 = node0.cloneNode();
      node4.setLineno(40);
      node3.cloneTree();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString(13, "-", 13, 13);
      Node node1 = Node.newString(">K|8DEIv");
      Node node2 = new Node(51);
      node2.setVarArgs(true);
      node0.isCase();
      node2.isThis();
      node2.isNew();
      node0.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParameters((List<JSType>) arrayList0);
      node1.isDelProp();
      node0.isBlock();
      node2.isEmpty();
      node1.checkTreeEquals(node2);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(335, ".", (-3461), (-4152));
      Node node1 = new Node(1052);
      node0.checkTreeEqualsImpl(node1);
      node0.isGetElem();
      node0.getDirectives();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node0.isSetterDef();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = node2.srcref(node1);
      node1.isOnlyModifiesArgumentsCall();
      node1.getInputId();
      node2.addSuppression(".");
      node2.hasChildren();
      node1.isScript();
      node1.isEmpty();
      node0.isInstanceOf();
      node2.setLength(38);
      node0.setCharno(39);
      Node node4 = node2.copyInformationFromForTree(node3);
      Node.newString(2, "empty_block");
      // Undeclared exception!
      try { 
        node4.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 97, 4095);
      Node node2 = new Node(53, 31, 1);
      node2.isGetElem();
      node0.putBooleanProp(26, true);
      node1.addChildAfter(node2, node0);
      node1.isThrow();
      node0.isFunction();
      node0.getChildAtIndex((-2685));
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 16, 4095, 47);
      node1.getJSDocInfo();
      node0.getBooleanProp((-390));
      node0.putBooleanProp((-1286), true);
      node1.isComma();
      node1.putIntProp(47, (-2685));
      node0.isIf();
      Node node2 = Node.newString(3968, "-", 416, 83);
      node2.isCatch();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1504.647183656916);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(46, node0, 795, 38);
      node1.type = 4;
      Node node2 = new Node(198, 175, (-363));
      node1.getBooleanProp(83);
      node2.isOptionalArg();
      node2.putBooleanProp(39, false);
      node2.isCast();
      node0.isTypeOf();
      node2.isScript();
      node2.isBreak();
      node0.toStringTree();
      node0.isObjectLit();
      node1.isScript();
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "Object#Element", "Object#Element", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      modificationVisitor0.caseTemplateType((TemplateType) null);
      jSType0.testForEquality((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newString("Named type with empty name component", 53, 56);
      node0.useSourceInfoFromForTree(node1);
      node1.addSuppression("Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(120, 2264, (-478));
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      node1.isFunction();
      node1.isArrayLit();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      InputId inputId0 = new InputId("");
      inputId0.toString();
      Node node0 = Node.newNumber(759.25);
      Node node1 = new Node(47, node0, node0, node0, node0, (-666), 125);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.removeChildren();
      node0.isNE();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.getBooleanProp((-397));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node2.getIntProp(40);
      node1.isDelProp();
      node0.toStringTree();
      node1.isDebugger();
      node1.useSourceInfoFromForTree(node0);
      node0.addSuppression("NUMBER 0.0\n");
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(42, node0);
      node1.srcrefTree(node0);
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(236, (-4987), 41);
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node((-400), node0, node0);
      node1.isInstanceOf();
      node1.isGetProp();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("N", 1049, 11);
      node0.siblings();
      node0.isFromExterns();
      node0.isComma();
      Node node1 = Node.newString(46, "N");
      node1.getString();
      node1.isTypeOf();
      node1.getBooleanProp(124);
      node1.checkTreeEquals(node0);
      Node.extractLineno((-1885));
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newNumber((double) 2, 102, 2157);
      node0.removeProp((-1241));
      node0.isCall();
      node0.isOptionalArg();
      node0.setLineno((-1241));
      node0.children();
      Node node2 = new Node(11, node0, node0, node0, node0);
      Node node3 = node0.getParent();
      jSTypeRegistry0.identifyNonNullableName("com.google.javascript.rhino.Node$SideEffectFlags");
      node2.putProp(120, node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node3.isAssign();
      node1.isFor();
      Node node4 = node1.clonePropsFrom(node2);
      HashSet<String> hashSet0 = new HashSet<String>();
      node4.setDirectives(hashSet0);
      node1.isQuotedString();
      node3.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 120
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.getBooleanProp(32);
      Node node1 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.putProp(42, node2);
      node1.toString();
      node1.isThrow();
      node0.isFunction();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zg`");
      Node node0 = Node.newString("zg`");
      Node node1 = new Node(4);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(2561, node0, node0, node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isCast();
      node0.isParamList();
      node3.addChildrenToFront(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.removeChildren();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node2.isNull();
      node1.removeProp(31);
      node2.getBooleanProp(152);
      node0.getString();
      node3.isAssign();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString(13, "-", 13, 13);
      Node node1 = Node.newString(">K|8DEIv");
      Node node2 = new Node(51);
      node2.setVarArgs(true);
      node0.isCase();
      node2.isThis();
      node1.isNoSideEffectsCall();
      Node node3 = new Node((-1774), node0, node2, node0, node1, (-992), (-1279));
      node3.useSourceInfoIfMissingFrom(node1);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(42, node0);
      node0.srcrefTree(node1);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(4095, node0, 40, 4095);
      node0.addChildrenToBack(node1);
      node1.isDo();
      node0.wasEmptyNode();
      Node node2 = null;
      try {
        node2 = new Node((-2638), node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString("-", 13, 103);
      node0.isFromExterns();
      node0.isFromExterns();
      node0.setSourceFileForTesting("-");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node node1 = new Node(41, node0, node0, node0);
      node1.isQualifiedName();
      node0.isFalse();
      Node node2 = Node.newNumber(0.0);
      node1.addChildrenToBack(node2);
      node0.hasOneChild();
      node1.useSourceInfoFrom(node0);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node((-5095), 544, (-5095));
      node0.setWasEmptyNode(true);
      node0.wasEmptyNode();
      node0.isNew();
      node0.wasEmptyNode();
      Node node1 = Node.newString("", (-1039), 1836);
      node0.checkTreeEqualsImpl(node1);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(236, (-4987), 41);
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node((-400), node0, node0);
      node1.getIntProp((-3506));
      Node node2 = node1.getLastSibling();
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1504.647183656916);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(46, node0, 795, 38);
      node1.type = 4;
      Node node2 = new Node(198, 175, (-363));
      node2.isOptionalArg();
      node2.putBooleanProp(39, false);
      node2.isCast();
      node0.isTypeOf();
      node2.isScript();
      node2.isRegExp();
      Node node3 = Node.newString(30, "");
      node3.isSyntheticBlock();
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node1.isOr();
      node1.srcrefTree(node0);
      node1.isScript();
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = node0.cloneTree();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      node0.getStaticSourceFile();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getIndexOfChild(node0);
      Node node2 = node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isFromExterns();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      simpleErrorReporter0.error(": ", "PWD`JTAUuArE9p8gXwe", (-666), 4095);
      node1.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      Node node2 = new Node(125, node1, 46, 198);
      Node node3 = new Node(12, 57, 48);
      node0.isOptionalArg();
      node3.mayMutateArguments();
      node0.putBooleanProp(52, false);
      node3.isCast();
      node0.getIntProp(43);
      node1.isTypeOf();
      node2.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFrom(node2);
      node3.isOr();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      InputId inputId0 = new InputId("");
      inputId0.toString();
      Node node0 = Node.newNumber(759.25);
      Node node1 = new Node(47, node0, node0, node0, node0, (-666), 125);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEquals(node0);
      node1.getAncestors();
      node1.copyInformationFromForTree(node2);
      node0.isParamList();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.getBooleanProp((-397));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newString((-1721), "i/LSIk 8$eC(");
      Node node3 = new Node(22, node2);
      Node node4 = node1.copyInformationFromForTree(node2);
      node0.useSourceInfoFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.addChildToBack(node0);
      Node node2 = node1.cloneTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(false);
      node2.getJsDocBuilderForNode();
      node0.checkTreeEqualsImpl(node1);
      node1.isOnlyModifiesThisCall();
      Node node3 = new Node(1);
      node0.setLineno(103);
      node0.getDirectives();
      node2.isNew();
      Node node4 = Node.newNumber((double) 36);
      node3.addChildrenToBack(node4);
      node2.hasOneChild();
      node2.useSourceInfoFrom(node1);
      Node node5 = null;
      try {
        node5 = new Node(966, node4, node1, node4, 42, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(31, node0, node0, node0, node0, 1, 30);
      node1.setSourceFileForTesting("fx(");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.isComma();
      node0.setOptionalArg(false);
      node1.srcref(node0);
      Node node2 = Node.newString(57, "fx(");
      Node node3 = new Node(32, node1, node2, node1);
      node3.isStringKey();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 56
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getSideEffectFlags();
      Node node1 = node0.getAncestor(0);
      node0.isContinue();
      node0.isFromExterns();
      node0.srcrefTree(node1);
      Node node2 = Node.newNumber((double) 37, 46, 37);
      jSTypeRegistry0.createUnionType(jSTypeArray0);
      node2.getLength();
      Node node3 = node0.cloneTree();
      node3.removeChildren();
      Node node4 = Node.newString("Not declared as a type name");
      node4.setType(2885);
      node3.removeChildren();
      node0.isVoid();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isNull();
      node2.isWith();
      node0.putBooleanProp(105, false);
      node1.getBooleanProp(518);
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      node3.isWhile();
      node2.getQualifiedName();
      node1.isFalse();
      Node node4 = Node.newNumber((double) 38);
      node4.addChildrenToBack(node3);
      node1.hasOneChild();
      Node node5 = node4.useSourceInfoFrom(node0);
      node5.useSourceInfoIfMissingFrom(node1);
      node0.getIntProp(4095);
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.setType(52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "_/b&eOyI7", "Unknown class name", 795, 125);
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = Node.newNumber((double) 57, 2, 57);
      Node node4 = node1.copyInformationFromForTree(node3);
      node1.isNull();
      node1.isWith();
      node3.putBooleanProp((-2651), true);
      Node node5 = Node.newString(1, "Named type with empty name component");
      node5.getBooleanProp(50);
      Node node6 = node0.useSourceInfoIfMissingFrom(node4);
      Node node7 = new Node((-519), node3, node5, node2, node4, 2, (-418));
      node7.isWhile();
      node5.getQualifiedName();
      node1.isFalse();
      Node.newNumber((double) 16);
      node5.addChildrenToBack(node0);
      node6.hasOneChild();
      node4.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newString("The new child node already has a parent.", 154, 154);
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
      node0.isVarArgs();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString((-943), "");
      node0.getBooleanProp((-763));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(0, node0, node0, node0, node0, 38, 43);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "-";
      Node node0 = Node.newString("-", 13, 103);
      node0.isFromExterns();
      node0.siblings();
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      InputId inputId0 = new InputId("");
      inputId0.toString();
      Node node0 = Node.newNumber(759.25);
      Node node1 = new Node(47, node0, node0, node0, node0, (-666), 125);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEquals(node0);
      node1.getAncestors();
      Node node3 = node1.copyInformationFromForTree(node2);
      node1.isCatch();
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newNumber((double) 2, 102, 2157);
      node0.removeProp((-1241));
      node0.isCall();
      node0.isOptionalArg();
      node0.setLineno((-1241));
      node0.children();
      Node node2 = new Node(11, node0, node0, node0, node0);
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      Node node4 = node0.getParent();
      jSTypeRegistry0.identifyNonNullableName("com.google.javascript.rhino.Node$SideEffectFlags");
      node4.checkTreeEquals(node1);
      node4.isDelProp();
      node2.putProp(120, node0);
      node4.isAssign();
      node1.isFor();
      Node node5 = node1.clonePropsFrom(node2);
      HashSet<String> hashSet0 = new HashSet<String>();
      node5.setDirectives(hashSet0);
      node1.isQuotedString();
      node4.removeFirstChild();
      node0.checkTreeEquals(node3);
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node node1 = jSTypeRegistry2.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(32768, node0, node0, node0, node1, (-4341), 52);
      node2.isFunction();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.addChildToBack(node0);
      Node node2 = node1.cloneTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(false);
      node2.getJsDocBuilderForNode();
      node0.checkTreeEqualsImpl(node1);
      Node node3 = Node.newString(";m_<iG>ws<)]wh", 54, 32);
      Node node4 = new Node(37, node1, node2, node3, node1, 12, 36);
      node3.isOnlyModifiesThisCall();
      Node node5 = new Node(1);
      node5.checkTreeEqualsImpl(node3);
      node0.setLineno(103);
      node3.getDirectives();
      node5.isInstanceOf();
      node5.isGetProp();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setThrows();
      Node node3 = Node.newNumber((double) 4, 30, 4095);
      Node node4 = new Node(46, node3, 1931, 40);
      node4.hasChild(node0);
      node0.getQualifiedName();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node6 = null;
      try {
        node6 = new Node(115, node3, node2, node1, node5, 15, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 575);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node1.isEquivalentTo(node2, false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.isComma();
      node0.setOptionalArg(true);
      node3.isQualifiedName();
      node1.cloneNode();
      Node.newString(591, "");
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(2965.9);
      Node node1 = new Node(683, node0, 52, 30);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 30);
      node1.addChildrenToBack(node2);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Key");
      node0.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      node0.getSourceFileName();
      node0.isTrue();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString((-646), "", (-646), (-1));
      Node node1 = Node.newString("");
      node0.setVarArgs(false);
      Node node2 = new Node((-1367), node1);
      node2.isThis();
      node1.isNoSideEffectsCall();
      node0.isCast();
      node2.isVoid();
      node1.isString();
      node0.putBooleanProp(16, true);
      Node node3 = Node.newString("u71", 306654252, 46);
      node3.isCast();
      node0.getIntProp((-1908));
      node2.isTypeOf();
      node0.isScript();
      node3.isBreak();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = 126;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0);
      node0.isIn();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getType();
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got LABEL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("", "Object#Key", 26, 29);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeArray0[1] = jSType0;
      jSType0.isObject();
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSType1.isNullable();
      jSTypeArray0[6] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSTypeArray0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChildCount();
      immutableList0.indexOf(jSTypeArray0[1]);
      jSType0.matchesStringContext();
      node0.getJSType();
      node0.isIn();
      InputId inputId0 = new InputId(" [p%,f0mdcf9K' E@A");
      node0.setInputId(inputId0);
      node0.removeProp(0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.isBreak();
      node0.isLabel();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      node0.appendStringTree(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node node3 = Node.newNumber(0.0, 36, 32);
      node3.hasChild(node1);
      node2.getQualifiedName();
      Node node4 = new Node(3326, node0, node1, node0, node3, 117, 1635);
      node4.isLabel();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "f";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f");
      Node node0 = new Node(1035);
      node0.isName();
      node0.getBooleanProp(1035);
      node0.setLineno(1035);
      node0.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isDefaultCase();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      node0.isAnd();
      node0.getStaticSourceFile();
      node0.isBlock();
      node0.getDirectives();
      node0.cloneNode();
      Node.newString(83, "Object#Key");
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.getJSDocInfo();
      node0.getBooleanProp((-397));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.isVarArgs();
      Node node2 = node1.srcrefTree(node0);
      node2.putIntProp(85, 36);
      node1.isIf();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.addChildToBack(node0);
      Node node2 = node1.cloneTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(false);
      node2.getJsDocBuilderForNode();
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isDelProp();
      node2.isBlock();
      node3.isEmpty();
      node1.checkTreeEquals(node3);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(592, 2217, 592);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node1 = new Node(43, node0);
      node1.removeProp(57);
      node1.setType(194);
      Node node2 = node1.cloneNode();
      node0.isDebugger();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>(117);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.getBooleanProp(132);
      Node node1 = new Node((-2136), node0, node0, node0, 47, 38);
      Node node2 = new Node(16, node1, node1);
      node2.getProp(0);
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      node1.isThis();
      node1.isNoSideEffectsCall();
      node0.isNoSideEffectsCall();
      node0.isObjectLit();
      node0.isVoid();
      node0.isTry();
      node0.setOptionalArg(false);
      Node node2 = new Node(8, node0, node1);
      node2.getSourceFileName();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = node1.cloneNode();
      node0.setLineno((-220));
      node3.cloneTree();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1058), "", (-1058), (-1058));
      Node node1 = Node.newString(">K|8DEIv");
      node1.setVarArgs(false);
      node1.isCase();
      node0.getJSDocInfo();
      Node node2 = new Node(32, node1, 12, (-4390));
      node2.getBooleanProp(102);
      node2.isRegExp();
      node0.isAdd();
      node1.mayMutateArguments();
      node0.getString();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString((-646), "", (-646), (-1));
      Node node1 = Node.newString("");
      node0.setVarArgs(false);
      Node node2 = new Node((-1367), node1);
      node2.isThis();
      node1.isNoSideEffectsCall();
      node0.isNoSideEffectsCall();
      node1.isObjectLit();
      node2.isVoid();
      node1.isString();
      node1.getSourceFileName();
      node0.isDelProp();
      node1.isTrue();
      node2.isOr();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("&:;8/#_FmKIMl,");
      node0.toString();
      node0.isThrow();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isFunction();
      node0.getString();
      node0.toString(false, false, false);
      node0.mayMutateArguments();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[4];
      Node node0 = new Node(254);
      nodeArray0[0] = node0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = null;
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, nodeArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.addChildToBack(node0);
      Node node2 = node1.cloneTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(false);
      node2.getJsDocBuilderForNode();
      node0.checkTreeEqualsImpl(node1);
      Node node3 = Node.newString(";m_<iG>ws<)]wh", 54, 32);
      Node node4 = new Node(37, node1, node2, node3, node1, 12, 36);
      node3.isOnlyModifiesThisCall();
      Node node5 = new Node(1);
      node5.srcrefTree(node2);
      node5.checkTreeEqualsImpl(node3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setLineno(103);
      node3.getDirectives();
      node4.isNew();
      Node node6 = null;
      try {
        node6 = new Node(55, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString((-943), "");
      node0.getBooleanProp((-763));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newString(51, "Node tree inequality:\nTree1:\n");
      node0.addSuppression("L");
      node0.getProp(48);
      node1.getProp(43);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      Node node1 = new Node(50, node0, node0, node0, 57, 30);
      Node node2 = new Node(36, node1, node1, node1, 70, 46);
      // Undeclared exception!
      try { 
        node2.setDouble(685.7953536871155);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isWith();
      node0.putBooleanProp(20, false);
      node0.useSourceInfoIfMissingFrom(node0);
      Node node1 = new Node(55, node0);
      node1.isSetterDef();
      node0.getQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = Node.newNumber((double) 39);
      node0.addChildrenToBack(node2);
      node0.hasOneChild();
      node0.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      node0.putBooleanProp(105, false);
      node1.getBooleanProp(518);
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      node3.isCase();
      node2.getQualifiedName();
      node1.isFalse();
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.addChildrenToBack(node3);
      node1.hasOneChild();
      node4.useSourceInfoFrom(node0);
      node3.toString(false, false, false);
      node3.getAncestor(105);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 97, 4095);
      Node node2 = new Node(53, 31, 1);
      node2.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      node0.putBooleanProp(26, false);
      node1.isCast();
      node1.addChildAfter(node2, node0);
      node1.cloneNode();
      node0.putIntProp(32, 95);
      node1.isScript();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1504.647183656916);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(46, node0, 795, 38);
      Node node2 = new Node(198, 175, (-363));
      node2.isOptionalArg();
      node2.putBooleanProp(39, false);
      node2.isCast();
      node0.isTypeOf();
      node2.isScript();
      node2.isBreak();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(2229);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SHNE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isFromExterns();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      node1.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      Node node2 = new Node(125, node1, 46, 198);
      Node node3 = new Node(12, 57, 48);
      node0.isOptionalArg();
      node0.putBooleanProp(52, false);
      node3.isCast();
      node0.getIntProp(43);
      node1.isTypeOf();
      node2.isScript();
      node2.isBreak();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got BLOCK
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.copyInformationFromForTree(node0);
      node1.addChildToBack(node0);
      node1.cloneTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = null;
      try {
        node2 = new Node(39, node0, 46, 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      Node node1 = Node.newNumber((double) 36);
      node0.addChildrenToBack(node1);
      node0.toStringTree();
      node0.isInstanceOf();
      node0.hasChild(node1);
      node1.isComma();
      node1.isIf();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node node3 = Node.newNumber(0.0, 36, 32);
      node3.hasChild(node1);
      node2.getQualifiedName();
      Node node4 = new Node(3326, node0, node1, node0, node3, 117, 1635);
      node2.setDouble(4082.0);
      Node node5 = Node.newString("Object#Key", 103, 55);
      node5.isWhile();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newNumber((double) 29, 696, 4);
      node0.isQualifiedName();
      node1.getQualifiedName();
      node0.isUnscopedQualifiedName();
      node0.isAssignAdd();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isFromExterns();
      node1.getDouble();
      node2.isOnlyModifiesThisCall();
      Node node3 = node1.cloneTree();
      Node node4 = node3.useSourceInfoFromForTree(node0);
      node3.getLineno();
      node4.setLength((-2707));
      Node node5 = Node.newNumber((double) 40);
      node4.isFor();
      node1.addChildrenToBack(node3);
      node5.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getSideEffectFlags();
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node1 = node0.getAncestor(0);
      node0.isContinue();
      node0.isFromExterns();
      Node node2 = Node.newNumber((double) 37, 46, 37);
      jSTypeRegistry0.createUnionType(jSTypeArray0);
      node2.getLength();
      node0.isVarArgs();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node3 = node0.cloneTree();
      node3.removeChildren();
      Node.newString("Not declared as a type name");
      node3.removeChildren();
      node0.isVoid();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-536));
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      node1.srcref(node0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getIndexOfChild(node0);
      Node node2 = node0.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 48
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      node0.putBooleanProp(105, false);
      node2.setOptionalArg(false);
      node0.isString();
      node2.getSourceFileName();
      node0.isDelProp();
      node0.isTrue();
      node2.isOr();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      Node node1 = new Node(48, node0, node0);
      node1.setSourceEncodedPosition(1414);
      node1.setCharno((-1425));
      node0.setCharno(49);
      node1.isFunction();
      node1.getChildAtIndex((-3402));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) (-45), 40, (-45));
      Node node1 = Node.newNumber((double) 4095, 57, 3229);
      node1.isEquivalentToTyped(node0);
      node0.toString(true, false, false);
      node0.isOnlyModifiesArgumentsCall();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node2 = null;
      try {
        node2 = new Node(48, nodeArray0, 154, (-5719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node0.isOr();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQuotedString();
      Node node1 = Node.newString("vj#b;y");
      node1.isFromExterns();
      node0.isTry();
      node1.setOptionalArg(false);
      node1.isString();
      node1.getSourceFileName();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList", 1475, 1475);
      node0.isFromExterns();
      node0.siblings();
      node0.isFromExterns();
      node0.setSourceFileForTesting("com.google.common.collect.ImmutableSortedAsList");
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.setOptionalArg(false);
      Node node1 = Node.newString(3558, "com.google.common.collect.ImmutableSortedAsList");
      node0.getString();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString(": ");
      Node node1 = Node.newString("-", 30, 16);
      node1.checkTreeEquals(node0);
      node0.getDirectives();
      Node node2 = node1.srcrefTree(node0);
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newString("-", 13, 103);
      node0.isFromExterns();
      Iterable<Node> iterable0 = new Vector<Node>(2, 1);
      node0.isFromExterns();
      node0.setSourceFileForTesting("-");
      node0.isNot();
      node0.isWhile();
      Node node1 = new Node(38, node0, node0);
      node1.srcrefTree(node0);
      node0.putIntProp(15, 4);
      node1.isIf();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString("", 103, 256);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(40, node0);
      node1.isFromExterns();
      node1.siblings();
      node1.isFromExterns();
      node1.setSourceFileForTesting(";d_#f");
      node1.isNot();
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      node1.isComma();
      node0.setOptionalArg(false);
      String string0 = "";
      Node.newString(2, "");
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(47, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 54, 51, 50);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = node0.cloneTree();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.getInputId();
      node1.getBooleanProp(43);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node5.isContinue();
      node4.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newNumber(82.5189);
      Node node1 = new Node(39, node0, node0);
      node0.isEquivalentTo(node1, false, true, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.copyInformationFrom(node0);
      node1.setOptionalArg(true);
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 56
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("", "Object#Key", 26, 29);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeArray0[1] = jSType0;
      jSType0.isObject();
      Node node0 = Node.newString("");
      node0.getString();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("@FRpFi858.:p_G", node0, jSTypeArray0[1]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getRootNode();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQuotedString();
      node0.isOnlyModifiesArgumentsCall();
      Node.extractCharno((-1172));
      Node node1 = new Node(2177, node0, node0, 49, 57);
      node1.isGetterDef();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = null;
      try {
        node2 = new Node(56, nodeArray0, (-163), 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      immutableList0.parallelStream();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.getType((StaticScope<JSType>) null, "{h;Xd", "Not declared as a type name", 15, (-1172));
      simpleErrorReporter0.error("Object#Key", "$H5]!*W#wa;", 219, 118);
      Node node1 = new Node(38, node0, 2, (-773));
      Node node2 = Node.newString("Named type with empty name component");
      Node node3 = node0.copyInformationFromForTree(node2);
      node3.isRegExp();
      node3.isExprResult();
      node3.isEquivalentToTyped(node0);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-45), nodeArray0);
      Node node1 = node0.cloneNode();
      node0.isVar();
      node0.getQualifiedName();
      node0.isVarArgs();
      Node node2 = node0.srcrefTree(node1);
      node0.putIntProp(3676, 39);
      node2.isIf();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      node0.getJSDocInfo();
      node0.isGetProp();
      node0.isEquivalentTo(node0, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = Node.newString((-646), "8S.!wY?^|y");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node2.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("V", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      jSTypeRegistry0.getType((StaticScope<JSType>) enumElementType0, "", "Unknown class name", 1570, (-1823));
      Node node1 = new Node(29, node0, 37, (-2544));
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isRegExp();
      node1.isEquivalentToTyped(node2);
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      Node node1 = new Node(43, node0, 55, 0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isRegExp();
      node0.isExprResult();
      node2.isEquivalentToTyped(node1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.getBooleanProp(32);
      Node node1 = Node.newString("W+W5#HbLlI^E#k*F~z", 118, 1348);
      Node node2 = new Node(30, node1, node0);
      node0.setSourceEncodedPosition(22);
      node2.setCharno(50);
      Node node3 = Node.newString(36, "~~H?K-Y'UJyZZw%", 1566, 12);
      node3.setCharno((-2544));
      Node.extractLineno(12);
      node2.hasMoreThanOneChild();
      node1.isIn();
      node1.detachChildren();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber((double) 544);
      node0.getDirectives();
      node0.setDouble(544);
      node0.toStringTree();
      node0.isInstanceOf();
      Node node1 = new Node(38, node0, node0, 1039, 352);
      node1.isGetProp();
      node0.isComma();
      Node node2 = Node.newString(0, "NUMBER 544.0\n", 37, 19);
      node1.isFalse();
      node2.getNext();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isWith();
      node0.putBooleanProp(20, false);
      node0.getBooleanProp(1792);
      Node node1 = Node.newString(38, "R}l<fXsn7O");
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(55, node1);
      node2.isCase();
      node1.getQualifiedName();
      node2.isFalse();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(52, nodeArray0);
      node0.getQualifiedName();
      Node node1 = new Node(52, node0, node0);
      node0.isVarArgs();
      node0.putBooleanProp(38, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEquals(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.setJSType(templateType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType(templateType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      Node node1 = Node.newString("jX\r9%g`tiiW");
      Node node2 = Node.newNumber((double) 4);
      node1.addChildrenToBack(node2);
      node1.toStringTree();
      node1.isInstanceOf();
      node1.isGetProp();
      node0.isComma();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newString(39, "L");
      node1.addSuppression("w%?m`vbnRgL/DyuX5 T");
      node0.getProp(4095);
      node0.getProp(42);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 111, 4095);
      node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-1);
      node1.isAdd();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isFromExterns();
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key");
      node1.setSourceFileForTesting("com.google.javascript.rhino.SourcePosition");
      node1.isReturn();
      Node node2 = node0.cloneTree();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Node.COLUMN_BITS;
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-536));
      node0.getJSDocInfo();
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.isComma();
      node0.setOptionalArg(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("+,R'%I@");
      Node node2 = new Node(1086, node0, node0, node1);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(305);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 305
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-434));
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-434), "L");
      node0.getProp((-434));
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newNumber((-1235.0520094792932));
      node0.setWasEmptyNode(true);
      Node node1 = new Node((-4828), node0, node0, node0);
      node0.toString();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(31, nodeArray0);
      Node node3 = node2.cloneNode();
      node3.isVar();
      node1.getQualifiedName();
      node2.isVarArgs();
      node3.getAncestors();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node4.putIntProp(4, 55);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isEquivalentTo(node0);
      node0.getJSDocInfo();
      node0.getBooleanProp(52);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isContinue();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isIn();
      node0.isStringKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry2.createParameters((List<JSType>) arrayList0);
      node1.isVar();
      node1.isDelProp();
      node1.isBlock();
      node1.isEmpty();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = new Node(2, node2, 49, 54);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("PteQ}(I^Y=AF.", node0, (ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      jSTypeArray0[1] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("z?EduXLq(vRg3PS^pn", node0, jSType0);
      jSTypeArray0[2] = (JSType) enumType0;
      enumType0.hasAnyTemplateTypes();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ImmutableList.of(node0, node0, node0, node0, node0, node0, node1, node0, node0, node0, node0);
      node0.removeProp(306654252);
      node0.isFromExterns();
      node0.isCast();
      node0.putIntProp(306654252, (-2315));
      boolean boolean0 = node0.isRegExp();
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.setLength(49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString("inferred");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("inferred");
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList.of();
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeArray0[1] = (JSType) null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(50, node0, node0, node0);
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      node0.isFor();
      node0.isVar();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      Node.newString(34, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterator<? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("#E?,bWzYKQR>;9fsA_`", node0, (ObjectType) null);
      immutableList0.parallelStream();
      jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "#E?,bWzYKQR>;9fsA_`", (String) null, 0, 57);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(33, 4095, (-62));
      Node node3 = new Node(49, node1, node0, node2, node2, (-947), (-947));
      Node node4 = new Node((-878), node3, 146, 83);
      Node node5 = node3.copyInformationFromForTree(node1);
      node0.isRegExp();
      node1.isExprResult();
      node4.isEquivalentToTyped(node3);
      node4.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node5.getChildAtIndex(1272);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      InputId inputId0 = new InputId("");
      inputId0.toString();
      Node node0 = Node.newNumber(759.25);
      Node node1 = new Node(47, node0, node0, node0, node0, (-666), 125);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      HashSet<Node> hashSet0 = new HashSet<Node>();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.toString();
      node0.isThrow();
      node0.isNull();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(52, node0, node1, node0, node1, 41, 8);
      node1.isFunction();
      node0.isArrayLit();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQuotedString();
      Node node1 = Node.newString("vj#b;y");
      node1.isFromExterns();
      node1.detachChildren();
      node1.setDirectives((Set<String>) null);
      node0.getProp(52);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString(132, "");
      Node node1 = null;
      try {
        node1 = new Node((-2213), node0, (Node) null, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o&Be;");
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("CharMatcher.JAVA_UPPER_CASE", (-2213), 86);
      Node node1 = new Node(3000, node0, node0);
      node1.setSourceEncodedPosition(39);
      node1.setCharno(48);
      node0.setCharno(2806);
      Node.extractLineno(4127);
      node1.hasMoreThanOneChild();
      node0.isIn();
      node1.detachChildren();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "twh");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?r`)qXUl9G>gs.W");
      Node node0 = new Node((-513));
      node0.isSyntheticBlock();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node1.toString(true, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -513
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      node0.getJSDocInfo();
      node0.getBooleanProp(29);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = Node.newString((-646), "8S.!wY?^|y");
      node2.isDelProp();
      node1.isBlock();
      node1.isEmpty();
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1224), node0);
      Node node2 = new Node(32);
      node1.isThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node3 = Node.newString(0, "Object#Element", 42, 39);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node4 = null;
      try {
        node4 = new Node(4095, node3, node3, node0, node1, 29, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      int int0 = (-1060);
      Node node0 = Node.newString("1l`j+Oo;bF&c{Fw");
      Node node1 = new Node((-1060), node0, node0);
      Node node2 = null;
      try {
        node2 = new Node((-1060), node1, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newNumber((double) 544);
      node0.getDirectives();
      node0.setDouble(544);
      Node node1 = Node.newString(40, "e4nL9,S[ce,;0l4\"(W4");
      node1.isOnlyModifiesArgumentsCall();
      node1.setLength(57);
      node0.isNot();
      Node node2 = node1.cloneTree();
      node2.setLineno(47);
      node0.getIntProp((-3555));
      node1.isRegExp();
      node2.isSyntheticBlock();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(4095, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.isVar();
      Node node2 = null;
      try {
        node2 = new Node((-342), (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = new Node(31, node0, node0);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newNumber((double) 57, 198, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.cloneTree();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node4.getInputId();
      InputId[] inputIdArray0 = new InputId[4];
      InputId inputId1 = new InputId("Object#Element");
      inputIdArray0[0] = inputId1;
      inputIdArray0[1] = null;
      inputIdArray0[2] = null;
      inputIdArray0[3] = inputId0;
      linkedList0.toArray(inputIdArray0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedAsList", 3878, 0);
      node0.checkTreeEquals(node1);
      node0.getDirectives();
      node1.srcrefTree(node0);
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node(0, 1086, (-536));
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getIndexOfChild(node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString("");
      node0.isSetterDef();
      Node node1 = Node.newString("");
      node1.getString();
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newNumber((double) 1, (-2988), 3455);
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(50, node0, node0, node0, 57, 30);
      node1.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node3 = null;
      try {
        node3 = new Node(32, node0, node2, node2, node1, 83, 3404);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getBooleanProp(112);
      Node node1 = Node.newString("");
      node0.toString();
      node0.isThrow();
      Node node2 = new Node(40, node0, node0, node1, 30, 40);
      try { 
        node1.setDouble((-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("PteQ}(I^Y=AF.", node0, (ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("z?EduXLq(vRg3PS^pn", node0, jSType0);
      jSTypeArray0[2] = (JSType) enumType0;
      enumType0.hasAnyTemplateTypes();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ImmutableList.of(node0, node0, node0, node0, node0, node0, node1, node0, node0, node0, node0);
      node0.removeProp(306654252);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      Node node1 = Node.newNumber((double) 36);
      node0.addChildrenToBack(node1);
      node0.toStringTree();
      node0.isInstanceOf();
      node0.isGetProp();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      String string0 = "";
      node0.setSourceFileForTesting("");
      node2.isBreak();
      Node node3 = new Node(130, node2, node1, node1, 310, 38);
      node3.isNot();
      try { 
        node3.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 310 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      Node node1 = new Node(43, node0, 55, 0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isRegExp();
      node0.isExprResult();
      node2.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117);
      node0.isBlock();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "0123456789ABCDEF", "0123456789ABCDEF", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      modificationVisitor0.caseTemplateType((TemplateType) null);
      jSType0.testForEquality((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(49, node0, 97, 4095);
      node1.getJsDocBuilderForNode();
      node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node1.isCast();
      node0.isTrue();
      node0.mayMutateGlobalStateOrThrow();
      node1.isScript();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-45), nodeArray0);
      Node node1 = node0.cloneNode();
      node0.isVar();
      node0.getQualifiedName();
      node0.isVarArgs();
      node0.getAncestors();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isScript();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.isIn();
      node0.isQualifiedName();
      node1.isWith();
      node0.putBooleanProp(105, false);
      node0.getBooleanProp(518);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node2.isCase();
      node1.getQualifiedName();
      node0.isFalse();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-1.0));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(49, node0, 97, 4095);
      Node node2 = new Node(53, 31, 1);
      node0.isOptionalArg();
      node0.putBooleanProp(26, false);
      node1.isCast();
      node2.isTypeOf();
      node1.isScript();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      node0.putIntProp(126, 262144);
      node0.isScript();
      node0.isDefaultCase();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      HashSet<Node> hashSet0 = new HashSet<Node>();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.toString();
      node0.isThrow();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.putIntProp(4095, 57);
      node0.isIf();
      node1.isCatch();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node node3 = Node.newNumber(0.0, 36, 32);
      node3.hasChild(node1);
      node2.getQualifiedName();
      Node node4 = new Node(3326, node0, node1, node0, node3, 117, 1635);
      node4.isFalse();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(44);
      node1.addChildToBack(node0);
      Node node2 = node1.cloneTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(false);
      node2.getJsDocBuilderForNode();
      node0.checkTreeEqualsImpl(node1);
      Node node3 = Node.newString(";m_<iG>ws<)]wh", 54, 32);
      Node node4 = new Node(37, node1, node2, node3, node1, 12, 36);
      node3.isOnlyModifiesThisCall();
      Node node5 = new Node(1);
      node5.checkTreeEqualsImpl(node3);
      node0.setLineno(103);
      node3.getDirectives();
      node4.isNew();
      Node node6 = null;
      try {
        node6 = new Node(55, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 54, 42, 39);
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString(1586, "KH");
      Node node3 = new Node(1757, node2);
      node3.copyInformationFromForTree(node0);
      node0.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(120, "", 537, 120);
      Node node1 = new Node((-1186), node0, 4172, 1375);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1186
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isContinue();
      node1.putIntProp(31, 1016);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(47, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 54, 51, 50);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.cloneTree();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.getInputId();
      InputId[] inputIdArray0 = new InputId[4];
      inputIdArray0[0] = inputId0;
      node3.putBooleanProp((-5388), false);
      node4.getBooleanProp(10);
      node3.putIntProp(46, 0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isNew();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.putBooleanProp(306654252, false);
      Node node1 = new Node(12, node0, (-3890), 50);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.putBooleanProp((-701), false);
      node0.getBooleanProp(47);
      node2.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      node0.children();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GETELEM");
      Node[] nodeArray0 = new Node[1];
      Node node1 = Node.newNumber(3177.2465965006);
      nodeArray0[0] = node1;
      Node node2 = new Node(6, nodeArray0);
      Node node3 = null;
      try {
        node3 = new Node(32, (Node) null, node2, node2, (Node) null, 15, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.getType("com.google.common.collect.ImmutableSet");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry1.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node.newString("Not declared as a type name", 38, (-2144));
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(30);
      Node node1 = new Node(30, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 54, 51, 50);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = node0.cloneTree();
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.getInputId();
      InputId[] inputIdArray0 = new InputId[4];
      inputIdArray0[0] = inputId0;
      node2.setDouble((-1.0));
      node3.putBooleanProp((-5388), false);
      node5.getBooleanProp(10);
      Node node6 = node2.useSourceInfoIfMissingFrom(node1);
      node6.isCase();
      node2.getQualifiedName();
      node6.isFalse();
      node6.addChildrenToBack(node4);
      node4.hasOneChild();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node2.detachChildren();
      node0.getBooleanProp(57);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node1.useSourceInfoIfMissingFrom(node0);
      node2.getChildCount();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = new Node(77, 116, 116);
      node0.setType((-2982));
      node0.setOptionalArg(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.removeProp(2762);
      Node node1 = new Node(77, node0, node0, node0, 50, 40);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2982
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1224), node0);
      Node node2 = new Node((-1224), node1, 38, 3455);
      node2.getJSDocInfo();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.getIndexOfChild(node1);
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = Node.newString("/-.I;9v]{IZ", 2399, 12);
      node2.mayMutateGlobalStateOrThrow();
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetElem();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString("Aps39}#gVjWJ-L:Dma|", (-1), (-1));
      Node node1 = new Node(12, node0, 448, 30);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.putBooleanProp(4095, false);
      node2.getBooleanProp(2086);
      node1.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node2.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 54, 42, 39);
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString("", 16, 50);
      node2.setLineno(50);
      InputId inputId0 = new InputId("");
      Node node3 = new Node(2048, node0, node1, node1, node1, 30, 83);
      node3.setInputId(inputId0);
      Node.newNumber((double) 42, 124, 47);
      try { 
        node0.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node3.isVar();
      node2.isDelProp();
      node0.isBlock();
      node0.isEmpty();
      node3.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Element");
      node0.isOnlyModifiesArgumentsCall();
      Node.extractCharno((-599));
      node0.isGetterDef();
      node0.putIntProp(47, 57);
      node0.isIf();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newString("Aps39}#gVjWJ-L:Dma|", (-1), (-1));
      node0.isSyntheticBlock();
      node0.setQuotedString();
      node0.setQuotedString();
      node0.isIf();
      Node node1 = node0.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.addSuppression("Aps39}#gVjWJ-L:Dma|");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Aps39}#gVjWJ-L:Dma|", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":: E8DH@");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "): ");
      Node node1 = new Node(331, node0, node0, 650, 32);
      node1.copyInformationFromForTree(node0);
      Node node2 = node1.getFirstChild();
      node2.isNoSideEffectsCall();
      Node.extractLineno(2);
      node2.detachChildren();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(0, ",R^M(OmZ<2W", 0, 0);
      Node node1 = Node.newNumber(1.0, 100, 3826);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newString("CKW", 31, 31);
      Node node1 = new Node((-3267), node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(12);
      node0.isRegExp();
      node1.setCharno(39);
      node2.mayMutateGlobalStateOrThrow();
      node1.isGetElem();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.children();
      Node node1 = new Node(8, node0, node0, 47, 2);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node1.getBooleanProp(29);
      node1.isRegExp();
      node2.mayMutateGlobalStateOrThrow();
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      Node node1 = new Node(455, node0);
      node0.putIntProp(54, 15);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(47, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 54, 51, 50);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = node0.cloneTree();
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.getInputId();
      InputId[] inputIdArray0 = new InputId[4];
      inputIdArray0[0] = inputId0;
      node3.putBooleanProp((-5388), false);
      node5.getBooleanProp(10);
      Node node6 = node2.useSourceInfoIfMissingFrom(node1);
      node6.isCase();
      node2.getQualifiedName();
      node6.isFalse();
      node6.addChildrenToBack(node4);
      node4.hasOneChild();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.isCase();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#xq4J8lbAXZcIs");
      node0.getQualifiedName();
      node1.isFalse();
      node2.isQualifiedName();
      Node.mergeLineCharNo(119, 50);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "0123456789ABCDEF", "0123456789ABCDEF", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      modificationVisitor0.caseTemplateType((TemplateType) null);
      jSType0.testForEquality((JSType) null);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      jSTypeRegistry0.getType((StaticScope<JSType>) functionType0, "Named type with empty name component", "Named type with empty name component", 1, 1223);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1073741824, nodeArray0);
      node0.isThrow();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n\nSubtree1: ");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.newNumber((double) 43, (-100), 1);
      // Undeclared exception!
      try { 
        node2.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1122
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.isCase();
      node0.getQualifiedName();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(47, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 54, 51, 50);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = node0.cloneTree();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.getInputId();
      InputId[] inputIdArray0 = new InputId[4];
      inputIdArray0[0] = inputId0;
      inputIdArray0[1] = inputId0;
      inputIdArray0[2] = null;
      inputIdArray0[3] = inputId0;
      linkedList0.toArray(inputIdArray0);
      node1.addChildrenToBack(node4);
      node0.isDo();
      node3.isQualifiedName();
      node2.getDirectives();
      node0.isAnd();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.putBooleanProp(306654252, false);
      node0.getBooleanProp(32);
      Node node1 = Node.newString("");
      node1.toString();
      node1.isThrow();
      node0.isNull();
      Node.newString("CharMatcher.NONE");
      Node node2 = Node.newString("cV\u0007t9Yn{mh!p^No", 4, (-1189));
      node0.isEquivalentTo(node2);
      node0.setIsSyntheticBlock(true);
      Node node3 = new Node(54);
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.8));
      Node node1 = new Node(54, node0, node0, 50, 1);
      node1.isContinue();
      Node node2 = null;
      try {
        node2 = new Node(42, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "reflected_object");
      Node node0 = new Node(0, 1086, (-536));
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      Node node2 = Node.newNumber(1138.986511526298);
      Node node3 = new Node((-536), node2, node0, node2, node1, (-715), 2447);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      node1.isWhile();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      Node node1 = new Node(48, node0, node0);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-45), nodeArray0);
      Node node1 = node0.cloneNode();
      node0.isVar();
      node0.getQualifiedName();
      node0.isVarArgs();
      node0.getAncestors();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isIn();
      InputId inputId0 = new InputId(" [p%,f0mdcf9K' E@A");
      node1.setInputId(inputId0);
      node1.removeProp(1607);
      node0.isAssignAdd();
      node1.addSuppression(" [p%,f0mdcf9K' E@A");
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetElem();
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-36), nodeArray0);
      Node node1 = node0.cloneNode();
      node0.isVar();
      node0.getQualifiedName();
      node0.isVarArgs();
      node0.getAncestors();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isScript();
      node0.getInputId();
      node0.putProp((-4752), (Object) null);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node1.isEquivalentTo(node2, false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.isComma();
      node0.setOptionalArg(true);
      node3.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-69));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -69
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.isArrayLit();
      Node.extractCharno(1635);
      node0.isGetterDef();
      Node node1 = Node.newNumber((double) 52);
      node0.addChildrenAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString("Object#Element");
      node0.isOnlyModifiesArgumentsCall();
      Node.extractCharno((-599));
      node0.isGetterDef();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 85, 85);
      Node node1 = new Node(40);
      node1.getAncestors();
      node1.isWhile();
      node0.isNew();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.addChildrenToFront(node1);
      node1.addChildrenToFront(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(55);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getCharno();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) vector0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isCase();
      node2.getQualifiedName();
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isUnscopedQualifiedName();
      node0.setLineno((-1878));
      InputId inputId0 = new InputId("c$suzmlq!0?w");
      node0.setInputId(inputId0);
      node0.setLength(0);
      node0.isVoid();
      node0.removeProp(0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString(132, "!~xB`]/");
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("NlI1ZhYTj%(", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      Node node1 = Node.newNumber((double) 47);
      node0.addChildrenToBack(node1);
      node0.toStringTree();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      node1.removeFirstChild();
      Node node2 = new Node(32, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.getCharno();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node0.isCase();
      node0.getQualifiedName();
      node3.isFalse();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Named type with empty name component");
      String string0 = "BLOCK";
      Node node1 = Node.newString(31, "Not declared as a type name", 0, 320);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      immutableList0.parallelStream();
      Node node0 = Node.newString("Named type with empty name component");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("The new child node has siblings.");
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "valueOf");
      Node node0 = Node.newNumber(0.7, 33, 65536);
      node0.setSourceFileForTesting("/[GJeYvI}a");
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      Node node2 = new Node(8, node0, node1, node0, node0, 155, 57);
      node0.setJSDocInfo((JSDocInfo) null);
      node2.cloneNode();
      node0.isWhile();
      Node node3 = Node.newString("com.google.javascript.rhino.Node$NumberNode");
      node3.getProp(36);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node3.isVar();
      node2.isDelProp();
      try { 
        node3.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      String string0 = "0123456789ABCDEF";
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "0123456789ABCDEF", "0123456789ABCDEF", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(1912);
      Node node2 = node0.srcref(node1);
      node1.putProp(1436, jSType0);
      node1.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node((-1000));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = new Node((-3647), (-3647), (-3647));
      Node node1 = Node.newString("");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.toStringTree();
      node1.useSourceInfoFromForTree(node0);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      node0.children();
      node0.isString();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("oxa>by=Xm%UZ", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = "Aps39}#gVjWJ-L:Dma|";
      Node node0 = Node.newString("Aps39}#gVjWJ-L:Dma|", (-1), (-1));
      node0.isSyntheticBlock();
      node0.setQuotedString();
      node0.setQuotedString();
      node0.isIf();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.putBooleanProp(306654252, false);
      node0.getBooleanProp(32);
      Node node1 = Node.newString("");
      node1.toString();
      node1.isThrow();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node3 = new Node(29, node0, node0, node2, node0, 30, 51);
      node1.isFunction();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("", "Object#Key", 26, 29);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeArray0[1] = jSType0;
      jSType0.isObject();
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSType1.isNullable();
      jSTypeArray0[6] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSTypeArray0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChildCount();
      immutableList0.indexOf(jSTypeArray0[1]);
      jSType0.matchesStringContext();
      node0.getJSType();
      node0.isIn();
      InputId inputId0 = new InputId(" [p%,f0mdcf9K' E@A");
      node0.setInputId(inputId0);
      node0.removeProp(0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      try { 
        node0.setString("NE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000360] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "DKVzebAa\"q", 1392, 42);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.isAssignAdd();
      node0.addSuppression("Object#Element");
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654246);
      node0.putBooleanProp(26, true);
      Node node1 = Node.newString(36, "com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      Node node2 = node0.copyInformationFrom(node1);
      node0.getBooleanProp(306654246);
      Node node3 = Node.newString("already specified useForNull");
      node0.setSourceEncodedPositionForTree(48);
      node3.isArrayLit();
      Node.extractCharno(30);
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "synthetic");
      Node node0 = Node.newString("", 14, 14);
      node0.isOnlyModifiesArgumentsCall();
      node0.getSideEffectFlags();
      Node node1 = Node.newNumber((-1.0));
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 30, 524288, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.useSourceInfoIfMissingFrom(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node2.cloneTree();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      InputId[] inputIdArray0 = new InputId[2];
      InputId inputId0 = new InputId("Object#Element");
      inputIdArray0[0] = inputId0;
      node0.getInputId();
      inputIdArray0[1] = null;
      linkedList0.toArray(inputIdArray0);
      node2.addChildrenToBack(node3);
      node0.isDo();
      node0.isQualifiedName();
      node1.getDirectives();
      node0.isAnd();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newNumber((-1235.0520094792932));
      node0.setWasEmptyNode(true);
      Node node1 = new Node((-4828), node0, node0, node0);
      node0.toString();
      node1.getLength();
      node1.putProp(53, node0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("", "Object#Key", 26, 29);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeArray0[1] = jSType0;
      jSType0.isObject();
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSType1.isNullable();
      jSTypeArray0[6] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSTypeArray0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChildCount();
      immutableList0.indexOf(jSTypeArray0[1]);
      jSType0.matchesStringContext();
      node0.getJSType();
      node0.isIn();
      InputId inputId0 = new InputId(" [p%,f0mdcf9K' E@A");
      node0.setInputId(inputId0);
      node0.removeProp(0);
      node0.isAssignAdd();
      node0.addSuppression((String) null);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.getJsDocBuilderForNode();
      node0.setString("com.google.common.collect.ImmutableSortedAsList");
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node0.setSourceFileForTesting("com.google.common.collect.RegularImmutableTable$Values");
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      Node node2 = new Node(47, node0, node0, node0, node1, 8, 123);
      node2.setJSDocInfo((JSDocInfo) null);
      node1.cloneNode();
      node0.isWhile();
      node2.getProp(108);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putBooleanProp((-662), false);
      node0.getBooleanProp((-662));
      Node node1 = Node.newString("");
      node0.toString();
      Node node2 = Node.newNumber((double) 1, 57, 1);
      node2.setSourceEncodedPositionForTree(112);
      node1.isArrayLit();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node3 = new Node(31, nodeArray0, 1, 118);
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(50, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(101, node0, 1, 149);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = new Node(327);
      node0.getSideEffectFlags();
      node0.isEmpty();
      node0.getJSDocInfo();
      Node node1 = Node.newString("g()[t|0T+5go^Jc", 148, 1);
      node1.removeProp(46);
      node0.clonePropsFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1122);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.newNumber((double) 38);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 327
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654246);
      node0.putBooleanProp(26, true);
      node0.getBooleanProp(306654246);
      Node node1 = Node.newString("already specified useForNull");
      node1.toString();
      node0.setSourceEncodedPositionForTree(48);
      node1.isArrayLit();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1058), "", (-1058), (-1058));
      Node node1 = Node.newString(">K|8DEIv");
      node1.setVarArgs(false);
      node0.isFromExterns();
      node0.isThis();
      node1.isNoSideEffectsCall();
      node1.isNoSideEffectsCall();
      node1.isObjectLit();
      node1.isVoid();
      node1.isTry();
      node0.setOptionalArg(true);
      node0.isString();
      node0.getSourceFileName();
      Node.newString("URI_ERROR_FUNCTION_TYPE");
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node2.setJSDocInfo((JSDocInfo) null);
      Node node4 = node1.useSourceInfoFrom(node2);
      node2.toString();
      // Undeclared exception!
      try { 
        node4.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1122);
      node0.setType(1122);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isIn();
      node1.isQualifiedName();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setThrows();
      node1.isLabelName();
      node1.isSetterDef();
      node_SideEffectFlags3.clearSideEffectFlags();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      int int0 = 575;
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      String string0 = "mR]q=t&,R'gyaNun";
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(49, node0, 119, 4095);
      node0.useSourceInfoFromForTree(node1);
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = Node.newString("");
      node1.isEquivalentToShallow(node0);
      node0.isThrow();
      node0.isCast();
      Node node2 = Node.newString("", 507, (-584));
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node((-956), (-956), (-956));
      Node node1 = new Node(15, node0, node0, node0, node0, 53, 4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.detachChildren();
      node0.isThrow();
      node0.getChildAtIndex((-234));
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(1095);
      node0.setType(1095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      node0.isVoid();
      node0.isTry();
      node0.setOptionalArg(true);
      node0.isString();
      node0.getSourceFileName();
      Node node2 = Node.newString("Gxi+/3??/ggd");
      node2.useSourceInfoFrom(node0);
      node2.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newNumber(3396.232);
      node0.addSuppression("var_args_name");
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node0.setSourceFileForTesting((String) null);
      node0.getJSDocInfo();
      node0.isReturn();
      Node node1 = node0.cloneTree();
      Node node2 = node0.setJSDocInfo((JSDocInfo) null);
      node2.cloneNode();
      node1.isWhile();
      node0.getProp(42);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 52, 97, 42);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = new Node(1, node1);
      node2.setSourceEncodedPosition(47);
      node1.isRegExp();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      node0.getDouble();
      Node node4 = Node.newString("cV\u0007t9Yn{mh!p^No");
      Node node5 = Node.newString("cV\u0007t9Yn{mh!p^No", 43, 4031);
      node5.isEquivalentTo(node2);
      node4.setIsSyntheticBlock(false);
      Node node6 = null;
      try {
        node6 = new Node(105, node4, node5, node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isThrow();
      node0.putProp(2356592, "");
      // Undeclared exception!
      try { 
        node0.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = Node.newString("");
      node0.isThrow();
      node0.isCast();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newNumber((double) 306654252, 306654252, 812);
      node0.putBooleanProp(306654252, false);
      node0.getBooleanProp(32);
      Node node1 = Node.newString("");
      node1.toString();
      node1.isThrow();
      node0.isNull();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      Node node1 = Node.newString("already specified useForNull");
      node1.toString();
      node0.setSourceEncodedPositionForTree(32);
      node0.isArrayLit();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("{h;Xd", node0, (ObjectType) null);
      immutableList0.parallelStream();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      jSTypeArray0[1] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("z?EduXLq(vRg3PS^pn", node0, jSType0);
      jSTypeArray0[2] = (JSType) enumType0;
      enumType0.hasAnyTemplateTypes();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ImmutableList.of(node0, node0, node0, node0, node0, node0, node1, node0, node0, node0, node0);
      node0.removeProp(306654252);
      node0.isInc();
      node1.getCharno();
      node0.getIntProp(85);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.setType((-2973));
      Node node1 = new Node(49, 482, (-832));
      node1.getInputId();
      node1.getBooleanProp(53);
      node0.setInputId((InputId) null);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1058), "", (-1058), (-1058));
      Node node1 = Node.newString(">K|8DEIv");
      node1.setVarArgs(false);
      node0.isFromExterns();
      node1.setVarArgs(false);
      node0.isThis();
      node1.isNoSideEffectsCall();
      node1.isNoSideEffectsCall();
      node1.isObjectLit();
      node1.isIn();
      node0.isQualifiedName();
      node0.isWith();
      node_SideEffectFlags0.setThrows();
      node1.isLabelName();
      node1.siblings();
      node1.isSetterDef();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.getString();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isLabel();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      node1.removeFirstChild();
      Node node2 = new Node(32, node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "DKVzebAa\"q", 1392, 42);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      try { 
        node0.setString("Object#Element");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 685.7953536871155 575 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = Node.newString(666, "LC", 38, 118);
      node0.isEmpty();
      Node node1 = Node.newString((-292), "LC");
      node1.getJSDocInfo();
      Node.newString(":Vk=", 37, 40);
      node0.removeProp(37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(961);
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -292
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      InputId inputId0 = new InputId("");
      Node node0 = Node.newNumber((-571.19929745));
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newString("", 13, 103);
      node0.isFromExterns();
      node0.isFromExterns();
      node0.isAssignAdd();
      node0.setSourceFileForTesting("");
      node0.isBreak();
      node0.isNot();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  13 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node.extractCharno(4514);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-1.0), 418, 4514);
      Node node1 = Node.newNumber((double) 47, (-1687), 49);
      node0.isEquivalentToTyped(node1);
      node0.toString(true, true, false);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOnlyModifiesThisCall();
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      Node node1 = Node.newString(57, "");
      Node node2 = new Node(39, node0, node1);
      node2.useSourceInfoFrom(node1);
      int int0 = 240;
      int int1 = 0;
      int int2 = 49;
      // Undeclared exception!
      try { 
        node1.setDouble(42);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(32, node0, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.isComma();
      node0.setOptionalArg(true);
      node3.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-69));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -69
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(57);
      Node node1 = Node.newString("already specified useForNull");
      node1.toString();
      node1.isThrow();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 52, 97, 42);
      Node node2 = new Node(1, node1);
      node1.isThrow();
      node1.getChildBefore((Node) null);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(50, node0, node0, node0, 57, 30);
      node1.copyInformationFromForTree(node0);
      Node node2 = new Node(701, node1, node1, node1, 56, 46);
      // Undeclared exception!
      try { 
        node0.setDouble(1484.89332286);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1414);
      node0.children();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GETELEM");
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(50, node0, node0, node0, 57, 30);
      Node node2 = new Node(701, node1, node1, node1, 56, 46);
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.setDouble(1484.89332286);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(27591, 48, 27591);
      Node node1 = new Node(4);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-540));
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.setType((-1718));
      Node node1 = new Node(39, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        Node.newString((-1519), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.setString("com.google.common.collect.ImmutableSortedAsList");
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(113, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.mayMutateArguments();
      jSTypeRegistry1.setLastGeneration(false);
      Node node2 = new Node((-1906), node0, node0, node0, node1, 489, 101);
      node2.isFunction();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 0, 63);
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newString("m#Qcj(D%9v)H,Z");
      node2.isRegExp();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = Node.newNumber((double) 79, 105, 196);
      Node node1 = new Node(79, node0, node0, node0, node0, 2, 1041);
      node0.isLocalResultCall();
      node1.setDirectives((Set<String>) null);
      node1.children();
      Node node2 = null;
      try {
        node2 = new Node(105, node1, node0, 49, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      int int0 = 327;
      Node node0 = Node.newString(".?egate()", 327, 38);
      Node node1 = new Node((-2159), node0, node0);
      Node node2 = new Node(2);
      Node node3 = null;
      try {
        node3 = new Node((-2159), node1, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = Node.newString("+r");
      Node node2 = Node.newString(0, "", 12, 32);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node2;
      Node node3 = null;
      try {
        node3 = new Node(5, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(39);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = new Node(4, node0, node0, 43, 52);
      node1.isGetElem();
      Node.newString("ReferenceError", 42, 1);
      node0.mayMutateArguments();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node1 = new Node(53, node0);
      node0.children();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node0;
      Node node2 = null;
      try {
        node2 = new Node((-501), nodeArray0, 89, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newNumber((double) 52, 97, 42);
      Node node2 = new Node(1, node1);
      node1.isRegExp();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node((-1000));
      Node.newString("cAwbkIcr(>EZM3P");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("cAwbkIcr(>EZM3P", "]q37o*rf$", 43, 85);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      try { 
        node1.setString("Object#Key");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList.of();
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1026;
      int int1 = (-3135);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", (-2299), 0);
      Node node1 = new Node(39, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(5078, node0, node1, node0, node1, 78, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = new Node((-5095), 544, (-5095));
      node0.setWasEmptyNode(true);
      node0.removeProp(141);
      node0.wasEmptyNode();
      node0.isNew();
      node0.wasEmptyNode();
      Node node1 = Node.newString("", (-1039), 1836);
      node1.getAncestors();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.setDouble((-1.0));
      node0.isOnlyModifiesArgumentsCall();
      node0.getStaticSourceFile();
      node0.isNot();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeRegistry0.createObjectType("PteQ}(I^Y=AF.", node0, (ObjectType) null);
      Node[] nodeArray0 = new Node[3];
      Node node1 = new Node(193, 42, 0);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node2 = null;
      try {
        node2 = new Node(54, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString(0, "new child has existing sibling");
      Node node1 = new Node(0, node0, node0, node0);
      node0.isLocalResultCall();
      node1.isUnscopedQualifiedName();
      node1.getProp(56);
      node0.addChildToBack(node1);
      // Undeclared exception!
      try { 
        node1.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.mergeLineCharNo(3546, (-2490));
      int int0 = (-21);
      Node[] nodeArray0 = new Node[7];
      Node node0 = Node.newNumber((double) 3546, (-2490), (-2490));
      nodeArray0[0] = node0;
      Node node1 = Node.newString((-536), "", (-462), (-2490));
      Node node2 = new Node(29, node1, node0, node1);
      nodeArray0[1] = node2;
      Node node3 = null;
      try {
        node3 = new Node(32, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      Node node1 = Node.newString("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.detachChildren();
      node0.isThrow();
      node1.getChildAtIndex((-234));
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = Node.newNumber(759.25);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setLineno(1);
      node0.removeProp((-5095));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node1 = new Node(12, node0, node0, node0, node0, 1478, 1);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.setLineno((-1651));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = null;
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = new Node(0);
      node0.getQualifiedName();
      node0.setWasEmptyNode(true);
      node0.getParent();
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13");
      node0.isQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node1 = null;
      try {
        node1 = new Node(57, (Node) null, (Node) null, 54, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        node0.getAncestor((-980));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = Node.newString(641, "=Q${)U&N.l@`KFssGz", 641, 641);
      Node.newString("DICT");
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = Node.newNumber(685.7953536871155, 575, 1392);
      Node node1 = new Node((-1727), node0);
      node0.children();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(39);
      Node node1 = new Node(50, node0, node0, node0, 57, 30);
      Node node2 = new Node(701, node1, node1, node1, 56, 46);
      // Undeclared exception!
      try { 
        node0.setDouble(1484.89332286);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(36, node2, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.isComma();
      node2.setSourceEncodedPositionForTree(36);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node((-1573), node1, 2, 1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.removeChildren();
      Node node1 = Node.newString(57, "");
      Node node2 = new Node(39, node0, node1);
      Node node3 = null;
      try {
        node3 = new Node(240, node1, node1, 0, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.putBooleanProp(10, false);
      node0.getBooleanProp(57);
      node0.setLineno((-682));
      node0.getDirectives();
      node0.isNew();
      node0.setDouble((-1063.1666645853));
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-45), nodeArray0);
      Node node1 = node0.cloneNode();
      node0.isVar();
      node0.getQualifiedName();
      node0.isVarArgs();
      node0.getAncestors();
      node0.isString();
      node1.addChildrenToBack(node0);
      node0.setChangeTime(30);
      node1.checkTreeEqualsImpl(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Node.newString(154, (String) null, 50, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("PteQ}(I^Y=AF.", node0, (ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Not declared as a constructor", "", 170, 43);
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      jSTypeArray0[1] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("z?EduXLq(vRg3PS^pn", node0, jSType0);
      jSTypeArray0[2] = (JSType) enumType0;
      enumType0.hasAnyTemplateTypes();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ImmutableList.of(node0, node0, node0, node0, node0, node0, node1, node0, node0, node0, node0);
      node0.removeProp(306654252);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(327);
      node0.getSideEffectFlags();
      node0.isEmpty();
      node0.getJSDocInfo();
      Node node1 = Node.newString("g()[t|0T+5go^Jc", 148, 1);
      node1.removeProp(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1122);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 327
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node.extractLineno(0);
      Node.extractCharno(103);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.81));
      Node node1 = Node.newString("");
      node1.isIn();
      node1.isQualifiedName();
      node1.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node0.isLabelName();
      node0.isSetterDef();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node2 = Node.newString("_xfP|~>e#3|k0I");
      node2.setStaticSourceFile((StaticSourceFile) null);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -2628.81 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(327);
      Node.newString(2776, "\".F&LYwsm");
      Node node1 = new Node(42, node0, 48, 57);
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(304, "", (-2019), 27591);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.toString();
      node0.wasEmptyNode();
      CharBuffer charBuffer0 = CharBuffer.allocate(53);
      charBuffer0.put('n');
      node1.appendStringTree(charBuffer0);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isEquivalentToShallow(node0);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-1307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got QMARK
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node((-2129), (Node) null, 49, 4095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = Node.newString(55, "");
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13", 10, 10);
      node0.isQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newNumber((-444.079), (-617), (-991));
      Node node1 = new Node(2994, node0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      String string0 = "";
      Node node0 = new Node((-2019));
      node0.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2019
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node1 = new Node(39, node0, node0, node0, node0);
      node1.removeFirstChild();
      Node node2 = new Node((-1573), node1, 461, 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      int int0 = (-1484);
      Node node3 = Node.newString(57, "fF =saY%V_ef");
      Node node4 = null;
      try {
        node4 = new Node(53, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      templateTypeMap0.getTemplateTypeKeyByName("Object#Element");
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "", "Named type with empty name component", 36, 0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("-NS~Gi8!ligZ&.i&if", node0, functionType0);
      enumType0.hasAnyTemplateTypes();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) enumType0;
      JSType jSType1 = templateTypeMap0.getTemplateType((TemplateType) null);
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = Node.newNumber((double) 1, 30, (-1115));
      Node node3 = new Node(39, node1, node0, node0, node0);
      // Undeclared exception!
      try { 
        ImmutableList.of(node2, node3, node3, (Node) null, (Node) null, node1, node1, node0, node1, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(30);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      int int0 = 2994;
      int int1 = 327;
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString("A%s=_T[k-,~.>");
      nodeArray0[0] = node0;
      Node node1 = Node.newString(57, "", 1437, 1013);
      nodeArray0[1] = node1;
      Node node2 = new Node(327, nodeArray0);
      Node node3 = null;
      try {
        node3 = new Node(42, node2, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 117;
      Node node0 = new Node(122, 117, 3830);
      Node node1 = null;
      try {
        node1 = new Node(55, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = new Node((-1000));
      Node node1 = Node.newString("");
      assertEquals(40, node1.getType());
      
      boolean boolean0 = node0.isThrow();
      assertFalse(node0.isString());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(304, "", (-2019), 27591);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildrenToBack(node0);
      node0.toString();
      node0.wasEmptyNode();
      CharBuffer charBuffer0 = CharBuffer.allocate(53);
      charBuffer0.put('n');
      // Undeclared exception!
      try { 
        node1.appendStringTree(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.newString("Object#Key");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(1786);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.81));
      Node.newString("");
      node0.isVarArgs();
      node0.isThrow();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node((-1000));
      Node node1 = Node.newString("<invalid>");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.toStringTree();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newNumber(759.25);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setLineno(1);
      node0.setInputId(inputId0);
      node0.setLength((-5095));
      node0.isVoid();
      node0.removeProp(0);
      node0.setLineno((-5095));
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13", 10, 10);
      node0.isOnlyModifiesThisCall();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = new Node(327);
      node0.getSideEffectFlags();
      node0.isEmpty();
      node0.getJSDocInfo();
      Node node1 = Node.newString("g()[t|0T+5go^Jc", 148, 1);
      node1.removeProp(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1122);
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 327
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = Node.newNumber(759.25);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      int int0 = 1;
      node0.setLineno(1);
      node0.removeProp((-5095));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = Node.newString(327, "new child has existing sibling");
      Node node1 = new Node(46, node0, node0, node0);
      node1.isOnlyModifiesArgumentsCall();
      node0.isUnscopedQualifiedName();
      node0.getProp(52);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node.newString(55, "");
      node0.getQualifiedName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      int int0 = 26;
      Node node0 = null;
      try {
        node0 = new Node(271, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newNumber((-3.8593677208740775), 0, (-536));
      node0.isComma();
      node0.setSourceEncodedPositionForTree(0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = Node.newString(0, "new child has existing sibling");
      Node node1 = new Node(0, node0, node0, node0);
      node0.isOnlyModifiesArgumentsCall();
      node1.isUnscopedQualifiedName();
      node1.getProp(56);
      node0.addChildToBack(node1);
      // Undeclared exception!
      try { 
        node1.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString(1122, "new child has existing sibling");
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQuotedString();
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(0);
      node0.setDouble(0.0);
      node0.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(0, "");
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(327);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = Node.newString(2630, "f[E7YK");
      node0.getType();
      Node node1 = Node.newNumber((double) 2630, 0, 0);
      node0.srcrefTree(node1);
      node1.getJSDocInfo();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(77);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2630
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "0123456789ABCDEF", "0123456789ABCDEF", 0, (-2248));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      modificationVisitor0.caseTemplateType((TemplateType) null);
      jSType0.testForEquality((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setType(1);
      node0.cloneNode();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = Node.newNumber((-444.079), (-617), (-991));
      Node node1 = new Node(2994, node0);
      node1.isRegExp();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString(734, "node is not a child");
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(327);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newString("Object#Key");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-536));
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      int int0 = (-2587);
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1427));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.valueOf();
      Node node0 = null;
      int int0 = 306654252;
      Node node1 = null;
      try {
        node1 = new Node(1540, (Node) null, (Node) null, (Node) null, (-1427), 306654252);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(612, node0, node0, node0, (-1615), 612);
      node1.setChangeTime(1687);
      // Undeclared exception!
      try { 
        node1.toString(false, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 612
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      int int0 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(306654252, (Node[]) null, 1040, (-564));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getChangeTime();
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("oxa>by=Xm%UZ", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "";
      Node node0 = Node.newString((-2543), "", 4735, 272);
      Node node1 = new Node(4095, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(4735, node0, node0, node1, 16, 4735);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putBooleanProp(26, false);
      node0.getBooleanProp(0);
      node0.isRegExp();
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      int int0 = 93;
      String string0 = "chx|94^*b8;!w1[/";
      Node node0 = Node.newString("chx|94^*b8;!w1[/");
      node0.getSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("AqVtox(j!C>6lgI*Ft&", "StringNode: str is null", 55, 38);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1058), "", (-1058), (-1058));
      Node node1 = Node.newString(">K|8DEIv");
      node1.setVarArgs(false);
      node0.isFromExterns();
      boolean boolean0 = node0.isThis();
      node1.isNoSideEffectsCall();
      node1.isNoSideEffectsCall();
      node1.isObjectLit();
      boolean boolean1 = node1.isIn();
      node0.isQualifiedName();
      boolean boolean2 = node0.isWith();
      assertTrue(boolean2 == boolean1);
      
      node_SideEffectFlags0.setThrows();
      boolean boolean3 = node1.isLabelName();
      assertTrue(boolean3 == boolean0);
      
      node1.isSetterDef();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.getString();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isLabel();
      assertEquals(40, node1.getType());
      assertEquals((-1058), node2.getType());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString(0, "");
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      node0.setString("32qjXMj0[j5PRvA\"_u1");
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = Node.newNumber(759.25);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setLineno(1);
      node0.setInputId(inputId0);
      node0.setLength((-5095));
      node0.isVoid();
      node0.removeProp(0);
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = Node.newNumber((double) 529);
      Node node1 = new Node(529, node0, node0);
      Node node2 = node1.srcref(node0);
      String string0 = "!f#M\"=di)<_*av8@A57";
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newNumber((-1.0), 0, 0);
      node0.setChangeTime(13);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = Node.newNumber((-2628.81));
      Node node1 = Node.newString("L/P=");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      String string0 = node0.toStringTree();
      assertEquals("NUMBER -2628.81\n", string0);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertEquals((-1), node2.getCharno());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(386, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = Node.newString(2630, "f[E7YK");
      node0.getType();
      Node node1 = Node.newNumber((double) 2630, 0, 0);
      node0.srcrefTree(node1);
      node1.getJSDocInfo();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(77);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2630
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      int int0 = 2264;
      Node[] nodeArray0 = new Node[4];
      Node node0 = null;
      try {
        node0 = new Node(2264, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2642));
      Node node1 = Node.newString(" }WN,?chDq YLh-MI", 0, (-2066));
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node((-2642), node0, 0, (-2091));
      node2.getJSDocInfo();
      node0.useSourceInfoFrom(node2);
      Node node3 = null;
      try {
        node3 = new Node(0, node2, node0, node0, node2, 46, 1090);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Node node0 = Node.newNumber((-275.611931), 0, 0);
      node0.getAncestors();
      node0.isWhile();
      node0.isNew();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = false;
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = Node.newString(10, "com.google.common.base.CharMatcher$13", 10, 10);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-2040));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -2040
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(304, "", (-2019), 27591);
      Node node1 = new Node(27591, node0, node0, 38, 93);
      node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = Node.newString(641, "=Q${)U&N.l@`KFssGz", 641, 641);
      node0.getAncestor(2048);
      // Undeclared exception!
      try { 
        Node.newString((String) null, 4095, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(15, node0, node0, node0, 52, 41);
      Node node2 = null;
      try {
        node2 = new Node(482, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
