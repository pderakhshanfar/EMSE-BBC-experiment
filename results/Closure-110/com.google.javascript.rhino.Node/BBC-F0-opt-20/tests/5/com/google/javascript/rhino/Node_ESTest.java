/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 01:21:55 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node.newNumber(2824.054456955, 0, 0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(2706, (Node) null, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      immutableList0.contains((Object) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      jSType0.isInstanceType();
      immutableList0.add(jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.isSwitch();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 8287;
      Node[] nodeArray0 = new Node[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = new Node(39, nodeArray0, 540, (-30));
      nodeArray0[1] = node1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        Node.newString(node0.ORIGINALNAME_PROP, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node1.COLUMN_MASK, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(35, (-1073), (-2430));
      node0.isDebugger();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      String string0 = "MbwjI";
      ObjectType objectType0 = null;
      ObjectType objectType1 = FunctionType.getTopDefiningInterface((ObjectType) null, "MbwjI");
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      // Undeclared exception!
      try { 
        enumType1.getImplicitPrototype();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.0226777));
      node0.isSyntheticBlock();
      node0.hasOneChild();
      Node node1 = Node.newNumber((double) 36, (-705), (-1560));
      node1.isLocalResultCall();
      node1.getAncestor(57);
      Node node2 = node0.removeChildAfter(node1);
      node2.isOnlyModifiesArgumentsCall();
      node2.getSourceOffset();
      node1.isVarArgs();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(3134, 3134, 2312);
      node0.getDirectives();
      int int0 = 2322;
      Node node1 = new Node(8, node0, node0, node0, node0);
      Node node2 = new Node(1, node0, node0, node1, 1, 2);
      String string0 = "";
      // Undeclared exception!
      try { 
        node0.setLength(node1.QUOTED_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber((-1655.1085204613726));
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = new Node(0, (Node[]) null, 990, 51);
      int int0 = (-1245);
      StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
      node2.setStaticSourceFile(staticSourceFile0);
      int int1 = (-137);
      node2.putIntProp(int0, int1);
      // Undeclared exception!
      try { 
        node1.isEquivalentTo(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("", 2512, 1049);
      node0.isVarArgs();
      node0.setType(0);
      node0.isTypeOf();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.setLineno(10);
      node0.isAnd();
      node2.isNE();
      node1.getSideEffectFlags();
      node1.isEmpty();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-972));
      int int0 = 56;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      Node node1 = new Node(56, node0, node0, node0);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node2 = new Node(0, nodeArray0);
      Node node3 = new Node(int0, node2, node1.SIDE_EFFECTS_FLAGS_MASK, node0.INCRDECR_PROP);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(0, node0, node0, 8192, 100);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[2];
      Node node0 = Node.newString(0, "");
      node0.getProp(0);
      objectArray0[0] = null;
      objectArray0[1] = (Object) "\"udOfT.";
      SimpleErrorReporter.getMessage("\"udOfT.", objectArray0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = 1969;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[8];
      Node node0 = new Node(0, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(1.0, 56, 0);
      nodeArray0[1] = node1;
      Node node2 = new Node(4715, node0, node1, node1, node1, 47, (-792));
      nodeArray0[2] = node2;
      Node node3 = new Node(48, node2, node2);
      nodeArray0[3] = node3;
      Node node4 = new Node(1084, node1, node3, node0, 4095, 39);
      nodeArray0[4] = node4;
      nodeArray0[4].isVarArgs();
      Node node5 = new Node(node4.OPT_ARG_NAME, nodeArray0[1]);
      nodeArray0[5] = node5;
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(false);
      node2.isThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setMutatesArguments();
      Node.newString("empty_block", 1, 2584);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(1165, node0);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("", (-3568), (-3568));
      Node node1 = new Node((-3568), node0, 16, (-529));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      JSType jSType0 = modificationVisitor0.caseStringType();
      jSTypeRegistry0.createFunctionType(jSType0, true, jSTypeArray0);
      jSTypeArray0[0] = jSType0;
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.isNE();
      node2.isTry();
      node1.isCast();
      node2.setLineno(1723);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 9, 9);
      node0.isString();
      node0.isBlock();
      Node node1 = null;
      Node node2 = node0.srcref((Node) null);
      node2.toStringTree();
      int int0 = (-325);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 2116;
      Node node0 = new Node((-75), 2116, (-75));
      Node node1 = Node.newString("");
      node0.checkTreeEquals(node1);
      Node node2 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node2.getQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toString(false, false, false);
      node0.setString("8\"Hb)3vMf");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(1906, node0, node0, 30, 8);
      node0.getSideEffectFlags();
      node1.isQualifiedName();
      Object object0 = new Object();
      node0.putProp(37, object0);
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      node1.isOnlyModifiesArgumentsCall();
      node0.putBooleanProp(53, true);
      Node node2 = Node.newString("STRING ");
      node2.addSuppression("");
      node2.getChildBefore(node1);
      node2.setStaticSourceFile(staticSourceFile0);
      node0.isEquivalentTo(node1);
      node1.addChildrenToFront(node0);
      node0.isReturn();
      // Undeclared exception!
      try { 
        node0.wasEmptyNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      node0.getChildBefore((Node) null);
      node0.getIntProp(0);
      node0.getAncestors();
      node0.isOnlyModifiesThisCall();
      node0.toString();
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      boolean boolean0 = node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      stringWriter1.close();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-vS:'M'w8$,]&");
      node2.appendStringTree(stringWriter2);
      node2.putProp(54, "-vS:'M'w8$,]&");
      Node node3 = node0.copyInformationFrom(node1);
      node3.getSideEffectFlags();
      node1.detachChildren();
      node1.removeChildAfter(node2);
      Node node4 = node2.getFirstChild();
      node4.setOptionalArg(boolean0);
      node0.isBlock();
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isInstanceOf();
      node0.getType();
      node0.isVarArgs();
      node0.isOnlyModifiesArgumentsCall();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.children();
      Node node1 = Node.newString(0, "com.google.common.base.CharMatcher$10");
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString((String) null, 1, (-1));
      node2.getQualifiedName();
      String string0 = "";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      // Undeclared exception!
      try { 
        node2.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(46, (String) null);
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node0.isDec();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(8233, 8233, 42);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(397.211716923867, 42, 13);
      node0.getJsDocBuilderForNode();
      node0.getAncestor(126);
      node0.setIsSyntheticBlock(false);
      node0.isAnd();
      node0.isOnlyModifiesArgumentsCall();
      node0.isWith();
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((double) 12);
      node1.getDirectives();
      node0.replaceChild(node1, node1);
      node0.isAnd();
      int int0 = 0;
      node1.setChangeTime(int0);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      int int0 = (-2082);
      node0.detachFromParent();
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "com.google.common.base.CharMatcher$15";
      Node node0 = Node.newString("com.google.common.base.CharMatcher$15");
      node0.removeFirstChild();
      node0.getProp(130);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.common.base.CharMatcher$15 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 463;
      int int1 = 756;
      Node node0 = Node.newNumber((double) 126, 3114, 463);
      Node node1 = new Node(463, node0, node0, node0, 47, 0);
      Node node2 = new Node(126, node0, node0, node1, node1);
      int int2 = 1640;
      Node node3 = new Node(int1, node2, node1.INPUT_ID, int2);
      Node node4 = new Node(int0, node3, node3, node3, node2, node0.DECR_FLAG, node1.NO_SIDE_EFFECTS);
      String string0 = "%6yJsf~-";
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("vUT1]h_GXva[");
      Node node1 = new Node(1299);
      node0.copyInformationFrom(node1);
      node0.setString("");
      Node node2 = new Node(64, 13, 42);
      node0.replaceChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isStringKey();
      node0.setSourceFileForTesting("");
      Node node1 = node0.getLastSibling();
      node0.addChildToBack(node1);
      node0.type = 49;
      node0.detachChildren();
      node1.replaceChildAfter(node0, node0);
      node0.isAnd();
      // Undeclared exception!
      try { 
        node1.getNext();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "a!-!KcEycz{\"Dpih";
      jSTypeRegistry0.getObjectIndexKey();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = null;
      jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      simpleErrorReporter0.warning("a!-!KcEycz{\"Dpih", "Object#Key", (-723), 0);
      Node node0 = new Node((-723), (Node) null, (Node) null, (Node) null, (-723), (-723));
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      // Undeclared exception!
      try { 
        enumType1.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.jstype.RecordType", 0, 0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.getAncestors();
      jSDocInfo0.setInterface(false);
      node0.putProp(8202, jSDocInfo0);
      node0.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(33);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newString(0, "");
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.getInputId();
      node_SideEffectFlags0.setThrows();
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(1024);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPosition((-2809));
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isIf();
      // Undeclared exception!
      try { 
        node0.isDebugger();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1024
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = "-vS:'M'w8$,]&";
      Node node0 = Node.newNumber((double) 1271, (-303), (-455));
      node0.setQuotedString();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[1];
      Node node0 = null;
      try {
        node0 = new Node(0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(49, (Node) null);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.putIntProp(154, 154);
      Node node1 = new Node(1, node0);
      node1.useSourceInfoFromForTree(node0);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = new Node(33, 33, 787);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node[] nodeArray0 = new Node[7];
      Node node0 = Node.newString("~qa");
      nodeArray0[0] = node0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      nodeArray0[1] = null;
      Node node1 = Node.newNumber((double) 43);
      nodeArray0[2] = node1;
      Node node2 = Node.newString(2190, "com.google.javascript.rhino.Node$StringNode");
      nodeArray0[3] = node2;
      Node node3 = Node.newNumber((double) 56);
      nodeArray0[4] = node3;
      Node node4 = new Node(55, node0, node0);
      nodeArray0[5] = node4;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node5 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[6] = node5;
      Node node6 = new Node(8233, nodeArray0, 2, 2);
      node6.copyInformationFromForTree(node2);
      nodeArray0[1].children();
      nodeArray0[0].cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("", 1165, (-1936));
      node0.isVarArgs();
      node0.setType(2100);
      node0.isTypeOf();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("',$RX-$w1,kpv3>sp", false);
      Node node0 = Node.newString(6, "',$RX-$w1,kpv3>sp", 567, 154);
      node0.isVarArgs();
      node0.setString("',$RX-$w1,kpv3>sp");
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = node0.removeChildren();
      node0.isEquivalentToShallow((Node) null);
      String string0 = "5P{4U~V7xi";
      node1.setSourceFileForTesting(string0);
      node1.isSyntheticBlock();
      int int0 = 133;
      Node node2 = null;
      try {
        node2 = new Node(node1.SIDE_EFFECT_FLAGS, node1, node0, node0.QUOTED_PROP, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isStringKey();
      node0.setSourceFileForTesting("");
      node0.isNoSideEffectsCall();
      Node node1 = node0.getLastSibling();
      node0.addChildToBack(node1);
      node0.type = 49;
      node0.detachChildren();
      node1.replaceChildAfter(node0, node0);
      node0.getIntProp(node1.ORIGINALNAME_PROP);
      // Undeclared exception!
      try { 
        node0.isAnd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags6.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isInstanceOf();
      node0.replaceChildAfter((Node) null, (Node) null);
      node0.getType();
      node0.isVarArgs();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node3 = new Node(155, (-53), 15);
      node2.addChildrenToBack(node3);
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 6;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node(53, (Node) null, (Node) null, 54, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isInstanceOf();
      node0.getType();
      node0.isVarArgs();
      node0.isHook();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isInstanceOf();
      node0.getType();
      node0.isVarArgs();
      node0.isOnlyModifiesArgumentsCall();
      node0.getString();
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      node0.setSideEffectFlags(51);
      // Undeclared exception!
      try { 
        node0.isComma();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got IN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("", 2512, 1049);
      node0.isVarArgs();
      node0.setType(0);
      node0.isNew();
      node0.isWhile();
      node0.getNext();
      node0.isHook();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 35;
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node(35, (-835), (-2595));
      nodeArray0[0] = node0;
      Node node1 = new Node(47, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(3114, "Function");
      nodeArray0[2] = node2;
      Node node3 = new Node(38, node0);
      nodeArray0[3] = node3;
      Node node4 = new Node(node2.STATIC_SOURCE_FILE, nodeArray0);
      nodeArray0[4] = node4;
      Node node5 = null;
      try {
        node5 = new Node(int0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(567, (-1349), 38);
      node0.isDebugger();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = null;
      ObjectType objectType1 = FunctionType.getTopDefiningInterface((ObjectType) null, "MbwjI");
      JSType.toMaybeFunctionType((JSType) objectType0);
      String string0 = "CharMatcher.JAVA_DIGIT";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType1);
      // Undeclared exception!
      try { 
        enumType0.toMaybeEnumType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.0226777));
      node0.isSyntheticBlock();
      Node node1 = new Node(125);
      Node node2 = new Node(95, node1, node0, 751619276, (-2138));
      Node node3 = new Node(38, 1, 53);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(125);
      node0.getLength();
      Node node1 = new Node(0, node0, node0, 8192, 100);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-198), node0, node1, node1, node1);
      node0.addChildrenToBack(node2);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(4095);
      Node node4 = new Node(50, node0, node3, 30, 16);
      int int0 = 100;
      // Undeclared exception!
      try { 
        node4.setLength(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('Q');
      node2.isSwitch();
      node2.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node_SideEffectFlags0.setAllFlags();
      node2.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("-{=SO\"{_W:3");
      node1.getSourceOffset();
      node1.setWasEmptyNode(true);
      node0.isDefaultCase();
      node1.isTrue();
      node0.mayMutateArguments();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(125);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      int int1 = 8192;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node((-75), 2116, (-75));
      Node node1 = Node.newString("");
      Node.newNumber(0.0, 36, 44);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.newNumber(0.0);
      node2.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node4 = new Node(8, node3, node3, node2, node1, 42, 57);
      node4.addChildrenToBack(node3);
      node1.hasOneChild();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.0226777));
      node0.children();
      Node node1 = Node.newString(1, "com.google.common.base.CharMatcher$10");
      Node node2 = new Node(2076, node0, 51, 57);
      node2.isEquivalentToShallow(node0);
      Node node3 = Node.newString("com.google.common.base.CharMatcher$1", 2, 36);
      node1.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node node4 = Node.newString("com.google.common.base.CharMatcher$1");
      node1.getChangeTime();
      node2.isInstanceOf();
      node3.getType();
      node3.isVarArgs();
      node4.isOnlyModifiesArgumentsCall();
      Node node5 = new Node(117);
      node2.getString();
      node4.siblings();
      node0.removeChild(node4);
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setMutatesArguments();
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(132, 2888, (-727));
      Node node1 = Node.newString(53, "b,/oa");
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newNumber((double) (-4096), 1965, (-182));
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node0.addChildToBack(node3);
      node1.setSourceEncodedPositionForTree(8);
      Node[] nodeArray0 = new Node[5];
      Node node4 = new Node(2, node1, 29, 57);
      nodeArray0[0] = node4;
      nodeArray0[1] = node2;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      int int0 = 960;
      int int1 = 0;
      Node node5 = null;
      try {
        node5 = new Node(node0.FLAG_GLOBAL_STATE_UNMODIFIED, nodeArray0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(false);
      node2.isThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node1.mayMutateGlobalStateOrThrow();
      node1.isDec();
      node2.addChildAfter(node0, node1);
      node2.isDebugger();
      node3.isWhile();
      Node node4 = Node.newNumber((double) node0.QUOTED_PROP);
      node4.getNext();
      node2.isHook();
      node4.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node node1 = Node.newString("CAST");
      node0.getChangeTime();
      node1.isInstanceOf();
      node0.getType();
      node1.isVarArgs();
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(113);
      node1.getString();
      node2.siblings();
      node2.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber((-3054.070593776), (-751), (-751));
      node0.setInputId((InputId) null);
      node0.getSideEffectFlags();
      node0.isArrayLit();
      Node node1 = Node.newString("dhRWR~4O", 52, 33);
      node1.cloneTree();
      node1.getDirectives();
      node1.addChildToBack(node0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node.mergeLineCharNo(11, 11);
      int int0 = 29;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.getType("Object#Element");
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      // Undeclared exception!
      try { 
        jSType0.findPropertyType(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node4 = new Node(54, 120, 55);
      node0.addChildrenToBack(node3);
      node2.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node4 = node1.clonePropsFrom(node3);
      node4.setLineno(node0.DECR_FLAG);
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node1.isTry();
      node1.isCast();
      node1.getIntProp(2);
      node1.addChildrenToFront(node0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.isNE();
      node2.isTry();
      node1.isCast();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setSourceEncodedPositionForTree(480);
      Node node1 = Node.newString(51, "P0~A[(&V0' 3f|b", 3711, 51);
      node1.setVarArgs(false);
      node0.isThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(10);
      node_SideEffectFlags0.setMutatesArguments();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node1;
      nodeArray0[7] = node0;
      nodeArray0[8] = node1;
      Node node2 = new Node(55, nodeArray0, 3711, 1324);
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "";
      int int0 = 1049;
      Node node0 = Node.newString("", 2512, 1049);
      node0.isQuotedString();
      node0.isOnlyModifiesArgumentsCall();
      node0.isWith();
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((double) 46);
      Node node2 = Node.newString(4095, "", 2076, 31);
      node2.getDirectives();
      node0.replaceChild(node2, node2);
      node0.isReturn();
      Node node3 = null;
      try {
        node3 = new Node(node1.FLAG_LOCAL_RESULTS, node0.LAST_PROP, node2.DECR_FLAG);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(92.14739);
      node0.isOnlyModifiesThisCall();
      node0.toString();
      node0.getSourceOffset();
      Node node1 = new Node(42, node0, node0, node0);
      node1.addChildAfter(node0, node0);
      node0.addChildrenToFront(node1);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      node0.cloneNode();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.addChildBefore(node2, node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      node0.getAncestor(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node0.isNull();
      node2.checkTreeEquals(node3);
      node3.getQualifiedName();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(48, node0, node0, 1, 2);
      Node node2 = new Node(615, node1, node0, 57, 40);
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(66, 66, 66);
      node0.setSideEffectFlags(66);
      // Undeclared exception!
      try { 
        node0.isComma();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 66
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of("Object#Key", "re9WjU%?8n`@lzFzR", "...[");
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.putIntProp(32, 32);
      Node node1 = new Node(40, node0, node0);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(1, node0);
      node2.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.removeChild(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.getType();
      node0.isVarArgs();
      node0.isScript();
      node0.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.clonePropsFrom((Node) null);
      int int0 = 536870912;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString((-1458), "_MxEaFX8%%Gx", 5193, 102);
      node0.isLabelName();
      Object object0 = new Object();
      node0.putProp(1802, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.getProp(388);
      node0.putProp((-1157), (Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.0226777));
      node0.children();
      Node node1 = Node.newString(1, "com.google.common.base.CharMatcher$10");
      Node node2 = new Node(2076, node0, 51, 57);
      node2.isEquivalentToShallow(node0);
      Node node3 = Node.newString("com.google.common.base.CharMatcher$1", 2, 36);
      node1.getQualifiedName();
      Stack<JSType> stack0 = new Stack<JSType>();
      node3.clonePropsFrom(node0);
      node2.setLineno(1992);
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("YYD", 29, 1049);
      node0.isUnscopedQualifiedName();
      node0.setType(1601);
      node0.isTypeOf();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      Node node1 = Node.newString("", 42, 92);
      node0.isGetProp();
      node0.setType(57);
      node0.isNew();
      node1.getDouble();
      node1.isWhile();
      Node node2 = new Node(node1.FLAG_THIS_UNMODIFIED, node1);
      // Undeclared exception!
      try { 
        node2.getNext();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  42 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(111, "", (-5364), 45);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = Node.newString("");
      node0.getChangeTime();
      node1.isInstanceOf();
      node0.getType();
      node1.isVarArgs();
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(36);
      node2.getString();
      node1.siblings();
      int int0 = (-4096);
      Node node3 = Node.newString(int0, string0, node0.FLAG_ARGUMENTS_UNMODIFIED, node0.SIDE_EFFECTS_FLAGS_MASK);
      // Undeclared exception!
      try { 
        node1.removeChild(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("", 2512, 1049);
      node0.getQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      jSType0.isArrayType();
      jSType0.canCastTo((JSType) null);
      node0.putProp(2512, jSType0);
      Node node1 = node0.getFirstChild();
      Node node2 = Node.newString("TRUE", 12, 711);
      node2.addChildrenAfter((Node) null, (Node) null);
      node0.isOptionalArg();
      node2.isWhile();
      String string0 = "ASSIGN_MOD";
      Node.newString(string0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node1.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags7.setAllFlags();
      Node node0 = Node.newString("Not(");
      Node node1 = new Node(38, node0, node0, node0, 4095, 12);
      node1.getChangeTime();
      node0.isInstanceOf();
      node1.getType();
      node0.isVarArgs();
      node0.isHook();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.putIntProp(6, 6);
      Node node1 = new Node((-2701), node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.removeChild(node0);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(1023.84659627892);
      Node node1 = new Node(63, node0);
      node1.children();
      node1.setSourceEncodedPosition(55);
      node1.getChangeTime();
      node0.getQualifiedName();
      Node node2 = node1.getFirstChild();
      node2.addChildrenAfter(node1, node0);
      String string0 = "w}hPqa";
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        ObjectType.cast(jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags5.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.getType();
      node0.isVarArgs();
      node0.isScript();
      node0.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      node0.getExistingIntProp(43);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      node0.isString();
      node0.isBlock();
      Node node1 = null;
      Node node2 = new Node(2, (Node) null, 46, 1);
      node2.toStringTree();
      int int0 = (-325);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.getType();
      node0.isVarArgs();
      node0.isScript();
      node0.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node((-2753));
      node1.getQualifiedName();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('Q');
      node2.isSwitch();
      node2.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node_SideEffectFlags0.setAllFlags();
      node2.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("-{=SO\"{_W:3");
      node1.getSourceOffset();
      Node node3 = new Node(46, node0, node0, 465, 305);
      node1.isInc();
      node_FileLevelJsDocBuilder0.append("-{=SO\"{_W:3");
      node1.isEquivalentToTyped(node3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.setType(111);
      node0.getLineno();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("YYD", 29, 1049);
      node0.isUnscopedQualifiedName();
      node0.setType(1601);
      node0.getNext();
      node0.isHook();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("", 2512, 1049);
      node0.isVarArgs();
      node0.getChangeTime();
      node0.hasChildren();
      Node node1 = new Node(41, node0, node0, node0, node0, 2401, 0);
      node1.setType(48);
      node1.isTypeOf();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.putIntProp((-164), 57);
      Node node3 = new Node(615, node1);
      node2.useSourceInfoFromForTree(node0);
      Node node4 = Node.newString((-1182), "-{=SO\"{_W:3", 2450, (-1182));
      node4.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node4 = Node.newString("b,/oa", 782, 120);
      node4.useSourceInfoIfMissingFromForTree(node1);
      node1.replaceChildAfter(node3, node4);
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = Node.newNumber((double) 1906, 38, 1906);
      node0.isDo();
      node0.setDouble(38);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(15, 43, 43);
      Node node1 = new Node(55, node0, node0, node0, node0, (-318), 0);
      boolean boolean0 = true;
      node1.setString("4<4rS,Ip8-Z&(voa*");
      node1.putBooleanProp(node0.DIRECT_EVAL, boolean0);
      node0.addChildToBack(node1);
      node1.isEquivalentTo(node0);
      node0.removeChild(node1);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toString(false, false, false);
      node0.setString("8\"Hb)3vMf");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(1906, node0, node0, 30, 8);
      node0.getSideEffectFlags();
      node1.isQualifiedName();
      Node node2 = new Node(31, node0, node1, node1, node1);
      node1.addChildrenToBack(node0);
      node1.getJsDocBuilderForNode();
      int int0 = 415;
      Node node3 = null;
      try {
        node3 = new Node(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString((-1980), "CHECKED_UNKNOWN_TYPE", 2216, 4);
      Node node1 = new Node(1960, node0, node0, 48, 130);
      node1.isFromExterns();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('Q');
      node2.isSwitch();
      node2.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node_SideEffectFlags0.setAllFlags();
      node2.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("-{=SO\"{_W:3");
      node1.getSourceOffset();
      Node node3 = new Node((-279), node1);
      node2.getNext();
      node0.isHook();
      Node node4 = new Node(2221, node2, node1, node2, node1);
      node4.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1532);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node2.isUnscopedQualifiedName();
      node0.isTry();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      int int0 = Node.POST_FLAG;
      node0.isVarArgs();
      node0.isScript();
      node0.isObjectLit();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node((-2753));
      node1.getChangeTime();
      node1.getQualifiedName();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.setIsSyntheticBlock(true);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node node3 = Node.newString(2, "-{=SO\"{_W:3", 1, 32);
      node2.getChangeTime();
      node2.isEquivalentTo((Node) null);
      node2.getType();
      node1.isVarArgs();
      node1.isScript();
      node1.isGetProp();
      node2.mayMutateGlobalStateOrThrow();
      Node node4 = new Node(node0.IS_CONSTANT_NAME);
      node3.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.isCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setAllFlags();
      Node node0 = Node.newString("Not(");
      Node node1 = Node.newString((-830), "this");
      node1.getChangeTime();
      node1.isEquivalentTo(node0);
      node1.getType();
      node0.isVarArgs();
      node1.isScript();
      node0.isGetProp();
      node1.mayMutateGlobalStateOrThrow();
      node0.getExistingIntProp((-318));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("", 2512, 1049);
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) stack0);
      Node node2 = node1.clonePropsFrom(node0);
      node2.setLineno(2216);
      node2.isAnd();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      node0.copyInformationFromForTree(node1);
      node0.children();
      Node node2 = node0.cloneTree();
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(873);
      Node node4 = new Node(120, node3, node2, 29, 4);
      node2.setLength(55);
      node0.isInc();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-198), node0, node1, node1, node1);
      node0.addChildrenToBack(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node1.isNE();
      node0.isTry();
      node0.isCast();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1049);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node0 = new Node(1403, 1403, 1049);
      Node node1 = new Node(1049, node0, (-2290), 29);
      node1.addChildrenToFront(node0);
      int int0 = 1463;
      node0.getIntProp(int0);
      int int1 = 42;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("2rA}TL%o8=-j");
      node0.isDebugger();
      node0.isOnlyModifiesThisCall();
      int int0 = 795;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(795);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node0.isFromExterns();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.getIntProp(29);
      node0.getDouble();
      node0.getLength();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 2rA}TL%o8=-j is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isSwitch();
      node0.isIf();
      node0.setString("N07%c{cn.B");
      Node node1 = Node.newString(43, "[qwH@");
      node0.setType((-244));
      node0.setLineno(3700);
      node0.isIn();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node.newString(111, "", (-5346), 45);
      Node node0 = Node.newString("");
      node0.type = 57;
      node0.isCase();
      node0.setDouble(53);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newString(46, "", (-2430), 3);
      node0.setJSType((JSType) null);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      Node node3 = node1.cloneTree();
      node1.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node0.isNE();
      node3.isTry();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "2rA}TL%o8=-j";
      Node node0 = Node.newString("2rA}TL%o8=-j");
      node0.isDebugger();
      node0.isOnlyModifiesThisCall();
      int int0 = 795;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(795);
      node_SideEffectFlags0.setThrows();
      String string1 = null;
      Node node1 = Node.newString(154, (String) null, 4, (-244));
      int int1 = 1403;
      // Undeclared exception!
      try { 
        Node.newString(string1, int1, node1.VAR_ARGS_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newString("j/~L`2", 118, (-2765));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.replaceChildAfter(node2, node1);
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString(154, "", 553, 553);
      Node node1 = new Node(154, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.OBJECT_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSTypeNative jSTypeNative7 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[7] = jSTypeNative7;
      JSTypeNative jSTypeNative8 = JSTypeNative.FUNCTION_PROTOTYPE;
      jSTypeNativeArray0[8] = jSTypeNative8;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      node_NodeMismatch0.equals(jSType0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 40);
      node0.copyInformationFrom(node1);
      node0.setString("");
      int int0 = 35;
      String string0 = "'BN7c";
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      Node node0 = Node.newString("", 111, 111);
      node0.isFromExterns();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      int int0 = 29;
      node0.getIntProp(29);
      Node node1 = new Node(4, node0, node0, node0);
      node1.getDouble();
      double double0 = 538.58;
      int int1 = (-195);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType1;
      JSType jSType2 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType1, "Not declared as a type name");
      jSTypeArray0[2] = jSType2;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Element", node0, jSType2);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getRootNode();
      node0.copyInformationFromForTree((Node) null);
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 1213, 4095);
      Node node1 = Node.newString((-806), "com.google.common.collect.UnmodifiableIterator", 40, 240);
      node0.setType(1919);
      node1.getLineno();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isFromExterns();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getIntProp((-423));
      Node node2 = Node.newNumber((double) 57, 5188, (-499));
      node2.getDouble();
      Node node3 = new Node(40, node0, node1, node2, (-2010), 46);
      node3.getLength();
      node2.detachFromParent();
      Node.mergeLineCharNo((-836), (-1880));
      Node node4 = Node.newNumber((double) 2);
      node3.isQuotedString();
      node1.getIndexOfChild(node4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 1213, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSourceEncodedPositionForTree(29);
      node3.setVarArgs(false);
      node0.isThrow();
      Node node4 = new Node(48);
      node4.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(39);
      node1.mayMutateGlobalStateOrThrow();
      node3.isDec();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      nodeArray0[2] = node4;
      nodeArray0[3] = node2;
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getIntProp(30);
      node0.getDouble();
      node2.getLength();
      node1.detachFromParent();
      int int0 = 1105;
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "2rA}TL%o8=-j";
      Node node0 = Node.newString("2rA}TL%o8=-j");
      node0.isDebugger();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(795);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node0.isFromExterns();
      node_SideEffectFlags2.setMutatesArguments();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(12, nodeArray0, 0, 52);
      node1.addChildAfter(nodeArray0[0], nodeArray0[1]);
      // Undeclared exception!
      try { 
        node1.getLastSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      node1.isUnscopedQualifiedName();
      node0.isBreak();
      Node node2 = new Node(102);
      node2.isOnlyModifiesArgumentsCall();
      node2.isWith();
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newNumber((double) 39);
      Object object0 = new Object();
      Node.newNumber((double) 2, 5, 2);
      node3.isDo();
      node0.setDouble(30);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      int int0 = Node.POST_FLAG;
      node0.isVarArgs();
      node0.isScript();
      node0.isObjectLit();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node((-2753));
      node1.getChangeTime();
      node1.getQualifiedName();
      node1.getJSDocInfo();
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(154, "", 553, 553);
      Node node1 = new Node(154, node0);
      node1.checkTreeEqualsImpl(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      node1.addChildToBack(node0);
      int int0 = (-313);
      node0.setSourceEncodedPositionForTree(int0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newString(46, "", (-2430), 3);
      node0.setJSType((JSType) null);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      Node node3 = node1.cloneTree();
      node1.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node0.isNE();
      node3.isTry();
      node0.isCast();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getChangeTime();
      node0.hasChildren();
      Node node1 = new Node(47, node0, node0, node0, node0, 56, (-1431));
      node0.setType(4095);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("second new child has existing parent", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isTypeOf();
      node1.setCharno(29);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("YYD", 1049, 1049);
      node0.putBooleanProp(1049, true);
      node0.isUnscopedQualifiedName();
      node0.setType(32);
      node0.isTypeOf();
      node0.isParamList();
      node0.putBooleanProp(1049, false);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(31, nodeArray0, 31, 4095);
      node0.getDouble();
      Node node1 = new Node(node0.IS_NAMESPACE, node0, node0, node0, node0, node0.FLAG_NO_THROWS, node0.OPT_ARG_NAME);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DELPROP 31 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      boolean boolean0 = true;
      node0.toString(true, true, true);
      Node node1 = new Node(39, node0, node0, node0, 54, 45);
      node0.getChangeTime();
      node1.getType();
      node0.isVarArgs();
      boolean boolean1 = node1.isHook();
      node1.getString();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      String string0 = null;
      node_NodeMismatch0.equals(string0);
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        node0.toString(boolean2, boolean0, boolean1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1496), "", 48, 1725);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime((-1417));
      node0.getInputId();
      node0.isParamList();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 1213, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node3 = new Node((-6), node0, node0, 25, 31);
      node2.isAdd();
      node3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.setVarArgs(false);
      node0.isThrow();
      Node node1 = new Node(43);
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(25);
      Node node2 = new Node(57, node1);
      node2.isDec();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getIntProp(5);
      node2.getDouble();
      node2.getLength();
      node1.detachFromParent();
      int int0 = 112;
      Node.mergeLineCharNo(int0, node0.EMPTY_BLOCK);
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      node0.isVar();
      Node node1 = Node.newString("");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isCase();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(125);
      node0.setString("z2z!)VU");
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(node0.DIRECTIVES, string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 40);
      node0.copyInformationFrom(node1);
      Node node2 = Node.newString("");
      node2.removeProp(4095);
      Node node3 = new Node(0, node2, node2, node0, node0, 12, 1002);
      Node node4 = new Node(8192, node3, node3, 463, 2629);
      node0.isInc();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(154, "", 553, 553);
      Node node1 = new Node(154, node0);
      node1.checkTreeEqualsImpl(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      Node node2 = Node.newString(2, "Object#Element", 98, 57);
      Node node3 = Node.newString("Object#Key");
      node3.isCase();
      node1.setDouble(0.0);
      node2.getChildBefore(node0);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(16, "-{=SO\"{_W:3", 43, 31);
      node1.setQuotedString();
      Node node2 = Node.newString("-vS:'M'w8$,]&", (-455), 1271);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('Q');
      node2.isSwitch();
      node2.setChangeTime(48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node_SideEffectFlags0.setAllFlags();
      Node node3 = Node.newString("-vS:'M'w8$,]&");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = new Node(491, node1, node1);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node4.setJSDocInfo(jSDocInfo1);
      node1.addSuppression("P ");
      node0.isHook();
      node3.getString();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.removeChild(node0);
      node0.isAssign();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString(154, "", 553, 553);
      Node node1 = new Node(154, node0);
      node1.checkTreeEqualsImpl(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.setChangeTime(37);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString((-286), "q*kI;f", (-628), (-286));
      Node node1 = new Node((-726), node0, node0, node0, node0);
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.isSwitch();
      node0.addChildToFront((Node) null);
      // Undeclared exception!
      try { 
        node0.isIf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      jSType0.isArrayType();
      jSType0.canCastTo((JSType) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2642));
      Node node0 = Node.newString(1274, "Not declared as a type name");
      node0.setType(1227);
      node0.setLineno(2512);
      node0.isIn();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(13);
      node0.isAssign();
      node0.getAncestors();
      Node node1 = new Node(53);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isDelProp();
      node0.isIf();
      node0.addSuppression("");
      node0.toString(false, true, false);
      Node node1 = new Node(50, node0, node0, node0, 57, 46);
      node0.getChangeTime();
      Node node2 = new Node(48, node1, node1, node1, node0, 36, 16);
      node2.getType();
      node2.isVarArgs();
      node0.isHook();
      String string0 = node1.getString();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(120, 132, 132);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = Node.newString("", (-943), 40);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.replaceChildAfter(node0, node1);
      node2.getAncestors();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.02268));
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.isFromExterns();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.getIntProp(86);
      Node node1 = Node.newNumber(0.0, 40, 30);
      node1.getDouble();
      Node node2 = new Node(52, node1, node0, 50, 12);
      Node node3 = new Node(2578, node1, node2, node2, 902, 355);
      node3.getLength();
      Node node4 = node2.detachFromParent();
      int int0 = 2276;
      Node.mergeLineCharNo(int0, node0.COLUMN_BITS);
      Node.newNumber((double) node3.EMPTY_BLOCK);
      node4.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(100, 100, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      Node.newString(1, "GE");
      node2.setType(63);
      node3.setLineno(2);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-12));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = Node.newString(6, "',$RX-$w1,kpv3>sp", 567, 154);
      node0.setString("',$RX-$w1,kpv3>sp");
      Node node1 = Node.newString(55, "',$RX-$w1,kpv3>sp", 53, 4095);
      node0.isEquivalentToShallow(node1);
      node1.setSourceFileForTesting("5P{4U~V7xi");
      node1.isSyntheticBlock();
      Node node2 = new Node(42, node1, node0, 36, 133);
      Node node3 = node2.cloneTree();
      node2.wasEmptyNode();
      node1.getType();
      node3.isVarArgs();
      node1.isOnlyModifiesArgumentsCall();
      Node node4 = new Node(57, node0, node0, node3);
      int int0 = (-871);
      Node node5 = new Node(int0, node0, node4, node1, node4);
      node5.isCase();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = null;
      Node node1 = new Node(6, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Node node1 = Node.newString("Vaxc2{#");
      node1.getChangeTime();
      node1.isInstanceOf();
      node0.getType();
      node1.isVarArgs();
      node0.isOnlyModifiesArgumentsCall();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.getType();
      node0.isVarArgs();
      node0.isScript();
      node0.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node((-2753));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getQualifiedName();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.setVarArgs(false);
      node0.isQualifiedName();
      node0.isThrow();
      node0.setOptionalArg(true);
      Node node1 = new Node(43);
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(25);
      Node node2 = new Node(57, node1);
      node2.isDec();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getIntProp(5);
      node2.getDouble();
      node2.getLength();
      node1.detachFromParent();
      int int0 = 112;
      Node.mergeLineCharNo(int0, node0.EMPTY_BLOCK);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.getType();
      node0.isTry();
      node0.isCast();
      Node node1 = new Node(43, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.isNE();
      node2.isTry();
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node3.isAnd();
      node0.getLength();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(125);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.getAncestors();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = Node.newString(50, "synthetic", 56, (-1212));
      Node node2 = node1.clonePropsFrom(node0);
      node1.setLineno(160);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isAnd();
      Node node4 = new Node(83, node3, node2, 2298, (-549));
      node4.isNE();
      node0.getSideEffectFlags();
      Node node5 = Node.newString(4095, "Object#Element");
      node5.isEmpty();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = new Node(37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.newNumber(2455.24405445062, 3897, 30);
      node0.getDouble();
      int int0 = 302;
      int int1 = 148;
      Node node4 = new Node(int0, node0, node3, node3, node2.SLASH_V, int1);
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.common.collect.UnmodifiableIterator 1213 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.02268));
      node0.isSyntheticBlock();
      Node node1 = new Node(125);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("`Pv#mP{)U4#vj", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.setSourceEncodedPositionForTree(49);
      node0.setVarArgs(false);
      node1.isThrow();
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-165));
      node0.mayMutateGlobalStateOrThrow();
      node1.isDec();
      Node node2 = new Node(12, (Node[]) null, 57, 57);
      node0.addChildAfter(node1, node2);
      node2.getLastSibling();
      node1.isDebugger();
      node2.isWhile();
      Node.newNumber((double) node0.STATIC_SOURCE_FILE);
      // Undeclared exception!
      try { 
        node2.getNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isDelProp();
      Node node1 = Node.newString((-510), "p4 (E7dwPP)EK.P;");
      node0.setIsSyntheticBlock(false);
      node1.addChildToFront(node0);
      Node node2 = Node.newNumber((-1.0), 57, 120);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node0.addChildToBack(node2);
      node3.setSourceEncodedPositionForTree((-1924));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(29);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      Node node4 = new Node(615, 2919, (-808));
      node0.addChildrenToBack(node4);
      node0.setDouble(2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.removeFirstChild();
      node0.setSourceEncodedPositionForTree(598);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node node4 = new Node(54, 120, 55);
      node0.addChildrenToBack(node3);
      node4.setDouble(50);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(102);
      node2.isOnlyModifiesArgumentsCall();
      node2.isWith();
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newNumber((double) 39);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[2] = jSTypeNative0;
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeRegistry0.createObjectType(") must not be negative", node2, (ObjectType) templateType0);
      jSTypeNativeArray0[3] = jSTypeNative0;
      node0.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node0.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(89);
      stringWriter0.append(',');
      node0.isSwitch();
      node1.setChangeTime(11);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2953));
      node_SideEffectFlags0.setAllFlags();
      node0.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      node1.getSourceOffset();
      node1.isDefaultCase();
      node1.isTrue();
      node1.mayMutateArguments();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(295, "", (-516), 295);
      node0.isAdd();
      Node node1 = new Node(50, node0, node0, node0, node0);
      node0.clonePropsFrom(node1);
      Node node2 = Node.newString(43, "", 2, 0);
      node2.addChildToFront(node0);
      node2.setChangeTime(node0.IS_CONSTANT_NAME);
      node0.isEquivalentToShallow(node2);
      // Undeclared exception!
      try { 
        node0.isNot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-198), node0, node1, node1, node1);
      node0.addChildrenToBack(node2);
      node0.getJsDocBuilderForNode();
      node1.setDouble(42);
      Node node3 = new Node(4095, 16, 15);
      Node node4 = Node.newNumber((double) 38);
      node2.getNext();
      node2.isHook();
      Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", (-2619), 53);
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node3.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ImmutableList.of();
      Node node0 = new Node(13);
      node0.isAssign();
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2245));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getIntProp(2147483645);
      Node node1 = Node.newNumber((double) 40);
      node1.getDouble();
      node1.getLength();
      node1.detachFromParent();
      int int0 = 303;
      Node.mergeLineCharNo(int0, node1.VAR_ARGS_NAME);
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 1213, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSourceEncodedPositionForTree(29);
      node0.isThrow();
      Node node4 = new Node(48);
      node4.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(39);
      node1.mayMutateGlobalStateOrThrow();
      node3.isDec();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      nodeArray0[3] = node2;
      node0.isString();
      node0.getIntProp(30);
      node0.getDouble();
      node2.getLength();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.common.collect.UnmodifiableIterator 1213 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString("Object#Key");
      node0.hasOneChild();
      Node.extractLineno(42);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(117);
      node0.isAssign();
      node0.getAncestors();
      Node node1 = new Node(4095);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(1049, node0, node0);
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getChangeTime();
      node0.hasChildren();
      node0.setType(56);
      node0.isHook();
      node0.getJSDocInfo();
      Node node1 = new Node(10, node0, node0, node0);
      node0.srcref(node1);
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCowW@aHQ}Qh");
      node0.isAnd();
      node0.setChangeTime(615);
      node0.isVar();
      Node node1 = Node.newString("");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isCase();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node.newNumber(2381.25078, 120, 500);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node node0 = Node.newString("H");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, 329, (-17));
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node2.isNE();
      Node node4 = Node.newNumber((-1741.7177), 53, 53);
      node4.isTry();
      node4.isEquivalentTo(node3, false, false, false);
      Node node5 = new Node(43, 1502, 57);
      node5.isBreak();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-198), node0, node1, node1, node1);
      node0.addChildrenToBack(node2);
      node0.getJsDocBuilderForNode();
      node1.setDouble(42);
      Node node3 = new Node(4095, 16, 15);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node1.isNE();
      node3.isTry();
      node3.isCast();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.toString();
      // Undeclared exception!
      try { 
        node0.isGetProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(10, "b(|G1=oK~6Z~EA");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getChangeTime();
      node0.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node0.isNE();
      node0.isTry();
      node0.isCast();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = (-2888);
      Node node0 = Node.newNumber((double) (-2888), 1174, 3658);
      Node node1 = new Node((-2888), node0, node0, node0);
      Node node2 = new Node(4264, node1, node0, node1, (-983), (-4096));
      Node node3 = new Node(int0, node2);
      double double0 = 1.0;
      Node node4 = Node.newNumber(double0);
      node3.checkTreeTypeAwareEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, (-47), (-47));
      Node node1 = Node.newString(55, "f");
      node0.srcrefTree(node1);
      node0.isVarArgs();
      node0.isQualifiedName();
      node0.isDefaultCase();
      node1.getLastChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.valueOf();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString((-1375), "3{/4(f0Q,@2VH)-Fa1");
      node0.getDirectives();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(2147483645, node0, 86, 41);
      node0.getSourceOffset();
      node0.setWasEmptyNode(false);
      node1.isEquivalentToShallow(node0);
      node0.isCatch();
      node1.isQuotedString();
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newNumber((double) 37);
      node2.isEquivalentToTyped(node1);
      node2.isAssignAdd();
      Node.extractCharno(67);
      node1.isFor();
      Node node3 = node2.copyInformationFrom(node1);
      InputId inputId0 = new InputId("3{/4(f0Q,@2VH)-Fa1");
      node3.setInputId(inputId0);
      node3.isFromExterns();
      Node node4 = node3.removeChildAfter(node0);
      Node node5 = node4.srcrefTree(node1);
      node2.isVar();
      node2.isSwitch();
      node3.isName();
      node2.isIf();
      node5.addChildToBack(node2);
      // Undeclared exception!
      try { 
        node0.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFalse();
      node0.isUnscopedQualifiedName();
      node0.getExistingIntProp(114);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString((-1375), "3{/4(f0Q,@2VH)-Fa1");
      node0.getDirectives();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(12, node0, node0);
      node0.getSourceOffset();
      node0.setWasEmptyNode(false);
      node1.isEquivalentToShallow(node0);
      node0.isCatch();
      node1.isQuotedString();
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newNumber((double) 37);
      node2.isEquivalentToTyped(node1);
      node2.isAssignAdd();
      Node.extractCharno(67);
      node1.isFor();
      Node node3 = node2.copyInformationFrom(node1);
      InputId inputId0 = new InputId("3{/4(f0Q,@2VH)-Fa1");
      node3.setInputId(inputId0);
      node3.isFromExterns();
      Node node4 = node3.removeChildAfter(node0);
      Node node5 = node4.srcrefTree(node1);
      node2.isVar();
      node2.isSwitch();
      node3.isName();
      node2.isIf();
      node5.addChildToBack(node2);
      // Undeclared exception!
      try { 
        node0.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(0, node0, node0, node1, 2, 38);
      Node node3 = Node.newString("");
      int int0 = 8192;
      node3.removeProp(4095);
      Node node4 = new Node(0, node3, node3, node0, node0, 12, 1002);
      int int1 = 463;
      int int2 = 2629;
      Node node5 = null;
      try {
        node5 = new Node(int0, node4, node4, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      node0.hasChild(node1);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node1.isAdd();
      Node node2 = Node.newString((-4565), "");
      node2.setType(4095);
      node1.setLineno(109);
      node0.isThis();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node node0 = Node.newString("H");
      node0.getJsDocBuilderForNode();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.children();
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node1.isNE();
      node2.isTry();
      node1.isEquivalentTo(node2, false, false, false);
      Node node3 = new Node(43, 1502, 57);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(120, 120, 101);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      Node.newString("4!7qnLp__11[HrYsm");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node3.cloneNode();
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node3.isHook();
      node1.mayMutateGlobalStateOrThrow();
      node1.isDec();
      node2.addChildAfter(node0, node1);
      node1.getLastSibling();
      node2.isDebugger();
      node3.isWhile();
      Node node4 = Node.newNumber((double) node0.QUOTED_PROP);
      node4.getNext();
      node2.isHook();
      node4.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      node0.isVar();
      Node node1 = Node.newString("");
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.hasOneChild();
      node1.cloneTree();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      Node node2 = Node.newString(2394, "");
      node2.setType(54);
      node1.setLineno(4095);
      node1.isThis();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      node0.copyInformationFromForTree(node1);
      node0.children();
      Node node2 = Node.newString(4095, "com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(873);
      Node node4 = new Node(120, node3, node2, 29, 4);
      node2.setLength(55);
      node0.isInc();
      node4.isFunction();
      node3.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node0.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(89);
      stringWriter0.append(',');
      node0.isSwitch();
      node1.setChangeTime(11);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2953));
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node0.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      node1.getSourceOffset();
      node1.isDefaultCase();
      node1.isTrue();
      node1.mayMutateArguments();
      node0.getJSDocInfo();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = (-2969);
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = ")g6AW`3hJ%bk|m~";
      Node node0 = Node.newString(15, "Object#Element");
      Node node1 = new Node(153, node0);
      Node node2 = new Node((-2969), node1, node0);
      ObjectType objectType0 = null;
      String string1 = "com.google.javascript.rhino.jstype.TemplateTypeMap";
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(objectType0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.putIntProp(6, 6);
      Node node1 = new Node(8, node0, 38, 4115);
      node0.useSourceInfoFromForTree(node1);
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      node0.isVar();
      Node node1 = Node.newString("");
      node0.useSourceInfoFrom(node1);
      node1.isLabel();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.children();
      Node node1 = Node.newString(57, "com.google.javascript.rhino.jstype.NamespaceType");
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(1971);
      Node node3 = new Node(50, node2, node1, 8, 21);
      node0.setLength(43);
      node2.isInc();
      node3.isFunction();
      node3.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCowW@aHQ}Qh");
      node0.setChangeTime(615);
      Node node1 = Node.newString("");
      node1.isCase();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = Node.newNumber(2381.25078, 120, 500);
      node0.isReturn();
      node2.getChildAtIndex(38);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = null;
      node0.addChildrenToBack((Node) null);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(52);
      node0.addSuppression("&I3r^38q5ZU");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("QG<]", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isEquivalentToTyped((Node) null);
      String string0 = "h";
      Node node1 = Node.newString(node0.FLAG_ARGUMENTS_UNMODIFIED, string0);
      node1.addChildAfter(node0, node0);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.02268));
      node0.isTypeOf();
      Node node1 = new Node(125);
      Node node2 = new Node(95, node1, node0, 751619276, (-2138));
      node1.getType();
      node2.isVoid();
      node1.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      Node node3 = new Node(1);
      node0.getQualifiedName();
      node0.isCall();
      node1.isEmpty();
      node1.checkTreeEquals(node0);
      node3.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setAllFlags();
      Node node0 = Node.newString("Not(");
      node0.getChangeTime();
      node0.isEquivalentTo(node0);
      node0.isNE();
      Node node1 = Node.newString((-2619), "Not(");
      node0.isTry();
      node0.isCast();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 21);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node0.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      node0.toStringTree();
      node1.setChangeTime(54);
      node0.getJSType();
      node1.getString();
      int int0 = 1411;
      Node node2 = new Node(int0, node1, node1, node1, node1);
      double double0 = (-2508.0);
      Node node3 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node3.getJsDocBuilderForNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE 52 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = (-5364);
      Node node0 = Node.newString(111, "", (-5364), 45);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node0.srcrefTree(node1);
      Node node2 = Node.newString((-2357), "GN'c1a(,3.");
      node2.setIsSyntheticBlock(false);
      Node node3 = Node.newNumber((double) 54, 48, 46);
      node1.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node2);
      node2.setSourceEncodedPositionForTree(2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      Node node4 = new Node(10, 49, 103);
      node1.addChildrenToBack(node0);
      node1.setDouble(int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node0.isNE();
      node0.isTry();
      node0.isCast();
      node0.setLineno(1723);
      node0.hasMoreThanOneChild();
      node0.isAssign();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node node0 = Node.newString("H");
      node0.getJsDocBuilderForNode();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.children();
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node2.addChildToFront(node1);
      node_SideEffectFlags2.clearAllFlags();
      node1.isNE();
      node2.isTry();
      node1.isEquivalentTo(node2, false, false, false);
      Node node3 = new Node(43, 1502, 57);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isLabel();
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node1 = Node.newString("Vaxc2{#");
      node1.getChangeTime();
      node0.getSourceFileName();
      node1.isInstanceOf();
      node0.getType();
      node1.isVarArgs();
      node0.getJSDocInfo();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(6);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      Node node0 = new Node(6);
      node0.getJsDocBuilderForNode();
      node0.setDouble(6);
      int int0 = 48;
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(120, 120, 101);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      Node.newString("4!7qnLp__11[HrYsm");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node3.cloneNode();
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      Node.newNumber(1.0, 55, (-3975));
      node0.hasChild(node2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(":>\"lil.=l6Q/u@*8", (-971), 1247);
      nodeArray0[0] = node0;
      Node node1 = new Node(1247, nodeArray0);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.0226777));
      Node node1 = Node.newNumber((double) 36, (-705), 57);
      node1.isLocalResultCall();
      node1.getAncestor(36);
      Node node2 = new Node(4095, (Node) null, node1, node0);
      node0.isThrow();
      int int0 = (-154);
      Node node3 = null;
      try {
        node3 = new Node(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(118);
      node0.isOnlyModifiesArgumentsCall();
      node1.isWith();
      Node node2 = new Node(3845);
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newNumber(39.0);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.FUNCTION_PROTOTYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeRegistry0.createObjectType("", node0, (ObjectType) templateType0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative2 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative2;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      jSTypeNativeArray0[4] = jSTypeNative1;
      jSTypeNativeArray0[5] = jSTypeNative1;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      node3.isCall();
      node3.getCharno();
      node0.getIndexOfChild(node2);
      node2.isParamList();
      node0.getProp(2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCowW@aHQ}Qh");
      node0.setChangeTime(570);
      Node.newString(50, "/|Pa?:", 46, 247);
      node0.isAnd();
      node0.setChangeTime((-4049));
      Node node1 = Node.newString("/|Pa?:");
      node1.isGetterDef();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      Node.newNumber((-702.9206), 56, 57);
      node1.getChangeTime();
      Node.newString("b,/oa");
      node1.hasChild(node0);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.addChildBefore(node2, node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      node3.useSourceInfoFromForTree(node1);
      node2.addChildToBack(node0);
      node0.isUnscopedQualifiedName();
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.copyInformationFrom(node1);
      node2.clonePropsFrom(node0);
      Node node3 = Node.newString("");
      Node node4 = new Node(8192, node0, node0, 463, 2629);
      node0.isInc();
      Node node5 = new Node(623, 0, 30);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCowW@aHQ}Qh");
      node0.setChangeTime(570);
      node0.setIsSyntheticBlock(true);
      Node.newString(50, "/|Pa?:", 46, 247);
      node0.setChangeTime((-4049));
      Node node1 = Node.newString("/|Pa?:");
      node1.isGetterDef();
      node1.setDouble(778.7);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 29, 1213, 36);
      node0.copyInformationFromForTree(node1);
      node0.children();
      Node node2 = Node.newString(4095, "com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(873);
      Node node4 = new Node(120, node3, node2, 29, 4);
      node2.setLength(55);
      node3.isAssignAdd();
      node4.isFunction();
      node3.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 2696, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node3.getJsDocBuilderForNode();
      Node node4 = new Node((-2957));
      Node node5 = new Node(57, node1, node2, (-1474), 16);
      node0.setLength(2);
      node5.isInc();
      node4.isFunction();
      node0.getSourceFileName();
      node4.getCharno();
      node1.isParamList();
      Node.newString("", (-4078), 50);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.getProp(388);
      Node node1 = Node.newNumber((double) 0);
      node0.isEquivalentTo(node1, true, false, true);
      node0.putProp((-1157), (Object) null);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.02268));
      node0.isTypeOf();
      Node node1 = new Node(125);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node0.isFromExterns();
      node_SideEffectFlags1.setMutatesArguments();
      node1.getIntProp(214);
      node0.getDouble();
      node1.isAnd();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.setJSType((JSType) null);
      Node node1 = Node.newNumber((double) 54, 15, 29);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.children();
      Node node3 = node2.cloneTree();
      node3.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node2.isLocalResultCall();
      node1.isTry();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isEquivalentToShallow(node1);
      Node.newString((-4565), "");
      Node node2 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", 8, 1511);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isDelProp();
      Node node1 = Node.newString(57, "p4 (E7dwPP)EK.P;");
      node0.checkTreeEqualsImpl(node1);
      node0.setIsSyntheticBlock(false);
      node1.addChildToFront(node0);
      Node node2 = Node.newNumber((-1.0), 57, 120);
      node2.getAncestor(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node1.isNull();
      node0.checkTreeEquals(node2);
      Node.extractCharno(0);
      Node node3 = Node.newString(40, (String) null);
      node3.getQualifiedName();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = new Node(4096);
      node1.getQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.isOptionalArg();
      Node.newString("M`|s)g95h ");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(120, "com.google.common.collect.Maps$KeySet", (-2146), 132);
      Node node1 = new Node(37, node0, node0, node0);
      node0.getBooleanProp(40);
      node1.setChangeTime(2498);
      node0.isVar();
      Node node2 = Node.newString("");
      Node node3 = node2.useSourceInfoFrom(node1);
      node3.isLabel();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(1923, "! 0;#|-3z*9jG3_", 549, 154);
      Node node2 = Node.newString(8, ".equivalentTo(");
      Node node3 = new Node(37, node1, node1);
      Node node4 = new Node(30, 49, (-509));
      node4.copyInformationFromForTree(node1);
      node2.children();
      Node node5 = node3.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      Node node6 = new Node(55, node5, 39, 1750);
      node4.isNE();
      node0.isTry();
      node3.isCast();
      node4.srcref(node6);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString((-1375), "3{/4(f0Q,@2VH)-Fa1");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, (-1375), 39);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newNumber((double) 36);
      node3.children();
      Node node4 = Node.newString(38, "3{/4(f0Q,@2VH)-Fa1");
      node3.getJsDocBuilderForNode();
      Node node5 = new Node(54, node2);
      node5.srcref(node1);
      node1.getQualifiedName();
      node5.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue0);
      Node node6 = new Node(43, node2, node0, node2, node4);
      Node node7 = new Node(node4.INFERRED_FUNCTION, node0, node2, node0, node0);
      Node node8 = new Node(node3.FLAG_NO_THROWS, node7);
      // Undeclared exception!
      try { 
        node4.removeChild(node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node1 = Node.newString("Vaxc2{#");
      node1.getChangeTime();
      node1.isInstanceOf();
      Node node2 = new Node(2, nodeArray0);
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      Node node1 = Node.newString("");
      node1.isOr();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(32, 32, 32);
      node0.getIntProp(3687);
      node0.setJSType((JSType) null);
      Node node1 = node0.cloneTree();
      node0.setChangeTime(100);
      Node node2 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages", 31, 32);
      node2.addChildrenAfter(node1, node0);
      node2.addChildrenToBack(node0);
      node2.getSourcePosition();
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isFromExterns();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      node1.setLength((-1118));
      node1.isInc();
      node1.isFunction();
      Node node2 = new Node(42, node0, node0, node1, node1);
      node2.getSourceFileName();
      node1.getCharno();
      node1.isParamList();
      Node.newString((String) null, 8, (-423));
      node0.isFunction();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 8, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node3.getJsDocBuilderForNode();
      Node node4 = new Node((-2957));
      Node node5 = new Node(57, node1, node2, (-1474), 43);
      node4.getIntProp(57);
      Node node6 = Node.newNumber((-1.0), 1753, 108);
      node1.getDouble();
      Node node7 = new Node(54, node3, node6, node0, 4, 29);
      node5.getLength();
      node6.detachFromParent();
      node7.isAssign();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node((-1557), 83, (-1557));
      Node node1 = Node.newNumber((double) 12, 30, 93);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(33, node2, node1);
      node3.children();
      Node.newString((-231), "fFJqyo&*jz>F");
      node1.getJsDocBuilderForNode();
      Node node4 = new Node(57);
      Node node5 = new Node(8, node3, node0, 39, 40);
      int int0 = (-2030);
      node0.setLength(int0);
      node3.isInc();
      node4.isFunction();
      node1.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.getCharno();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(29);
      node0.copyInformationFromForTree(node1);
      node0.children();
      Node node2 = Node.newString(4095, "com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(873);
      Node node4 = new Node(120, node3, node2, 29, 1);
      node2.setLength(55);
      node3.isLabel();
      node4.isCatch();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWith();
      Node node1 = new Node(29, node0, node0, node0, node0);
      int int0 = Node.POST_FLAG;
      node1.isQualifiedName();
      node1.getAncestor(376);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(102);
      node0.isNull();
      node1.checkTreeEquals((Node) null);
      String string0 = null;
      int int1 = 13;
      // Undeclared exception!
      try { 
        Node.newString(int1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(4095, "com.google.common.collect.UnmodifiableIterator", 126, 108);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      Node node3 = node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.setSourceEncodedPositionForTree(1187);
      node0.isThrow();
      Node node4 = new Node(43, node3, node2, 2091, 52);
      node0.isEquivalentTo(node1);
      node0.isVarArgs();
      node0.isScript();
      node2.isObjectLit();
      node0.mayMutateGlobalStateOrThrow();
      Node node5 = new Node(43);
      int int0 = Node.DECR_FLAG;
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      Node node1 = Node.newNumber((double) 57, 48, (-658));
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.removeChildren();
      node1.isVarArgs();
      node0.isScript();
      node1.isGetProp();
      node0.setSideEffectFlags(50);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = new Node(node0.CHANGE_TIME);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.isCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2051
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      node0.addChildrenToFront(node1);
      int int0 = Node.POST_FLAG;
      Node node2 = Node.newString("DoyVlI_a");
      Node node3 = new Node((-704), node0, node0, 103, 1133);
      Node node4 = node1.removeChildAfter((Node) null);
      node2.isInc();
      node4.isNull();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.addChildBefore(node2, node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node4.getSourceOffset();
      node2.clonePropsFrom(node3);
      node2.addChildToBack(node0);
      node0.isUnscopedQualifiedName();
      node3.getInputId();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(120, 120, 101);
      Node node1 = Node.newNumber((-702.9206), 56, 0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.setSourceEncodedPositionForTree(598);
      node1.isThrow();
      node0.isLabelName();
      node1.isDebugger();
      node2.isWhile();
      Node node3 = Node.newNumber((double) 36);
      node3.getNext();
      node1.isHook();
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(2051, 2051, 1511);
      node0.getProp(388);
      Node node1 = Node.newNumber((double) 0);
      node0.isEquivalentTo(node1, true, false, true);
      node0.putProp((-1157), (Object) null);
      node0.srcref(node1);
      node0.hasChildren();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.putIntProp(6, 6);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = null;
      node0.useSourceInfoFromForTree((Node) null);
      InputId inputId0 = new InputId(jSTypeRegistry1.OBJECT_INDEX_TEMPLATE);
      // Undeclared exception!
      try { 
        node0.cloneNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString(7, "Node tree inequality:\nTree1:\n", 7, (-1306));
      Node node1 = new Node(35, node0, node0, node0, node0);
      node1.cloneNode();
      Node node2 = new Node(35, node1, 36, (-599));
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("comgoogle.common.collect.UnmodifiableIterator");
      Node node1 = Node.newString(4095, "!dO|kJ[^q ~~u,*XY'%");
      String string0 = "h";
      Node node2 = Node.newString(31, "h", 52, 60);
      node2.setIsSyntheticBlock(false);
      Node node3 = Node.newNumber((double) 48, 0, 2490);
      node3.useSourceInfoFromForTree(node0);
      node0.addChildToBack(node1);
      node1.addChildBefore(node3, node2);
      Node node4 = Node.newString(node3.ORIGINALNAME_PROP, string0);
      int int0 = (-2276);
      node4.setSourceEncodedPositionForTree(int0);
      boolean boolean0 = false;
      node3.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node3.isThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = (-64);
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newString((-64), "DATE_FUNCTION_TYPE");
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      nodeArray0[1] = node1;
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      nodeArray0[2] = node2;
      Node node3 = new Node(53);
      Node node4 = new Node(56, node2, node0, node3, (Node) null, 15, 98);
      int int1 = (-2949);
      Node node5 = new Node(node2.FLAG_ARGUMENTS_UNMODIFIED, node4, int1, node2.IS_CONSTANT_NAME);
      nodeArray0[3] = node5;
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("b,/oa", true);
      node0.putProp(98, simpleSourceFile0);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      node0.getString();
      node2.setChangeTime(node1.FLAG_ARGUMENTS_UNMODIFIED);
      String string0 = "kEG4y";
      Node node3 = Node.newString(string0);
      node3.isOr();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.getChangeTime();
      Node node1 = new Node(136);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node0.mayMutateGlobalStateOrThrow();
      node0.isDec();
      node1.isString();
      node1.getIntProp(9);
      node1.getDouble();
      node0.isCall();
      // Undeclared exception!
      try { 
        node1.isEmpty();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(51);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      Object object0 = new Object();
      node_NodeMismatch0.equals(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isParamList();
      node0.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber(48.38075701169, (-279), (-279));
      Node node1 = Node.newString(") must not be negative", 15, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isAdd();
      Node node2 = Node.newString((-4565), "");
      node2.setType(4095);
      node1.setLineno(109);
      node2.isComma();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = Node.newString(153, ")k,e6pwDDMf'L");
      Node.newString("C:8");
      node0.getStaticSourceFile();
      node1.setChangeTime((-112));
      Node node2 = Node.newString("Mm#Vq%7");
      node2.children();
      node1.isGetterDef();
      node0.setDouble(1.0);
      node1.hasChildren();
      int int0 = 32;
      Node node3 = new Node(int0, node1, node1, node0, node0);
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(47.47197694491385, (-279), (-279));
      Node node1 = Node.newString("is_namespace", (-112), (-718));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(103, nodeArray0);
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCowW@aHQ}Qh");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.ObjectType");
      node1.getChangeTime();
      node0.isInstanceOf();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node((-2139), nodeArray0);
      node2.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1213, 1805, 1805);
      node0.isAssignAdd();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      node0.isNoSideEffectsCall();
      node0.addChildrenToFront(node1);
      int int0 = Node.POST_FLAG;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(") must not be negative", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.toString();
      node0.getSourceOffset();
      node1.isExprResult();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString(7, "Node tree inequality:\nTree1:\n", 7, (-1306));
      Node node1 = Node.newString(1110, "-7#");
      node1.setType(50);
      node1.setLineno((-5707));
      node0.isComma();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setString((String) null);
      node0.isOnlyModifiesArgumentsCall();
      int int0 = 90;
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 2, 56, 13);
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newString(29, "CharMatcher.SINGLE_WIDTH", 1, 54);
      node0.setChangeTime(0);
      Node node3 = Node.newString("Should not happen\n");
      node1.isGetterDef();
      node2.isDelProp();
      node1.setDouble((-239.0644610464834));
      node1.children();
      node3.hasChildren();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isGetProp();
      node0.isNew();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(29);
      node1.isEmpty();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      Node node2 = Node.newString(48, "b,/oa");
      Node node3 = Node.newNumber((double) 30, 1016, 47);
      node1.getChangeTime();
      Node node4 = new Node(39, node1, node0, node3, node2, 4095, 56);
      node4.hasChildren();
      node0.setType(48);
      node0.getLineno();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.getString();
      node0.setChangeTime(615);
      node0.isVar();
      Node node1 = Node.newString("");
      Node node2 = node1.removeChildren();
      Node node3 = node0.useSourceInfoFrom(node1);
      node1.isAssignAdd();
      node3.getChildBefore(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.addChildToBack(node3);
      JSType[] jSTypeArray0 = null;
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node4.getAncestor(node1.IS_CONSTANT_NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(711, "CHECKED_UNKNOWN_TYPE", 112, 3659);
      Node node1 = new Node(711, node0, node0, node0, 9, 48);
      node1.setCharno(153);
      node1.isOr();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 2, 56, 13);
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newString(29, "CharMatcher.SINGLE_WIDTH", 1, 54);
      node0.setChangeTime(0);
      Node node3 = Node.newString("Should not happen\n");
      node1.isGetterDef();
      node2.isDelProp();
      node2.isEmpty();
      node2.checkTreeEquals(node1);
      node2.replaceChildAfter(node1, node3);
      node1.getFirstChild();
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.toString(true, true, true);
      Node node1 = new Node(39, node0, node0, node0, 54, 45);
      node0.getChangeTime();
      node1.getType();
      node0.isVarArgs();
      node1.removeChildren();
      node1.isHook();
      node1.getString();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      String string0 = null;
      node_NodeMismatch0.equals(string0);
      int int0 = 594;
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 302, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.children();
      Node node3 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSourceEncodedPositionForTree(29);
      node0.isThrow();
      Node node4 = new Node(37, node0, node2, 51, 18);
      node4.isEquivalentTo(node4);
      node3.isVarArgs();
      node4.isScript();
      node1.isObjectLit();
      node3.mayMutateGlobalStateOrThrow();
      node0.getDouble();
      node4.isCast();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      Node node1 = new Node(56);
      node0.addChildrenToFront(node1);
      int int0 = Node.INFERRED_FUNCTION;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(") must not be negative", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.setSourceEncodedPositionForTree(42);
      Node node2 = Node.newNumber((double) 51, 53, 8206);
      node0.isThrow();
      Node.newNumber((double) 30, 1910, 51);
      node0.hasChild(node2);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = Node.newString("jDNU9", 42, 2);
      node0.clonePropsFrom(node1);
      Node node2 = new Node(56);
      node0.isNoSideEffectsCall();
      node0.addChildrenToFront(node2);
      int int0 = Node.POST_FLAG;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(") must not be negative", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.toString();
      node0.getSourceOffset();
      node2.isExprResult();
      node2.getJSDocInfo();
      Node.extractCharno((-3723));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.mayMutateArguments();
      node0.isLabel();
      node2.isCatch();
      node2.isIf();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 8, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node2.getBooleanProp(108);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("rhino_ast.java.com.google.javascript.rhino.Messages", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      node2.setSourceEncodedPositionForTree(1116);
      node1.isThrow();
      node0.isLabelName();
      node2.isDebugger();
      node2.isWhile();
      node1.isFunction();
      node3.getSourceFileName();
      node2.getBooleanProp(29);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString(23, "");
      node0.setChangeTime(23);
      Node node1 = Node.newString("%Kg6:VTQCowW@aHQ}Qh");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node0.isHook();
      node1.mayMutateGlobalStateOrThrow();
      node0.isDec();
      Node.newNumber((-1.0), 8, 57);
      node0.addChildAfter((Node) null, node2);
      node1.getLastSibling();
      node1.isDebugger();
      node2.isWhile();
      node1.getNext();
      int int0 = 2657;
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString(386, "'3pDqa", (-3214), 613);
      node0.isAnd();
      node0.setChangeTime((-2624));
      node0.isVar();
      Node node1 = Node.newString(">");
      Node node2 = node0.useSourceInfoFrom(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node1.toString();
      node0.getSourceOffset();
      node1.isExprResult();
      node1.getJSDocInfo();
      node0.copyInformationFrom(node2);
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((-1164.02268));
      node0.isTypeOf();
      Node node1 = new Node(125);
      Node node2 = new Node(40, node0, node0, node0, 32, 56);
      node2.useSourceInfoIfMissingFrom(node1);
      node1.getType();
      node2.isVoid();
      node1.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      Node node3 = new Node(1);
      node0.getQualifiedName();
      node0.isCall();
      node1.isEmpty();
      node1.checkTreeEquals(node0);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.type = 153;
      node0.getInputId();
      node0.isFalse();
      node0.isUnscopedQualifiedName();
      node0.getExistingIntProp(114);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(165, 165, 165);
      Node node1 = Node.newNumber(39.0, (-706), 15);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString(16, "fFJqyo&*jz>F");
      node0.setSourceEncodedPositionForTree(615);
      node2.isThrow();
      node2.isLabelName();
      node3.isDebugger();
      node3.isWhile();
      Node node4 = new Node(461845907, node1, node0, node0, (-1227), 16);
      node3.getNext();
      node0.isHook();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 2, 56, 13);
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newString(29, "CharMatcher.SINGLE_WIDTH", 1, 54);
      node0.setChangeTime(0);
      Node.newString("Should not happen\n");
      node1.isGetterDef();
      node1.hasChildren();
      node2.setType(117);
      node2.getLineno();
      node2.isVar();
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      Node node1 = new Node(39, node0, node0, node0, 54, 45);
      node0.addChildrenToBack(node1);
      node0.getChangeTime();
      node0.isVarArgs();
      node1.isHook();
      node1.cloneNode();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-198), node0, node1, node1, node1);
      node0.addChildrenToBack(node2);
      node0.getJsDocBuilderForNode();
      node1.setDouble(42);
      Node node3 = new Node(4095, 16, 15);
      Node node4 = Node.newNumber((double) 38);
      node2.getNext();
      node2.isHook();
      node4.getSourceOffset();
      node2.clonePropsFrom(node1);
      node1.addChildToBack(node2);
      node2.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node2.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString(63, "ERROR_FUNCTION_TYPE");
      Node node1 = new Node(1, node0);
      node1.srcrefTree(node0);
      node1.checkTreeEquals(node0);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.addChildToBack(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.ERROR_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.NO_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.URI_ERROR_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = Node.newString(0, "Unknown class name");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node1 = enumElementType1.getRootNode();
      node0.checkTreeEqualsImpl((Node) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 8, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node3.getJsDocBuilderForNode();
      node2.useSourceInfoFrom(node0);
      node2.removeChildAfter(node1);
      node2.isDo();
      int int0 = 2559;
      node3.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.getQualifiedName();
      node2.isCall();
      node0.srcref(node1);
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString("H");
      node0.getJsDocBuilderForNode();
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString(30, "H", 15, 46);
      node1.setChangeTime(34);
      Node.newString("Should not happen\n");
      node0.isGetterDef();
      node1.hasChildren();
      Node node2 = Node.newString("H", 52, (-3935));
      node2.setType(31);
      node1.getLineno();
      node1.isVar();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      node0.cloneTree();
      Node node2 = new Node(42, 4095, 43);
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      StringWriter stringWriter0 = new StringWriter(4095);
      stringWriter0.append(']');
      node1.isSwitch();
      node0.setChangeTime(57);
      node0.isContinue();
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation");
      node1.getSourceOffset();
      node0.isDefaultCase();
      node1.isTrue();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString((-5364), "GT", (-637), (-2340));
      node0.isAnd();
      node0.setChangeTime((-5364));
      Node node1 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node1.isOr();
      node1.clonePropsFrom(node0);
      node0.isFunction();
      node1.siblings();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString(53, "unexpected prop id ", 2149, 0);
      Node node2 = new Node(31, node1, node0);
      Node node3 = node0.useSourceInfoFrom(node1);
      node2.removeChildAfter(node1);
      node3.isDo();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node3;
      node2.useSourceInfoIfMissingFrom(node1);
      Node node4 = new Node(1, node2, node2, node1, 93, 57);
      nodeArray0[2] = node4;
      nodeArray0[3] = node2;
      Node node5 = new Node(node0.SIDE_EFFECTS_ALL, nodeArray0);
      node5.setLineno(node2.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.children();
      Node node2 = new Node((-2957));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addChildToFront(node2);
      node1.useSourceInfoFrom(node0);
      node0.isLabel();
      node1.isCatch();
      node2.addChildToFront(node0);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.isTry();
      node1.isEquivalentTo(node0, true, true, false);
      Node node2 = new Node(305, 50, 31);
      node1.isBreak();
      node0.isReturn();
      node1.addChildrenAfter(node0, node2);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ");
      node0.isQuotedString();
      Node.extractLineno((-120));
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      node1.isSetterDef();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.addChildAfter(node0, node1);
      node0.isLabel();
      node0.getInputId();
      // Undeclared exception!
      try { 
        node2.getAncestors();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(15, node1, node0, node0, node1);
      Node node3 = Node.newString(3338, "! 0;#|-3z*9jG3_");
      Node node4 = new Node(4095, node3, node3);
      node2.copyInformationFromForTree(node4);
      node4.children();
      node3.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node5 = new Node(12, node2, 85, 8);
      node0.isLabel();
      node1.isCatch();
      node4.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.addChildBefore(node2, node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(true);
      node2.isThrow();
      node3.useSourceInfoFromForTree(node1);
      node0.isEquivalentTo(node3, false, false, false);
      Node node4 = new Node(45, 54, 56);
      node0.isBreak();
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node((-181), node0, node1, node1, node1);
      node2.getJSDocInfo();
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node2.getQualifiedName();
      node2.getFirstChild();
      node2.addChildrenAfter(node0, node1);
      int int0 = 112;
      int int1 = 43;
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(175);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node1 = new Node(1010, node0, node0, node0, 37, 2791);
      node1.isExprResult();
      node0.getJSDocInfo();
      node1.isLabelName();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2051, 38);
      Node node1 = Node.newNumber((double) 32);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.addChildToBack(node1);
      node1.setSourceEncodedPositionForTree((-1292));
      node1.setVarArgs(false);
      node1.isThrow();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.isEquivalentTo(node0, false, false, false);
      Node node4 = new Node(52, 125, 49);
      node3.isBreak();
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isGetProp();
      node0.isNew();
      node0.getQualifiedName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(39, node0, node0, 12, 153);
      node0.isEquivalentTo(node1);
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      node1.getDouble();
      node0.isCast();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node((-2070), (-2070), 755);
      Node node1 = new Node(755, node0, node0, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(153, (-993), 153);
      Node node1 = Node.newNumber((-239.0644610464834), 48, 31);
      node1.copyInformationFromForTree(node0);
      node1.children();
      Node node2 = Node.newString(46, "");
      node2.getJsDocBuilderForNode();
      node1.wasEmptyNode();
      Node node3 = new Node(493);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.addChildToFront(node0);
      node1.isNE();
      node3.isTry();
      node0.isEquivalentTo(node1, false, false, true);
      Node node4 = new Node(4095, 4, 820);
      node2.isBreak();
      node1.isReturn();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.isGetProp();
      node0.isNew();
      node0.getQualifiedName();
      node0.isCall();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newString("duplicate child", 29, 56);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newString("duplicate child", 4, 42);
      node2.srcrefTree(node1);
      node2.mayMutateArguments();
      node0.isSyntheticBlock();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 8, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node3.getJsDocBuilderForNode();
      Node node4 = new Node(4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.addChildToFront(node4);
      node3.isGetterDef();
      Node.newString("fFJqyo&*jz>F");
      node3.isQuotedString();
      node2.isEquivalentToShallow(node0);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString(43, "", (-5364), 45);
      Node node1 = new Node(43, node0, node0, 52, 55);
      node0.isOptionalArg();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(57);
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSourceEncodedPositionForTree(702);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isThrow();
      Node node2 = Node.newNumber(61.6244509276, 55, 4);
      node2.isOptionalArg();
      node1.getChildAtIndex((-3923));
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString(95, "%Kg6:VTQCowW@aHQ}Qh");
      Node node1 = Node.newNumber(48.38075701169);
      node0.setSourceEncodedPositionForTree(95);
      node1.isThrow();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isEquivalentTo(node2, false, false, false);
      node1.isBreak();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(165, 165, 165);
      Node node1 = new Node(30, node0, node0, node0, node0, 52, 53);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString(16, "fFJqyo&*jz>F");
      node0.setSourceEncodedPositionForTree(48);
      node1.isThrow();
      node2.isLabelName();
      node0.isVoid();
      node3.isWhile();
      Node node4 = new Node(461845907, node1, node0, node0, (-1227), 16);
      node3.getNext();
      node0.removeProp(node2.OPT_ARG_NAME);
      node2.checkTreeEquals(node4);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator", 119, 1195);
      Node node1 = Node.newString(42, "JL%4N!v9", 37, (-3480));
      Node node2 = new Node(10, node0, node0, node1, 86, 125);
      node0.replaceChild(node2, node1);
      node0.mayMutateArguments();
      String string0 = "com.google.javascript.rhino.Node$AncestorIterable";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      Node node3 = Node.newString(string0);
      node3.getIntProp(node0.IS_NAMESPACE);
      node2.isThrow();
      // Undeclared exception!
      try { 
        node2.isFunction();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      Node node1 = new Node(47, node0, node0, node0);
      node1.cloneTree();
      Node node2 = new Node(1, (-2581), 16);
      node1.isArrayLit();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 2, 56, 13);
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newString(29, "CharMatcher.SINGLE_WIDTH", 1, 54);
      node0.setChangeTime(0);
      node2.isNE();
      node2.isTry();
      node0.isEquivalentTo(node1, false, false, true);
      Node node3 = new Node(115, 43, 118);
      node3.srcref(node1);
      node3.isBreak();
      node0.isReturn();
      Node.newString(54, "CharMatcher.SINGLE_WIDTH");
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(38);
      Node node1 = new Node(12, node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(46);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(1756);
      node0.addChildrenToFront(node1);
      int int0 = Node.POST_FLAG;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("not a StringNode", false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      node1.isHook();
      Node node2 = node1.srcrefTree(node0);
      node1.mayMutateGlobalStateOrThrow();
      Node node3 = Node.newString("");
      node1.srcrefTree(node2);
      node3.isEquivalentTo(node0, true, false, true);
      Node node4 = new Node(3376, node0, node3, node1);
      node0.isBreak();
      node1.isReturn();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(52, node0, node0, 53, 306);
      node1.getAncestors();
      node1.isVar();
      node1.toString();
      node1.getSourceOffset();
      node0.isHook();
      node0.getJSDocInfo();
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(16, 50, 50);
      Node node1 = new Node(55, node0, (-1), 40);
      node1.isQuotedString();
      Locale locale0 = Locale.PRC;
      node0.getJSDocInfo();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node1);
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node_NodeMismatch0.equals(templateType0);
      node0.isParamList();
      simpleErrorReporter0.warning("slash_v", "*A{3m2DX", 53, 759);
      Node node1 = Node.newString(0, "com.google.common.collect.AbstractSetMultimap");
      node0.addChildrenToFront(node1);
      node1.isRegExp();
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(8287, node0);
      node1.getJSDocInfo();
      node1.removeChild(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, false);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType[] templateTypeArray0 = new TemplateType[0];
      ImmutableList<TemplateType> immutableList1 = ImmutableList.copyOf(templateTypeArray0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList1, immutableList0);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry3, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      JSType jSType1 = jSTypeRegistry2.createOptionalType(jSType0);
      JSType jSType2 = jSTypeRegistry2.createDefaultObjectUnion(jSType1);
      jSTypeArray0[0] = jSType2;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.isTry();
      node0.isCast();
      jSType2.extendTemplateTypeMap(templateTypeMap0);
      node1.setLineno(0);
      node2.hasMoreThanOneChild();
      node1.isAssign();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(120, 120, 101);
      Node node1 = Node.newNumber((-702.2422403384691), 56, 0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.setSourceEncodedPositionForTree(598);
      node1.isThrow();
      node0.isLabelName();
      node1.isNumber();
      node2.isWhile();
      Node node3 = Node.newNumber((double) 36);
      node3.getNext();
      node1.isHook();
      node3.isBlock();
      node0.getIntProp((-2023));
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      node0.isTry();
      node0.isEquivalentTo(node0, false, true, false);
      Node node1 = new Node(37, (-3854), (-3854));
      node0.isBreak();
      Node node2 = new Node(30, node1, node0, (-123), (-733));
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setChangeTime(2268);
      node0.isContinue();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("*wozsM^^I^");
      node0.getSourceOffset();
      node0.isDefaultCase();
      Node node1 = new Node(4194304, node0, node0, node0, (-1215), 15);
      node0.removeChild(node1);
      node0.isTrue();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      node0.isCatch();
      node0.addChildrenToFront(node1);
      int int0 = Node.POST_FLAG;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(") must not be negative", false);
      simpleSourceFile0.getLineOffset(50);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.isName();
      node1.getJSDocInfo();
      node0.removeChildAfter(node1);
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(97, "", 97, 112);
      node0.isParamList();
      node0.isOnlyModifiesArgumentsCall();
      node0.isEquivalentToShallow(node0);
      StringWriter stringWriter0 = new StringWriter();
      node0.setSourceEncodedPositionForTree(97);
      Node node1 = new Node(39, node0, node0, 0, 52);
      node1.setVarArgs(false);
      node1.isThrow();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.getSourceOffset();
      Node node3 = node0.clonePropsFrom(node2);
      node2.addChildToBack(node0);
      node1.isUnscopedQualifiedName();
      node1.getInputId();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber((double) 55);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node2.setSourceEncodedPositionForTree(1116);
      node2.isEquivalentTo(node0);
      node0.isLabelName();
      node1.isInstanceOf();
      node3.isNE();
      node0.isEmpty();
      node0.checkTreeEquals(node2);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isGetProp();
      Node node1 = Node.newString("", (-829), 10);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node2.setStaticSourceFile(simpleSourceFile0);
      node1.setSourceEncodedPositionForTree((-2411));
      node1.isThrow();
      node0.isLabelName();
      node1.isNumber();
      node1.isWhile();
      Node node3 = Node.newNumber((double) 8);
      node2.getNext();
      node1.isHook();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node3.isBlock();
      Node.newNumber((double) 48, 112, 57);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLabelName();
      Node node1 = new Node(2, 30, 4);
      node1.isWhile();
      Node node2 = new Node(125, node0, node1, node1, 461845907, 4);
      node0.getNext();
      node1.removeProp(32);
      node2.checkTreeEquals(node1);
      Node node3 = node1.getNext();
      node3.isTrue();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newNumber((-195.3));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x{|}~");
      node0.cloneNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = Node.newString((-4011), "ZO2J>!'*.E%BTL^OGw", 304, 152);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.children();
      node1.isOptionalArg();
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node0.getAncestors();
      node0.checkTreeEquals(node2);
      node3.setDouble(54);
      node0.isSwitch();
      node1.getBooleanProp(1464);
      node0.isNoSideEffectsCall();
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node(114, node0, 27, 42);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.children();
      Node node3 = new Node(32);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.addChildToFront(node1);
      Node node4 = new Node(189, node2);
      node4.useSourceInfoFrom(node2);
      node3.isLabel();
      node4.isCatch();
      // Undeclared exception!
      try { 
        node4.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newNumber(1.0, 8, 132);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.children();
      node0.isLocalResultCall();
      Node.newString(32, "fFJqyo&*jz>F");
      Node node3 = new Node(2, node0, node2, node1);
      node3.getJsDocBuilderForNode();
      Node node4 = new Node((-4232));
      node4.isVarArgs();
      node0.isHook();
      node4.cloneNode();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = Node.newString(53, "unexpected prop id ", 2149, 0);
      Node node2 = new Node(31, node1, node0);
      Node node3 = node0.useSourceInfoFrom(node1);
      Node node4 = node2.removeChildAfter(node1);
      node3.isDo();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[3] = node3;
      node4.isComma();
      Node node5 = new Node(53, (Node[]) null);
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      node0.isTry();
      node0.isEquivalentTo(node0, false, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(36, node0, node0, 43, 29);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newNumber(42.0, (-2313), (-949));
      node2.isReturn();
      node1.getChildAtIndex(100);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-431));
      Node node1 = Node.newString("");
      node0.isCase();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = Node.newNumber((-1.0), (-3051), (-3051));
      node1.isReturn();
      Node node3 = node1.getChildAtIndex((-725));
      node2.checkTreeTypeAwareEqualsImpl((Node) null);
      node3.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      node0.isCatch();
      node0.addChildrenToFront(node1);
      int int0 = Node.EMPTY_BLOCK;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isLabelName();
      node0.isFor();
      node0.getBooleanProp(1364);
      node0.addChildBefore(node1, node1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString(32, "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      node2.setChangeTime(4);
      Node node3 = Node.newString("k(");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = new Node(39, node1, node1, node3, node0, 12, 43);
      node4.setJSDocInfo(jSDocInfo0);
      Node node5 = new Node(305, node4, node1, node0, node1, 47, 1);
      node5.isDefaultCase();
      node3.getDouble();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.isNE();
      node1.isTry();
      node0.isEquivalentTo(node3, true, false, false);
      Node node4 = new Node(55, 31, 382);
      node0.isBreak();
      Node node5 = new Node(16, node1);
      node5.isReturn();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCJBwW@aHQ}Qh");
      node0.isAnd();
      node0.isVarArgs();
      node0.isHook();
      Node node1 = node0.cloneNode();
      node1.isDec();
      node0.isOptionalArg();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString(102, "%Kg6:VTQCJBwW@aHQ}Qh");
      Node node1 = new Node(155, node0, node0, node0, 4991, 53);
      node0.addChildrenToBack(node1);
      node1.getChangeTime();
      node1.isVarArgs();
      node0.isHook();
      Node node2 = node1.cloneNode();
      node2.isLabelName();
      Node.mergeLineCharNo(2118, 1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString(2534, "com.google.javascript.rhino.jstype.FunctionType");
      Node node1 = Node.newNumber((-1.0), 51, (-1314));
      Node node2 = node0.clonePropsFrom(node1);
      node0.type = 2534;
      node0.setWasEmptyNode(true);
      node2.setCharno(39);
      node0.wasEmptyNode();
      node0.isNull();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "this:");
      node0.isVarArgs();
      node1.isGetElem();
      Node node3 = Node.newNumber((double) 54, 37, 131);
      node2.replaceChild(node0, node3);
      node2.isHook();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-47);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-100);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-109);
      byteArray0[2] = byte2;
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("", (-3729), (-3729));
      Node node1 = new Node((-3729), node0, node0, node0);
      node1.getIntProp((-1650));
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node2.toString(false, false, false);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("fFJqyo&*jz>F");
      node0.useSourceInfoFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = node0.copyInformationFrom(node0);
      node0.getType();
      node0.isVoid();
      node0.isGetProp();
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = new Node(15);
      node1.isVarArgs();
      node0.getString();
      int int0 = (-3881);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(52, node0, node0, 53, (-788));
      node0.isComma();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(85);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node node2 = new Node(817);
      node1.isUnscopedQualifiedName();
      node1.isTry();
      Node.newNumber(244.369, (-1306), 51);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.copyInformationFrom(node1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      node2.appendStringTree(stringBuffer0);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 302, 4095);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newString("prev is not a child of this node.", 2026, 50);
      node3.children();
      Node node4 = new Node(4, node3, node2, 8, 1082);
      Node node5 = node4.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.setSourceEncodedPositionForTree(55);
      node5.isThrow();
      Node node6 = new Node(130, node2, node2, (-2685), 86);
      node2.isEquivalentTo(node1);
      node0.isVarArgs();
      node0.isScript();
      node4.mayMutateGlobalStateOrThrow();
      node1.getDouble();
      node0.isCast();
      int int0 = (-690);
      node1.getExistingIntProp(int0);
      // Undeclared exception!
      try { 
        node6.checkTreeEquals(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      Node node1 = Node.newString(53, "unexpected prop id ", 2149, 0);
      node0.isVarArgs();
      StringWriter stringWriter0 = new StringWriter(2816);
      node1.getJSDocInfo();
      stringWriter0.append('@');
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(Integer.MAX_VALUE);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node node2 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages");
      node2.getChangeTime();
      node2.isNot();
      Node node3 = new Node((-1279), (Node[]) null);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(48, "com.google.common.collect.UnmodifiableIterator", 302, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.cloneTree();
      Node node4 = Node.newNumber((double) 37, 29, 24);
      Node node5 = node2.useSourceInfoFromForTree(node3);
      node5.addChildToBack(node4);
      node5.setSourceEncodedPositionForTree(110);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node2.addChildToFront(node3);
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString(111, "", (-5364), 45);
      node0.isAnd();
      node0.setChangeTime(615);
      Node node1 = new Node(4095, node0, 42, 46);
      node0.isTry();
      node0.isFunction();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = Node.newString((-4096), "b,/oa");
      Node node2 = Node.newNumber((-702.9206), 56, 4);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(599);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node0.copyInformationFrom(node1);
      node_SideEffectFlags1.setMutatesArguments();
      node0.addChildrenToBack(node3);
      node1.isDec();
      Node.mergeLineCharNo(40, 153);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(125, 125, 132);
      Node node1 = Node.newNumber((double) 55);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString(36, "fFJqyo&*jz>F");
      node2.setSourceEncodedPositionForTree(1116);
      node2.isEquivalentTo(node0);
      node0.isLabelName();
      node2.isDebugger();
      node2.isWhile();
      Node node4 = new Node(47, node3, node2, node0, 16, 57);
      Node node5 = node2.getNext();
      node0.isHook();
      node2.isBlock();
      node3.getDirectives();
      node4.toStringTree();
      node0.replaceChild(node1, node5);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(120, 120, 132);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Element");
      node0.isIf();
      node0.getFirstChild();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(52, node0, node0, 53, (-788));
      node1.isContinue();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.newString("mp a<8pcYPa");
      Node node2 = Node.newString(307, "rhino_ast.java.com.google.javascript.rhino.Messages");
      node2.isIf();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node.newString("com.google.common.collect.UnmodifiableIterator");
      Node node1 = Node.newString("h)zh<");
      node0.setDirectives((Set<String>) null);
      node1.isVar();
      node1.getChangeTime();
      Node node2 = new Node(8202, 38, 0);
      Node node3 = new Node((-1313), node1, node0, node2);
      node3.removeFirstChild();
      node3.isNot();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = new Node(45);
      node0.isGetProp();
      node0.setType(111);
      node0.isEquivalentToShallow(node0);
      node0.cloneNode();
      node0.getDouble();
      node0.isWhile();
      // Undeclared exception!
      try { 
        node0.isHook();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CASE is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString(153, "com.google.common.base.CharMatcher$1");
      node0.isNew();
      node0.getQualifiedName();
      node0.isLabelName();
      node0.isInstanceOf();
      node0.isNE();
      Node node1 = new Node(32);
      node1.isEmpty();
      Node node2 = Node.newString(50, "ARRAY_FUNCTION_TYPE", 16, 125);
      node0.checkTreeEquals(node1);
      node2.addSuppression("ARRAY_FUNCTION_TYPE");
      node2.checkTreeEqualsImpl(node0);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(52, node0, node0, 53, (-788));
      node0.isComma();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(85);
      node1.getIntProp(51);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString(" [");
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node1.useSourceInfoIfMissingFromForTree(node3);
      node2.toString(false, false, false);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = Node.newString((-4096), "b,/oa");
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newNumber((-702.9206), 56, 0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.addChildToBack(node1);
      node0.setSourceEncodedPositionForTree(598);
      node1.setVarArgs(false);
      node2.isThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node1.mayMutateGlobalStateOrThrow();
      node1.isDec();
      node2.addChildAfter(node0, node1);
      node2.isDebugger();
      node3.isWhile();
      Node node4 = Node.newNumber((double) node0.QUOTED_PROP);
      node4.getNext();
      node2.isHook();
      node4.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-816));
      Node node1 = new Node((-816), node0, node0, node0, node0);
      node1.isContinue();
      node1.isGetElem();
      Node node2 = node1.cloneTree();
      node2.siblings();
      Node node3 = new Node((-585), node0, node2, node0);
      node3.getInputId();
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("C");
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[18];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Iterable<Node> iterable0 = new Vector<Node>(1);
      Node node3 = node2.cloneTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = Node.newString("a");
      node1.children();
      node4.isGetterDef();
      node4.checkTreeEquals(node2);
      node1.replaceChild(node4, node2);
      node3.setDouble(node3.VAR_ARGS_NAME);
      node0.hasChildren();
      int int0 = 42;
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      node0.isTry();
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = new Node(37, (-3876), (-3876));
      node0.isBreak();
      node0.isCatch();
      Node node2 = new Node(8, node0, node1, 1, 48);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(120, 120, 132);
      node0.isAnd();
      node0.setChangeTime(103);
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(4095, 41, 608);
      node3.isArrayLit();
      node2.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isQuotedString();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node.newString("_");
      Node node0 = Node.newString("_");
      node0.setDirectives((Set<String>) null);
      node0.children();
      Node node1 = new Node(111, node0, node0, (-660), 32);
      node0.isCast();
      node0.isAdd();
      node0.isOr();
      node1.clonePropsFrom(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newNumber((double) 2, 56, 13);
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newString(29, "CharMatcher.SINGLE_WIDTH", 1, 54);
      node0.setChangeTime(0);
      node2.isNE();
      node2.isTry();
      node0.isEquivalentTo(node1, false, false, false);
      Node node3 = new Node(115, 43, 118);
      Node node4 = new Node(120, node2, 47, 56);
      node3.useSourceInfoIfMissingFromForTree(node4);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = new Node(120, 160, (-1346));
      node0.setSourceEncodedPosition(102);
      Node node1 = Node.newNumber((-1735.5756642678));
      Node node2 = new Node((-1767));
      node0.copyInformationFromForTree(node2);
      Node node3 = Node.newString(32, "");
      node2.setSourceEncodedPositionForTree(0);
      node0.isRegExp();
      node0.isLabelName();
      node1.isInstanceOf();
      Node node4 = Node.newString("");
      node4.checkTreeTypeAwareEqualsImpl(node3);
      node0.isVarArgs();
      Node node5 = new Node(30, node2, node0, node2, node0);
      node4.isObjectLit();
      node4.isNumber();
      node4.getChildCount();
      node5.siblings();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(1092, 132, 1092);
      Node node1 = Node.newString(95, "tWD");
      node1.setIsSyntheticBlock(true);
      Node node2 = Node.newNumber((double) 15, 43, 1);
      Node node3 = new Node(114, node0, node2, node1, node0);
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node0.addChildToBack(node3);
      node4.addChildBefore(node1, node1);
      node4.setSourceEncodedPositionForTree(node2.FREE_CALL);
      boolean boolean0 = false;
      node2.setVarArgs(boolean0);
      node0.isThrow();
      node0.useSourceInfoFromForTree(node4);
      // Undeclared exception!
      try { 
        node1.getSourceOffset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newNumber((double) 120);
      Node node1 = new Node(24);
      node0.addChildrenToFront(node1);
      int int0 = Node.POST_FLAG;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$AncestorIterable$1", false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3921));
      node0.isHook();
      node1.mayMutateGlobalStateOrThrow();
      node0.isDec();
      node1.isEquivalentTo(node0);
      node1.isVarArgs();
      Node node2 = Node.newNumber((double) 10);
      node2.isScript();
      node2.isObjectLit();
      node2.getDouble();
      node0.isCast();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newNumber((-1188.0004311545276));
      node0.isSyntheticBlock();
      Node node1 = new Node(56);
      Node node2 = Node.newString(54, "undefined", 47, 53);
      Node node3 = Node.newString(1139, "undefined");
      Node node4 = new Node(57, node2, node0);
      node4.copyInformationFromForTree(node3);
      node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      Node node5 = new Node(30, node3, 29, 112);
      node2.isNE();
      node2.isTry();
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(43, 43, 97);
      node0.isGetProp();
      node0.isNew();
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isLabelName();
      node0.isAssignAdd();
      Node node1 = new Node(52, node0, node0, node0);
      node0.checkTreeEquals(node1);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString((-1980), "CHECKED_UNKNOWN_TYPE", 2216, 4);
      Node node1 = new Node(13, node0, node0, 48, 130);
      node1.clonePropsFrom(node0);
      node1.isFromExterns();
      node0.toString();
  }
}
