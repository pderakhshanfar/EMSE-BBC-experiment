/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:48:09 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = Node.newString("com.google.common.collect.ImmutableCollection$Builder", 555, 57);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node3 = new Node(38);
      node2.toStringTree();
      node2.isNot();
      Node node4 = new Node(52, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getIndexOfChild(node1);
      node0.isDebugger();
      node4.isNoSideEffectsCall();
      node1.isContinue();
      node3.isNumber();
      node3.isNot();
      node2.isArrayLit();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Z? Im<:^WjC6#f?e");
      node0.getIntProp((-3773));
      node0.isBlock();
      Node node1 = new Node(1213);
      node0.toStringTree();
      node1.isNot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING Z? Im<:^WjC6#f?e\n");
      Node node2 = new Node(31, node1);
      node0.getIndexOfChild(node1);
      node0.isDebugger();
      Node.newString("STRING Z? Im<:^WjC6#f?e\n");
      node0.isNoSideEffectsCall();
      node1.isContinue();
      node2.isNumber();
      node0.isNot();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Element");
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.getIntProp((-3773));
      node0.isBlock();
      Node node1 = new Node(47);
      node0.isComma();
      Node node2 = new Node(31);
      node2.isDelProp();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3857));
      Node node1 = new Node(16, 4095, 40);
      Node node2 = new Node((-311), node1, node0, 30, (-1140));
      node0.isObjectLit();
      node2.isEquivalentTo(node2, false, false, false);
      node1.getSideEffectFlags();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(56, node0, node0);
      node1.addSuppression("L");
      node0.isEquivalentTo(node1);
      Node node2 = new Node(147, 57, 40);
      node2.isScript();
      node0.isDo();
      node1.getChildCount();
      node1.getLastChild();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(56, 56, 1244);
      Node node1 = new Node(40, node0, node0, 48, 38);
      node0.putIntProp(15, 1);
      Node node2 = node1.srcref(node0);
      node2.isInstanceOf();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(56);
      node0.isAnd();
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      node0.isLocalResultCall();
      Node node1 = new Node((-697), node0, 46, 12);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isOptionalArg();
      // Undeclared exception!
      try { 
        node2.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setVarArgs(false);
      node0.getIntProp(124);
      node0.isBlock();
      node0.setLineno(124);
      Node node1 = new Node(2053, (-3083), 57);
      node1.isVoid();
      node1.setLength((-3083));
      node0.isDefaultCase();
      node0.isTry();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2053
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c=>UH");
      Node node0 = new Node(56, 56, 56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fEheo");
      Node node1 = Node.newString(45, "fEheo");
      Node node2 = Node.newString("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.addChildrenToBack(node1);
      node2.setLength(40);
      node1.putIntProp(46, 93);
      node1.isBreak();
      node0.isBreak();
      node2.toStringTree();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((byte)63);
      node0.isAnd();
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      node0.isLocalResultCall();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.isOptionalArg();
      node0.isEquivalentTo(node1);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber((-0.43833976580260053), 0, 0);
      node0.getBooleanProp(0);
      node0.getLength();
      Node node1 = Node.newString(50, "`");
      node1.checkTreeEqualsImpl(node0);
      node1.isOr();
      node1.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = Node.newNumber((double) 55, 55, 16);
      node0.isOr();
      node1.isHook();
      node2.isSwitch();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.getCharno();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(30);
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      node2.setLength(2);
      node3.putIntProp(31, 1906);
      node3.isQuotedString();
      node2.isBreak();
      node0.isBreak();
      node1.hasChild(node3);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node3.getSourceOffset();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isEquivalentTo(node0);
      node0.isSwitch();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3831), (-3831), (-3831));
      Node node1 = new Node(30);
      Node node2 = new Node(32, node0, node0, node1, node1, 36, 1);
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      node2.setLength(2);
      node3.putIntProp(31, 1906);
      node2.isBreak();
      node0.isBreak();
      node1.hasChild(node3);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node3.getSourceOffset();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(56, node0, node0);
      node1.addSuppression("L");
      Node node2 = new Node(147, 57, 40);
      node2.isScript();
      node2.isWith();
      node1.getChildCount();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(56, 56, 1244);
      Node node1 = new Node(40, node0, node0, 48, 38);
      node0.putIntProp(15, 1);
      node0.setWasEmptyNode(false);
      node0.isAssignAdd();
      node1.isLocalResultCall();
      node1.useSourceInfoIfMissingFrom(node0);
      Node node2 = null;
      try {
        node2 = new Node(4095, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      Node node1 = new Node(43, node0, node0, node0, 57, 48);
      Node node2 = node0.srcref(node1);
      node2.removeFirstChild();
      node2.isInstanceOf();
      node0.children();
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(49);
      Node node1 = Node.newString((-14), "YYp8(h", 53, 29);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.putBooleanProp(54, true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4036), nodeArray0);
      String string0 = "_j*|iu_(sS0.SI";
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1257, 1, 751619276);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(51, nodeArray0, (-643), 2130);
      Node node2 = new Node(29, node1, node1);
      node2.removeFirstChild();
      Node.newString(42, "Object#Element");
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), (-3834), 51);
      Node node1 = new Node(30);
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      Node node4 = Node.newString("r_>]Rt:V<)eaRr?", 2787, 56);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node3.isLabelName();
      node3.isUnscopedQualifiedName();
      node0.setWasEmptyNode(false);
      node2.isAssignAdd();
      node3.isLocalResultCall();
      node4.useSourceInfoIfMissingFrom(node2);
      Node node5 = new Node(39);
      Node node6 = node5.srcrefTree(node2);
      node5.isIf();
      // Undeclared exception!
      try { 
        node6.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("pattern", 4568, 12);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      Node node2 = new Node((-1425));
      node2.hasMoreThanOneChild();
      Node node3 = new Node(108, node2, node1);
      node3.useSourceInfoFromForTree(node2);
      node3.isOr();
      Node node4 = new Node(57);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<TemplateType> linkedList0 = new LinkedList<TemplateType>();
      Iterator<TemplateType> iterator0 = linkedList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node5.isOr();
      node1.isHook();
      node4.isSwitch();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(43, 43, 32);
      int int0 = Node.OPT_ARG_NAME;
      node1.isFalse();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("IiH=u0/sM1Mk6X)z");
      node0.isTrue();
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString((-2218), "3SFU2zVRZ!");
      Node.newString("_R-aJ(gu{r/eb");
      node2.addChildrenToBack(node1);
      node0.isFunction();
      node2.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Z? Im<:^WjC6#f?e");
      Node node1 = new Node(29, node0, node0, node0, 12, 55);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isUnscopedQualifiedName();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      node0.hasChildren();
      Node node1 = new Node(48, node0, node0);
      node1.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isLocalResultCall();
      node2.isFor();
      Node node3 = Node.newString(15, "yJB");
      Node node4 = node0.useSourceInfoFromForTree(node3);
      node0.useSourceInfoFromForTree(node2);
      node4.isWith();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node0.checkTreeEquals(node0);
      node0.hasMoreThanOneChild();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 2, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.isBreak();
      node0.setWasEmptyNode(true);
      node0.isAssignAdd();
      node0.isLocalResultCall();
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      Node node3 = new Node(36, node2);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2468), 2909);
      node0.removeProp((-178));
      node0.getString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      Node node1 = new Node(960, node0, 12, 114);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.cloneNode();
      Node node3 = new Node(303);
      node2.isAssign();
      node1.isStringKey();
      Node.newString("jK>qxKo'a 3u#NhiN^");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2468), 2909);
      node0.removeProp((-178));
      node0.getString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      Node node1 = new Node(147, node0, 308, 16);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.cloneNode();
      Node node2 = new Node(1404);
      node2.isAssign();
      node0.isStringKey();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("IiH=u0/sM1Mk6X)z");
      node0.isTrue();
      node0.setQuotedString();
      Node node1 = new Node(3265, node0, node0, (-469), 16);
      node1.setWasEmptyNode(false);
      node1.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(1529);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setJSType((JSType) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.putIntProp(30, (-694));
      node0.isQualifiedName();
      node0.isLabelName();
      node0.getLength();
      Node node1 = node0.getLastSibling();
      node0.getType();
      Node node2 = Node.newString("");
      node2.isArrayLit();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(44, nodeArray0);
      node0.useSourceInfoIfMissingFromForTree(node0);
      node0.getDirectives();
      Node node1 = Node.newNumber((double) 1);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("", 2909, 100);
      node0.removeProp(2909);
      node0.getString();
      Node node1 = new Node(123, node0, 41, 20);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node2 = node0.cloneNode();
      Node node3 = new Node(4095);
      node3.isAssign();
      node2.isStringKey();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setType(4);
      node0.hasMoreThanOneChild();
      Node node1 = Node.newString("/(VE");
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isLocalResultCall();
      node0.isOr();
      node0.isFor();
      Node.newString(31, "<invalid>");
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.useSourceInfoFromForTree(node1);
      node2.isWith();
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(126, node0, (byte) (-128), 4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.cloneNode();
      Node node3 = new Node(50);
      node2.isAssign();
      Node node4 = new Node((-429), 57, 5760);
      node4.isStringKey();
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVZ!", (-860), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setChangeTime(2610);
      Node node1 = new Node(38, (-242), 153);
      node0.putIntProp(0, 4095);
      node1.isBreak();
      node1.hasChild(node0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = Node.newString("3SFU2zVRZ!");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isVoid();
      node1.setLength(47);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = Node.newString("c1C6e6", 30, 31);
      node2.isComma();
      node1.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("_R-aJ(gu{r/eb", "3SFU2zVRZ!", 1041, 108);
      Node node3 = new Node(55, 77, 50);
      node0.isScript();
      node0.isEquivalentTo(node3);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      Node node1 = Node.newString("1JO!Iw[J!Us^$@'-`");
      node1.setSourceFileForTesting("1JO!Iw[J!Us^$@'-`");
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node1 = Node.newString("Object#Element");
      node1.setLineno(8233);
      Node node2 = new Node((-1018), node1, node1, node1);
      Node node3 = node2.srcrefTree(node1);
      node3.setSourceEncodedPosition(4);
      node0.isParamList();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2461), 2909);
      node0.removeProp((-178));
      node0.getString();
      Node node1 = new Node(126, node0, 38, (-344));
      node0.getIntProp(400);
      node1.isEmpty();
      node0.getParent();
      Node node2 = Node.newNumber((double) 56, 2909, 8);
      node2.getLength();
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      Node node0 = Node.newString((-1033), "2eC@N", (-1059), (int) (byte) (-10));
      Node node1 = Node.newString("7d_`l.SI;41<<rXxc", (-2423), 31);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node3 = new Node(93);
      node2.toStringTree();
      node3.isNot();
      Node node4 = new Node(77, node3);
      node4.getIndexOfChild(node3);
      node3.isDebugger();
      node0.isNoSideEffectsCall();
      node2.isContinue();
      node3.isNumber();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = new Node(52, node0, node0, 38, 15);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.cloneNode();
      node2.isAssign();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = Node.newString(1296, ">$,t{_i");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.getSourceOffset();
      Node node3 = new Node(96, node2);
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = Node.newString("");
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = new Node((-2182), node0, node0, 1576, 122);
      Node node2 = node1.clonePropsFrom(node0);
      node2.isDefaultCase();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-3849.0), (-2032), 38);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n", 0, 0);
      node0.removeProp(0);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      int int0 = Node.REFLECTED_OBJECT;
      node0.getStaticSourceFile();
      node1.setString("Node tree inequality:\nTree1:\n");
      node0.mayMutateGlobalStateOrThrow();
      node0.getSourceFileName();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node0.checkTreeEquals(node0);
      node0.hasMoreThanOneChild();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 2, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.isBreak();
      node0.setWasEmptyNode(true);
      node0.isLocalResultCall();
      node0.useSourceInfoIfMissingFrom(node0);
      node1.srcrefTree(node0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000339] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((-2.468749));
      Node node1 = new Node(16, node0, node0, 37, 2);
      node1.getJSDocInfo();
      node1.getIntProp(53);
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node.newString((-844), "2eC@N", 16, (-210));
      Node node2 = Node.newString("2eC@N", 4, (-210));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.hasMoreThanOneChild();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.isOr();
      Node node4 = new Node(46);
      node2.toStringTree();
      node2.isNot();
      node0.getIndexOfChild(node3);
      node1.isDebugger();
      node4.isNoSideEffectsCall();
      node2.isContinue();
      node1.isNumber();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-3864.0), 11, 208);
      Node node1 = new Node(2, node0, node0, node0);
      Node node2 = Node.newString((-4222), "Us][9BC9fTP>");
      Node node3 = Node.newString("r_>]Rt:V<)eaRr?");
      node1.addChildrenToBack(node3);
      node1.setLength(4095);
      node3.setLineno((-2969));
      node2.isBreak();
      node1.isBreak();
      node3.hasChild(node0);
      node1.useSourceInfoIfMissingFromForTree(node2);
      node0.getSourceOffset();
      Node node4 = Node.newString("Us][9BC9fTP>", 35, 1);
      node4.toStringTree();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVRZ!", (-892), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("IiH=u0/sM1Mk6X)z");
      node0.isTrue();
      Node node1 = Node.newString(8202, "IiH=u0/sM1Mk6X)z", 48, (-1));
      Node node2 = new Node(1, node1, node0, node1, node0);
      Node node3 = node2.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      node2.isParamList();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newString(40, "Object#Key", 4, 113);
      node1.setChangeTime(42);
      Node node2 = Node.newString("Object#Element", 1041, (-700));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      Node node3 = new Node(47, node1, node0, node0, node1);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      node1.isOr();
      Node node5 = new Node((-1577));
      node0.toStringTree();
      Node node6 = Node.newString(1724, "PARAM_LIST\n");
      Node node7 = new Node(52, node6, node4, node2, 16, (-777));
      node7.isNot();
      node0.getIndexOfChild(node4);
      node1.isDebugger();
      node3.isNoSideEffectsCall();
      Node node8 = null;
      try {
        node8 = new Node(149, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(false);
      node0.getIntProp(0);
      node0.isBlock();
      node0.setLineno(120);
      Node node1 = Node.newString("Object#Key");
      node1.isVoid();
      node1.setLength(4095);
      node0.isDefaultCase();
      node1.toStringTree();
      node1.isFalse();
      node0.getChildAtIndex((-108));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(130, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node1.detachChildren();
      node0.getIntProp(2139);
      node1.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(2097152, "");
      Node node1 = Node.newString(12, "", 4, 46);
      node0.isEquivalentToTyped(node1);
      Locale locale0 = Locale.forLanguageTag("");
      locale0.getUnicodeLocaleAttributes();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isVoid();
      node0.setLength(906);
      node1.isComma();
      node1.toStringTree();
      simpleErrorReporter0.error("Object#Key", "D/", (-3549), 4095);
      Node node2 = new Node(149, 51, 56);
      node0.isScript();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.error("Object#Element", "Object#Element", 131072, 30);
      node0.getLength();
      Node node1 = Node.newString(12, "Object#Element", 1, (-894));
      Node node2 = new Node(1, node0, node1, 15, 31);
      node0.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node3 = Node.newString(38, "a`AjR> 8$");
      node3.clonePropsFrom(node1);
      node3.isParamList();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(1185, 1185, 1420);
      node0.setCharno(12);
      node0.isSetterDef();
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1185
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("IiH=u0/sM1Mk6X)z");
      node0.isTrue();
      Node node1 = new Node(3265, node0, node0, (-469), 16);
      node1.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.isRegExp();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      node0.setLength(2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.putIntProp(155, 41);
      node0.isBreak();
      node0.isDo();
      node1.isTrue();
      node1.getFirstChild();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node0.checkTreeEquals(node0);
      node0.hasMoreThanOneChild();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.srcref(node0);
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 2, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.isBreak();
      node0.setWasEmptyNode(true);
      node0.isAssignAdd();
      node0.isLocalResultCall();
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node1.srcrefTree(node0);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(false);
      int int0 = (-3773);
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(47, node0, 54, 52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.cloneNode();
      Node node2 = new Node(40);
      node1.isAssign();
      node1.isStringKey();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(51, node0, node0, node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Not declared as a type name");
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node3.addChildrenToBack(node2);
      node2.setLength(2);
      node3.putIntProp(31, 1906);
      node2.isBreak();
      node0.isBreak();
      node0.toStringTree();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      node0.getBooleanProp(0);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = node0.copyInformationFrom(node0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        node1.appendStringTree(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString((-3064), "|zsdltlFG<%", (-2686), (-3064));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentToTyped(node1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "3SFU2zVRZ!");
      node0.isBlock();
      node0.putBooleanProp(42, false);
      node0.setLineno(42);
      node1.setLength(4);
      node1.isDefaultCase();
      node1.toStringTree();
      node0.isObjectLit();
      node1.isFunction();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.setSourceFileForTesting("G");
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      try { 
        node0.setString("NCVJu->A9w,#BQ2o^e?");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("pattern", 0, 57);
      int int0 = Node.POST_FLAG;
      node0.isDebugger();
      node0.checkTreeEquals(node1);
      node1.hasMoreThanOneChild();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getAncestors();
      node0.isOr();
      node0.isGetElem();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-117);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)30;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Node node0 = Node.newString("K");
      Node node1 = new Node((byte)30, node0, node0);
      node1.srcrefTree(node0);
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) node_SideEffectFlags0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "h1^}006YQH";
      objectArray0[6] = (Object) "h1^}006YQH";
      objectArray0[7] = (Object) "h1^}006YQH";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("h1^}006YQH", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property h1^}006YQH
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$AndPredicate");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node node1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node.extractLineno((-2007));
      Node node0 = Node.newString("_R-aJ(gu{r/eb");
      Node node1 = new Node(8232, node0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString((-210), "3SFU2zVRZ!");
      Node node3 = Node.newString("3SFU2zVRZ!");
      node1.addChildrenToBack(node3);
      node0.setLength(2);
      node2.putIntProp(155, 41);
      node0.isBreak();
      node2.isBreak();
      node2.isDebugger();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Object#Element");
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(false);
      node0.getIntProp((-3773));
      node0.isBlock();
      node0.setLineno(2691);
      Node node1 = Node.newString("Object#Element");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isVoid();
      node0.setLength(0);
      node0.isComma();
      node0.toStringTree();
      simpleErrorReporter0.error("Object#Element", "D/", 52, (-336));
      Node node2 = new Node((-3773), 1, 46);
      node0.isScript();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2468), 2909);
      node0.removeProp((-178));
      node0.getString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(100, node0, 38, (-344));
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = node1.cloneNode();
      Node node3 = new Node(2953);
      node0.isAssign();
      node2.isStringKey();
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Node tree inequality:\nTree1:\n";
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n", 0, 0);
      node0.removeProp(0);
      node0.getString();
      Node.newString("Node tree inequality:\nTree1:\n");
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      node0.getIntProp((-3773));
      node0.isBlock();
      node0.setLineno(2691);
      node0.isVoid();
      node0.setLength(0);
      node0.isDefaultCase();
      node0.isTry();
      node0.getAncestor(11);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "com.google.common.base.Predicates$AndPredicate";
      Node node0 = Node.newString("com.google.common.base.Predicates$AndPredicate");
      node0.isTrue();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node.mergeLineCharNo(1152, 1152);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-1296), (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.setChangeTime((-219));
      Node node1 = Node.newString("2eC@N", 125, (-3436));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isOr();
      Node node3 = new Node(16);
      node0.toStringTree();
      node3.isNot();
      node2.getIndexOfChild(node1);
      node3.isDebugger();
      node0.isNoSideEffectsCall();
      node1.isContinue();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("Z? Im<:^WjC6#f?e");
      Node node1 = Node.newNumber(1561.0, 1, 2);
      Node node2 = new Node(8, node0, node0, node0);
      Node node3 = Node.newString(20, "r_>]Rt:V<)eaRr?");
      Node node4 = Node.newString(",r+B@4dD,L+3 $]2");
      node3.addChildrenToBack(node1);
      node2.setLength(1928);
      Node node5 = Node.newString("Z? Im<:^WjC6#f?e");
      node5.putIntProp((-3499), 43);
      node0.isBreak();
      node4.isBreak();
      node0.hasChild(node4);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node1.getSourceOffset();
      node4.toStringTree();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = Node.newString(3089, "CHECKED_UNKNOWN_TYPE", 3089, 1408);
      Node node1 = new Node(285, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.addChildrenToFront(node2);
      node1.isEquivalentTo(node0, true, true, false);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(4008, "xI", 4008, 4008);
      Node[] nodeArray0 = new Node[0];
      Node node1 = Node.newString(1, "xI");
      Node node2 = new Node(52, node1, node1, node1, 15, 37);
      node2.isUnscopedQualifiedName();
      Node node3 = new Node(29, nodeArray0);
      Node node4 = node0.srcref(node3);
      Node node5 = node0.srcrefTree(node3);
      node0.isLabel();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("xI", false);
      node1.getLength();
      node3.setStaticSourceFile(simpleSourceFile0);
      Node node6 = new Node(32, node4, node0, node0, 57, 0);
      // Undeclared exception!
      try { 
        node5.removeChildAfter(node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(300);
      node0.isAnd();
      node0.isIf();
      Node node1 = new Node(77, 16, 2479);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLength(2);
      node1.toStringTree();
      node1.isObjectLit();
      Node node2 = new Node((-3173), node1, node1, node1);
      node2.isFunction();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("vK");
      Node node1 = new Node(52, node0, node0, node0, 152, 155686);
      node0.isEquivalentToTyped(node1);
      Locale locale0 = Locale.forLanguageTag("Z? Im<:^WjC6#f?e");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node2 = Node.newString((-1872), "Z? Im<:^WjC6#f?e");
      node2.setDirectives(set0);
      node1.hasChildren();
      node2.putIntProp(304, 912);
      node0.isBreak();
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1872
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable");
      node0.setCharno(1187);
      node0.isSetterDef();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      node2.setLength(2);
      node3.putIntProp(31, 1906);
      node2.isBreak();
      node0.isBreak();
      node1.hasChild(node3);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node3.getSourceOffset();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 2, 807);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node2.isBreak();
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node4.setWasEmptyNode(true);
      node1.isAssignAdd();
      node1.isLocalResultCall();
      Node node5 = node0.useSourceInfoIfMissingFrom(node4);
      node2.srcrefTree(node4);
      node5.isCast();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVRZ!", (-892), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.setChangeTime(2610);
      node0.setVarArgs(true);
      node0.getIntProp(51);
      node0.isBlock();
      node0.setLineno(90);
      node0.isVoid();
      node0.setLength((-2503));
      node0.isDefaultCase();
      node0.toStringTree();
      node0.isFalse();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("Object#Key", 1628, 0);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node1.checkTreeEquals(node0);
      node1.hasMoreThanOneChild();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isOr();
      node0.isFor();
      Node.newString(16, "_R-aJ(gu{r/eb");
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = Node.newNumber(1.0, 3239, 12);
      Node node3 = new Node(36, node0, node2, (-302), 1);
      node3.removeChild(node0);
      node3.isHook();
      node3.isTypeOf();
      Node.newString("SF8JaIKK", 46, 16);
      node3.isVar();
      node1.isThis();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4036), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node1.hasChildren();
      node1.isNew();
      node1.isEquivalentToTyped(node0);
      Node node2 = new Node((-4036), nodeArray0);
      node2.isLocalResultCall();
      Node node3 = new Node(2968, node2, node1);
      node2.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      node2.isEquivalentTo(node2, false, false, false);
      node1.isNoSideEffectsCall();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setType(4);
      Node node1 = new Node(101, node0, node0, 30, 31);
      node1.clonePropsFrom(node0);
      Node node2 = Node.newString("NCVJu->A9w,#BQ2o^e?");
      node1.isDefaultCase();
      node0.isRegExp();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3843));
      node0.addSuppression("i)_$'Vb43!kN}L3");
      node0.isGetProp();
      node0.isThrow();
      node0.addSuppression("3SFU2zVRZ!");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.srcrefTree(node2);
      node1.isEquivalentTo(node0, true, true, true);
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable");
      node1.isRegExp();
      Node node3 = Node.newString("StringNode: str is null", 470, 1187);
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.mayMutateGlobalStateOrThrow();
      node0.setVarArgs(true);
      node0.toString(false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(46, node0, node0, node0, node0, 1026, 0);
      node0.isEquivalentTo(node1, false, true, true);
      Node node2 = Node.newString("NUMBER -4518.64");
      node0.isRegExp();
      node2.isCase();
      node1.isDefaultCase();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      node0.getIntProp((-3773));
      node0.isBlock();
      node0.setLineno(2691);
      node0.isVoid();
      node0.setLength(0);
      node0.isDefaultCase();
      node0.toStringTree();
      node0.isFalse();
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1892, nodeArray0);
      node0.setIsSyntheticBlock(true);
      node0.setSourceEncodedPosition(1892);
      node0.isDelProp();
      node0.isGetterDef();
      Node node1 = Node.newString("ASSIGN", 112, 32);
      node1.getChangeTime();
      node1.srcrefTree(node0);
      node0.isParamList();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      node2.setLength(2);
      node3.putIntProp(31, 1906);
      node2.isBreak();
      node0.isBreak();
      Node.extractCharno(1293);
      Node.newString("duplicate child");
      node0.getAncestor(1);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got IN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2468), 2909);
      node0.removeProp((-178));
      node0.getString();
      Node node1 = new Node(100, node0, 38, (-344));
      node0.getIntProp(400);
      node1.isEmpty();
      node0.getParent();
      Node node2 = Node.newNumber((double) 56, 2909, 8);
      // Undeclared exception!
      try { 
        node2.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      int int1 = Node.DIRECTIVES;
      node0.getStaticSourceFile();
      node1.setString("Node tree inequality:\nTree1:\n");
      node2.isEquivalentToShallow(node0);
      node1.isEquivalentTo(node0, false, false, false);
      Node node3 = node2.cloneNode();
      node3.cloneTree();
      node1.isFalse();
      node3.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber((-4520.166523626966));
      node0.toString(false, false, false);
      node0.isRegExp();
      node0.isArrayLit();
      Node node1 = Node.newString(1284, "NUMBER -4520.166523626966", 57, 15);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NUMBER_OBJECT_TYPE");
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$AndPredicate");
      node0.isTrue();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(30, node0, 87, 2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node0.isInc();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      node0.getLength();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node0.getStaticSourceFile();
      node1.setString("Node tree inequality:\nTree1:\n");
      node2.isEquivalentToShallow(node0);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      boolean boolean0 = true;
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(108, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(12, nodeArray0, 40, 40);
      node0.setIsSyntheticBlock(true);
      Node node1 = null;
      try {
        node1 = new Node((-1206), (Node) null, (Node) null, (Node) null, node0, 500, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 47, 53);
      node0.getIntProp(48);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDefaultCase();
      node1.useSourceInfoFromForTree(node2);
      node0.isOr();
      Node node3 = Node.newString("_R-aJ(gu{r/eb");
      node3.srcref(node1);
      node0.isInstanceOf();
      node2.removeProp(15);
      node0.getAncestor(57);
      node3.isLabel();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(1257, 1257, 124);
      Node node1 = new Node(57, node0, node0);
      Node node2 = Node.newString("aLPE\"YqQQ:Ov*", 47, 47);
      node2.getIntProp(12);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isDefaultCase();
      Node node3 = Node.newString(29, "aLPE\"YqQQ:Ov*");
      node2.isOr();
      Node.newString(",Dl?zsp:#xNF");
      Node node4 = node1.srcref(node3);
      node1.isInstanceOf();
      Node.newString(49, "aLPE\"YqQQ:Ov*");
      node4.removeProp((-1287));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("t2my\"Y3{");
      Node node1 = new Node(32, node0, node0, node0, 26, 49);
      node1.isEquivalentToTyped(node0);
      Locale locale0 = Locale.forLanguageTag("_R1'4WE");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      node0.hasChildren();
      node1.putIntProp(51, 46);
      node0.isBreak();
      // Undeclared exception!
      try { 
        node1.getSourceOffset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 2, 807);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node2.isBreak();
      node2.useSourceInfoFromForTree(node3);
      node1.isAssignAdd();
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("NCVJu->A9w,#BQ2o^e?", 117, 9);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Z? Im<:^WjC6#f?e");
      Node node1 = new Node(29, node0, node0, node0, 12, 55);
      node0.isEquivalentToTyped(node1);
      Locale locale0 = Locale.forLanguageTag("Z? Im<:^WjC6#f?e");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      node0.hasChildren();
      Node node2 = Node.newString("Z? Im<:^WjC6#f?e", 55, 125);
      node2.putIntProp(152, 46);
      node2.isBreak();
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 152
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.isWhile();
      node0.isOnlyModifiesArgumentsCall();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newString("NCVJu->A9w,#BQ2o^e?");
      node0.isNull();
      Node node2 = new Node(4095, node1, node1, node0, 1095, 11);
      node2.useSourceInfoFrom(node0);
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.newString("pattern", 30, 4095);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = Node.newString(3089, "CHECKED_UNKNOWN_TYPE", 3089, 1408);
      Node node1 = new Node(285, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.isEquivalentTo(node0, true, true, false);
      Node node3 = new Node(110, node2);
      node3.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("_R-aJ(gu{r/eb", 45, 108);
      Node node1 = new Node(45, node0);
      node1.copyInformationFrom(node0);
      node0.getProp(12);
      Node node2 = Node.newNumber((double) 47, (-299), 29);
      node2.addChildrenToBack(node1);
      node0.hasOneChild();
      node2.isThis();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.newString("pattern", 0, 57);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      Node node1 = Node.newNumber((double) 52, 49, 103);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber((-4520.166523626966));
      node0.toString(false, false, false);
      Node node1 = new Node(36, node0, (-1928), (-670));
      Node node2 = Node.newString((-2570), "NUMBER -4520.166523626966");
      Node node3 = new Node((-2770), node1, node2, 52, 420);
      int int0 = Node.QUOTED_PROP;
      node1.isDebugger();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node4.isNull();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setType(4);
      node0.isDefaultCase();
      node0.removeFirstChild();
      node0.isDo();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      Node.newString("Node tree inequality:\nTree1:\n");
      Node node1 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node1.getIntProp(9);
      node1.isThrow();
      Node node2 = node0.getParent();
      node2.addChildToFront(node1);
      Node node3 = node2.cloneNode();
      node3.isEquivalentTo(node1, true, true, true);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(36, 56, 47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1587));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node2.isWhile();
      node1.isOnlyModifiesArgumentsCall();
      node0.isArrayLit();
      node0.getFirstChild();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(29);
      node0.setType(4);
      Node node1 = new Node(101, node0, node0, 30, 31);
      node1.clonePropsFrom(node0);
      node1.isDefaultCase();
      Node node2 = null;
      try {
        node2 = new Node(57, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4036), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node1.hasChildren();
      node1.isNew();
      node1.isEquivalentToTyped(node0);
      Node node2 = new Node((-4036), nodeArray0);
      Node node3 = new Node(2968, node2, node1);
      node2.cloneTree();
      int int0 = Node.ORIGINALNAME_PROP;
      node2.isEquivalentTo(node2, false, false, false);
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      node0.getInputId();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(40, node0, node0, 48, 38);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      node0.putProp(0, locale_FilteringMode0);
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.setString("Z,J1G");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("_R-aJ(gu{r/eb", 45, 108);
      Node node1 = new Node(45, node0);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isLocalResultCall();
      node0.isOr();
      node0.isFor();
      Node node3 = Node.newString(100, "Object#Key");
      node2.useSourceInfoFromForTree(node3);
      node3.useSourceInfoFromForTree(node0);
      node1.isWith();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      Node node1 = Node.newString("NCVJu->A9w,#BQ2o^e?");
      node1.isNull();
      node0.isGetElem();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVRZ!", (-860), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.setChangeTime(2610);
      Node node1 = new Node(38, (-242), 153);
      node0.getSideEffectFlags();
      Node node2 = Node.newString("opt_arg", 57, 25);
      Node node3 = new Node(8, node1, node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getType("opt_arg");
      node2.setJSType((JSType) null);
      Node.newNumber((double) 46, 26, 15);
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4036), nodeArray0);
      Node.newString("_j*|iu_(sS0.SI");
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      Node node2 = new Node((-1496), node0, 47, 56);
      node0.setSourceFileForTesting("N~kOB9ZyZq>#U");
      node2.getIntProp(49);
      node1.isThrow();
      Node node3 = node0.getParent();
      node3.addChildToFront(node1);
      Node node4 = null;
      try {
        node4 = new Node((-3071), node1, node3, 54, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("._0d{Eoj@w4wl6f");
      Node node2 = new Node(83, node0, 51, 383);
      node0.setSourceFileForTesting("3SFU2zVRZ!");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node3.getIntProp(37);
      node1.isThrow();
      node0.srcrefTree(node1);
      node3.getParent();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString((-3064), "|zsdltlFG<%", (-2686), (-3064));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentToTyped(node1);
      node0.isBlock();
      node0.putBooleanProp(42, false);
      node0.setLineno(42);
      node1.isVoid();
      node1.setLength(4);
      node1.isDefaultCase();
      node1.toStringTree();
      node0.isObjectLit();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("pattern", 0, 57);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenAfter(node1, (Node) null);
      node1.isFalse();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      node0.isCast();
      node1.isLabelName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setIsSyntheticBlock(true);
      node2.isOr();
      node2.isHook();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(1918);
      node0.isAnd();
      node1.isIf();
      Node node2 = new Node(296, 54, 56);
      node0.checkTreeEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(83);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 296
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber((-2.468749));
      node0.isBlock();
      Node node1 = new Node(49, node0, node0, node0);
      node1.getIntProp(53);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node1.checkTreeEquals(node0);
      node0.hasMoreThanOneChild();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isOr();
      node2.isFor();
      Node node3 = Node.newString(49, "empty_block");
      Node node4 = node0.useSourceInfoFromForTree(node1);
      node4.useSourceInfoFromForTree(node3);
      node4.isWith();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      Node node1 = new Node(57);
      node1.setType(56);
      node1.isFromExterns();
      Node node2 = new Node(50, node0, node1, 41, 43);
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((-0.4028094855340171), 94, 94);
      nodeArray0[0] = node0;
      Node node1 = new Node(94, nodeArray0);
      Node node2 = node1.cloneNode();
      node2.setLineno((-1191));
      node1.isOnlyModifiesArgumentsCall();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "_j*|iu_(sS0.SI";
      Node node0 = Node.newString("_j*|iu_(sS0.SI");
      node0.isVar();
      node0.isCast();
      node0.isVoid();
      node0.setLength(29);
      Node node1 = new Node(77, node0, 86, 301);
      node0.getIntProp(400);
      node1.isEmpty();
      node0.getParent();
      Node.newNumber(0.0, 29, 50);
      Node node2 = Node.newString(1, "_j*|iu_(sS0.SI", (-597), 42);
      // Undeclared exception!
      try { 
        node2.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString((-3064), "|zsdltlFG<%", (-2686), (-3064));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentToTyped(node1);
      node1.putIntProp(154, 37);
      node1.isDelProp();
      Node node2 = new Node(53, node1, node0, 1399, 16);
      node2.getLength();
      node2.isNot();
      Node node3 = Node.newString(132, "Object#Element");
      node2.isAssign();
      node2.isNull();
      node3.children();
      node0.isReturn();
      Node.newNumber((double) 47, 52, 211);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(6);
      node0.isDebugger();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 1, 53);
      Node node3 = node2.copyInformationFromForTree(node1);
      node0.isEquivalentTo(node2, false, true, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node4 = Node.newNumber(1.0, 1685, 15);
      Node node5 = new Node(43, node4, node3, 53, (-3816));
      node5.removeChild(node2);
      node0.isHook();
      node0.isTypeOf();
      Node node6 = Node.newString("", 117, 64);
      node6.isVar();
      node5.isTrue();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVRZ!", (-860), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.setChangeTime(2610);
      Node node1 = new Node(38, (-242), 153);
      node0.getSideEffectFlags();
      Node node2 = Node.newString("opt_arg", 57, 25);
      Node node3 = new Node(8, node1, node2);
      Node.newNumber((double) 46, 26, 15);
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(86, 0, 4221);
      Node node1 = Node.newString("D%~ j#>m");
      Node node2 = new Node(44, node0, node0);
      Node node3 = null;
      try {
        node3 = new Node(37, node1, node2, node0, node0, 12, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("8_T,~OCDmGYny+f", 1316, (-18));
      node0.getBooleanProp(47);
      Node node1 = new Node(32, node0, 2, 38);
      Node node2 = new Node(12, node1, 2, 0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isContinue();
      Node node3 = new Node(1712);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1712
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3834), 51, 51);
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = Node.newString(57, "r_>]Rt:V<)eaRr?");
      Node node3 = Node.newString("");
      node3.addChildrenToBack(node2);
      Node node4 = node1.srcrefTree(node0);
      Node node5 = Node.newString("r_>]Rt:V<)eaRr?", 29, 57);
      node5.isParamList();
      node4.cloneNode();
      Node node6 = new Node(56);
      node6.isAssign();
      node4.isStringKey();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node node0 = Node.newString("");
      node0.isDelProp();
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      node0.hasChildren();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDefaultCase();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node3 = Node.newString("_R-aJ(gu{r/eb");
      node0.srcref(node3);
      node0.addChildrenToFront(node2);
      node1.isInstanceOf();
      node1.removeProp(29);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 54, 53);
      Node node3 = node2.copyInformationFromForTree(node1);
      node0.putIntProp(4, 15);
      node0.isDelProp();
      node2.isGetterDef();
      Node node4 = Node.newString("", 32, 53);
      node4.copyInformationFrom(node0);
      node1.srcrefTree(node4);
      node2.isParamList();
      node0.cloneNode();
      node3.isAssign();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      node0.putIntProp(30, 35);
      node0.isDelProp();
      node0.isGetterDef();
      Node node2 = Node.newString("Object#Element", 39, 2024);
      Node node3 = node0.srcrefTree(node2);
      node2.isParamList();
      node2.isHook();
      node1.isTypeOf();
      node3.isTrue();
      node3.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      node1.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.isFromExterns();
      node1.toString();
      node0.toStringTree();
      node1.isNot();
      node0.isAdd();
      node1.isIf();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      node0.type = 2286;
      Node node1 = new Node(36, 56, 47);
      Node node2 = Node.newString("", 31, 12);
      Node node3 = new Node(1, node2, node1);
      Node.newNumber((-0.4028094855340171), 267, 57);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      node0.hasChildren();
      node1.putIntProp(122, 4095);
      node1.isDelProp();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isGetterDef();
      node0.addChildrenToBack(node1);
      node0.removeChild(node1);
      node1.isString();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newNumber((-970.7609634));
      Node node1 = Node.newString("", (-149), 48);
      node0.addChildToFront(node1);
      node0.isString();
      Node node2 = new Node(114, node0, node0);
      Node node3 = null;
      try {
        node3 = new Node(1, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "5e%j`&$Y-";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5e%j`&$Y-");
      Node node0 = new Node(14, 12, 38);
      Node node1 = new Node(14, node0, node0, node0);
      Node node2 = Node.newString(57, "5e%j`&$Y-");
      Node node3 = null;
      try {
        node3 = new Node((-2934), node1, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      node0.putIntProp(30, 35);
      node0.isDelProp();
      node0.isGetterDef();
      Node node2 = Node.newString("Object#Element", 39, 2024);
      node0.srcrefTree(node2);
      node2.isParamList();
      String string0 = "emx}K@%gL[s";
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Element");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Z? Im<:^WjC6#f?e");
      Node node1 = new Node(29, node0, node0, node0, 12, 55);
      node0.isEquivalentToTyped(node1);
      Locale locale0 = Locale.forLanguageTag("Z? Im<:^WjC6#f?e");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      node0.hasChildren();
      node1.putIntProp(29, 542);
      node0.isBreak();
      node1.getSourceOffset();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 54, 53);
      Node node3 = node2.copyInformationFromForTree(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDefaultCase();
      node1.useSourceInfoFromForTree(node2);
      node0.isOr();
      Node node4 = Node.newString("_R-aJ(gu{r/eb");
      node4.checkTreeTypeAwareEqualsImpl(node3);
      node0.isThrow();
      node0.addSuppression("cSdV!*GfbIudLA");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString("3SFU2zVRZ!", (-860), (-3843));
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      Node node1 = new Node(2610, 1950, 35);
      node1.getIntProp(302);
      node1.isThrow();
      node1.setLineno(42);
      node0.isVoid();
      node1.setLength(42);
      Node node2 = Node.newString(117, "slash_v", 56, 40);
      node0.isEquivalentTo(node2, true, false, false);
      Node node3 = new Node(15, node2);
      node3.isGetElem();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      node0.getIntProp((-3773));
      node0.setSourceEncodedPosition((-3773));
      try { 
        node0.setString("Object#Key");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST 1048575 [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000339] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isBlock();
      Node node1 = new Node(4, node0);
      node0.getQualifiedName();
      node1.setSourceEncodedPosition(100);
      try { 
        node1.setString("xV4I&W}9}Z:^g-*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RETURN 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("_j*|iu_(sS0.SI");
      Node node1 = Node.newString("2eC@N", 47, 4);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node0.hasMoreThanOneChild();
      node0.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node2 = new Node(50);
      node0.toStringTree();
      Node node3 = new Node(1376);
      node3.isNot();
      Node.newNumber(0.0);
      node2.isAdd();
      node3.isCatch();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-942), (-942));
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(8, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("8_T,~OCDmGYny+f", 1316, (-18));
      node0.getBooleanProp(47);
      Node node1 = new Node(32, node0, 2, 38);
      Node node2 = new Node(12, node1, 2, 0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals("com.google.common.collect.ImmutableMapKeySet");
      node2.isFor();
      Node node3 = Node.newString(50, "com.google.common.collect.ImmutableMapKeySet");
      node1.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      jSTypeRegistry0.isForwardDeclaredType((String) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.setChangeTime((-219));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = Node.newString("2eC@N", 125, (-3436));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      int int1 = Node.FLAG_THIS_UNMODIFIED;
      node0.isDo();
      node1.mayMutateArguments();
      node1.toStringTree();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("pattern", 12, 46);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      Node node2 = new Node(2908);
      node2.hasMoreThanOneChild();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.isOr();
      Node node4 = new Node((-348));
      node0.toStringTree();
      node3.isNot();
      Node node5 = Node.newNumber((-3843.0));
      node0.isAdd();
      node5.getIndexOfChild(node4);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node1.isNew();
      node1.isEquivalentToTyped(node0);
      Node node2 = new Node((-4053), nodeArray0);
      Node node3 = new Node(2968, node2, node1);
      node2.cloneTree();
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node2.isCast();
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4053
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setVarArgs(true);
      node0.getIntProp((-3773));
      node0.isThrow();
      node0.setLineno(2691);
      node0.isVoid();
      node0.setLength(0);
      Node node1 = Node.newString(800, "Object#Key", (-3773), 688);
      node0.isEquivalentTo(node1, true, false, false);
      Node node2 = new Node(48, node0);
      node2.isObjectLit();
      node0.isFunction();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      node0.getLength();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      node0.putProp(996, locale_FilteringMode0);
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      node1.setString("Node tree inequality:\nTree1:\n");
      node2.isEquivalentToShallow(node0);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("", 53, 103);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = Node.newNumber(1541.92965741, 42, (-1));
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isLocalResultCall();
      node1.setType(1);
      node0.toStringTree();
      node0.isLocalResultCall();
      node0.getProp(103);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      node0.hasChildren();
      node1.putIntProp(122, 4095);
      node1.isDelProp();
      node1.isGetterDef();
      Node node2 = Node.newString("", 36, 40);
      Node node3 = node2.srcrefTree(node0);
      node2.isParamList();
      node1.cloneNode();
      node3.isAssign();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isRegExp();
      node0.isSwitch();
      Node node1 = new Node(37, node0, node0, node0, 48, (-4598));
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3843));
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.setChangeTime((-219));
      Node node2 = Node.newString("2eC@N", 125, (-3436));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      int int1 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDo();
      node2.mayMutateArguments();
      Node node3 = new Node(56);
      node3.cloneNode();
      node2.toStringTree();
      node0.isNot();
      node0.isAdd();
      node0.removeProp(4);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = Node.newString(3089, "Object#Key", 3089, 1408);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(55, node0, node0, 57, 15);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node((-1684), (-1684), 0);
      Node node1 = new Node((-438), node0, node0);
      node0.setSourceFileForTesting("");
      node0.cloneTree();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(52, 52, (-2119));
      Node node1 = new Node(18, node0, node0, (-1107), 4);
      node1.setVarArgs(true);
      node0.toString(false, true, false);
      Node node2 = null;
      try {
        node2 = new Node(57, node0, node0, node0, node1, (-681), 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      node0.hasChildren();
      Node node1 = new Node(48, node0, node0);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      Node node2 = Node.newString(38, ".", 49, 2);
      node1.setSourceEncodedPositionForTree(50);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node3 = node1.cloneNode();
      node2.getIndexOfChild(node3);
      node1.isDebugger();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber(339.0, (-862048943), 39);
      Node node1 = new Node(89, node0, node0, node0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(4095, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.valueOf();
      Node node0 = new Node(1036, 32, (-775));
      node0.getQualifiedName();
      node_SideEffectFlags3.setMutatesThis();
      // Undeclared exception!
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1036
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = new Node(536870912);
      Node node1 = new Node((-448), node0, node0);
      node1.setWasEmptyNode(true);
      node1.setType(1246);
      Node node2 = Node.newString((-27), "gx:", 536870912, 47);
      node1.setSourceEncodedPositionForTree(29);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node3 = Node.newString("Object#Element", 31, 16);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node3;
      Node node4 = new Node((-1333), nodeArray0);
      node0.getIndexOfChild(node4);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeRegistry0.createFunctionType((ObjectType) functionType0, jSType0, (List<JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("Named type with empty name component", 116, 4095);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node0.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isOr();
      Node node3 = new Node(3);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber((double) 56);
      node0.setVarArgs(true);
      node0.toString(false, true, true);
      Node node1 = Node.newString(30, "NUMBER 56.0 [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002]", 12, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.getAncestors();
      node0.isThis();
      Node node2 = new Node(31, node1, node1, node1, 49, 8);
      node1.isNull();
      node1.isName();
      Node.newString("free_call", 3258, 155);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 54, 53);
      node2.copyInformationFromForTree(node1);
      node0.getIntProp(48);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDefaultCase();
      node1.useSourceInfoFromForTree(node2);
      node0.isOr();
      Node node3 = Node.newString("_R-aJ(gu{r/eb");
      Node node4 = node3.srcref(node1);
      node4.addChildrenToFront(node3);
      node0.isInstanceOf();
      node2.removeProp(15);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      node0.putIntProp(15, 1);
      node1.isVar();
      Node node2 = null;
      try {
        node2 = new Node(49, node1, node0, 32, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      node0.isCast();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("_j*|iu_(sS0.SI");
      node0.isVar();
      Node node1 = new Node(1464, node0, node0, 2, 16);
      node1.isHook();
      Node node2 = null;
      try {
        node2 = new Node(4095, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node((-2208));
      node0.isFalse();
      Node node1 = Node.newString("y,vy[ZPoZlz+=NMzk", 21, (-1694));
      node1.srcrefTree(node0);
      Node node2 = node0.srcrefTree(node1);
      node2.hasOneChild();
      Node.mergeLineCharNo((-1), 49);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      Node.newString(38, ".", 49, 2);
      node1.setSourceEncodedPositionForTree(50);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.getLastSibling();
      Node.newNumber((double) 51, 51, 52);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      node0.hasChildren();
      node1.putIntProp(122, 4095);
      node1.isDelProp();
      node1.isGetterDef();
      Node node2 = Node.newString("", 36, 40);
      node2.setDirectives((Set<String>) null);
      Node node3 = node2.srcrefTree(node0);
      node3.removeChildren();
      node2.isParamList();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString("pattern", 0, 57);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.hasMoreThanOneChild();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node3 = new Node(108);
      node3.toStringTree();
      node3.isNot();
      Node.newNumber((double) 31);
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.setChangeTime((-219));
      Node node2 = Node.newNumber((-621.2992879), 8, 46);
      node1.isOnlyModifiesArgumentsCall();
      node2.toStringTree();
      node1.isNot();
      Node node3 = Node.newString(125, "Object#Element");
      node3.isAssign();
      node1.isNull();
      node2.children();
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(43);
      node0.isUnscopedQualifiedName();
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node1.hasMoreThanOneChild();
      node2.useSourceInfoFromForTree(node1);
      int int1 = 1402;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node2.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isFromExterns();
      node0.getInputId();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEquivalentToTyped(node0);
      node0.putBooleanProp(0, true);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node0.isVoid();
      node2.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node3 = new Node(1402);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 54, 53);
      node2.copyInformationFromForTree(node1);
      node0.getIntProp(48);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isDefaultCase();
      node1.useSourceInfoFromForTree(node2);
      node0.isOr();
      Node node3 = Node.newString("_R-aJ(gu{r/eb");
      node3.srcref(node1);
      node0.isInstanceOf();
      node2.removeProp(47);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      Node node2 = Node.newString("hwZq,) ';9d`V4e(");
      node2.setIsSyntheticBlock(true);
      Node node3 = new Node(43, node0, node1, (-233), (-200));
      node3.isCall();
      node3.copyInformationFrom(node1);
      Node node4 = Node.newString("free_call");
      Node node5 = null;
      try {
        node5 = new Node(2158, node1, node4, (-4447), 152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node1.hasChildren();
      node1.isNew();
      node1.isEquivalentToTyped(node0);
      Node node2 = new Node((-4053), nodeArray0);
      Node node3 = new Node(2968, node2, node1);
      node2.cloneTree();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-2056.814756), 17, 17);
      node0.isAnd();
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString((-3064), "|zsdltlFG<%", (-2686), (-3064));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.setChangeTime(923);
      Node node1 = Node.newString("", 55, 57);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isLabelName();
      node0.hasMoreThanOneChild();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node0.isOr();
      Node node4 = new Node(1);
      node3.toStringTree();
      node1.isNot();
      Node node5 = Node.newNumber((-0.4028094855340171));
      node5.isAdd();
      node4.srcref(node1);
      node1.isInstanceOf();
      node0.removeProp(15);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node1.hasChildren();
      node1.isNew();
      Node node2 = new Node(1347, node1, node0, 15, 8);
      node1.isCall();
      node0.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("D^jR/a~dIf`[=l/");
      node_FileLevelJsDocBuilder0.append("D^jR/a~dIf`[=l/");
      Node node1 = Node.newString("_(;", (-2019), 28);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1250);
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isWhile();
      node1.isOnlyModifiesArgumentsCall();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      Node node2 = new Node(48, node1, node0);
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".=m");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      node0.hasChildren();
      node1.putIntProp(122, 4095);
      node1.isDelProp();
      node1.isGetterDef();
      Node node2 = Node.newString("", 36, 40);
      node2.srcrefTree(node0);
      node2.isParamList();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1056, 39);
      node0.hasMoreThanOneChild();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.isOr();
      Node node4 = new Node(54);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getIntProp((-3773));
      node0.isThrow();
      node0.setLineno(2691);
      node0.isVoid();
      node0.setLength(0);
      Node node1 = Node.newString(800, "Object#Key", (-3773), 663);
      node0.isEquivalentTo(node1, true, false, false);
      Node node2 = new Node(48, node0);
      node0.isGetElem();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.setVarArgs(true);
      node0.toString(false, false, false);
      Node node1 = new Node(36, node0, 57, (-670));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.setLineno(0);
      node0.getInputId();
      node0.isThis();
      node2.getLineno();
      node2.getSourceOffset();
      node2.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      node0.putIntProp((-371), 116);
      node0.isDelProp();
      node0.isGetterDef();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node1 = new Node(2691);
      node1.isLabelName();
      node1.isDefaultCase();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = new Node(39, node1, node0);
      node3.isOr();
      Node node4 = new Node(4);
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      Node node2 = new Node(48, node1, node0);
      Node node3 = Node.newString("xHdM", 12, (-2020));
      Node node4 = node2.copyInformationFromForTree(node3);
      node0.detachFromParent();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("xHdM", node4, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(3907, 26, 1257);
      Node node1 = Node.newString("@o)j()s?}q*", 1610612715, 39);
      node1.copyInformationFromForTree(node0);
      node1.isEquivalentTo(node0);
      Node node2 = new Node(4095, node0, node1);
      Node node3 = null;
      try {
        node3 = new Node(42, node2, node0, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node2.getIntProp(9);
      node2.isThrow();
      Node node3 = node0.getParent();
      node3.addChildToFront(node2);
      Node node4 = node3.cloneNode();
      node4.isDebugger();
      // Undeclared exception!
      try { 
        node1.replaceChild(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("D^jR/a~dIf`[=l/");
      node_FileLevelJsDocBuilder0.append("D^jR/a~dIf`[=l/");
      Node node1 = Node.newString("_(;", (-2019), 28);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1250);
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isWhile();
      node1.isOnlyModifiesArgumentsCall();
      node0.wasEmptyNode();
      node1.getLastChild();
      node0.isQuotedString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      node1.putIntProp(869, 55);
      node1.isBreak();
      node1.isBreak();
      Node.extractCharno(3089);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      node0.getLength();
      Node.newString("com.google.common.collect.ImmutableEnumMap");
      Node node2 = null;
      try {
        node2 = new Node(0, node0, (-5867), 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isSyntheticBlock();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node1.hasMoreThanOneChild();
      node2.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node3 = new Node(1402);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(39);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1402
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 56, (-417), 1);
      node1.isOnlyModifiesArgumentsCall();
      node1.toStringTree();
      node0.isNot();
      node0.isAssign();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString((-3064), "|zsdltlFG<%", (-2686), (-3064));
      node0.isHook();
      node0.isUnscopedQualifiedName();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.setType(4);
      node1.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NEG\n");
      node1.isNot();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      Node node1 = new Node(32);
      node0.addChildToBack(node1);
      node0.putBooleanProp(0, false);
      Node node2 = new Node(38, node0, node0);
      node2.mayMutateGlobalStateOrThrow();
      node0.setChangeTime(155);
      Node node3 = Node.newString("", 1067, 39);
      node0.isEquivalentTo(node2, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node.newString("");
      node3.isRegExp();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.setVarArgs(true);
      node0.toString(false, false, false);
      Node node1 = new Node(46, node0, node0, node0, node0, 1026, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = new Node(1, 1, 53);
      node2.getAncestors();
      node1.isThis();
      Node node3 = Node.newString("4?3'&&ZiOH/J|Mhq");
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3849), node0, node0);
      node1.setType(4);
      node1.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node1.isNot();
      node0.isAdd();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      String string0 = "mXRWPI'gnd$Y|)>)qZB";
      Node node0 = Node.newString("mXRWPI'gnd$Y|)>)qZB", (-2468), 2909);
      node0.removeProp((-178));
      node0.getString();
      Node node1 = Node.newString("ZmA&(#1;O:vBoY~6");
      Node node2 = new Node(100, node1, 38, (-344));
      String string1 = "";
      node1.getIntProp(400);
      node2.isEmpty();
      node0.getParent();
      Node node3 = Node.newNumber((double) 56, 2909, 8);
      // Undeclared exception!
      try { 
        node3.addChildToFront(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(1, 0, 0);
      Node node1 = new Node(39, node0, node0, 48, 2);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(114);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(2628, "");
      node0.isOnlyModifiesThisCall();
      node0.isDelProp();
      node0.isGetterDef();
      Node node1 = Node.newString("unexpected prop id ", 30, 11);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node3 = node2.srcrefTree(node0);
      node3.isParamList();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.base.Preconditions");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1892, nodeArray0);
      node0.setIsSyntheticBlock(true);
      node0.setSourceEncodedPosition(1892);
      node0.isBreak();
      node0.isBreak();
      Node.extractCharno((-23));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1056, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isDo();
      node0.mayMutateArguments();
      node2.useSourceInfoFromForTree(node1);
      Node node3 = new Node(1402);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(2628, "");
      node0.isOnlyModifiesThisCall();
      node0.isNew();
      Node node1 = new Node(54, node0, node0, 38, 42);
      node1.isCall();
      node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(2628);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      node0.isNot();
      Node node1 = Node.newString(1439, "U", 54, 43);
      Node node2 = node0.clonePropsFrom(node1);
      node0.putProp(36, "U");
      node0.getSourceOffset();
      node2.getAncestors();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(155, "w3s?;]C");
      node0.getJsDocBuilderForNode();
      InputId inputId0 = new InputId("w3s?;]C");
      node0.getAncestor(153);
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber((double) 29);
      Node node2 = Node.newString("w3s?;]C");
      boolean boolean0 = true;
      node1.toString(false, true, true);
      node0.isFunction();
      node0.hasChildren();
      node2.isSyntheticBlock();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newString("f", 3005, 1316);
      node0.getBooleanProp((-18));
      Node node1 = Node.newString(47, "com.google.javascript.rhino.Node$AncestorIterable$1", 2887, (-1915));
      Node node2 = new Node((-710), node1, 37, 1892);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      node_NodeMismatch0.equals(node2);
      node2.isFor();
      Node node3 = Node.newString((-2020), "com.google.javascript.rhino.Node$AncestorIterable$1");
      // Undeclared exception!
      try { 
        node3.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newNumber((-2.468749));
      node0.isBlock();
      Node node1 = new Node(49, node0, node0, node0);
      node1.getIntProp(53);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node1);
      node0.isVarArgs();
      Node node2 = new Node((-2244));
      Node node3 = node2.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2244
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("%^Gd#EWIYh9&zI4", 54, 53);
      Node node3 = node2.copyInformationFromForTree(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.isDefaultCase();
      Node node4 = new Node((-2572), node3, node3);
      Node node5 = node1.useSourceInfoFromForTree(node4);
      node0.isOr();
      Node node6 = new Node(30);
      Node node7 = node6.copyInformationFrom(node3);
      node3.toStringTree();
      node5.isNot();
      node4.isAdd();
      node0.isNot();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node7;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node5;
      nodeArray0[4] = node4;
      nodeArray0[5] = node5;
      Node node8 = null;
      try {
        node8 = new Node(1296, nodeArray0, 16, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString(2628, "");
      node0.isOnlyModifiesThisCall();
      node0.isNew();
      node0.isNew();
      Node node1 = Node.newString(1439, "", (-1075), 12);
      node0.clonePropsFrom(node1);
      Node node2 = Node.newString("", (-1771), (-3023));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node2.isWhile();
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1761), nodeArray0);
      int int0 = 0;
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(8192, node0, node1, 29, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.setChangeTime((-219));
      Node node2 = Node.newString("2eC@N", 125, (-3436));
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.hasMoreThanOneChild();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.isOr();
      Node node4 = new Node(16);
      node1.toStringTree();
      node4.isNot();
      Node node5 = Node.newNumber((double) 56);
      node5.isAdd();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString(727, "Node tree inequality:\nTree1:\n");
      node0.removeProp(727);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(32, node0, 10, 37);
      node2.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node0.setVarArgs(true);
      node0.getIntProp(130);
      node2.isThrow();
      node0.setLineno(16);
      node2.isVoid();
      node1.setLength(1067);
      node2.isEquivalentTo(node0, true, false, false);
      node1.isObjectLit();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = (-1299);
      Node[] nodeArray0 = new Node[6];
      int int1 = (-1034);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node((-1299), (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber((double) 31, 31, 31);
      node0.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node0.isNot();
      node0.isAssign();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString((-412), "");
      node0.isOnlyModifiesThisCall();
      node0.isNew();
      node0.isNew();
      Node node1 = Node.newString(1439, "", (-1075), 12);
      Node node2 = new Node(4095, node1, 39, 38);
      node2.putProp(16, node0);
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      node0.setString("");
      node1.isEquivalentToShallow(node0);
      Node node3 = Node.newNumber(0.0, 118, 49);
      node3.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      node0.getBooleanProp(0);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = node0.copyInformationFrom(node0);
      node0.getSideEffectFlags();
      node0.isUnscopedQualifiedName();
      node1.detachChildren();
      node1.getIntProp((-4471));
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node1.hasMoreThanOneChild();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Jb[^<fC");
      node3.appendStringTree(mockPrintWriter0);
      node0.isOr();
      Node node4 = new Node(1402);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(12, node0, node0, (-1771), 2);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got EQ
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3843));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node node1 = Node.newString("null", 37, (-2981));
      node1.isEquivalentToTyped(node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node.newString(37, "null", (-3843), 1);
      Node node3 = Node.newString("b&~Ugm^RY|w.3>", 713, (-447));
      node_SideEffectFlags1.clearSideEffectFlags();
      node3.useSourceInfoIfMissingFrom(node0);
      node2.isWhile();
      node3.getBooleanProp(40);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      Node node3 = Node.newString("[ssqtSTlpT5pF<`+)1");
      node0.addChildrenToBack(node3);
      nodeArray0[1] = node2;
      Node node4 = new Node(0, 1150, 37);
      nodeArray0[2] = node4;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node.extractLineno(36);
      // Undeclared exception!
      try { 
        Node.newString(875, (String) null, 111, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("", (-18), (-18));
      Node.newString(2751, "", (-5903), (-1075));
      Node node1 = new Node((-899), node0);
      node1.getChildBefore(node0);
      Node node2 = null;
      try {
        node2 = new Node(1436, (Node) null, node1, node1, 38, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isRegExp();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString(727, "Node tree inequality:\nTree1:\n");
      node0.removeProp(727);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(32, node0, 10, 37);
      node2.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node0.getIntProp(130);
      node2.isThrow();
      node0.setLineno(16);
      node2.isVoid();
      node1.setLength(1067);
      node1.isObjectLit();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = new Node(29);
      Node node2 = new Node(1067, node0, node1);
      node0.setType(47);
      Node node3 = Node.newString(50, ".", (-2028), 30);
      node3.setSourceEncodedPositionForTree(4095);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node4 = new Node(30, node2, node3, 2, 15);
      node4.cloneNode();
      node3.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString("_j*|iu_(sS0.SI");
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node1.isVar();
      node0.hasChildren();
      Node node2 = new Node(1464, node1, node1, 2, 16);
      node1.isDefaultCase();
      Node node3 = null;
      try {
        node3 = new Node(4095, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(1, node0, node0);
      Node node2 = Node.newString("", 54, 53);
      Node node3 = node2.copyInformationFromForTree(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node1.isDefaultCase();
      Node node4 = new Node((-2572), node3, node3);
      Node node5 = node1.useSourceInfoFromForTree(node4);
      node0.isOr();
      Node node6 = new Node(30);
      node6.copyInformationFrom(node3);
      node3.toStringTree();
      node5.isNot();
      node4.isAdd();
      Node node7 = Node.newString("STRING \n");
      // Undeclared exception!
      try { 
        node0.replaceChild(node7, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      node0.setChangeTime(155);
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node1.hasMoreThanOneChild();
      node2.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node3 = new Node(1402);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber((double) 31, 31, 31);
      node0.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node0.isNot();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      node0.getLength();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node2.getIntProp(9);
      node2.isThrow();
      node0.setLineno(56);
      node2.isOnlyModifiesArgumentsCall();
      node1.isObjectLit();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      Node node1 = new Node(12, node0, node0, (-1771), 2);
      node0.isCall();
      node0.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString(40, "");
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString((-412), "");
      node0.isOnlyModifiesThisCall();
      node0.isNew();
      node0.isNew();
      Node node1 = Node.newString(1439, "", (-1075), 12);
      Node node2 = new Node(4095, node1, 39, 38);
      node2.putProp(16, node0);
      node0.getSourceOffset();
      node0.getStaticSourceFile();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals("");
      node1.isVarArgs();
      node0.isThrow();
      node0.addSuppression("");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isCast();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      Node node2 = Node.newString(2, "B79iv:<Ym", 29, (-3610));
      Node node3 = node1.clonePropsFrom(node0);
      Node node4 = new Node(39, node1, node3, node1, 16, (-1501));
      node4.getProp(29);
      node3.putProp(4095, (Object) null);
      node2.getSourceOffset();
      node3.getStaticSourceFile();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals(node4);
      node1.isVarArgs();
      node4.isThrow();
      node0.addSuppression("[ssqtSTlpT5pF<`+)1");
      Node.extractLineno(124);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(3886, 56, 1257);
      Node node1 = Node.newString("@o)j()s?}q*", 1610612736, 39);
      Node node2 = new Node(4095, node0, node1);
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber((double) 31, 31, 31);
      node0.toStringTree();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node0.isNot();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-18), (-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = 0;
      String string0 = "Node tree inequality:\nTree1:\n";
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-755));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -755
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1368.04436, 12, 8);
      Node node2 = new Node(127, node0, node0, node0);
      Node node3 = Node.newString(29, "[sasqtSTlpT5pF<`+)1");
      node3.toString(false, false, false);
      node0.isQualifiedName();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node4 = new Node(445, node1, node1);
      node3.getSourceFileName();
      node2.isEquivalentTo(node1);
      Node node5 = new Node(4095, node3, 4095, 37);
      node2.setLength(1162);
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(1918);
      node0.wasEmptyNode();
      node0.getProp(1918);
      int int0 = (-3035);
      // Undeclared exception!
      try { 
        node0.getAncestor((-1771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = 44;
      Node node0 = null;
      try {
        node0 = new Node(44, (Node) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber((-1475.1439353290773), 40, 40);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString(2182, "`");
      node0.getString();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node((-3845), node0, node0);
      node1.setType(4);
      Node node2 = Node.newString(38, ".", 49, 2);
      node1.setSourceEncodedPositionForTree(50);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node3 = Node.newString("Object#Element");
      Node node4 = node3.cloneNode();
      node1.getType();
      node2.getIndexOfChild(node4);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node(2, (Node) null, node0, (Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString("w3s?;]C");
      node0.getJsDocBuilderForNode();
      InputId inputId0 = new InputId("w3s?;]C");
      inputId0.toString();
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber((double) 29);
      node1.isQuotedString();
      Node node2 = Node.newString("w3s?;]C");
      node1.toString(false, true, true);
      node1.isFalse();
      node0.hasChildren();
      node2.isEquivalentToShallow(node1);
      node1.isOnlyModifiesArgumentsCall();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      Node node2 = Node.newString("", 1067, 39);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node0.isFalse();
      node2.useSourceInfoFromForTree(node1);
      node0.isOr();
      Node node3 = new Node(1402);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(56, 56, 1257);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("", (-18), (-18));
      Node node1 = Node.newNumber((-2168.509797));
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newNumber(1368.04436, 12, 8);
      Node node1 = new Node(127, node0, node0, node0);
      Node.newString("xmA;$ujE.T,", 46, 1);
      Node node2 = new Node(37);
      node2.srcrefTree(node1);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1368.04436, 12, 8);
      Node node2 = new Node(127, node0, node0, node0);
      Node node3 = Node.newString(29, "[sasqtSTlpT5pF<`+)1");
      node0.isQualifiedName();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node4 = new Node(445, node1, node1);
      node3.getSourceFileName();
      node2.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      Node.newString("Node tree inequality:\nTree1:\n");
      Node node1 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node1.getIntProp(9);
      node1.isEmpty();
      Node node2 = node0.getParent();
      node2.addChildToFront(node1);
      node1.isTrue();
      node0.hasOneChild();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.newString("Node tree inequality:\nTree1:\n", 2, 8);
      node0.getBooleanProp(47);
      Node node3 = Node.newString(44, "Node tree inequality:\nTree1:\n", 51, 85);
      Node node4 = new Node(3013, node3, 1433, 2076);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node2);
      node4.isFor();
      Node node5 = Node.newString(57, "Node tree inequality:\nTree1:\n");
      // Undeclared exception!
      try { 
        node4.replaceChild(node1, node5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isBlock();
      Node node1 = new Node(39, node0, 4095, 2);
      node1.setSourceEncodedPosition(100);
      // Undeclared exception!
      try { 
        node1.setString("xV4I&W}9}Z:^g-*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      node0.removeProp(0);
      node0.getString();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node2 = new Node(0, node0, 12, 0);
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      node2.getIntProp(9);
      node2.isThrow();
      Node node3 = node0.getParent();
      node3.addChildToFront(node2);
      node2.isTrue();
      node0.hasOneChild();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node node4 = Node.newString("Node tree inequality:\nTree1:\n", 2, 8);
      node4.useSourceInfoFrom(node2);
      Node.newString(44, "Node tree inequality:\nTree1:\n", 51, 85);
      Node.newString("", 2, 55);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isWhile();
      node0.getBooleanProp(1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      node1.putIntProp(869, 55);
      node1.isDelProp();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      Node node1 = new Node(38, node0, node0);
      Node node2 = Node.newString("", 1067, 39);
      Node node3 = node0.copyInformationFromForTree(node2);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isLabelName();
      node3.isFalse();
      node2.useSourceInfoFromForTree(node1);
      node3.isOr();
      Node node4 = new Node(1402);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1753
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString(" j>ESBAQA;r>!j<2cp");
      node0.isOptionalArg();
      Node node1 = Node.newNumber(0.0);
      node1.getLength();
      node1.toString();
      Node node2 = new Node(122, node0, 43, 4024);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node3.setLineno(38);
      node1.getInputId();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isFromExterns();
      assertTrue(node0.isParamList());
      
      Node node1 = Node.newString(12, ":ku~\"A7qe ^<&}nT;");
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      node0.getBooleanProp(0);
      node0.getLength();
      Node node1 = Node.newString(50, "`");
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(680, 37, 54);
      Node node3 = Node.newString(56, "`");
      Node node4 = node0.copyInformationFrom(node3);
      node0.getSideEffectFlags();
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$AndPredicate");
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString((-4764), "5~i;44n`", (-4764), (-4764));
      node0.mayMutateGlobalStateOrThrow();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setWasEmptyNode(false);
      node0.putIntProp(1110, 40);
      node0.putBooleanProp(30, true);
      node0.getBooleanProp(12);
      node0.checkTreeEquals(node0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.toString(false, false, true);
      node0.setLineno(0);
      node0.getInputId();
      node0.getAncestors();
      Node.mergeLineCharNo(50, 1833);
      Node node1 = Node.newString(65535, "", 56, 38);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3843));
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(44, nodeArray0);
      Node node1 = new Node(1608, node0, node0);
      node1.removeChildren();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getDirectives();
      node1.copyInformationFrom(node2);
      Node node3 = Node.newNumber((double) 1);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.toString(false, false, true);
      node0.setLineno(0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      Node node2 = new Node(48, node1, node0);
      Node node3 = Node.newString("xHdM", 12, (-2020));
      Node node4 = node2.copyInformationFromForTree(node3);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isLabelName();
      node4.isDefaultCase();
      node3.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node5 = new Node(2);
      // Undeclared exception!
      try { 
        node5.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      node0.isEmpty();
      node0.putBooleanProp(0, false);
      node0.putIntProp((-371), 116);
      node0.isDelProp();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isFromExterns();
      node0.getInputId();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-2208), (-2208));
      node0.isFalse();
      node0.getDouble();
      Node node1 = Node.newString("y,vy[ZPoZlz+=NMzk", 0, (-1694));
      node1.setChangeTime(51);
      node0.isParamList();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString((-4764), "5~i;44n`", (-4764), (-4764));
      node0.mayMutateGlobalStateOrThrow();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.putIntProp(1110, 40);
      node0.putBooleanProp(30, false);
      node1.getBooleanProp(12);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newNumber((double) (-581));
      Node node1 = new Node((-581), node0, node0, node0, node0);
      node1.getJSType();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("U$@z6kG>!dRxhJ51%J", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString(57, "", 57, 113);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(3313, "HxJl", (-3094), (-3094));
      node0.isBlock();
      Node node1 = new Node(2, node0, node0, node0, node0, (-3094), 43);
      Node node2 = null;
      try {
        node2 = new Node(46, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.toString(false, false, false);
      node0.setLineno(0);
      node0.getInputId();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      Node node2 = Node.newString("]:q ", (-2144), 39);
      Node node3 = Node.newString("xHdM", 12, (-2020));
      Node node4 = node2.copyInformationFromForTree(node3);
      node4.getChangeTime();
      node0.isLabelName();
      node3.setIsSyntheticBlock(false);
      node4.isDefaultCase();
      node3.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node5 = new Node(2);
      // Undeclared exception!
      try { 
        node5.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      Node node1 = new Node(0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.toString(true, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      Node.newString("[ssqtSTlpT5pF<`+)1");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1700);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = new Node(13, 10, 9);
      node0.getQualifiedName();
      try { 
        node0.setDouble(1445);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NE 10 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = new Node((-1703), (-918), (-3238));
      Node node1 = new Node(9, node0, node0, node0, node0);
      Node node2 = new Node(9, node1, node1, 16, 36);
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node((-1684), 56, 0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(229376, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1684), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(56, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      Object object0 = node0.getProp(4362);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(229376, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1684), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(56, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNull(object0);
      
      Set<String> set0 = node0.getDirectives();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(229376, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1684), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(56, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNull(set0);
      
      node0.setDirectives((Set<String>) null);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(229376, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1684), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(56, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertEquals(229376, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertEquals((-1684), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(56, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(boolean0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      node0.removeProp(0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      String string0 = node0.getString();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals("Node tree inequality:\nTree1:\n", string0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(string0);
      
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertTrue(node1.isString());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(0, node0, 12, (-9));
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isString());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node2);
      
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node1);
      
      int int0 = node2.getIntProp(9);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isString());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, int0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node2.isThrow();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isString());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      
      Node node3 = node0.getParent();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isString());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isOr());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(node3);
      
      Iterable<Node> iterable0 = node3.siblings();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getLineno());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isString());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isOr());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(iterable0);
      
      node3.addChildToFront(node2);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isString());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertEquals(2, node3.getChildCount());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isString());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isOr());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
      
      boolean boolean1 = node2.isTrue();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isString());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      
      boolean boolean2 = node0.hasOneChild();
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node1);
      
      Node node4 = new Node(96, 55, 1391);
      assertFalse(node4.isCatch());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isTry());
      assertFalse(node4.isFunction());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isAdd());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCall());
      assertFalse(node4.isVoid());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isContinue());
      assertFalse(node4.isIn());
      assertFalse(node4.isString());
      assertFalse(node4.isInc());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCast());
      assertFalse(node4.isDebugger());
      assertEquals(226671, node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isWith());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isScript());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isComma());
      assertEquals(1391, node4.getCharno());
      assertFalse(node4.isThis());
      assertFalse(node4.isThrow());
      assertFalse(node4.isAssign());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isOr());
      assertEquals(55, node4.getLineno());
      assertFalse(node4.isCase());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isFor());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isArrayLit());
      assertEquals(96, node4.getType());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isNumber());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node4);
      
      Node node5 = null;
      try {
        node5 = new Node(581, node2, node0, node4, 43, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.removeProp(0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = node0.getString();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals("Node tree inequality:\nTree1:\n", string0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertEquals(40, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = new Node(0, node0, 12, 0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(12, node2.getLineno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      
      int int0 = node2.getIntProp(9);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(12, node2.getLineno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, int0);
      
      boolean boolean0 = node2.isThrow();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(12, node2.getLineno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      
      Node node3 = node0.getParent();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node3.isCatch());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTrue());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isDec());
      assertFalse(node3.isComma());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isThis());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isFor());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      
      node3.addChildToFront(node2);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertEquals(12, node2.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isComma());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isThis());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      
      boolean boolean1 = node2.isTrue();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertEquals(12, node2.getLineno());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.hasOneChild();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isSyntheticBlock();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node node4 = Node.newString("Node tree inequality:\nTree1:\n", 2, 8);
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertTrue(node4.isString());
      assertFalse(node4.isName());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertEquals(8200, node4.getSourcePosition());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCatch());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isRegExp());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWhile());
      assertFalse(node4.isBlock());
      assertFalse(node4.isReturn());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssign());
      assertFalse(node4.isCast());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isNot());
      assertFalse(node4.isIn());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertEquals(40, node4.getType());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFunction());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertEquals(8, node4.getCharno());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isThis());
      assertFalse(node4.isBreak());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isFor());
      assertFalse(node4.isWith());
      assertFalse(node4.isComma());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isLabelName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      assertFalse(node4.isTrue());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isDefaultCase());
      assertEquals(2, node4.getLineno());
      assertFalse(node4.isLabel());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      
      Node node5 = Node.newString(44, "Node tree inequality:\nTree1:\n", 51, 85);
      assertFalse(node5.isBreak());
      assertFalse(node5.isThrow());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isHook());
      assertFalse(node5.isFalse());
      assertFalse(node5.isString());
      assertFalse(node5.isNot());
      assertFalse(node5.isWith());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isAnd());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isCase());
      assertFalse(node5.isScript());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isIn());
      assertTrue(node5.isTrue());
      assertEquals(44, node5.getType());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInc());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isParamList());
      assertFalse(node5.isVar());
      assertFalse(node5.isNull());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isCatch());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertEquals(208981, node5.getSourcePosition());
      assertFalse(node5.isTry());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isAssign());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertEquals(85, node5.getCharno());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVoid());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isOr());
      assertEquals(51, node5.getLineno());
      assertFalse(node5.isNew());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isAdd());
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      
      Node node6 = new Node(3013, node5, 1433, 2076);
      assertFalse(node5.isBreak());
      assertFalse(node5.isThrow());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isHook());
      assertFalse(node5.isFalse());
      assertFalse(node5.isString());
      assertFalse(node5.isNot());
      assertFalse(node5.isWith());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isAnd());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isCase());
      assertFalse(node5.isScript());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isIn());
      assertTrue(node5.isTrue());
      assertEquals(44, node5.getType());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInc());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isParamList());
      assertFalse(node5.isVar());
      assertFalse(node5.isNull());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isCatch());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertEquals(208981, node5.getSourcePosition());
      assertFalse(node5.isTry());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isAssign());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertEquals(85, node5.getCharno());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVoid());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isOr());
      assertEquals(51, node5.getLineno());
      assertFalse(node5.isNew());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isAdd());
      assertFalse(node6.isHook());
      assertFalse(node6.isFalse());
      assertEquals(2076, node6.getCharno());
      assertFalse(node6.isBreak());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isIn());
      assertFalse(node6.isInc());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isThrow());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIf());
      assertFalse(node6.isNE());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isInstanceOf());
      assertEquals(1, node6.getChildCount());
      assertFalse(node6.isCatch());
      assertTrue(node6.hasChildren());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isWith());
      assertFalse(node6.isNumber());
      assertFalse(node6.isThis());
      assertFalse(node6.isScript());
      assertFalse(node6.isFor());
      assertFalse(node6.isCase());
      assertFalse(node6.isTry());
      assertFalse(node6.isBlock());
      assertFalse(node6.isCall());
      assertFalse(node6.isVar());
      assertFalse(node6.isAdd());
      assertFalse(node6.isNull());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isParamList());
      assertFalse(node6.isName());
      assertEquals(5871644, node6.getSourcePosition());
      assertFalse(node6.isContinue());
      assertFalse(node6.isLabel());
      assertFalse(node6.isOr());
      assertEquals(3013, node6.getType());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isNew());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isDo());
      assertFalse(node6.isCast());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isAssign());
      assertFalse(node6.isFunction());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isTrue());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAnd());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isVoid());
      assertFalse(node6.isReturn());
      assertEquals(1433, node6.getLineno());
      assertFalse(node6.isComma());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isNot());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isDec());
      assertFalse(node6.isWhile());
      assertFalse(node6.isString());
      assertTrue(node6.hasOneChild());
      assertFalse(node6.isGetProp());
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node4));
      
      Node.NodeMismatch node_NodeMismatch0 = node6.checkTreeTypeAwareEqualsImpl(node2);
      assertFalse(node5.isBreak());
      assertFalse(node5.isThrow());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isHook());
      assertFalse(node5.isFalse());
      assertFalse(node5.isString());
      assertFalse(node5.isNot());
      assertFalse(node5.isWith());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isAnd());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isCase());
      assertFalse(node5.isScript());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isIn());
      assertTrue(node5.isTrue());
      assertEquals(44, node5.getType());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInc());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isParamList());
      assertFalse(node5.isVar());
      assertFalse(node5.isNull());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isCatch());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertEquals(208981, node5.getSourcePosition());
      assertFalse(node5.isTry());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isAssign());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertEquals(85, node5.getCharno());
      assertFalse(node5.isLabel());
      assertFalse(node5.isReturn());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVoid());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isOr());
      assertEquals(51, node5.getLineno());
      assertFalse(node5.isNew());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node6.isHook());
      assertFalse(node6.isFalse());
      assertEquals(2076, node6.getCharno());
      assertFalse(node6.isBreak());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isIn());
      assertFalse(node6.isInc());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isThrow());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isIf());
      assertFalse(node6.isNE());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isInstanceOf());
      assertEquals(1, node6.getChildCount());
      assertFalse(node6.isCatch());
      assertTrue(node6.hasChildren());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isWith());
      assertFalse(node6.isNumber());
      assertFalse(node6.isThis());
      assertFalse(node6.isScript());
      assertFalse(node6.isFor());
      assertFalse(node6.isCase());
      assertFalse(node6.isTry());
      assertFalse(node6.isBlock());
      assertFalse(node6.isCall());
      assertFalse(node6.isVar());
      assertFalse(node6.isAdd());
      assertFalse(node6.isNull());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isParamList());
      assertFalse(node6.isName());
      assertEquals(5871644, node6.getSourcePosition());
      assertFalse(node6.isContinue());
      assertFalse(node6.isLabel());
      assertFalse(node6.isOr());
      assertEquals(3013, node6.getType());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isNew());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isDo());
      assertFalse(node6.isCast());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isAssign());
      assertFalse(node6.isFunction());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isTrue());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isAnd());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isVoid());
      assertFalse(node6.isReturn());
      assertEquals(1433, node6.getLineno());
      assertFalse(node6.isComma());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isNot());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isDec());
      assertFalse(node6.isWhile());
      assertFalse(node6.isString());
      assertTrue(node6.hasOneChild());
      assertFalse(node6.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertEquals(12, node2.getLineno());
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node6));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node1));
      
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeTypeAwareEqualsImpl(node2);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertEquals(12, node2.getLineno());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node6));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node1));
      
      boolean boolean4 = node_NodeMismatch1.equals(node3);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertEquals(12, node2.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isComma());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isThis());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node6));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node6));
      assertFalse(boolean4);
      
      Node node7 = Node.newString(57, "", 54, 43);
      assertFalse(node7.isCase());
      assertFalse(node7.isInc());
      assertFalse(node7.isIn());
      assertFalse(node7.isString());
      assertFalse(node7.isSwitch());
      assertFalse(node7.isNE());
      assertFalse(node7.isIf());
      assertFalse(node7.isEmpty());
      assertFalse(node7.isFalse());
      assertFalse(node7.isThrow());
      assertFalse(node7.isDefaultCase());
      assertFalse(node7.isNot());
      assertEquals(54, node7.getLineno());
      assertFalse(node7.isObjectLit());
      assertFalse(node7.isFunction());
      assertFalse(node7.isExprResult());
      assertEquals(43, node7.getCharno());
      assertFalse(node7.isDebugger());
      assertFalse(node7.isNull());
      assertFalse(node7.isVoid());
      assertFalse(node7.isTrue());
      assertEquals(57, node7.getType());
      assertFalse(node7.isAnd());
      assertFalse(node7.isAssign());
      assertFalse(node7.isDelProp());
      assertFalse(node7.isName());
      assertFalse(node7.isDec());
      assertFalse(node7.isGetElem());
      assertFalse(node7.hasChildren());
      assertFalse(node7.isBreak());
      assertFalse(node7.isComma());
      assertFalse(node7.isTypeOf());
      assertFalse(node7.isCall());
      assertFalse(node7.isReturn());
      assertFalse(node7.isGetProp());
      assertFalse(node7.isWhile());
      assertFalse(node7.isDo());
      assertFalse(node7.hasMoreThanOneChild());
      assertFalse(node7.isContinue());
      assertFalse(node7.isOr());
      assertFalse(node7.isStringKey());
      assertFalse(node7.isLabelName());
      assertFalse(node7.isCast());
      assertFalse(node7.isSetterDef());
      assertFalse(node7.isAssignAdd());
      assertFalse(node7.isAdd());
      assertEquals(0, node7.getChildCount());
      assertFalse(node7.isLabel());
      assertFalse(node7.isNew());
      assertFalse(node7.isVar());
      assertFalse(node7.isWith());
      assertFalse(node7.isCatch());
      assertFalse(node7.isScript());
      assertFalse(node7.isRegExp());
      assertFalse(node7.isInstanceOf());
      assertFalse(node7.isArrayLit());
      assertEquals(221227, node7.getSourcePosition());
      assertFalse(node7.isParamList());
      assertFalse(node7.isFor());
      assertFalse(node7.isGetterDef());
      assertFalse(node7.isNumber());
      assertFalse(node7.isBlock());
      assertFalse(node7.isTry());
      assertFalse(node7.hasOneChild());
      assertFalse(node7.isHook());
      assertFalse(node7.isThis());
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node3));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node7.equals((Object)node2));
      assertFalse(node7.equals((Object)node4));
      assertFalse(node7.equals((Object)node1));
      
      // Undeclared exception!
      try { 
        node6.replaceChild(node2, node7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString(" j>ESBAQA;r>!j<2cp");
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isOptionalArg();
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(boolean0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = Node.newNumber(0.0);
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      
      int int0 = node1.getLength();
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      String string0 = node1.toString();
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.equals((Object)node0));
      assertEquals("NUMBER 0.0", string0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(string0);
      
      boolean boolean1 = node1.isEquivalentTo(node0, false, false, true);
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = Node.newNumber((double) 52);
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getType());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isBreak());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      boolean boolean2 = node1.isRegExp();
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node1, node2);
      
      boolean boolean3 = node0.isCase();
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(155, "w3s?;]C");
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(155, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(155, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      InputId inputId0 = new InputId("w3s?;]C");
      assertEquals("w3s?;]C", inputId0.getIdName());
      assertNotNull(inputId0);
      
      node0.setInputId(inputId0);
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(155, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals("w3s?;]C", inputId0.getIdName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newNumber((double) 29);
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node1);
      
      Node node2 = Node.newString("w3s?;]C");
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSetterDef());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBlock());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      String string0 = node1.toString(false, true, true);
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals("NUMBER 29.0", string0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(string0);
      
      boolean boolean0 = node0.isFunction();
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(155, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node2);
      
      boolean boolean1 = node0.hasChildren();
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(155, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node2);
      
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-2208), (-2208));
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isFalse();
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(boolean0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = Node.newString("y,vy[ZPoZlz+=NMzk", 0, (-1694));
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node1);
      
      Node node2 = node0.srcrefTree(node1);
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertEquals(39, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      
      boolean boolean1 = node0.isParamList();
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertSame(node0, node2);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(boolean0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      int int0 = 117;
      Node[] nodeArray0 = new Node[5];
      Node node0 = null;
      try {
        node0 = new Node(117, nodeArray0, 4, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString(105, "[<1R~5I");
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      
      Node node1 = Node.newString(" j>ESBAQA;r>!j<2cp");
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      boolean boolean0 = node1.isOptionalArg();
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertNotSame(node1, node0);
      
      Node node2 = Node.newNumber(0.0);
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertEquals(39, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node2);
      
      int int0 = node2.getLength();
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertEquals(39, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isObjectLit();
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      
      boolean boolean2 = node2.isEquivalentTo(node1, false, false, true);
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertEquals(39, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertEquals(48, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      boolean boolean3 = node0.isRegExp();
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      
      Node node3 = Node.newNumber((double) 52);
      assertFalse(node3.isWhile());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isBlock());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetProp());
      assertTrue(node3.isNumber());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isComma());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isScript());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node3, node2);
      assertNotNull(node3);
      
      Node node4 = Node.newString("", 524288, 4);
      assertFalse(node4.isVar());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isContinue());
      assertFalse(node4.isNumber());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isAssign());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.isOr());
      assertFalse(node4.isNull());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertFalse(node4.isName());
      assertEquals((-2147483644), node4.getSourcePosition());
      assertFalse(node4.isTrue());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isInc());
      assertFalse(node4.isComma());
      assertFalse(node4.isThrow());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isAnd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertEquals(524288, node4.getLineno());
      assertEquals(40, node4.getType());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertNotNull(node4);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node4);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node4.isVar());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isContinue());
      assertFalse(node4.isNumber());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isAssign());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.isOr());
      assertFalse(node4.isNull());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertFalse(node4.isName());
      assertEquals((-2147483644), node4.getSourcePosition());
      assertFalse(node4.isTrue());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isInc());
      assertFalse(node4.isComma());
      assertFalse(node4.isThrow());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isAnd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertEquals(524288, node4.getLineno());
      assertEquals(40, node4.getType());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node4);
      assertNotSame(node0, node1);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
      assertNotNull(node_NodeMismatch0);
      
      boolean boolean4 = node_NodeMismatch0.equals(node_SideEffectFlags0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertFalse(node4.isVar());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isContinue());
      assertFalse(node4.isNumber());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isAssign());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.isOr());
      assertFalse(node4.isNull());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertFalse(node4.isName());
      assertEquals((-2147483644), node4.getSourcePosition());
      assertFalse(node4.isTrue());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isInc());
      assertFalse(node4.isComma());
      assertFalse(node4.isThrow());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isAnd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertEquals(524288, node4.getLineno());
      assertEquals(40, node4.getType());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isIn());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals(4, node4.getCharno());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node4);
      assertNotSame(node0, node1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertNotSame(node4, node1);
      assertNotSame(node4, node0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString(155, "w3s?;]C");
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertEquals(155, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertTrue(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertEquals(155, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertTrue(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      Node node1 = Node.newNumber((double) 29);
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node1);
      
      Node node2 = Node.newString("w3s?;]C");
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isScript());
      assertFalse(node2.isWhile());
      assertTrue(node2.isString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFalse());
      assertEquals(40, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      String string0 = node1.toString(false, true, true);
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals("NUMBER 29.0", string0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(string0);
      
      boolean boolean0 = node0.isFunction();
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertEquals(155, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertTrue(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node2);
      
      boolean boolean1 = node0.hasChildren();
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertEquals(155, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertTrue(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node2);
      
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotNull(node1);
      
      nodeArray0[0] = node1;
      Node node2 = Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals(46, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node2);
      
      Node node3 = Node.newString("[ssqtSTlpT5pF<`+)1");
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isThis());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(40, node3.getType());
      assertFalse(node3.isHook());
      assertTrue(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isBlock());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node3, node2);
      assertNotNull(node3);
      
      node0.addChildrenToBack(node3);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isThis());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(40, node3.getType());
      assertFalse(node3.isHook());
      assertTrue(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isBlock());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node3, node2);
      
      nodeArray0[1] = node2;
      Node node4 = new Node(0, 1150, 37);
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertEquals(0, node4.getType());
      assertFalse(node4.isInc());
      assertFalse(node4.isCase());
      assertFalse(node4.isComma());
      assertFalse(node4.isThrow());
      assertFalse(node4.isThis());
      assertFalse(node4.isIn());
      assertEquals(4710437, node4.getSourcePosition());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isBreak());
      assertEquals(37, node4.getCharno());
      assertFalse(node4.isNE());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isTry());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isWith());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isFor());
      assertEquals(1150, node4.getLineno());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNew());
      assertFalse(node4.isCall());
      assertFalse(node4.isAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isOr());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCatch());
      assertFalse(node4.isNull());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isFunction());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isContinue());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isString());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDebugger());
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node4);
      
      nodeArray0[2] = node4;
      Node node5 = new Node(0, node1, node1, node1, (-742), 971);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node5.isCatch());
      assertFalse(node5.isParamList());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertFalse(node5.isCall());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isName());
      assertFalse(node5.isWhile());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isIn());
      assertEquals((-1), node5.getLineno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isString());
      assertFalse(node5.isNE());
      assertFalse(node5.isInc());
      assertFalse(node5.isCast());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isScript());
      assertFalse(node5.isNot());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isHook());
      assertEquals(0, node5.getType());
      assertFalse(node5.isDec());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isThis());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWith());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isLabel());
      assertFalse(node5.isCase());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDo());
      assertFalse(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVar());
      assertFalse(node5.isAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node5);
      
      Node node6 = new Node(0, node5);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node5.isCatch());
      assertFalse(node5.isParamList());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertFalse(node5.isCall());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isName());
      assertFalse(node5.isWhile());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isIn());
      assertEquals((-1), node5.getLineno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isString());
      assertFalse(node5.isNE());
      assertFalse(node5.isInc());
      assertFalse(node5.isCast());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isScript());
      assertFalse(node5.isNot());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isHook());
      assertEquals(0, node5.getType());
      assertFalse(node5.isDec());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isThis());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWith());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isLabel());
      assertFalse(node5.isCase());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDo());
      assertFalse(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVar());
      assertFalse(node5.isAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node6.isContinue());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isDo());
      assertEquals((-1), node6.getLineno());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isNumber());
      assertFalse(node6.isOr());
      assertFalse(node6.isCast());
      assertFalse(node6.isVar());
      assertFalse(node6.isNew());
      assertFalse(node6.isAdd());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isLabel());
      assertFalse(node6.isAnd());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isNull());
      assertFalse(node6.isNot());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTrue());
      assertFalse(node6.isGetElem());
      assertEquals(0, node6.getType());
      assertFalse(node6.isName());
      assertFalse(node6.isVoid());
      assertFalse(node6.isCall());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isBreak());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isComma());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssign());
      assertFalse(node6.isReturn());
      assertTrue(node6.hasOneChild());
      assertFalse(node6.isIn());
      assertFalse(node6.isCase());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isNE());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isString());
      assertFalse(node6.isIf());
      assertFalse(node6.isSwitch());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isFalse());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isInc());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isThrow());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCatch());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isScript());
      assertFalse(node6.isParamList());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isTry());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isWith());
      assertFalse(node6.isBlock());
      assertFalse(node6.isFor());
      assertEquals(1, node6.getChildCount());
      assertFalse(node6.isThis());
      assertFalse(node6.isHook());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node6);
      
      node6.setCharno(1848);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node5.isCatch());
      assertFalse(node5.isParamList());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isNull());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isBlock());
      assertFalse(node5.isCall());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTry());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isName());
      assertFalse(node5.isWhile());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isIn());
      assertEquals((-1), node5.getLineno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isString());
      assertFalse(node5.isNE());
      assertFalse(node5.isInc());
      assertFalse(node5.isCast());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAnd());
      assertFalse(node5.isScript());
      assertFalse(node5.isNot());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isHook());
      assertEquals(0, node5.getType());
      assertFalse(node5.isDec());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isThis());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWith());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isLabel());
      assertFalse(node5.isCase());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDo());
      assertFalse(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isOr());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVar());
      assertFalse(node5.isAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isNew());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node6.isContinue());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isDo());
      assertEquals((-1), node6.getLineno());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isNumber());
      assertFalse(node6.isOr());
      assertFalse(node6.isCast());
      assertFalse(node6.isVar());
      assertFalse(node6.isNew());
      assertFalse(node6.isAdd());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isLabel());
      assertFalse(node6.isAnd());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isNull());
      assertFalse(node6.isNot());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isTrue());
      assertFalse(node6.isGetElem());
      assertEquals(0, node6.getType());
      assertFalse(node6.isName());
      assertFalse(node6.isVoid());
      assertFalse(node6.isCall());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isBreak());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isComma());
      assertFalse(node6.isWhile());
      assertFalse(node6.isAssign());
      assertFalse(node6.isReturn());
      assertTrue(node6.hasOneChild());
      assertFalse(node6.isIn());
      assertFalse(node6.isCase());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isNE());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isString());
      assertFalse(node6.isIf());
      assertFalse(node6.isSwitch());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isFalse());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isInc());
      assertFalse(node6.isFunction());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isThrow());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCatch());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isScript());
      assertFalse(node6.isParamList());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isTry());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isWith());
      assertFalse(node6.isBlock());
      assertFalse(node6.isFor());
      assertEquals(1, node6.getChildCount());
      assertFalse(node6.isThis());
      assertFalse(node6.isHook());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node6));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node6));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node1, node5);
      assertNotSame(node1, node6);
      assertNotSame(node1, node4);
      assertNotSame(node5, node6);
      assertNotSame(node5, node1);
      assertNotSame(node5, node4);
      assertNotSame(node6, node4);
      assertNotSame(node6, node1);
      assertNotSame(node6, node5);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(356, nodeArray0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertEquals(356, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, nodeArray0.length);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      int int0 = node0.getSideEffectFlags();
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertEquals(356, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, nodeArray0.length);
      assertEquals(0, int0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertEquals(356, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, nodeArray0.length);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNull(staticSourceFile0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNotNull(jSDocInfo0);
      
      Node node1 = jSDocInfo0.getAssociatedNode();
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(node1);
      
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, nodeArray0.length);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isScript());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node1);
      
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isScript());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node0.hasChildren();
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = Node.newString("]:q ", (-2144), 39);
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.isString());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = Node.newString("xHdM", 12, (-2020));
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInc());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotNull(node3);
      
      Node node4 = node2.copyInformationFromForTree(node3);
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.isString());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInc());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isCase());
      assertFalse(node4.isWith());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isIf());
      assertFalse(node4.isTypeOf());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDec());
      assertFalse(node4.isNE());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isIn());
      assertEquals(40, node4.getType());
      assertFalse(node4.isNot());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isFunction());
      assertFalse(node4.isCast());
      assertFalse(node4.isName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNull());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCatch());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isCall());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isTry());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isDo());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isArrayLit());
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertNotSame(node4, node3);
      assertNotNull(node4);
      
      int int0 = node4.getChangeTime();
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.isString());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInc());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isCase());
      assertFalse(node4.isWith());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isIf());
      assertFalse(node4.isTypeOf());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDec());
      assertFalse(node4.isNE());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isIn());
      assertEquals(40, node4.getType());
      assertFalse(node4.isNot());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isFunction());
      assertFalse(node4.isCast());
      assertFalse(node4.isName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNull());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCatch());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isCall());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isTry());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isDo());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isArrayLit());
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertNotSame(node4, node3);
      
      boolean boolean2 = node0.isLabelName();
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean3 = node4.isDefaultCase();
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isReturn());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertEquals(40, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.isString());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInc());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isCase());
      assertFalse(node4.isWith());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isIf());
      assertFalse(node4.isTypeOf());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDec());
      assertFalse(node4.isNE());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isIn());
      assertEquals(40, node4.getType());
      assertFalse(node4.isNot());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isFunction());
      assertFalse(node4.isCast());
      assertFalse(node4.isName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNull());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCatch());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isCall());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isTry());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isDo());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabel());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isArrayLit());
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertNotSame(node4, node3);
      
      Node node5 = node3.useSourceInfoFromForTree(node0);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInc());
      assertFalse(node3.isCast());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getLineno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(40, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node5.isBlock());
      assertTrue(node5.isString());
      assertFalse(node5.isNew());
      assertFalse(node5.isVar());
      assertFalse(node5.isWhile());
      assertFalse(node5.isDo());
      assertFalse(node5.isAdd());
      assertFalse(node5.isOr());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertEquals(0, node5.getSourcePosition());
      assertFalse(node5.isReturn());
      assertFalse(node5.isNull());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isCall());
      assertFalse(node5.isName());
      assertFalse(node5.isAssign());
      assertFalse(node5.isCatch());
      assertFalse(node5.isVoid());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTrue());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isTry());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isNumber());
      assertFalse(node5.isScript());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isParamList());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isInc());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isHook());
      assertFalse(node5.isCase());
      assertFalse(node5.isIn());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isThis());
      assertFalse(node5.isComma());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isNE());
      assertFalse(node5.isFor());
      assertFalse(node5.isBreak());
      assertFalse(node5.isWith());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isFunction());
      assertEquals(0, node5.getCharno());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isSetterDef());
      assertEquals(0, node5.getLineno());
      assertFalse(node5.isContinue());
      assertFalse(node5.isAnd());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertEquals(40, node5.getType());
      assertFalse(node5.isCast());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node3, node2);
      assertSame(node3, node5);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node5, node1);
      assertNotSame(node5, node4);
      assertNotSame(node5, node2);
      assertSame(node5, node3);
      assertNotNull(node5);
      
      boolean boolean4 = node0.isOr();
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertEquals((-4053), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node4));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node6 = new Node(2);
      assertFalse(node6.isRegExp());
      assertFalse(node6.isCatch());
      assertFalse(node6.isFunction());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isTry());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isParamList());
      assertFalse(node6.isDo());
      assertFalse(node6.isString());
      assertFalse(node6.isNew());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isLabel());
      assertFalse(node6.isDec());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isReturn());
      assertFalse(node6.isWhile());
      assertFalse(node6.isVar());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isName());
      assertFalse(node6.isAssign());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isBreak());
      assertFalse(node6.isCall());
      assertFalse(node6.isAdd());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isOr());
      assertFalse(node6.isVoid());
      assertFalse(node6.isNull());
      assertFalse(node6.isTrue());
      assertFalse(node6.isAnd());
      assertFalse(node6.isWith());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isScript());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isComma());
      assertFalse(node6.isThis());
      assertFalse(node6.isFalse());
      assertFalse(node6.isLabelName());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNumber());
      assertFalse(node6.isCast());
      assertEquals((-1), node6.getCharno());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isCase());
      assertFalse(node6.isContinue());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isIn());
      assertEquals(2, node6.getType());
      assertFalse(node6.isInc());
      assertFalse(node6.isBlock());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFor());
      assertFalse(node6.isSetterDef());
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isIf());
      assertFalse(node6.isNE());
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node6);
      
      // Undeclared exception!
      try { 
        node6.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString((-1487), "O/J4}R7(Wh]8&");
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      
      int int0 = node0.getSideEffectFlags();
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(0, int0);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node0.getBooleanProp(0);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(boolean0);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      int int1 = node0.getLength();
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newString(37, "O/J4}R7(Wh]8&");
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(37, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertTrue(node1.isCall());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(37, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertTrue(node1.isCall());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node_NodeMismatch0);
      
      boolean boolean1 = node0.isOr();
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      
      boolean boolean2 = node0.isIn();
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString(105, "[<1R~5I");
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      
      Node node1 = Node.newString(" j>ESBAQA;r>!j<2cp");
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      boolean boolean0 = node1.isOptionalArg();
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node1, node0);
      
      Node node2 = Node.newNumber(0.0);
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertTrue(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.hasChildren());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node2);
      
      int int0 = node2.getLength();
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertTrue(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.hasChildren());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean1 = node0.isObjectLit();
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(48, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      boolean boolean2 = node0.isRegExp();
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertEquals(105, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      
      Node node3 = Node.newNumber((double) 52);
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isOr());
      assertTrue(node3.isNumber());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isString());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isComma());
      assertFalse(node3.isName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertEquals(39, node3.getType());
      assertFalse(node3.isCase());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node3, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      
      node0.removeProp(0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      String string0 = node0.getString();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals("Node tree inequality:\nTree1:\n", string0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(string0);
      
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(0, node0, 12, 0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node2);
      
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotSame(node0, node1);
      
      int int0 = node2.getIntProp(9);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node2.isThrow();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      
      Node node3 = node0.getParent();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isWith());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(node3);
      
      Iterable<Node> iterable0 = node3.siblings();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isWith());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(iterable0);
      
      node3.addChildToFront(node2);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThis());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isWith());
      assertFalse(node3.isFor());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
      
      boolean boolean1 = node2.isTrue();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      
      boolean boolean2 = node0.hasOneChild();
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags2);
      
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isBlock();
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(boolean0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(39, node0, 4095, 2);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(16773122, node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(4095, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
      
      int int0 = node1.getIntProp(0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(16773122, node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertEquals(4095, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(2, node1.getCharno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node1.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(2628, "");
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(boolean0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node0.isNew();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean2 = node0.isNew();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = Node.newString(1439, "", (-1075), 12);
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = node0.clonePropsFrom(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isExprResult());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(2628, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      node2.putProp(16, node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isExprResult());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(2628, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      
      int int0 = node0.getSourceOffset();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node1));
      assertEquals((-1), int0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node1));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNull(staticSourceFile0);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node_NodeMismatch0);
      
      boolean boolean3 = node_NodeMismatch0.equals("");
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      
      boolean boolean4 = node1.isVarArgs();
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1439, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      
      boolean boolean5 = node0.isThrow();
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      
      node0.addSuppression("");
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(2628, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node1));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString(105, "[<1R~5I");
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      
      Node node1 = Node.newNumber(0.0);
      assertEquals(39, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertNotNull(node1);
      
      boolean boolean0 = node1.isOptionalArg();
      assertEquals(39, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString((-4764), "5~i;44n`", (-4764), (-4764));
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
      
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNotNull(jSDocInfo0);
      
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      
      node1.putIntProp(1110, 40);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      node0.putBooleanProp(30, false);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertSame(node0, node1);
      
      boolean boolean1 = node1.getBooleanProp(12);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      String string0 = node1.checkTreeEquals(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNull(string0);
      
      boolean boolean2 = node1.isCall();
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-4764), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      
      node0.removeProp(0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      String string0 = node0.getString();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals("Node tree inequality:\nTree1:\n", string0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(string0);
      
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(0, node0, 12, 0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node2);
      
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      
      int int0 = node2.getIntProp(9);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, int0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node2.isThrow();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      
      Node node3 = node0.getParent();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isCast());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBlock());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isTry());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isName());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTrue());
      assertEquals(0, node3.getType());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(node3);
      
      node3.addChildToFront(node2);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isNot());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isCast());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertEquals(2, node3.getChildCount());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isWith());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBlock());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isTry());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isName());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTrue());
      assertEquals(0, node3.getType());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
      
      boolean boolean1 = node2.isTrue();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      
      boolean boolean2 = node0.hasOneChild();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      
      boolean boolean3 = node0.isSyntheticBlock();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertNotNull(node_SideEffectFlags3);
      
      boolean boolean4 = node1.isRegExp();
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean4);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      
      node_SideEffectFlags1.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      
      boolean boolean5 = node1.isLabelName();
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean5);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString((-275), "synthetic");
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertEquals((-275), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -275
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isEmpty();
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertFalse(boolean0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.putBooleanProp(0, false);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.putIntProp((-371), 116);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.putBooleanProp((-371), false);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNull(staticSourceFile0);
      
      node0.setStaticSourceFile((StaticSourceFile) null);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean1 = node0.getBooleanProp(50);
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, nodeArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node1);
      
      nodeArray0[0] = node1;
      Node node2 = Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isHook());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(46, node2.getType());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabel());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node2);
      
      boolean boolean0 = node2.isQualifiedName();
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isHook());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(46, node2.getType());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabel());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      nodeArray0[1] = node2;
      Node node3 = null;
      try {
        node3 = new Node(31, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isEmpty();
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertFalse(boolean0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.putBooleanProp(0, false);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.putIntProp((-371), 116);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.putBooleanProp((-371), false);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = null;
      Node node2 = node0.getChildBefore((Node) null);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, nodeArray0.length);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNull(node2);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      assertNull(objectType0);
      
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(0, 8202, 6495);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertEquals(33599487, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(8202, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      
      String string0 = node0.getSourceFileName();
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertEquals(33599487, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(8202, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertNull(string0);
      
      Node node1 = new Node(0, node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertEquals(33599487, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(8202, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString(105, "[<1R~5I");
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      
      Node node1 = Node.newNumber(0.0);
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node1);
      
      int int0 = node1.getLength();
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isObjectLit();
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      int int0 = 43;
      Node node0 = Node.newNumber((-1364.3526354273324), 43, 43);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertEquals(43, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isHook());
      assertEquals(43, node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertEquals(176171, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(43, nodeArray0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-942), (-942));
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isName();
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(boolean0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node1 = new Node(0, node0, node0, node0, node0, 39, 16384);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInc());
      assertEquals(39, node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals(163839, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("Zor9w", 113, 113);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(113, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(462961, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(113, node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = new Node(17);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertEquals(17, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      
      Node node2 = new Node(376, 55, 2344);
      assertFalse(node2.isString());
      assertEquals(2344, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertEquals(376, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isDo());
      assertEquals(227624, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node3 = new Node(113, node0, node1, node2, 42, 31);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(113, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(462961, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(113, node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertEquals(17, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node2.isString());
      assertEquals(2344, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertEquals(376, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isDo());
      assertEquals(227624, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isRegExp());
      assertEquals(31, node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFor());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertEquals(113, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertEquals(172063, node3.getSourcePosition());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasChildren());
      assertTrue(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isDec());
      assertFalse(node3.isIf());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertEquals(42, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node4 = new Node(113, node3, 1192, 29);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(113, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(462961, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(113, node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertEquals(17, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node2.isString());
      assertEquals(2344, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertEquals(376, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isDo());
      assertEquals(227624, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isRegExp());
      assertEquals(31, node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFor());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertEquals(113, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertEquals(172063, node3.getSourcePosition());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasChildren());
      assertTrue(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isDec());
      assertFalse(node3.isIf());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertEquals(42, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertEquals(1192, node4.getLineno());
      assertEquals(29, node4.getCharno());
      assertFalse(node4.isDec());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      assertEquals(113, node4.getType());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isOr());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWith());
      assertFalse(node4.isComma());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isBreak());
      assertFalse(node4.isCall());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isIf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isVar());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isBlock());
      assertTrue(node4.isWhile());
      assertFalse(node4.isThis());
      assertEquals(4882461, node4.getSourcePosition());
      assertFalse(node4.isAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isCase());
      assertFalse(node4.isNew());
      assertFalse(node4.isLabel());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isLabelName());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node5 = Node.newString("");
      assertFalse(node5.isNull());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isParamList());
      assertFalse(node5.isName());
      assertFalse(node5.isCall());
      assertFalse(node5.isCatch());
      assertFalse(node5.isVar());
      assertFalse(node5.isBlock());
      assertEquals(40, node5.getType());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVoid());
      assertFalse(node5.isDo());
      assertFalse(node5.isOr());
      assertFalse(node5.isTypeOf());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isContinue());
      assertFalse(node5.isReturn());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isDec());
      assertFalse(node5.isAssign());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAnd());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isNot());
      assertFalse(node5.isBreak());
      assertFalse(node5.isThis());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isHook());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isThrow());
      assertFalse(node5.isWith());
      assertFalse(node5.isFalse());
      assertFalse(node5.isComma());
      assertFalse(node5.isInc());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isIn());
      assertFalse(node5.isNumber());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isAssignAdd());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isLabel());
      assertFalse(node5.isScript());
      assertFalse(node5.isSwitch());
      assertTrue(node5.isString());
      assertFalse(node5.isCase());
      assertFalse(node5.isTry());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isStringKey());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      Node node6 = Node.newString(53, "qr5:zE", 83, 30);
      assertFalse(node6.isWith());
      assertFalse(node6.isScript());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isCast());
      assertFalse(node6.isAnd());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertFalse(node6.isOr());
      assertFalse(node6.isLabel());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isInc());
      assertFalse(node6.isDo());
      assertFalse(node6.isWhile());
      assertFalse(node6.isString());
      assertFalse(node6.isContinue());
      assertEquals(30, node6.getCharno());
      assertFalse(node6.isCall());
      assertFalse(node6.isName());
      assertFalse(node6.hasChildren());
      assertEquals(53, node6.getType());
      assertFalse(node6.isBreak());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isAssign());
      assertFalse(node6.isDec());
      assertFalse(node6.isComma());
      assertFalse(node6.isReturn());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isDefaultCase());
      assertEquals(83, node6.getLineno());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isFunction());
      assertFalse(node6.isTrue());
      assertFalse(node6.isRegExp());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isCatch());
      assertFalse(node6.isVoid());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isIf());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isNE());
      assertFalse(node6.isNull());
      assertFalse(node6.isEmpty());
      assertEquals(339998, node6.getSourcePosition());
      assertFalse(node6.isIn());
      assertFalse(node6.isVar());
      assertFalse(node6.isAdd());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isNew());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isBlock());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isNumber());
      assertFalse(node6.isFor());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isParamList());
      assertFalse(node6.isThis());
      assertFalse(node6.isHook());
      assertFalse(node6.isTry());
      assertFalse(node6.isCase());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node4));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean0 = node4.isOnlyModifiesArgumentsCall();
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(113, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(462961, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(113, node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertEquals(17, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node2.isString());
      assertEquals(2344, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertEquals(376, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isDo());
      assertEquals(227624, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isRegExp());
      assertEquals(31, node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFor());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertEquals(113, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertEquals(172063, node3.getSourcePosition());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasChildren());
      assertTrue(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isDec());
      assertFalse(node3.isIf());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertEquals(42, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertEquals(1192, node4.getLineno());
      assertEquals(29, node4.getCharno());
      assertFalse(node4.isDec());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      assertEquals(113, node4.getType());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isOr());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWith());
      assertFalse(node4.isComma());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isBreak());
      assertFalse(node4.isCall());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isIf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isVar());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isBlock());
      assertTrue(node4.isWhile());
      assertFalse(node4.isThis());
      assertEquals(4882461, node4.getSourcePosition());
      assertFalse(node4.isAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isCase());
      assertFalse(node4.isNew());
      assertFalse(node4.isLabel());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isLabelName());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node6));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node6));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node5));
      assertFalse(boolean0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node4.setCharno(37);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(113, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(462961, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(113, node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertEquals(17, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node2.isString());
      assertEquals(2344, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertEquals(376, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isDo());
      assertEquals(227624, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isRegExp());
      assertEquals(31, node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFor());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertEquals(113, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertEquals(172063, node3.getSourcePosition());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasChildren());
      assertTrue(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isDec());
      assertFalse(node3.isIf());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertEquals(42, node3.getLineno());
      assertEquals(3, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node4.isCast());
      assertFalse(node4.isAssign());
      assertEquals(1192, node4.getLineno());
      assertFalse(node4.isDec());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      assertEquals(113, node4.getType());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isOr());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWith());
      assertFalse(node4.isComma());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isExprResult());
      assertEquals(37, node4.getCharno());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isBreak());
      assertFalse(node4.isCall());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isIf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isVar());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertEquals(4882469, node4.getSourcePosition());
      assertFalse(node4.isBlock());
      assertTrue(node4.isWhile());
      assertFalse(node4.isThis());
      assertFalse(node4.isAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isCase());
      assertFalse(node4.isNew());
      assertFalse(node4.isLabel());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isLabelName());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node6));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node6));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node6));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node6));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node6));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node5));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = (-1221);
      Node node0 = null;
      try {
        node0 = new Node((-1221), (Node) null, (Node) null, (-1221), (-1221));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("g6Iq}ji`hS'Au>+b");
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      Node node1 = new Node(4055, node0, node0, node0, 43, (-686));
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(4055, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(node1);
      
      Node node2 = new Node((-2806), node1, node1, (-494), 117);
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(4055, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertEquals((-2806), node2.getType());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node2);
      
      Node node3 = new Node((-2806), node2);
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(4055, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertEquals((-2806), node2.getType());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWith());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isThis());
      assertFalse(node3.isAnd());
      assertEquals((-2806), node3.getType());
      assertFalse(node3.isNot());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVar());
      assertFalse(node3.isName());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBreak());
      assertFalse(node3.isCall());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isNull());
      assertFalse(node3.isTry());
      assertFalse(node3.isTrue());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDefaultCase());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isParamList());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isIn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node3);
      
      Node node4 = null;
      try {
        node4 = new Node(4055, node3, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags2);
      
      boolean boolean0 = node_SideEffectFlags2.areAllFlagsSet();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(boolean0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      
      node0.removeProp(0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      String string0 = node0.getString();
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals("Node tree inequality:\nTree1:\n", string0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(string0);
      
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(0, node0, 12, 0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isArrayLit());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertEquals(0, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node2);
      
      node0.setSourceFileForTesting("Node tree inequality:\nTree1:\n");
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      
      int int0 = node2.getIntProp(9);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isArrayLit());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertEquals(0, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, int0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node2.isThrow();
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isArrayLit());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertEquals(0, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      
      Node node3 = node0.getParent();
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isCase());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isString());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThrow());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotNull(node3);
      
      node3.addChildToFront(node2);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isArrayLit());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isNot());
      assertEquals(0, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNumber());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertEquals(49152, node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThrow());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
      
      boolean boolean1 = node2.isTrue();
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isArrayLit());
      assertEquals(49152, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(0, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isNot());
      assertEquals(0, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      
      boolean boolean2 = node0.hasOneChild();
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags3);
      
      boolean boolean3 = node1.isRegExp();
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean3);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags5);
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      
      int int1 = 1445;
      Node node0 = new Node(39, 122, 1445);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertEquals(501157, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertEquals(1445, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals(39, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertEquals(122, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      
      String string0 = node0.getQualifiedName();
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertEquals(501157, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertEquals(1445, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals(39, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertEquals(122, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertNotNull(node_SideEffectFlags5);
      
      int int0 = node_SideEffectFlags5.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertEquals(0, int0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags6);
      
      Node node0 = Node.newNumber((double) 0, 0, 0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      String string0 = node0.toStringTree();
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals("NUMBER 0.0 0\n", string0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(string0);
      
      boolean boolean0 = node0.isComma();
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(boolean0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1753), nodeArray0);
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isEmpty();
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertFalse(boolean0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.putBooleanProp(0, false);
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.putIntProp((-371), 116);
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.putBooleanProp((-371), false);
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean1 = node0.getBooleanProp(50);
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1753), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertEquals(0, nodeArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(44, nodeArray0);
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, nodeArray0.length);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      
      Node node1 = new Node(1608, node0, node0);
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1608, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertEquals(0, nodeArray0.length);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node1);
      
      Node node2 = node1.removeChildren();
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1608, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(44, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetElem());
      assertTrue(node2.isTrue());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWith());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(1608, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertEquals(44, node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isTry());
      assertFalse(node3.isCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isCatch());
      assertFalse(node3.isReturn());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.isTrue());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isInc());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertSame(node3, node2);
      assertSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
      
      Set<String> set0 = node0.getDirectives();
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, nodeArray0.length);
      assertFalse(node0.equals((Object)node1));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNull(set0);
      
      Node node4 = Node.newNumber((double) 1);
      assertFalse(node4.isThrow());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isBreak());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isIn());
      assertFalse(node4.isInc());
      assertFalse(node4.isCast());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetElem());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isString());
      assertFalse(node4.isNot());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isComma());
      assertFalse(node4.isReturn());
      assertTrue(node4.isNumber());
      assertFalse(node4.isWhile());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isVar());
      assertFalse(node4.isCall());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNull());
      assertFalse(node4.isName());
      assertFalse(node4.isContinue());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isOr());
      assertFalse(node4.isFunction());
      assertFalse(node4.isNew());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAdd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCase());
      assertEquals(39, node4.getType());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isRegExp());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThis());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isTry());
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node4);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node4, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(154);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(154, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      
      Node node1 = new Node((-3845), node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(154, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertEquals((-3845), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node1);
      
      node1.setType(4);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(154, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(4, node1.getType());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Node node2 = Node.newString(38, "", 49, 2);
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertEquals(2, node2.getCharno());
      assertTrue(node2.isName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isCast());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isLabel());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetElem());
      assertEquals(49, node2.getLineno());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isWith());
      assertEquals(38, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isHook());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertEquals(200706, node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node2);
      
      node1.setSourceEncodedPositionForTree(50);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertEquals(154, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(50, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(4, node1.getType());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(50, node1.getSourcePosition());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isThis());
      assertFalse(node3.isDo());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssignAdd());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertEquals(83, node3.getType());
      assertTrue(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.hasChildren());
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
      
      // Undeclared exception!
      try { 
        node2.addChildAfter(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      String string0 = "$7{';x.yiuLJRi9";
      Node node0 = Node.newString(Integer.MAX_VALUE, "$7{';x.yiuLJRi9");
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node((-1244), nodeArray0);
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1244), node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, nodeArray0.length);
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node1);
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(jSDocInfo0);
      
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString("", (-18), (-18));
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node0);
      
      boolean boolean0 = node0.isComma();
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(boolean0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newNumber((-2651.224607), (-2309), (-2309));
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      
      Node node1 = new Node(42, node0, node0, node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertTrue(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(42, node1.getType());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString((-1487), "O/J4}R7(Wh]8&");
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      int int0 = node0.getSideEffectFlags();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(0, int0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.getBooleanProp(0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(boolean0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node_AncestorIterable0);
      
      Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(iterator0);
      
      Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      
      int int1 = node0.getLength();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newString(37, "O/J4}R7(Wh]8&");
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertEquals(37, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isBreak());
      assertTrue(node1.isCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertEquals(37, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isBreak());
      assertTrue(node1.isCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node_NodeMismatch0);
      
      boolean boolean1 = node0.isOr();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      
      boolean boolean2 = node0.isIn();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1487), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      assertEquals(48, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags0.valueOf());
      assertEquals(19, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(19, node_SideEffectFlags2.valueOf());
      assertEquals(19, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertNotNull(node_SideEffectFlags6);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString((-380), "{?", (-380), 1781);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals((-380), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      
      InputId inputId0 = node0.getInputId();
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals((-380), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNull(inputId0);
      
      Object object0 = node0.getProp(0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertEquals((-380), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNull(object0);
      
      Node node1 = null;
      try {
        node1 = new Node(12, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = 379;
      Node node0 = Node.newString((-4764), "5~i;44n`", (-4764), (-4764));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-4764), node0.getType());
      assertFalse(node0.isArrayLit());
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-4764), node0.getType());
      assertFalse(node0.isArrayLit());
      assertTrue(boolean0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDisposes());
      assertNotNull(jSDocInfo0);
      
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-4764), node0.getType());
      assertFalse(node0.isArrayLit());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertEquals((-4764), node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        node1.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4764
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(356, nodeArray0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(356, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, nodeArray0.length);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      int int0 = node0.getSideEffectFlags();
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(356, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, nodeArray0.length);
      assertEquals(0, int0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(356, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, nodeArray0.length);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node_AncestorIterable0);
      
      boolean boolean0 = node0.isThis();
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(356, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, nodeArray0.length);
      assertFalse(boolean0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString((-853), "");
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-853), node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, true, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = 4;
      Node node0 = new Node((-2212));
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals((-2212), node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertNotNull(node_SideEffectFlags4);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2212
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString(152, "And(", 152, 152);
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(152, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInc());
      assertEquals(152, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals(622744, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(152, node0.getType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      
      int int0 = node0.getSourceOffset();
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(152, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInc());
      assertEquals(152, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals(622744, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(152, node0.getType());
      assertEquals((-1), int0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.putBooleanProp(1767, false);
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(152, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInc());
      assertEquals(152, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals(622744, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(152, node0.getType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3843));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      Node node1 = new Node((-3843), node0, node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isHook());
      assertEquals((-3843), node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotNull(node1);
      
      String string0 = node1.getSourceFileName();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isHook());
      assertEquals((-3843), node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = Node.mergeLineCharNo(0, (-1569));
      assertEquals((-1), int0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      Node node0 = null;
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createEnumType("StringNode: str is null", (Node) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, 0, (-1296));
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      
      nodeArray0[0] = node1;
      Node node2 = Node.newString(46, "[ssqtSTlpT5pF<`+)1");
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertEquals(46, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node2);
      
      nodeArray0[1] = node2;
      Node node3 = new Node(0, 1150, 37);
      assertFalse(node3.isCatch());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertFalse(node3.isNE());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isIf());
      assertEquals(37, node3.getCharno());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isAnd());
      assertFalse(node3.isWith());
      assertEquals(4710437, node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isThis());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSwitch());
      assertEquals(1150, node3.getLineno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isString());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isNull());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isComma());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetElem());
      assertEquals(0, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node3);
      
      nodeArray0[2] = node3;
      Node node4 = new Node(0, nodeArray0, 2192, 0);
      assertFalse(node4.isWhile());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isAdd());
      assertEquals(2192, node4.getLineno());
      assertFalse(node4.isNew());
      assertFalse(node4.isNumber());
      assertFalse(node4.isParamList());
      assertFalse(node4.isLabel());
      assertFalse(node4.isCast());
      assertEquals(8978432, node4.getSourcePosition());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isContinue());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertEquals(0, node4.getCharno());
      assertFalse(node4.isWith());
      assertFalse(node4.isTry());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isThis());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isString());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isIn());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isFalse());
      assertFalse(node4.isAnd());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isNot());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isNull());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertEquals(3, node4.getChildCount());
      assertFalse(node4.isDec());
      assertFalse(node4.isComma());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertEquals(0, node4.getType());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isName());
      assertTrue(node4.hasMoreThanOneChild());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertEquals(3, nodeArray0.length);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node4);
      
      Node node5 = null;
      try {
        node5 = new Node(0, node4, node1, node1, (-742), 971);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isBlock();
      Node node1 = new Node(46, node0, node0, node0);
      node1.getIntProp(0);
      try { 
        node1.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHNE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newString(25, "TzDXLvxgEzLMi");
      boolean boolean0 = true;
      node0.isOnlyModifiesThisCall();
      node0.getDirectives();
      node0.setVarArgs(true);
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4053), nodeArray0);
      Node node1 = Node.newString("_j*|iu_(sS0.SI");
      node0.isEquivalentToTyped(node1);
      node0.hasChildren();
      Node.newString("]:q ", (-2144), 39);
      int int0 = (-2318);
      String string0 = "com.google.javascript.rhino.jstype.ErrorFunctionType";
      int int1 = 41;
      String string1 = "xHdM";
      Node.newString("xHdM", 12, (-2020));
      int int2 = 13;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "wk_$[rz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = 1155;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(0, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(55, 4, (-2453));
      nodeArray0[1] = node1;
      Node[] nodeArray1 = new Node[5];
      nodeArray1[0] = node0;
      nodeArray1[1] = node1;
      nodeArray1[2] = node1;
      Node node2 = Node.newNumber((double) 46);
      nodeArray1[3] = node2;
      nodeArray1[4] = node0;
      Node node3 = null;
      try {
        node3 = new Node((-389), nodeArray1, (-2196), 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isOr();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType((String) null, node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber((-4518.64));
      node0.toString(false, false, true);
      node0.setLineno(0);
      node0.getInputId();
      node0.isString();
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "cannot store more than MAX_VALUE elements";
      int int0 = 27591;
      Node node0 = new Node(0, 27591, 0);
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage0("Object#Element");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(3968, "", 3968, 3968);
      Node[] nodeArray0 = new Node[0];
      Node node1 = Node.newString(1, "");
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
