/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:44:56 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.File;
import java.io.PrintStream;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = new Node((-150), nodeArray0);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString("");
      node1.addChildToBack(node0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setIsSyntheticBlock(false);
      node1.isQuotedString();
      node2.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getSourcePosition();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.removeChild(node0);
      node0.getJSDocInfo();
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.isInc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(744, node0, 50, 1896);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = new Node(744, node1, node1, node0, node1, (-4643), 0);
      Node node3 = node2.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      int int0 = (-1966);
      node3.removeProp(int0);
      node2.children();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString(0, (String) null);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setJSType(functionType0);
      node0.replaceChildAfter(node1, node1);
      node1.wasEmptyNode();
      // Undeclared exception!
      try { 
        node1.putIntProp(node0.VAR_ARGS_NAME, node0.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = Node.newString(0, (String) null, 131072, 29);
      node0.addChildrenToBack(node1);
      int int0 = 103;
      node1.setChangeTime(int0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        node1.srcref(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString((-803), "", (-803), (-803));
      node0.getSideEffectFlags();
      node0.isQualifiedName();
      node0.setSourceFileForTesting("");
      node0.isNoSideEffectsCall();
      node0.putBooleanProp((-803), false);
      node0.isOptionalArg();
      node0.isSwitch();
      Node node1 = Node.newString(42, "", 54, 32);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(2599);
      node2.useSourceInfoFromForTree((Node) null);
      boolean boolean0 = false;
      node2.setOptionalArg(boolean0);
      node0.getIndexOfChild(node2);
      int int0 = 168;
      // Undeclared exception!
      try { 
        node2.getBooleanProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Stack<UnknownType> stack0 = new Stack<UnknownType>();
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(12, node1, node1);
      Node node3 = new Node(2298, 4095, 0);
      node3.getStaticSourceFile();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("*xkdSYoq_lc", true);
      node_NodeMismatch0.equals(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-6004);
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newNumber((double) 52);
      node1.getDouble();
      node2.setOptionalArg(boolean0);
      // Undeclared exception!
      try { 
        node2.isNoSideEffectsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(54, node0, node0, node0, 9, 0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.getStaticSourceFile();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node4 = node0.cloneTree();
      node4.isEquivalentTo(node1);
      node1.isCatch();
      node0.wasEmptyNode();
      Node.mergeLineCharNo(29, 0);
      node2.getNext();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(154);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearSideEffectFlags();
      node3.replaceChildAfter(node0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.getIndexOfChild(node1);
      node0.isFunction();
      Node node2 = new Node(7, node1, (-2484), 48);
      node1.replaceChildAfter(node0, node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.getChildCount();
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      Node node1 = new Node(461845907, node0, node0, node0, node0, 40, 38);
      node1.addChildToBack(node0);
      node1.isFor();
      String string0 = "Va?iQ{'t374V<LC\\C~ ";
      // Undeclared exception!
      try { 
        node1.setSourceFileForTesting(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(246, node0);
      nodeArray0[3] = node1;
      Node node2 = new Node(1023, nodeArray0);
      int int0 = 0;
      node2.putIntProp(int0, node1.IS_DISPATCHER);
      node0.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newNumber(0.0, 2, 0);
      Node node1 = new Node(2760, node0, node0);
      Node node2 = node1.cloneTree();
      node2.getIntProp(55);
      Node node3 = null;
      Node node4 = node1.copyInformationFromForTree((Node) null);
      node4.checkTreeEquals(node3);
      node1.isLocalResultCall();
      node0.getAncestor(node4.JSDOC_INFO_PROP);
      Node.NodeMismatch node_NodeMismatch0 = null;
      try {
        node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-633);
      Node node0 = new Node((-633));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("INHERITED", false);
      simpleSourceFile0.getLineOffset(54);
      simpleSourceFile0.getLineOffset(0);
      simpleSourceFile0.getLineOffset(node0.NO_SIDE_EFFECTS);
      node0.putProp(int0, simpleSourceFile0);
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.detachChildren();
      node0.removeProp(32);
      node0.isAnd();
      node0.isObjectLit();
      node0.setQuotedString();
      node0.getDirectives();
      node0.removeChildren();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "??";
      Node node0 = Node.newString("??");
      int int0 = 3194;
      Object object0 = null;
      Node node1 = new Node(3194, node0, (-836), 0);
      node0.replaceChild(node1, node1);
      node0.setChangeTime(int0);
      // Undeclared exception!
      try { 
        node0.putProp(int0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setLineno(4390);
      node0.getCharno();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null);
      templatizedType0.isString();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.hasChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "4H";
      Node node0 = Node.newString("4H", (-527), (-527));
      node0.setSideEffectFlags((-527));
      // Undeclared exception!
      try { 
        node0.isDec();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isGetElem();
      Node node2 = node1.srcref(node0);
      node2.removeChild(node1);
      node1.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.valueOf();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(1505.7767439831812);
      node0.wasEmptyNode();
      node0.isFalse();
      node0.isScript();
      node0.isTypeOf();
      Node node1 = Node.newString("", 537, 48);
      node0.removeChild(node1);
      node1.getAncestor(node0.JSDOC_INFO_PROP);
      int int0 = 53;
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("", 40, 40);
      Node node1 = Node.newString("");
      Node node2 = new Node(15, node0, node1, node0, node0, 2, 38);
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber((-4300.9836458145855));
      node0.setString("EzOOO!qe1{?,_X6p%");
      node0.getSourceFileName();
      Node node1 = null;
      try {
        node1 = new Node(node0.COLUMN_MASK, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -4300.9836458145855 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 124, 124);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-1715), 2483);
      Node node1 = new Node(0, node0, node0, node0);
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getIndexOfChild(node1);
      node1.children();
      node0.isNull();
      node2.detachFromParent();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(1010.0345144760545);
      node0.isSyntheticBlock();
      node0.isUnscopedQualifiedName();
      node0.isExprResult();
      Node node1 = new Node(17, node0);
      node0.srcrefTree(node1);
      node0.isAdd();
      Node node2 = node0.detachFromParent();
      node0.getJSType();
      node0.isEquivalentTo(node2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setDouble(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesThis();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber((double) 42, 42, 34);
      node0.isQuotedString();
      Node node1 = new Node(42, node0, (-2519), 4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-750));
      node_SideEffectFlags0.setAllFlags();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node0.isGetElem();
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesThisCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got THIS
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2855));
      Node node1 = new Node((-2855), node0, node0);
      Node node2 = new Node((-643), node1, node1, node1, 56, 26);
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node.newString((String) null, 0, 0);
      int int0 = (-462);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-5720);
      int int1 = 277;
      Node node0 = Node.newNumber(3720.31503, 701, 277);
      Node node1 = new Node(885, node0, 0, 0);
      Node node2 = new Node(277, node1, node0, node0, 0, 29);
      Node node3 = new Node(int0, node2, node0, node2, node1, node2.QUOTED_PROP, node0.JSDOC_INFO_PROP);
      Node node4 = new Node(int1, node3);
      Node node5 = new Node(int0, node4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-335), nodeArray0, (-2348), (-2348));
      node0.isThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<JSType> hashSet0 = new HashSet<JSType>((-3247), 40);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node1.getLength();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3247
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(11);
      node0.children();
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      Node node2 = Node.newString(39, "Ii+/h0/c)", 56, 57);
      Node node3 = node0.copyInformationFrom(node2);
      Node node4 = node3.removeChildAfter(node0);
      node0.replaceChild(node3, node4);
      node4.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.toMaybeEnumElementType();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node((-803));
      node0.isSyntheticBlock();
      Node node1 = Node.newString(2, "", 1483, 126);
      node0.isEquivalentTo(node1);
      Node node2 = new Node(2387, node0, node0, node0, 126, 2599);
      node0.isEquivalentTo(node2);
      node0.getInputId();
      Node.extractLineno(309);
      node0.getType();
      node2.getAncestor(36);
      node0.hasChildren();
      node0.getString();
      String string0 = "kccx";
      node0.addSuppression(string0);
      node0.getSideEffectFlags();
      node2.getJsDocBuilderForNode();
      node2.isCall();
      boolean boolean0 = false;
      node0.setIsSyntheticBlock(boolean0);
      // Undeclared exception!
      try { 
        node0.isNot();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -803
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      String string0 = null;
      Node node0 = new Node(2930, (Node) null, (Node) null, (Node) null, (Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node0.isEquivalentToTyped(node1);
      node0.isEquivalentTo(node1, true, true, false);
      node0.isDec();
      node0.setSourceEncodedPositionForTree(49);
      node0.hasChild(node1);
      node1.isDebugger();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber((double) 47, 47, 47);
      Node node1 = node0.cloneNode();
      int int0 = Node.COLUMN_BITS;
      node0.getStaticSourceFile();
      node0.wasEmptyNode();
      Node node2 = Node.newNumber(44.0, (-1769), 51);
      Node node3 = node2.cloneTree();
      node0.isCatch();
      node3.wasEmptyNode();
      node2.isWhile();
      node2.getBooleanProp(47);
      Node.newString("pl@_", 248, 38);
      Node node4 = new Node(1740, node3, node1);
      node4.getChildBefore(node2);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-335), nodeArray0, (-2348), (-2348));
      String string0 = "";
      Node node1 = Node.newString("", (-527), (-527));
      Node node2 = Node.newString("");
      Node node3 = new Node(49, node1, node2, node1, node2, 4095, 2043);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      JSType jSType0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      ObjectType objectType0 = enumElementType0.getParentScope();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) functionType0, jSType0, (JSType) functionType0, (JSType) objectType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node4 = node0.cloneTree();
      node4.isEquivalentTo(node1);
      node1.isCatch();
      node0.wasEmptyNode();
      node1.getLength();
      Node node5 = new Node(30, 2773, 39);
      node5.isFromExterns();
      node3.getSourceFileName();
      node3.isNull();
      node3.isLabelName();
      node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2369);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node3.setSideEffectFlags(node_SideEffectFlags4);
      node2.isNumber();
      node5.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-643);
      Node node0 = Node.newNumber((double) (-2855));
      Node node1 = new Node((-2855), node0, node0);
      node0.setLength(114);
      node1.setSideEffectFlags(1919);
      node1.isWhile();
      node1.setCharno(int0);
      // Undeclared exception!
      try { 
        node0.getLastSibling();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2855
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1010.0345144760545);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node0.setDouble(1010.0345144760545);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags4);
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(11);
      node0.children();
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      Node node2 = Node.newString(39, "Ii+/h0/c)", 56, 57);
      Node.newString("Ii+/h0/c)", 46, (-369));
      node2.removeChild(node1);
      int int0 = (-3469);
      Node node3 = node2.getAncestor(int0);
      int int1 = (-3455);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      node2.putProp(1, ";-wIKE`");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("*xkdSYoq_lc", true);
      node_NodeMismatch0.equals(simpleSourceFile0);
      node1.isEquivalentTo(node0, true, true, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("S2KTq4DUr(u9dgoO|", (-1791), 1044);
      node0.isNew();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-335), nodeArray0, (-2348), (-2348));
      node0.isThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isObjectLit();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.getLength();
      node0.replaceChild(node1, (Node) null);
      String string0 = "Pu:8`9/~YoD@Bg>KQ";
      int int0 = (-529);
      simpleErrorReporter0.warning(string0, string0, node0.MAX_COLUMN_NUMBER, int0);
      // Undeclared exception!
      try { 
        node0.getDirectives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2, 15, 147);
      node1.addChildToFront(node0);
      Node node2 = node0.copyInformationFrom(node0);
      node2.putBooleanProp(53, false);
      Node.extractLineno(119);
      node0.setLineno(51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node2.removeFirstChild();
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node3 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node3.isEquivalentTo(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 12288;
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      int int1 = 1023;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(246, node0);
      node1.addChildBefore(node0, node0);
      nodeArray0[3] = node1;
      // Undeclared exception!
      try { 
        node1.putIntProp(int0, node0.DIRECTIVES);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1023;
      Node[] nodeArray0 = new Node[4];
      Node node0 = new Node(246, nodeArray0[0]);
      nodeArray0[3] = node0;
      Node node1 = null;
      try {
        node1 = new Node(int0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isCast();
      node1.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      node1.isGetterDef();
      node1.isWith();
      node0.isDebugger();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 89, 89);
      node0.toString(true, false, true);
      Node node1 = new Node(89);
      node0.addChildToBack(node1);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node4.addChildrenToFront(node3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString((-489), ">VjnAJ;efs0u");
      node0.putIntProp(112, (-1072));
      Node node1 = new Node(154, node0, node0, node0, 8, 40);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.getStaticSourceFile();
      node0.getSideEffectFlags();
      node2.isOnlyModifiesArgumentsCall();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      Node node1 = Node.newString("");
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.getIndexOfChild(node2);
      node1.children();
      node1.isNull();
      node2.detachFromParent();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node2.setStaticSourceFile(staticSourceFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType1, unknownType1, unknownType1);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      jSTypeRegistry0.getType("");
      node0.setJSType(unionType0);
      node0.isRegExp();
      node0.setCharno(1090);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(29, node0, 57, 43);
      Node node2 = new Node((-2582));
      node0.getIndexOfChild(node2);
      node1.isFunction();
      Node node3 = Node.newString(57, "~n'SqHdVqZc@E7+P", 6859, 47);
      Node node4 = new Node((-1055), node3, node3);
      node2.removeProp(600);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.children();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("C4WP98'4[8B!na");
      node1.setJSType((JSType) null);
      node0.isRegExp();
      node1.setCharno(1);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(0.0, 2, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.addChildrenToFront(node1);
      Node.newString(15, "", 36, 520);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-742), node1, node1);
      node2.isComma();
      node2.putProp(1, ";-wIKE`");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node0.isGetterDef();
      node3.addChildAfter(node3, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      String string0 = "*xkdSYoq_lc";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      // Undeclared exception!
      try { 
        node2.isEquivalentToTyped(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isLocalResultCall();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isEquivalentTo(node0);
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = new Node((-150), nodeArray0);
      nodeArray0[3].isNumber();
      nodeArray0[5].addChildrenToFront(nodeArray0[4]);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber((double) 17, (-244), 53);
      Node node1 = new Node(2295, node0);
      node1.srcrefTree(node0);
      node1.isAdd();
      Node node2 = node1.detachFromParent();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(1010.0345144760545);
      node0.isSyntheticBlock();
      node0.isUnscopedQualifiedName();
      node0.isExprResult();
      Node.newString("ku(&%br@CtD", 32, 29);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(54, node0, node0, node0, 9, 0);
      node0.copyInformationFromForTree(node1);
      node1.setChangeTime(153);
      Node.mergeLineCharNo((-1845), 4095);
      node1.isAssign();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(309);
      Node node1 = new Node(5832, node0, 102, 0);
      Node node2 = new Node(117, node0, node0, node0, node1, 21, 38);
      node2.replaceChildAfter(node1, node1);
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      node0.setOptionalArg(true);
      node0.getChildCount();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(56, node0, 49, 43);
      Node node2 = new Node(42, node0, node1, node0, 0, 154);
      node0.addChildToFront(node2);
      String string0 = "6pe&&`~z)S^";
      Node node3 = Node.newString(string0);
      int int0 = 8233;
      // Undeclared exception!
      try { 
        node3.putIntProp(node0.FLAG_LOCAL_RESULTS, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-742), node1, node1);
      node2.isComma();
      node2.putProp(1, ";-wIKE`");
      Node node3 = Node.newString(55, ";-wIKE`");
      node1.addChildToFront(node3);
      Node node4 = node2.copyInformationFrom(node0);
      node2.putBooleanProp(2, false);
      Node.extractLineno(4);
      node2.setLineno(49);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.isString();
      node4.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(744, node0, 50, 1);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      node0.children();
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node1.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      String string0 = node0.toString();
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("NUMBER -1.0 50 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      Node node4 = node0.detachFromParent();
      node2.isEquivalentToShallow(node1);
      node3.isOptionalArg();
      node4.toStringTree();
      node2.addChildrenAfter(node3, node3);
      node4.setSourceFileForTesting(string0);
      node4.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isGetElem();
      node1.isAdd();
      node1.detachFromParent();
      double double0 = 3487.76887204;
      int int0 = (-1157);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(0.0, 2, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.isLabel();
      node0.isComma();
      Node node2 = new Node(51, node1, (Node) null);
      node2.getStaticSourceFile();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node3.toString();
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node1.addChildrenToFront(node3);
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-2394);
      Node node0 = Node.newString((-2394), "");
      node0.isComma();
      String string0 = ";-wIKE`";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2394), templateType0);
      Node node1 = new Node(42);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isGetterDef();
      node1.addChildAfter(node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      String string1 = "|yXTlTxh";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = null;
      try {
        simpleSourceFile0 = new SimpleSourceFile(string1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 107);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      Node node3 = new Node(46, node0, 3406, 51);
      Node node4 = node0.srcref(node2);
      node4.removeChild(node0);
      node3.addChildToBack(node4);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(57, node0, node0);
      Node node2 = new Node(2760, node0, node0);
      Node node3 = node2.cloneTree();
      node3.getIntProp(node2.INFERRED_FUNCTION);
      Node node4 = null;
      // Undeclared exception!
      try { 
        node2.copyInformationFromForTree(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-1055);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("eOD>Q3->\"cH", 714, 714);
      Node node1 = new Node(103, node0, 87, 87);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.wasEmptyNode();
      node0.getLength();
      Node node1 = new Node(15, 48, 48);
      node1.isFromExterns();
      node0.getSourceFileName();
      node1.isGetProp();
      node1.isLabelName();
      node1.getLastSibling();
      int int0 = Node.LENGTH;
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0);
      Node node2 = new Node(301, node1, (-862048943), 103);
      node1.getIndexOfChild(node2);
      node0.isFunction();
      Node node3 = new Node(32, node0, node1);
      int int0 = 52;
      node3.removeProp(int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isCast();
      node1.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      node1.isGetterDef();
      node1.isWith();
      node0.isDebugger();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      node0.getSideEffectFlags();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(0.0, 2, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.isLabel();
      node0.isComma();
      node1.replaceChildAfter((Node) null, node0);
      node1.wasEmptyNode();
      node1.putIntProp(node1.FLAG_LOCAL_RESULTS, node0.FLAG_THIS_UNMODIFIED);
      int int0 = 105;
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      Node node2 = new Node((-742), node1, node1);
      node2.isComma();
      node2.putProp(1, ";-wIKE`");
      Node node3 = Node.newString(55, ";-wIKE`");
      node1.addChildToFront(node3);
      node2.copyInformationFrom(node0);
      node2.putBooleanProp(2, false);
      Node.extractLineno(4);
      node2.setLineno(49);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node2.setSourceEncodedPositionForTree(3827);
      Node.mergeLineCharNo(105, (-818));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 1483, 12288);
      Node node1 = new Node(16, node0);
      node0.addChildBefore(node1, node1);
      int int0 = 86;
      int int1 = 116;
      // Undeclared exception!
      try { 
        node1.putIntProp(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(29);
      node_SideEffectFlags3.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("[|q>cd-LiE%Yj*hWGbq", false);
      Node node3 = new Node(63, node2, node0);
      int int0 = 30;
      node3.getProp(int0);
      node3.isEquivalentToTyped(node1);
      boolean boolean0 = false;
      node2.toString();
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      boolean boolean0 = node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2, 15, 147);
      node1.setDouble(57);
      Node node2 = node0.copyInformationFrom(nodeArray0[0]);
      int int0 = 53;
      // Undeclared exception!
      try { 
        node2.putBooleanProp(int0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(53, "ksT_");
      node0.detachChildren();
      node0.isLocalResultCall();
      Node node1 = new Node(39, 4095, 1677);
      node1.isDelProp();
      node1.getStaticSourceFile();
      Node node2 = Node.newNumber((double) 1);
      node2.setStaticSourceFile((StaticSourceFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.isEquivalentTo(node2);
      Node[] nodeArray0 = new Node[8];
      Node node4 = Node.newString(1866, "\n\nSubtree2: ", 2, 57);
      nodeArray0[0] = node4;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node3;
      nodeArray0[4] = node1;
      nodeArray0[5] = node3;
      nodeArray0[6] = node0;
      nodeArray0[7] = node3;
      Node node5 = new Node((-818), nodeArray0);
      nodeArray0[2].isNumber();
      nodeArray0[4].addChildrenToFront(node0);
      node4.isEquivalentTo(node0);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(1309);
      Node node1 = new Node(1309, node0, node0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("s}o.)]s", false);
      node1.putProp((-1033), simpleSourceFile0);
      node1.isOnlyModifiesThisCall();
      node1.getExistingIntProp(15);
      boolean boolean2 = false;
      node1.isEquivalentTo(node0, boolean0, boolean1, boolean2);
      node1.hasChild(node0);
      boolean boolean3 = false;
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-3097);
      Node node0 = Node.newString("ZrKkO!", (-3097), 52);
      Node node1 = new Node(309, node0, node0, 32, 38);
      Node node2 = new Node(1595, node0, node1, node0, 1, 3878);
      Node node3 = new Node(int0, node2, node2, node2, node2);
      Node node4 = new Node(int0, node3, node1.EMPTY_BLOCK, node2.MAX_COLUMN_NUMBER);
      node3.getQualifiedName();
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node4.getSourceFileName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      int int0 = 93;
      Node node5 = new Node(int0, node3, node1.IS_CONSTANT_NAME, node0.DIRECT_EVAL);
      node2.isCase();
      node4.copyInformationFrom(node2);
      node4.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType1, unknownType0, unknownType1);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isAdd();
      node2.isCatch();
      node0.wasEmptyNode();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      Node.mergeLineCharNo(310, 30);
      node3.getNext();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(110);
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.setVarArgs(true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(43, "PvQC} 4t'j5c");
      node0.detachChildren();
      node0.isLocalResultCall();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[1] = node0;
      nodeArray0[1] = node0;
      node0.isEquivalentTo(node0);
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = new Node((-150), nodeArray0);
      nodeArray0[4].getLength();
      nodeArray0[3].isNumber();
      // Undeclared exception!
      try { 
        nodeArray0[5].addChildrenToFront(nodeArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = (-2394);
      Node node0 = Node.newString((-2394), "");
      node0.getBooleanProp(37);
      String string0 = ";-wIKE`";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2394), templateType0);
      Node node1 = new Node(42);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isGetterDef();
      node1.addChildAfter(node0, node0);
      int int1 = (-457);
      node1.setSideEffectFlags(int1);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      String string1 = "|yXTlTxh";
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 42, 42);
      Node node1 = new Node(310, node0, 76, 177);
      node0.isGetElem();
      Node node2 = node0.srcref(node1);
      node1.removeChild(node2);
      node1.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newNumber(0.0, 2, 0);
      Node node1 = new Node(2760, node0, node0);
      Node node2 = node1.cloneTree();
      node2.getIntProp(55);
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.checkTreeEquals(node0);
      String string0 = "";
      Node.newString(string0);
      node1.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.getAncestor(node3.JSDOC_INFO_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2760
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      Node node2 = new Node((-742), node1, node1);
      node2.isComma();
      node2.putProp(1, ";-wIKE`");
      Node node3 = new Node(4095, node2, node2, node0, (-3010), 1807);
      node0.addChildToFront(node1);
      String string0 = "6pe&&`~z)S^";
      Node.newString(string0);
      int int0 = 4194304;
      int int1 = 35;
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      node0.getChildCount();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(56, node0, 49, 43);
      Node node2 = Node.newString(837, "5\" wP[\"d");
      node1.addChildToFront(node0);
      node1.copyInformationFrom(node0);
      int int0 = (-3319);
      Node.extractLineno(int0);
      // Undeclared exception!
      try { 
        node1.setLineno(node2.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = new Node(47);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.addChildBefore(node2, node2);
      int int0 = 12;
      int int1 = 119;
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1055), 0, (-1055));
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node2.removeFirstChild();
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node3 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node3.isEquivalentTo(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.isQuotedString();
      node0.isThrow();
      node0.isQualifiedName();
      node0.getExistingIntProp(85);
      // Undeclared exception!
      try { 
        node0.isAnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 85
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node.extractLineno((-3319));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString("");
      node1.addChildToBack(node0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setIsSyntheticBlock(false);
      node1.isQuotedString();
      node2.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node1.setChangeTime(31);
      Node.mergeLineCharNo(38, 305);
      node2.isEquivalentTo(node0, false, false, true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(54, node0, node0, node0, 9, 0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getSourcePosition();
      node2.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.removeChild(node2);
      node2.getJSDocInfo();
      node0.isOnlyModifiesThisCall();
      node1.isInc();
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.siblings();
      node0.isLocalResultCall();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isEquivalentTo(node0);
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      node0.isEquivalentTo(node0, false, false, false);
      node0.isInc();
      Node node1 = new Node((-150), nodeArray0);
      nodeArray0[3].isNumber();
      nodeArray0[5].addChildrenToFront(nodeArray0[4]);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node((-2353), 0, 1510);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node2.addChildToFront(node0);
      Node node3 = node0.copyInformationFrom(node1);
      node3.putBooleanProp((-3060), false);
      Node.extractLineno((-3060));
      node3.setLineno(3402);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2, 15, 147);
      node1.addChildToFront(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node2.putBooleanProp(53, false);
      Node.extractLineno(119);
      node0.setLineno(51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isGetElem();
      Node node2 = node1.srcref(node0);
      node1.isHook();
      node0.isGetterDef();
      node2.addChildrenToFront(node0);
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node3.isParamList();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("0uph", false);
      node4.putProp(4095, simpleSourceFile0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      int int0 = 18;
      Node node0 = Node.newString(112, "");
      Node node1 = new Node(112, (Node) null, (Node) null, node0);
      int int1 = 4307;
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node0.MAX_COLUMN_NUMBER, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType1, unknownType0, unknownType1);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      jSTypeRegistry0.getType("Unknown class name");
      node0.setJSType((JSType) null);
      node0.isRegExp();
      node0.setCharno(43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.getDouble();
      node0.removeChild(node1);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE ocGV,{V6c< is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "PYfU&-#H{";
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.setSourceEncodedPositionForTree(3053);
      node0.isOnlyModifiesThisCall();
      node0.setOptionalArg(true);
      node0.isIn();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.addChildToFront(node0);
      node0.getDouble();
      Node.newNumber((double) node0.JSDOC_INFO_PROP);
      int int0 = 1094;
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isGetterDef();
      node0.isDebugger();
      node0.isCase();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("eOD>Q3->\"cH", 714, 714);
      node0.isOnlyModifiesArgumentsCall();
      node0.isCatch();
      Node node1 = new Node(37, node0, node0, node0, node0, (-2610), 5005);
      node1.wasEmptyNode();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.mergeLineCharNo(90, 636);
      node0.putIntProp(29, 369276);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isNoSideEffectsCall();
      Node node1 = null;
      Node node2 = Node.newNumber((double) 55, 20, 714);
      node2.setLength(1483);
      node2.addChildrenAfter((Node) null, node0);
      Node node3 = node0.copyInformationFromForTree(node1);
      int int0 = 54;
      node2.setSourceEncodedPositionForTree(int0);
      // Undeclared exception!
      try { 
        node3.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(103);
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("eOD>Q3->\"cH", false);
      Node node0 = new Node((-742));
      Node node1 = Node.newString("HRTI");
      node0.isEquivalentToTyped(node1);
      node0.toString(false, true, false);
      node1.setSideEffectFlags(node0.INPUT_ID);
      node0.isString();
      node0.getInputId();
      Node node2 = node0.getParent();
      node2.setSourceEncodedPositionForTree(node0.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node0.isGetterDef();
      node0.isWith();
      node0.isDebugger();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Error");
      Node node1 = Node.newNumber(0.7);
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[1] = jSType1;
      JSType jSType2 = templateTypeMapReplacer0.caseNumberType();
      jSTypeArray0[2] = jSType2;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.children();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("C4WP98'4[8B!na");
      node1.setJSType((JSType) null);
      node0.toString(false, false, false);
      node0.setSideEffectFlags(1169);
      node1.isString();
      node2.getInputId();
      int int0 = 124;
      node1.setSourceEncodedPositionForTree(int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(744, node0, 50, 1);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      node0.children();
      boolean boolean0 = true;
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node1.isUnscopedQualifiedName();
      Node node4 = new Node(29, node0);
      String string0 = "The new child node already has a parent.";
      int int0 = (-1016);
      Node node5 = Node.newString(node4.OPT_ARG_NAME, string0, int0, node3.IS_NAMESPACE);
      // Undeclared exception!
      try { 
        node5.getChildBefore(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      boolean boolean0 = false;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getObjectIndexKey();
      node0.putProp(130, simpleErrorReporter0);
      Node node1 = new Node(53);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isGetterDef();
      node0.addChildAfter(node1, node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, boolean0);
      // Undeclared exception!
      try { 
        node1.checkTreeEqualsImpl(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(1051.0919843189631, 48, 49);
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      node0.getSourceOffset();
      node0.setSourceEncodedPosition(49);
      boolean boolean0 = false;
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      String string0 = "KK8w6m";
      TemplateType templateType0 = templateTypeMap0.getTemplateTypeKeyByName(string0);
      // Undeclared exception!
      try { 
        templateType0.toMaybeTemplateType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isContinue();
      node0.isInstanceOf();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(471, node0, node0, node0);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 1, 54);
      Node node3 = new Node(46);
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      int int0 = Node.INFERRED_FUNCTION;
      node0.setLineno(57);
      node4.isInstanceOf();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isGetElem();
      Node node2 = node1.srcref(node0);
      node1.isHook();
      node2.cloneNode();
      node0.isGetterDef();
      node1.getSourceOffset();
      node2.addChildrenToFront(node0);
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("n9YXRDajl&=", 1688, 102);
      node0.isName();
      node0.isInstanceOf();
      Node node1 = new Node(12, 12, 51);
      node1.setType(8);
      node1.siblings();
      node1.getLength();
      Node node2 = node0.srcref(node1);
      node0.isNoSideEffectsCall();
      node2.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      node0.toString(true, false, true);
      node0.isObjectLit();
      node0.isCall();
      node1.isUnscopedQualifiedName();
      node0.isThrow();
      node1.isThis();
      node2.getIndexOfChild(node1);
      node0.getProp(52);
      node2.addChildrenToBack(node1);
      node1.isVoid();
      node2.setSourceEncodedPosition(373);
      node0.isFromExterns();
      node2.isExprResult();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node4.isEquivalentTo(node2, true, false, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString("");
      node1.addChildToBack(node0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setIsSyntheticBlock(false);
      node1.isQuotedString();
      node2.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node1.setChangeTime(31);
      Node.mergeLineCharNo(38, 305);
      node0.isParamList();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node2.getProp(51);
      node1.putProp(1210, (Object) null);
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      Node node2 = new Node((-742), node1, node1);
      node2.isSetterDef();
      node2.putProp(1, ";-wIKE`");
      Node node3 = Node.newString(55, ";-wIKE`");
      node1.addChildToFront(node3);
      node2.copyInformationFrom(node0);
      node2.putBooleanProp(2, false);
      Node.extractLineno(4);
      node2.setLineno(49);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node2.setSourceEncodedPositionForTree(3827);
      Node.mergeLineCharNo(105, (-818));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node((-862048943), node1, node1, node2, node0, 8, (-3253));
      node1.removeChild(node3);
      node1.wasEmptyNode();
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("n9YXRDajl&=", 1688, 102);
      node0.isName();
      node0.isInstanceOf();
      Node node1 = new Node(12, 12, 51);
      node1.setType(8);
      node1.siblings();
      node1.getLength();
      Node node2 = node0.srcref(node1);
      node0.isNoSideEffectsCall();
      node2.isOnlyModifiesArgumentsCall();
      node0.toString(true, false, true);
      node0.isObjectLit();
      node0.isCall();
      node1.isUnscopedQualifiedName();
      node0.isThrow();
      node1.isThis();
      node2.getIndexOfChild(node1);
      node0.getProp(52);
      node2.addChildrenToBack((Node) null);
      node1.isVoid();
      int int0 = 373;
      node2.setSourceEncodedPosition(int0);
      node0.isFromExterns();
      node2.isExprResult();
      // Undeclared exception!
      try { 
        node0.isBreak();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node node0 = new Node(53, (-857), (-857));
      Node node1 = new Node((-857), node0, node0, node0, node0, 54, 2397);
      Node node2 = new Node(53, node1, node1, node0, node0);
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node0.getLength();
      int int0 = (-3280);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(54, node0, node0, node0, 9, 0);
      Node node2 = new Node(42, 46, 147);
      node0.addChildToFront(node1);
      node0.copyInformationFrom(node2);
      node0.putBooleanProp(57, true);
      node2.hasChildren();
      node0.isFromExterns();
      node1.getIntProp(39);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(103);
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("eOD>Q3->\"cH", false);
      Node node0 = new Node((-742));
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("HRTI");
      node0.isEquivalentToTyped(node1);
      node1.isEquivalentTo(node0, true, false, true);
      node0.isDec();
      node0.setSourceEncodedPositionForTree(1483);
      node0.hasChild(node1);
      node0.isDebugger();
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      boolean boolean0 = node0.isContinue();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[1] = node0;
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2, 15, 46);
      node1.addChildToFront(node0);
      Node node2 = node0.copyInformationFrom(nodeArray0[0]);
      int int0 = 53;
      // Undeclared exception!
      try { 
        node2.putBooleanProp(int0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1792));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString("CiGz", (-2988), (-923));
      Node node1 = new Node(103, node0, 31, 9);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(43, "oc>,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2, 15, 147);
      node1.addChildToFront(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node2.putBooleanProp(53, false);
      Node.extractLineno(119);
      node0.setLineno(51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isThis();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 42, 42);
      Node node1 = new Node(310, node0, 76, 2);
      node0.isGetElem();
      Node node2 = node0.srcref(node1);
      node1.removeChild(node2);
      node1.isGetterDef();
      node1.getProp(55);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString((-2394), "");
      Node node1 = new Node((-2394), node0, 4095, 1);
      node1.isGetElem();
      Node node2 = node1.srcref(node0);
      node1.isHook();
      Node node3 = node2.cloneNode();
      node0.isGetterDef();
      Node.mergeLineCharNo(1305, 51);
      node3.isAssign();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isAdd();
      node0.isCatch();
      node0.wasEmptyNode();
      Node node1 = Node.newString("Node tree inequality:\nTree1:\n", 12, 30);
      node0.useSourceInfoFromForTree(node1);
      Node.mergeLineCharNo((-1186), 52);
      node0.getNext();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1));
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(43);
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 42, 42);
      Node node1 = new Node(16, node0);
      node1.toString(false, false, false);
      node1.isObjectLit();
      node0.isCall();
      node1.isUnscopedQualifiedName();
      node1.isThrow();
      Node node2 = new Node(3266, node1, node0, node1, 42, 56);
      node2.isThis();
      int int0 = 1;
      int int1 = (-3674);
      int int2 = 367;
      Node node3 = new Node(int0, node0, node0, node2, int1, int2);
      // Undeclared exception!
      try { 
        node3.getIndexOfChild(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("n9YXRDajl&=", 1688, 102);
      node0.isName();
      node0.isInstanceOf();
      Node node1 = new Node(12, 12, 51);
      node1.setType(8);
      node1.siblings();
      node1.getLength();
      Node node2 = node0.srcref(node1);
      node0.isNoSideEffectsCall();
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = new Node((-1656), node0, 57, 55);
      node3.isGetElem();
      Node node4 = new Node(2263, node3);
      Node node5 = node1.srcref(node4);
      node3.removeChild(node4);
      node5.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(103);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("eOD>Q3->\"cH", false);
      Node node0 = new Node((-742));
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("eOD>Q3->\"cH");
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      node1.isEquivalentTo(node0, true, false, true);
      node0.toString();
      node0.isDec();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      node1.clonePropsFrom(node0);
      boolean boolean1 = true;
      node1.isEquivalentTo(node0, boolean1, boolean1, boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.setSourceEncodedPositionForTree(51);
      node1.hasChild(node0);
      node0.isOptionalArg();
      Node node5 = Node.newNumber(1365.8);
      Node node6 = Node.newString(1427, "0uph", 2, 53);
      Node node7 = new Node(1238, node5, node6, node5, node0, 43, 32);
      node5.copyInformationFromForTree(node7);
      node5.checkTreeTypeAwareEqualsImpl(node3);
      node5.getSourceOffset();
      node3.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      Node.newString("", 30, 152);
      node0.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node0 = Node.newString("_|y^t8H");
      node0.isOnlyModifiesArgumentsCall();
      node0.toString();
      Node.newString(751619276, "");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("6pe&&`~z)S^");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      Node node1 = Node.newString("LE");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("LE", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeRegistry0.createFromTypeNodes(node0, "Named type with empty name component", enumType0);
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType1 = enumElementType1.getPropertyType("Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType1, (JSType) enumType0, (JSType) enumElementType0, jSType1);
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) null);
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node0.isGetterDef();
      node0.isWith();
      node0.isDebugger();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Error");
      node0.isEmpty();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      boolean boolean0 = node0.isContinue();
      node0.isDelProp();
      Node node1 = Node.newString(12, "ocGV,{V6c<");
      Node node2 = new Node(54, node1, node1, node0, 1483, 2);
      node2.setLength(1759);
      node2.addChildrenAfter(node0, node0);
      Node node3 = node2.copyInformationFromForTree(node1);
      node3.setSourceEncodedPositionForTree(node0.FLAG_LOCAL_RESULTS);
      node2.setOptionalArg(boolean0);
      node1.isIn();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      Node node1 = new Node(2147483645, node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isArrayLit();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      String string0 = "b2va]";
      Node node2 = new Node(2379, (Node) null);
      JSType jSType0 = null;
      ObjectType objectType0 = ObjectType.cast(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node2, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      // Undeclared exception!
      try { 
        enumType1.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      node3.setCharno(154);
      node2.getLastSibling();
      node2.isWith();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("eOD>Q3->\"cH", 714, 714);
      node0.getSourceOffset();
      Node node1 = new Node(103, node0, 87, 87);
      node1.isCase();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      node0.addChildToBack(node0);
      node0.isFor();
      node0.setSourceFileForTesting("Va?iQ{'t374V<LCC~ ");
      Node node1 = node0.detachFromParent();
      node1.setChangeTime((-4850));
      Node.mergeLineCharNo(262144, 57);
      node0.isAssign();
      node1.isTypeOf();
      node0.getDirectives();
      node1.isQuotedString();
      node1.isString();
      Node.newNumber((double) 42, 87, (-2224));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 1281, (-570));
      Node node1 = new Node(15, node0, node0);
      Node node2 = node1.cloneTree();
      node1.getIntProp(127);
      node0.copyInformationFromForTree(node2);
      node1.checkTreeEquals(node2);
      Node.newString("");
      node1.isLocalResultCall();
      node1.getAncestor(93);
      Node node3 = Node.newString(51, (String) null);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.setQuotedString();
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.children();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getJSType();
      node1.setJSType((JSType) null);
      node0.isRegExp();
      node1.setCharno(1);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isNumber();
      node2.isHook();
      node0.isGetterDef();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      node0.children();
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.setIsSyntheticBlock(true);
      String string0 = node0.toString();
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("NUMBER -1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      Node node4 = node0.detachFromParent();
      node2.isEquivalentToShallow(node1);
      node3.isOptionalArg();
      node4.toStringTree();
      node2.addChildrenAfter(node3, node3);
      node4.setSourceFileForTesting(string0);
      node2.getExistingIntProp(node4.QUOTED_PROP);
      node4.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString("");
      node1.addChildToBack(node0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setIsSyntheticBlock(false);
      node1.isDefaultCase();
      node2.getQualifiedName();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo(52, (-3933));
      node0.isParamList();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(83, (Node) null, (Node) null, 108, 83);
      node0.isWith();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-3983), (Node) null, (Node) null, (Node) null, (Node) null, (-3983), 2183);
      node1.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 111;
      Node node0 = new Node(111, 111, 111);
      int int1 = (-1089);
      node0.putIntProp(111, (-1089));
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 111
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      Node node1 = Node.newString("RecordProperty associated with a property should not be null!", 913, 43);
      Node node2 = new Node(105, node1);
      boolean boolean0 = node2.isContinue();
      boolean boolean1 = node1.isDelProp();
      node1.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      jSTypeRegistry0.getType("Not declared as a type name");
      node0.setJSType((JSType) null);
      node1.isRegExp();
      node0.setCharno((-244));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.getDouble();
      Node node3 = Node.newNumber((double) 43);
      Node node4 = Node.newString(454767, "reflected_object", 2295, 32);
      node3.removeChild(node4);
      node3.addChildToBack(node4);
      boolean boolean2 = true;
      node3.isEquivalentTo(node2, boolean0, boolean1, boolean2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString("eOD>Q3->\"cH", 3575, 116);
      Node node1 = new Node((-1334), node0, 52, 52);
      node0.isCase();
      node0.isOr();
      node1.getSourcePosition();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("Boolean");
      Node node1 = new Node((-1309), node0, node0);
      Node node2 = new Node(36, node1, node0, node1);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(1, node0);
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node(297, node1);
      node2.setChangeTime(1);
      Node.mergeLineCharNo(297, 4);
      node2.isAssign();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0);
      node1.isDelProp();
      node0.getStaticSourceFile();
      node0.isEquivalentTo(node1);
      node0.isDec();
      node0.getProp(39);
      Node node2 = Node.newString(32, "", 9, 55);
      node2.setSourceEncodedPositionForTree((-2115));
      node0.hasChild(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = null;
      JSType.toMaybeTemplateType((JSType) null);
      jSTypeArray0[0] = (JSType) null;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.isDebugger();
      String string0 = "com.google.common.base.Joiner$MapJoiner";
      Node node4 = Node.newString(string0);
      node4.copyInformationFromForTree(node2);
      String string1 = "3n~i@aXH";
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.siblings();
      node0.isLocalResultCall();
      Node node1 = new Node(38, node0, 101, 112);
      node1.getIndexOfChild(node0);
      node1.isFunction();
      Node node2 = new Node(44, node1, node1);
      node0.removeProp((-722));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0);
      Node node2 = new Node(30, node0, node1, 16, 1024);
      node2.copyInformationFrom(node0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node2.putBooleanProp(node0.FLAG_NO_THROWS, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      node0.isTypeOf();
      node2.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      Node node3 = Node.newString(4095, "BV#-GvJJ'\"HK9", 30, 30);
      Node node4 = node2.copyInformationFrom(node3);
      Node node5 = node2.removeChildAfter(node1);
      int int0 = (-1799);
      int int1 = (-899);
      Node node6 = new Node(node4.FLAG_THIS_UNMODIFIED, node5, node1, node4, int0, int1);
      // Undeclared exception!
      try { 
        node6.replaceChild(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = (-1);
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((TemplateTypeMap) null).when(unionType0).getTemplateTypeMap();
      doReturn(false).when(unionType0).hasAnyTemplateTypes();
      doReturn(false, false, false).when(unionType0).isAllType();
      doReturn(false).when(unionType0).isEmptyType();
      doReturn(false, false).when(unionType0).isFunctionType();
      doReturn(false).when(unionType0).isNoResolvedType();
      doReturn(false).when(unionType0).isNoType();
      doReturn(false).when(unionType0).isTemplatizedType();
      doReturn(false).when(unionType0).isUnionType();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(unionType0).toString();
      doReturn((Collection) null).when(unionType0).getAlternates();
      doReturn(false, false, false).when(unionType0).isUnknownType();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) unionType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = (JSType) unionType0;
      jSTypeArray0[3] = (JSType) unionType0;
      jSTypeArray0[4] = (JSType) unionType0;
      jSTypeArray0[5] = (JSType) unionType0;
      jSTypeArray0[6] = (JSType) unionType0;
      jSTypeArray0[7] = (JSType) unionType0;
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.TemplateTypeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node node0 = new Node((-742));
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("HRTI");
      node0.isEquivalentToTyped(node1);
      node1.isEquivalentTo(node0, true, false, true);
      node0.isDec();
      node0.setSourceEncodedPositionForTree(1483);
      node0.hasChild(node1);
      node0.isDebugger();
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1052), 0);
      node0.children();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.setDirectives((Set<String>) null);
      node0.wasEmptyNode();
      node0.removeChild(node0);
      node0.wasEmptyNode();
      Node node2 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node2.isEquivalentTo(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      node3.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = "l5";
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "");
      ObjectType objectType1 = ObjectType.cast(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node2, objectType1);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node4 = enumElementType1.getPropertyNode(enumType0.EMPTY_TYPE_COMPONENT);
      // Undeclared exception!
      try { 
        node4.isHook();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.setSourceEncodedPositionForTree(3053);
      node0.setOptionalArg(true);
      node0.isIn();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType jSType0 = jSTypeRegistry0.createUnionType((JSTypeNative[]) null);
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType(jSType0.NOT_A_TYPE, node0, immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 38, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node3.isParamList();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("0uph", false);
      node4.putProp(4095, simpleSourceFile0);
      Node node5 = node1.useSourceInfoFrom(node0);
      node5.getDirectives();
      node0.getAncestors();
      node4.isExprResult();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      Node node4 = Node.newNumber((-3555.67189));
      node4.isEquivalentTo(node1);
      node4.isDec();
      node1.setSourceEncodedPositionForTree(9);
      node3.hasChild(node4);
      node1.isInc();
      Node.newString("0uph");
      node2.copyInformationFromForTree(node4);
      node3.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(unknownType0).toString();
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(unknownType1).toString();
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType1, unknownType0, unknownType1);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      jSTypeRegistry0.getType("Unknown class name");
      node0.setJSType((JSType) null);
      node0.isRegExp();
      node0.setCharno(43);
      node0.isLabelName();
      node0.toString();
      Node node1 = new Node(85, node0, node0, 1752, 43);
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("Unknown class name");
      Node node2 = node1.detachFromParent();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node1.isEquivalentToShallow(node3);
      node2.isOptionalArg();
      node3.toStringTree();
      node3.addChildrenAfter(node2, node0);
      node0.setSourceFileForTesting(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      int int0 = (-2728);
      node1.getExistingIntProp(int0);
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      Node node1 = Node.newNumber((double) 30);
      node1.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, (TemplateTypeMap) null);
      JSType jSType1 = templateTypeMapReplacer0.caseNumberType();
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      JSType jSType2 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType3 = templateTypeMapReplacer0.caseNumberType();
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[0] = jSType1;
      jSTypeArray1[1] = jSType3;
      jSTypeArray1[2] = jSType2;
      jSTypeArray1[3] = jSType1;
      Node node2 = jSTypeRegistry1.createParameters(jSTypeArray1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node2.cloneTree();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.setIsSyntheticBlock(true);
      node0.toString();
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("NUMBER -1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      Node node4 = node0.detachFromParent();
      node2.isEquivalentToShallow(node1);
      node3.isOptionalArg();
      node4.toStringTree();
      node4.setSourceFileForTesting("NUMBER -1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      node2.getExistingIntProp(36);
      node4.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = (-742);
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      node1.isSetterDef();
      node0.putProp(1, ";-wIKE`");
      Node node2 = Node.newString(55, ";-wIKE`");
      node1.addChildToFront(node2);
      node1.copyInformationFrom(node0);
      node1.isOnlyModifiesArgumentsCall();
      node0.setQuotedString();
      boolean boolean0 = true;
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = 23;
      Node node0 = Node.newString("*5^bLfdm~", 40, 1752);
      Node node1 = new Node(40, node0, node0, node0, (-197), 56);
      Node node2 = new Node(40, node1, node0, node1, node0, 48, 103);
      Node node3 = new Node(int0, node2);
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.siblings();
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "'A^Bg^|S5';T");
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      node0.toString(false, true, true);
      node1.isObjectLit();
      node2.isCall();
      node2.isIf();
      node1.isThrow();
      node2.isThis();
      node2.getIndexOfChild(node0);
      node1.getProp(47);
      node2.addChildrenToBack(node1);
      int int0 = 576;
      Node node3 = null;
      Node node4 = new Node(int0, node0, node1, node3, node0);
      node1.isVoid();
      node1.setSourceEncodedPosition(node0.INCRDECR_PROP);
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("n9YXRDajl&=", 1688, 102);
      node0.isName();
      node0.isObjectLit();
      Node node1 = new Node(12, 12, 51);
      node1.setType(8);
      node1.siblings();
      node1.getLength();
      Node node2 = node0.srcref(node1);
      node1.isInstanceOf();
      node2.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node2.toString();
      Node node3 = new Node(62, node2, node2, 37, (-2333));
      node3.addChildToBack(node1);
      node2.isFor();
      Node node4 = Node.newString(36, "h_aREM\"");
      node4.setSourceFileForTesting("end-char: ");
      Node node5 = node2.detachFromParent();
      node5.isEquivalentToShallow(node1);
      node2.isOptionalArg();
      Node node6 = Node.newString("}vl:Mz+5cH&S=T");
      node6.toStringTree();
      node1.setSourceFileForTesting("");
      node1.getExistingIntProp(110);
      node4.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.wasEmptyNode();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.removeFirstChild();
      Node node3 = new Node(29);
      node1.removeChild(node3);
      int int0 = 64;
      Node node4 = Node.newNumber((double) node3.SIDE_EFFECTS_ALL, node2.MAX_COLUMN_NUMBER, int0);
      // Undeclared exception!
      try { 
        node4.wasEmptyNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      Node.extractLineno(119);
      int int0 = (-2493);
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node(64, (Node) null, 1233, 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) node0.LAST_PROP);
      nodeArray0[1] = node1;
      Node node2 = null;
      try {
        node2 = new Node(node0.DIRECT_EVAL, nodeArray0[0], nodeArray0[1], node0, nodeArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.setSourceEncodedPositionForTree(3053);
      node0.setOptionalArg(true);
      node0.mayMutateArguments();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSType jSType0 = jSTypeRegistry0.createUnionType((JSTypeNative[]) null);
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType(jSType0.NOT_A_TYPE, node0, immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      node1.srcref(node0);
      Node node2 = new Node(51, 38, 54);
      String string0 = "0uph";
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = new Node(38, node2, 52, 29);
      int int0 = 8192;
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.siblings();
      node0.isLocalResultCall();
      node0.isDelProp();
      node0.getStaticSourceFile();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(113, 32, 741);
      node0.isFromExterns();
      node0.getSourceFileName();
      node0.isNull();
      node0.isLabelName();
      Node[] nodeArray1 = new Node[0];
      Node node2 = new Node(55, nodeArray1, 51, 3949);
      Node node3 = node2.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.newString(29, "Node has existing properties.");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      node3.setSideEffectFlags(node_SideEffectFlags0);
      node3.isNumber();
      String string0 = "\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000";
      Node node4 = Node.newString(string0);
      node4.isThis();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43);
      Node node1 = new Node(200, node0);
      node1.setString("EzOOO!qe1{?,_X6p%");
      node1.getSourceFileName();
      int int0 = (-2199);
      Node node2 = null;
      try {
        node2 = new Node(int0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 200
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.wasEmptyNode();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      node0.removeFirstChild();
      Node node2 = new Node(29);
      node1.removeChild(node2);
      Node node3 = new Node(node1.DIRECT_EVAL);
      int int0 = (-1628);
      Node node4 = null;
      try {
        node4 = new Node(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      Node.extractLineno(154);
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node(64, (Node) null, 1233, 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) node0.LAST_PROP);
      nodeArray0[1] = node1;
      Node node2 = new Node(node0.DIRECT_EVAL, nodeArray0[0], nodeArray0[1], node0, nodeArray0[1]);
      int int0 = 757;
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 39);
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 1, 1642);
      Node node3 = new Node(8);
      node3.isScript();
      node0.getJsDocBuilderForNode();
      Node node4 = Node.newString("^O6,q-$(b95");
      Node node5 = node3.srcref(node2);
      node0.checkTreeEqualsImpl(node4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node5.setSideEffectFlags((Node.SideEffectFlags) null);
      node2.isNumber();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.setSourceEncodedPositionForTree(3053);
      node0.isOnlyModifiesThisCall();
      node0.setOptionalArg(true);
      node0.isIn();
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.addChildToFront(node0);
      node0.mayMutateArguments();
      Node node1 = node0.cloneNode();
      node0.isQuotedString();
      node0.hasOneChild();
      node0.mayMutateArguments();
      Node node2 = new Node(305, node1, node1);
      node2.isQuotedString();
      node2.isTypeOf();
      node2.getExistingIntProp(16);
      node2.cloneNode();
      node0.isSwitch();
      String string0 = node0.getString();
      node0.isDelProp();
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 16
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString("");
      node1.isDefaultCase();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getQualifiedName();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-734), 47);
      node1.isParamList();
      Node node3 = new Node((-508));
      node3.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 51, 16777216);
      node2.isEquivalentTo(node0);
      Node node3 = new Node(2937, node1);
      node3.mayMutateArguments();
      node1.getIndexOfChild(node0);
      node3.isDec();
      node0.removeProp(8);
      String string1 = "o.E-TL9";
      File file0 = MockFile.createTempFile("", "o.E-TL9");
      String string2 = "Type names cannot contain template annotations.";
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0, string2);
      Locale locale0 = Locale.KOREA;
      String string3 = "";
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      byte[] byteArray0 = new byte[3];
      node_SideEffectFlags0.setAllFlags();
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      node_SideEffectFlags3.setReturnsTainted();
      byteArray0[2] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node1 = Node.newString("Object#Key", 57, 1598);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(55, node0);
      node2.isIf();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node3 = Node.newString("");
      node3.checkTreeEqualsImpl(node0);
      node3.getInputId();
      node3.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.setLineno(55);
      node0.isQualifiedName();
      Node node1 = new Node(55, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.getSideEffectFlags();
      node1.removeProp(32);
      Node.newNumber((double) 1, 16, 87855567);
      node2.toString(true, false, false);
      node0.isObjectLit();
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node1.isThrow();
      double double0 = 1645.994022051263;
      int int0 = 3007;
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("u?", 3, 0);
      node0.isTrue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      String string0 = "0uph";
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.setSourceEncodedPositionForTree(51);
      node1.hasChild(node0);
      node0.isOptionalArg();
      Node node5 = Node.newNumber(1365.8);
      Node node6 = Node.newString(1427, "0uph", 2, 53);
      Node node7 = new Node(1238, node5, node6, node5, node0, 43, 32);
      node1.addSuppression(string0);
      node5.copyInformationFromForTree(node7);
      node5.checkTreeTypeAwareEqualsImpl(node3);
      node5.getSourceOffset();
      node3.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.isQuotedString();
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.isAnd();
      node0.getChildCount();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(47, "");
      node0.addChildrenToBack(node0);
      Node node2 = new Node(47, node1);
      node2.copyInformationFromForTree(node0);
      Node node3 = new Node(26, node1);
      int int0 = 32;
      node0.setChangeTime(int0);
      int int1 = (-834);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = (-742);
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      node1.isSetterDef();
      node0.isLocalResultCall();
      node1.isDelProp();
      node0.getStaticSourceFile();
      Stack<JSType> stack0 = new Stack<JSType>();
      node1.isAdd();
      node1.isCatch();
      Node node2 = new Node(49, node0);
      // Undeclared exception!
      try { 
        node2.wasEmptyNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.siblings();
      node0.isLocalResultCall();
      node0.isDelProp();
      node0.getStaticSourceFile();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isEquivalentTo(node0);
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      node0.isDec();
      node0.hasChild(node0);
      node0.isDebugger();
      Node node1 = Node.newString("ocGV,{V6c<");
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      node0.addChildToBack(node0);
      node0.setIsSyntheticBlock(false);
      node0.isDefaultCase();
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1166), 62);
      node0.isParamList();
      node0.isTypeOf();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "PYfU&-#H{";
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      Node node1 = new Node(50, node0, node0, node0, node0);
      Node node2 = new Node(55, 318, 4095);
      node2.addChildToFront(node1);
      Node node3 = new Node(52);
      node3.copyInformationFrom(node0);
      node2.getDouble();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node3.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(53);
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      node1.isEquivalentTo(node0);
      node0.isDec();
      node1.hasChild(node0);
      node0.getString();
      String string0 = "tYq`7j>I!AR";
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 38, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node3.isParamList();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("0uph", false);
      node4.putProp(4095, simpleSourceFile0);
      Node node5 = node1.useSourceInfoFrom(node0);
      node5.getDirectives();
      node0.getAncestors();
      node3.isExprResult();
      node5.isBreak();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, (-742), (-742));
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 53);
      node1.isSetterDef();
      node0.isLocalResultCall();
      node1.isDelProp();
      node0.getStaticSourceFile();
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      node1.wasEmptyNode();
      node0.isFromExterns();
      node0.getSourceFileName();
      node1.isGetProp();
      node0.isLabelName();
      Node node2 = new Node(8, node1, node1);
      Node node3 = node2.getLastSibling();
      int int0 = Node.LENGTH;
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(4095, (Node) null, (Node) null, (Node) null, 4095, 1411);
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      File file0 = MockFile.createTempFile("com.google.javascript.rhino.jstype.SimpleSourceFile", "not a StringNode");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "0uph";
      objectArray0[2] = (Object) node2;
      objectArray0[3] = (Object) node_FileLevelJsDocBuilder0;
      objectArray0[4] = (Object) node_SideEffectFlags0;
      node0.getProp(2);
      objectArray0[5] = null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      node3.appendStringTree(printStream0);
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(3430, (-1125), 1350);
      Node node1 = new Node(4095, 3430, 90);
      node0.useSourceInfoFromForTree(node1);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.siblings();
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "'A^Bg^|S5';T");
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      node2.isEquivalentTo(node1);
      node1.isInc();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node3 = new Node(2, nodeArray0, 43, 55);
      nodeArray0[4] = node3;
      nodeArray0[5] = node2;
      nodeArray0[6] = node2;
      nodeArray0[7] = node0;
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("84", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node0.isGetterDef();
      node0.isWith();
      node0.isDebugger();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Error");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.mayMutateGlobalStateOrThrow();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = Node.newString("Object#Element");
      Node node1 = node0.clonePropsFrom((Node) null);
      node1.isLabelName();
      // Undeclared exception!
      try { 
        node1.isParamList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.setIsSyntheticBlock(true);
      node0.toString();
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("NUMBER -1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      node2.setString("NUMBER -1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004]");
      Node node4 = node0.detachFromParent();
      node2.isEquivalentToShallow(node1);
      node3.isOptionalArg();
      // Undeclared exception!
      try { 
        node4.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.children();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("C4WP98'4[8B!na");
      node1.setJSType((JSType) null);
      node0.isRegExp();
      node1.setCharno(1);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.wasEmptyNode();
      node2.isHook();
      node0.isGetterDef();
      node2.isIn();
      node0.addSuppression("*5n1J?Xf]M$0i6-C[");
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("");
      String string0 = "com.google.javascript.rhino.jstype.SimpleSourceFile";
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile");
      node1.getChangeTime();
      node0.getFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createEnumType("NE", (Node) null, (JSType) null);
      String string1 = null;
      int int0 = 175;
      int int1 = (-1269);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1055), nodeArray0, (-1055), (-1055));
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isDec();
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      Node node4 = node0.cloneTree();
      node4.isEquivalentTo(node1);
      node1.isCatch();
      node3.wasEmptyNode();
      node1.getLength();
      Node node5 = new Node(30, 2773, 39);
      node5.isFromExterns();
      node3.getSourceFileName();
      node4.isNull();
      node3.isLabelName();
      node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2369);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node3.isAssign();
      node1.isTypeOf();
      node4.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12288, 12288);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.putProp(130, simpleErrorReporter0);
      Node node1 = new Node(53);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isReturn();
      node0.addChildAfter(node1, node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node1.checkTreeEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      node0.putBooleanProp((-3036), false);
      Node.extractLineno(133);
      node2.setLineno(302);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node3 = node1.clonePropsFrom(node0);
      node1.isParamList();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("jrI@!p6_&+~!", false);
      node0.putProp(51, "");
      Node node4 = node3.useSourceInfoFrom(node0);
      node3.getDirectives();
      Node node5 = Node.newString(1, "");
      node5.getAncestors();
      node0.isExprResult();
      node4.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      int int0 = Node.JSDOC_INFO_PROP;
      node0.isFunction();
      node1.getJSDocInfo();
      Node node2 = new Node(7, node1, (-2484), 48);
      node1.replaceChild(node2, node2);
      node1.replaceChildAfter(node0, node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node2.getChildCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(53);
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      node1.isEquivalentTo(node0);
      node0.isDec();
      node1.hasChild(node0);
      node0.isDebugger();
      Node node2 = Node.newString("Ii+/h0/c)");
      Node node3 = node1.copyInformationFromForTree(node2);
      node1.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newNumber(4024.2179314654, 8, (-970));
      Node node1 = new Node(8, node0, node0, node0, node0, 1836, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = node1.cloneTree();
      node2.setLineno((-3020));
      String string0 = "5\\L`f{n@!";
      simpleErrorReporter0.error("SWITCH", "5L`f{n@!", 2043, 1);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = new Node(135, node1, node3, node0, node1);
      node4.replaceChild(node1, node0);
      SimpleErrorReporter.getMessage(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, jSTypeArray0);
      JSType jSType0 = null;
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getTypeOfThis();
      Iterator<JSType> iterator0 = (Iterator<JSType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(8, node0, node0, 32, 55);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.toString(true, true, true);
      node2.isObjectLit();
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node1.setVarArgs(true);
      node3.isThrow();
      node1.isThis();
      node1.getIndexOfChild(node2);
      node1.getProp(53);
      node2.addChildrenToBack(node3);
      node1.isVoid();
      node2.useSourceInfoIfMissingFrom(node3);
      node3.setSourceEncodedPosition(8);
      node2.isFromExterns();
      node0.isEquivalentTo(node2);
      node2.getChildAtIndex(105);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-11), 1281, (-570));
      Node node1 = new Node(15, node0, node0);
      Node node2 = node1.cloneTree();
      node1.getIntProp(127);
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.checkTreeEquals(node2);
      Node.newString("");
      node1.isLocalResultCall();
      node1.getAncestor(130);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch((Node) null, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.setQuotedString();
      node_NodeMismatch0.equals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      int int0 = 117;
      int int1 = 57;
      Node node5 = null;
      try {
        node5 = new Node(int0, node4, int1, node3.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber((-37.629782897652944));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.toString(true, true, true);
      node2.isObjectLit();
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node1.setVarArgs(true);
      node3.isThrow();
      node1.isThis();
      node1.getIndexOfChild(node2);
      node1.getProp(53);
      node2.addChildrenToBack(node3);
      node1.isVoid();
      node3.setSourceEncodedPosition(8);
      node2.isFromExterns();
      node0.isEquivalentTo(node2);
      node0.getChangeTime();
      Node node4 = node1.getLastSibling();
      node4.isSwitch();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(8, node0, node0, 32, 55);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node2.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node2.setSideEffectFlags(node_SideEffectFlags2);
      node0.isNumber();
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.setLineno(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node0.isGetterDef();
      node0.putIntProp(0, 0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(57, nodeArray0);
      nodeArray0[1].isEquivalentTo(node0);
      int int0 = (-2802);
      // Undeclared exception!
      try { 
        nodeArray0[0].putIntProp(int0, node0.DECR_FLAG);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node0.wasEmptyNode();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node((-2811), nodeArray0);
      nodeArray0[1].useSourceInfoIfMissingFromForTree(nodeArray0[1]);
      // Undeclared exception!
      try { 
        nodeArray0[0].removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(53);
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      node1.isEquivalentTo(node0);
      node0.isDec();
      node1.hasChild(node0);
      node0.isDebugger();
      Node node2 = Node.newString("Ii+/h0/c)");
      node2.setSourceEncodedPositionForTree(1);
      node1.copyInformationFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      Node node2 = new Node(42, 46, 147);
      node0.addChildToFront(node1);
      node0.copyInformationFrom(node2);
      node1.mayMutateArguments();
      Node node3 = node0.cloneNode();
      node2.isQuotedString();
      node1.hasOneChild();
      node1.mayMutateArguments();
      Node node4 = new Node(672, node3, node3);
      node4.getJsDocBuilderForNode();
      Node.mergeLineCharNo(42, 37);
      node4.isEmpty();
      node1.isTypeOf();
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$Or", 53, 53);
      node0.isName();
      node0.isInstanceOf();
      Node node1 = new Node((-537), 1688, (-1967));
      node1.setType(31);
      node1.siblings();
      node0.getLength();
      Node node2 = node1.srcref(node0);
      node1.isNoSideEffectsCall();
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = new Node(1, node2, 48, 0);
      node2.isGetElem();
      Node node4 = new Node(29, node0);
      node1.srcref(node4);
      node3.removeChild(node0);
      node0.addChildToBack(node3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(103);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("eOD>Q3->\"cH", false);
      Node node0 = Node.newString("eOD>Q3->\"cH");
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("eOD>Q3->\"cH");
      node0.isEquivalentToTyped(node1);
      node1.isEquivalentTo(node0, true, true, true);
      node0.toString();
      node0.isDec();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      node1.clonePropsFrom(node0);
      node1.isEquivalentTo(node0, true, true, true);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.isEquivalentTo(node0, false, false, false);
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.isAnd();
      node0.getChildCount();
      node0.getStaticSourceFile();
      node0.isOptionalArg();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(921, 57, 39);
      node1.addChildToFront(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = node1.copyInformationFrom(node0);
      node2.putBooleanProp(49, false);
      Node node3 = Node.newString("Ni$]_$&Ha");
      node3.isOnlyModifiesArgumentsCall();
      node2.toString();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(1928, node0, 48, 2503);
      node1.isCase();
      node1.isOr();
      node1.getSourcePosition();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 2061, 2061);
      Node node1 = new Node(47, node0, 50, (-1390));
      node1.isOptionalArg();
      node1.replaceChildAfter(node0, node0);
      node0.getIndexOfChild(node1);
      Node node2 = null;
      int int0 = 36;
      // Undeclared exception!
      try { 
        node0.setLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      Node node1 = new Node(47, node0, 2756, 49);
      node1.replaceChildAfter(node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.getChildCount();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 38, 54);
      Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node3 = node2.copyInformationFrom(node0);
      node3.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node4 = node2.clonePropsFrom(node3);
      node3.isWhile();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("0uph", false);
      node4.putProp(4095, simpleSourceFile0);
      Node node5 = node1.useSourceInfoFrom(node0);
      node5.getDirectives();
      node0.getAncestors();
      node4.isExprResult();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = (JSType) noType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString(38, "h,%LHQK");
      noType0.getTopMostDefiningType("|sz");
      node1.addChildToFront(node0);
      Node node2 = new Node(0);
      Node node3 = node0.copyInformationFrom(node2);
      node0.putBooleanProp(4095, false);
      Node.extractLineno(53);
      node1.setLineno(1086);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(155);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.isString();
      node2.clonePropsFrom(node0);
      node3.isEquivalentTo(node0, false, false, false);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(8, node0, node0, 32, 55);
      node0.getLength();
      Node node2 = node1.srcref(node0);
      node1.isNoSideEffectsCall();
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = new Node(40, node2, 12, 8);
      node1.isGetElem();
      Node node4 = new Node(15, node3);
      Node node5 = node4.srcref(node0);
      node5.getAncestors();
      node5.removeChildren();
      node3.removeChild(node5);
      node2.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.wasEmptyNode();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp(51);
      node1.addChildrenToBack(node0);
      Node node3 = node2.useSourceInfoFrom(node1);
      int int0 = (-3014);
      Node node4 = null;
      try {
        node4 = new Node(int0, nodeArray0[0], nodeArray0[0], node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.siblings();
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = new Node(46, node0, 47, 0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      String string0 = node0.toString(false, true, true);
      node1.isObjectLit();
      node2.isCall();
      node2.isIf();
      node1.isThrow();
      node2.isThis();
      node2.getIndexOfChild(node0);
      Node node3 = node2.removeFirstChild();
      Node node4 = new Node(131127);
      node0.removeChild(node3);
      node3.setLength(node1.CHANGE_TIME);
      node0.addChildrenAfter(node3, node4);
      node0.copyInformationFromForTree(node3);
      int int0 = 2;
      int int1 = 459;
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(1928, node0, 48, 2503);
      node1.isCase();
      node0.isOr();
      node1.getSourcePosition();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("PYfU&-#H{");
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.setSourceFileForTesting("");
      node0.isBlock();
      node0.setCharno((-1967));
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile(staticSourceFile0);
      node0.isCall();
      Node node1 = new Node(12, node0, node0, node0, (-1759), (-1468));
      node0.isEquivalentTo(node1);
      node1.isDec();
      node1.hasChild(node0);
      node0.isDebugger();
      Node node2 = Node.newString("BBYI%7 No");
      Node node3 = node0.copyInformationFromForTree(node2);
      node0.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(50);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isGetterDef();
      node2.addChildAfter(node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = null;
      try {
        node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.isWith();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.toString(true, true, true);
      node2.isObjectLit();
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node1.setVarArgs(true);
      node3.isThrow();
      node1.isThis();
      node1.getIndexOfChild(node2);
      node1.getProp(53);
      node2.addChildrenToBack(node3);
      node1.isVoid();
      Node node4 = new Node(1531, 4, 49);
      node4.isIn();
      node4.addSuppression((String) null);
      node2.hasChild(node0);
      node1.useSourceInfoFromForTree(node0);
      node0.addSuppression("NUMBER -1.0");
      node0.isDefaultCase();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = new Node(16, node1, node3, 52, 37);
      node2.isEquivalentTo(node3);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node5 = node2.clonePropsFrom(node4);
      Node.newNumber((-2114.1492113), (-1726), 42);
      node5.isEquivalentTo(node2, true, false, true);
      node4.isComma();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-15), nodeArray0, (-1055), (-15));
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isDec();
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      node0.cloneTree();
      node1.hasOneChild();
      node1.isCatch();
      node3.wasEmptyNode();
      node1.getLength();
      Node node4 = new Node(30, 2773, 39);
      node4.isFromExterns();
      node3.getSourceFileName();
      node3.isNull();
      node3.getAncestors();
      node3.isLabelName();
      node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.getLength();
      node_SideEffectFlags0.setAllFlags();
      node3.getString();
      String string0 = "5Iv>)A-gL=vm%}m";
      Node.newString(string0);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node((-2802));
      node0.isScript();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      Node node1 = Node.newString("pYjr/KtV");
      Node node2 = node0.srcref(node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isVoid();
      node0.isAdd();
      node_FileLevelJsDocBuilder0.append("pYjr/KtV");
      node1.isNoSideEffectsCall();
      node0.isStringKey();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 279, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node((-2681), node0, node0, node0);
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(36, 56, 1);
      Node node3 = Node.newString(4095, "Not declared as a type name");
      node1.addChildToFront(node2);
      Node node4 = node1.copyInformationFrom(node0);
      node1.putBooleanProp(38, false);
      Node.extractLineno(53);
      node3.setLineno(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isString();
      node4.clonePropsFrom(node3);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(",4!'=;+W/7", 103, 34);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node((-3796), node0, node0, node0);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(47, 49, 57);
      Node node3 = Node.newString(4095, "0uph");
      node0.addChildToFront(node3);
      Node node4 = node2.copyInformationFrom(node0);
      node1.putBooleanProp(103, false);
      Node.extractLineno(43);
      node4.setLineno(6);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      node0.isDo();
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("C4WP98'4[8B!na");
      node1.setJSType((JSType) null);
      node0.isRegExp();
      node1.setCharno(1);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isHook();
      node0.isGetterDef();
      node2.isIn();
      node0.addSuppression("*5n1J?Xf]M$0i6-C[");
      node0.hasChild(node1);
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-750), 83, 83);
      Node node1 = new Node((-750), node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("*xkdSYoq_lc", false);
      node_NodeMismatch0.equals(node0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(1051.0919843189631, 48, 49);
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setSourceFileForTesting("The new child node has siblings.");
      node0.isBlock();
      node0.setCharno(8202);
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile(staticSourceFile0);
      node0.isCall();
      Node node1 = new Node(32, node0, node0, node0, 8202, 48);
      node0.isEquivalentTo(node1);
      node0.isDec();
      node0.hasChild(node1);
      node0.isDebugger();
      Node node2 = Node.newString("CharMatcher.and(");
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.isDec();
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(1, node0);
      node1.isNumber();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeFunctionType((JSType) null);
      FunctionType.getTopDefiningInterface((ObjectType) null, "8J");
      node0.getJsDocBuilderForNode();
      int int0 = 2355;
      Node.mergeLineCharNo(node1.LENGTH, int0);
      node0.isParamList();
      // Undeclared exception!
      try { 
        node0.isTypeOf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key", 757, 116);
      Node node1 = new Node(3575, node0);
      node1.clonePropsFrom(node0);
      node1.isContinue();
      Node node2 = new Node((-1307), 443, 32);
      node2.isBlock();
      node1.setSourceFileForTesting("RecordProperty associated with a property should not be null!");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      Node node2 = new Node(42, 46, 147);
      node0.addChildToFront(node1);
      Node node3 = new Node(43);
      node3.isCase();
      Node node4 = node0.cloneNode();
      Node node5 = Node.newString((-3263), "\"-J,Y", (-379), 40);
      node2.isGetElem();
      Node node6 = node3.srcref(node4);
      node5.removeChild(node6);
      node2.addChildToBack(node5);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(31);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString((-1055), "Not declared as a constructor");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(12, node0, node1);
      node0.copyInformationFromForTree(node2);
      int int0 = 281;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node((byte)116, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.toString(true, true, true);
      node2.isObjectLit();
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node1.setVarArgs(true);
      node3.isThrow();
      node1.isThis();
      node1.getIndexOfChild(node2);
      node1.getProp(53);
      node2.addChildrenToBack(node3);
      node1.isVoid();
      node2.useSourceInfoIfMissingFrom(node3);
      node3.setSourceEncodedPosition(8);
      node2.isFromExterns();
      node0.isEquivalentTo(node2);
      node2.getChildAtIndex(105);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yCYkyhr");
      Node node0 = Node.newNumber(1010.0345144760545, 306, 306);
      Node node1 = null;
      node0.isOnlyModifiesArgumentsCall();
      node0.isEquivalentTo((Node) null, true, false, true);
      int int0 = 122;
      node0.setWasEmptyNode(boolean0);
      node0.setCharno(int0);
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      node0.setStaticSourceFile(staticSourceFile0);
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.getSourcePosition();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int int0 = 65;
      Node node0 = Node.newString(65, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType1, unknownType0, unknownType1);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      jSTypeRegistry0.getType("Unknown class name");
      node0.setJSType((JSType) null);
      node0.isRegExp();
      node0.setCharno(65);
      node0.isLabelName();
      node0.toString();
      int int1 = 85;
      int int2 = 1752;
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("LEAST_FUNCTION_TYPE", "LEAST_FUNCTION_TYPE", 46, 4095);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node(51, node0, node0, node0);
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(53, (-2025), 49);
      Node node3 = Node.newString(53, "Object#Element");
      node0.addChildToFront(node1);
      Node node4 = new Node(38);
      Node node5 = node4.copyInformationFrom(node1);
      node3.addChildrenToBack(node2);
      node3.putBooleanProp(1148, false);
      Node.extractLineno(36);
      node3.setLineno(117);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags5.clearSideEffectFlags();
      node5.isString();
      node1.clonePropsFrom(node2);
      node3.isNew();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.isEquivalentTo(node0, false, false, false);
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.isAnd();
      node0.getChildCount();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.US;
      locale0.getScript();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.isCast();
      node0.isGetProp();
      Node node1 = node0.getLastSibling();
      Node node2 = node1.cloneNode();
      node2.removeChildAfter(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
      try {
        node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node4.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.isNot();
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GETPROP");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(53);
      node0.getStaticSourceFile();
      node1.isTypeOf();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.isEquivalentTo(node1);
      node1.isDec();
      node1.hasChild(node0);
      Node node2 = new Node(8287, 31, 4095);
      node2.getString();
      String string0 = "tYq`7j>I!AR";
      Node node3 = Node.newString(string0);
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isNE();
      node0.putIntProp((-1967), 43);
      Node node1 = new Node(30, node0, node0, node0, 125, (-2883));
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.setChangeTime((-124));
      Node.mergeLineCharNo(0, 51);
      Node.mergeLineCharNo(2, 1);
      node1.isFromExterns();
      Node node3 = node2.useSourceInfoFrom(node1);
      node0.useSourceInfoIfMissingFrom(node3);
      Node node4 = new Node(50, 41, 38);
      node4.isThrow();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      Node node1 = new Node(105, node0);
      node1.isContinue();
      Node node2 = new Node(46, (-1165), 49);
      node0.isBlock();
      node0.srcref(node1);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      Node node1 = null;
      node0.addChildToFront((Node) null);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 279, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node((-2681), node0, node0, node0);
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(36, 56, 1);
      node0.toString(true, false, true);
      node1.isObjectLit();
      node1.isCall();
      node0.isUnscopedQualifiedName();
      node0.isIf();
      node0.isThrow();
      node0.isThis();
      node0.getIndexOfChild(node2);
      node0.removeFirstChild();
      Node node3 = new Node(1, node1, node2);
      Node node4 = Node.newString(1784, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node5 = node4.getLastSibling();
      node3.hasChild(node5);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(780);
      node0.isLocalResultCall();
      Node node1 = new Node(46);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      node0.mayMutateArguments();
      boolean boolean0 = node1.isDefaultCase();
      node0.isQualifiedName();
      node0.isAnd();
      node0.getChildCount();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.US;
      locale0.getScript();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node2 = new Node(37, 1, 30);
      node2.setDirectives(set0);
      node1.isCast();
      node1.isGetProp();
      node1.getLastSibling();
      Node node3 = Node.newString("");
      node3.cloneNode();
      Node node4 = new Node(29);
      node1.removeChildAfter(node4);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      String string0 = "com.google.javascript.rhino.jstype.EquivalenceMethod";
      node_FileLevelJsDocBuilder1.append(string0);
      node0.isOptionalArg();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(576);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(33, "Named type with empty name component");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(43, node0);
      Node node3 = Node.newString(47, "Not declared as a constructor", 155, 709);
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = new Node(31, node3);
      node2.isNoSideEffectsCall();
      node3.isStringKey();
      node1.getLength();
      node4.isBlock();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newString("RecordProperty associated with a property should not be null!", 913, 43);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(treeSet0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.isAdd();
      node1.isCatch();
      Node node2 = new Node(49, node1, 53, 112);
      node2.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(31, node2, node0);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      node4.isCase();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isEmpty();
      node0.putBooleanProp(15, false);
      Node.extractLineno(49);
      node0.setLineno(1392);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node((-3247), node0, node0);
      node0.copyInformationFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.getIndexOfChild(node1);
      node0.isFunction();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isWith();
      node1.isAdd();
      node0.isArrayLit();
      node1.copyInformationFromForTree(node0);
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Error");
      Node node2 = new Node(83, node1, 8, (-931));
      node2.isVar();
      node2.mayMutateArguments();
      node1.isNew();
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.getBooleanProp(4600);
      node0.isWith();
      node1.getChildCount();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      node0.addChildToBack(node0);
      node0.isFor();
      node0.setSourceFileForTesting("Va?iQ{'t374V<LCC~ ");
      Node node1 = node0.detachFromParent();
      node1.setChangeTime((-4850));
      jSType0.isBooleanObjectType();
      Node.mergeLineCharNo(262144, 57);
      node0.isAssign();
      node1.isTypeOf();
      node0.getDirectives();
      node1.isQuotedString();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-750), 83, 83);
      Node node1 = new Node((-750), node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      node0.isGetterDef();
      node3.addChildAfter(node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("*xkdSYoq_lc", false);
      node0.setLineno((-1));
      node_NodeMismatch0.equals(node0);
      node2.hasMoreThanOneChild();
      node0.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("}");
      Node node1 = Node.newString(63, "}", 114, 40);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("The existing child node of the parent should not be null.");
      node2.wasEmptyNode();
      node0.getProp(116);
      node1.putBooleanProp(38, true);
      node0.setWasEmptyNode(true);
      node0.addChildrenToBack(node1);
      node0.isEquivalentToTyped(node1);
      node0.setOptionalArg(true);
      node0.isGetterDef();
      node0.getBooleanProp(63);
      node1.getIntProp(1);
      node0.getSourcePosition();
      node1.hasMoreThanOneChild();
      node1.toStringTree();
      node0.isIf();
      node0.addChildToFront(node2);
      node2.setDouble(40);
      node1.isLabel();
      node2.getSourceOffset();
      Node node3 = node1.copyInformationFrom(node0);
      node3.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      node0.addChildToBack(node0);
      node0.isFor();
      node0.setSourceFileForTesting("Va?iQ{'t374V<LCC~ ");
      Node node1 = node0.detachFromParent();
      node1.setChangeTime((-4850));
      jSType0.isBooleanObjectType();
      Node.mergeLineCharNo(262144, 57);
      node0.isAssign();
      node1.isTypeOf();
      node0.getDirectives();
      node0.hasMoreThanOneChild();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 279, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node((-2681), node0, node0, node0);
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(36, 56, 1);
      Node node3 = Node.newString(4095, "Not declared as a type name");
      node2.useSourceInfoIfMissingFromForTree(node3);
      node2.getLength();
      node1.addChildToFront(node2);
      Node node4 = node1.copyInformationFrom(node0);
      node3.setLineno(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node5 = node4.clonePropsFrom(node3);
      Node node6 = node4.copyInformationFromForTree(node5);
      node6.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = new Node(52, node0);
      node1.isContinue();
      node1.isBlock();
      node1.srcref(node0);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-750), 83, 83);
      Node node1 = new Node((-750), node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node2.copyInformationFrom(node0);
      Node node3 = node2.cloneNode();
      node1.isQuotedString();
      node1.hasOneChild();
      node3.isGetElem();
      node3.setLength(152);
      node2.setSideEffectFlags(3526);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      // Undeclared exception!
      try { 
        node2.isCase();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -750
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(111, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      node1.isComma();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.setWasEmptyNode(true);
      node1.isGetterDef();
      Node node2 = new Node(2, 2745, 15);
      node2.addChildAfter(node1, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      String string0 = "#~l-NKB\"x9/uZI2@";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      int int0 = 115;
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      node0.getSourceOffset();
      Node node1 = new Node(105, node0);
      node1.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(46, (-1165), 49);
      node2.srcrefTree(node0);
      node0.isBlock();
      node0.srcref(node1);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      Node node0 = Node.newNumber((-1.0));
      node0.setLineno(0);
      node0.isQualifiedName();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.removeProp(12);
      Node node2 = Node.newNumber((double) 4095, 39, 4);
      node0.toString(true, true, true);
      node1.isCall();
      node2.isUnscopedQualifiedName();
      node0.setVarArgs(true);
      node2.isThrow();
      node0.isThis();
      node0.getIndexOfChild(node1);
      node0.getProp(53);
      node1.addChildrenToBack(node2);
      node0.isVoid();
      node1.useSourceInfoIfMissingFrom(node2);
      node2.setSourceEncodedPosition(8);
      node1.isFromExterns();
      node0.isEquivalentTo(node1);
      node1.getChildAtIndex(105);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DEC");
      Node node0 = Node.newString("");
      node0.isOnlyModifiesArgumentsCall();
      node0.isFromExterns();
      node0.setString("DEC");
      Node node1 = new Node(42, node0, node0, node0);
      node0.removeChild(node1);
      Node node2 = new Node(node0.IS_CONSTANT_NAME, node0, node0, node0);
      node0.removeChild(node2);
      node2.isAdd();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      Node node1 = Node.newNumber((double) 0);
      node0.addChildToFront(node1);
      node0.toStringTree();
      node0.setCharno(53);
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      Node node2 = node1.copyInformationFrom(node0);
      node2.setLineno(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.clonePropsFrom(node2);
      Node node3 = Node.newString((-613), "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.isNew();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newString("uJ");
      Node node1 = new Node(154, node0, node0, 46, (-361));
      node1.isOnlyModifiesArgumentsCall();
      node1.isFromExterns();
      node0.setString((String) null);
      int int0 = (-4172);
      Node node2 = new Node(int0, node1, node0, node0);
      int int1 = (-3898);
      int int2 = 100;
      Node node3 = new Node(int2);
      int int3 = (-2230);
      int int4 = 2249;
      Node node4 = null;
      try {
        node4 = new Node(int1, node3, node1, node1, int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      boolean boolean0 = false;
      node0.setIsSyntheticBlock(false);
      node0.addChildToBack(node0);
      node0.setSourceFileForTesting("Named type with empty name component");
      Node node1 = node0.detachFromParent();
      node1.setChangeTime((-4850));
      int int0 = Node.REFLECTED_OBJECT;
      node0.isAssign();
      jSType0.autobox();
      boolean boolean1 = true;
      boolean boolean2 = true;
      node0.appendStringTree((Appendable) null);
      node0.isEquivalentTo(node1, boolean0, boolean1, boolean2);
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node4.useSourceInfoFromForTree(node3);
      node_SideEffectFlags1.setMutatesThis();
      node0.setSourceEncodedPositionForTree(51);
      node4.isInstanceOf();
      node0.isOptionalArg();
      Node node5 = Node.newNumber(1365.8);
      Node node6 = Node.newNumber((double) 12);
      Node node7 = new Node(1238, node5, node6, node5, node0, 43, 32);
      node5.copyInformationFromForTree(node7);
      node5.checkTreeTypeAwareEqualsImpl(node3);
      node6.isObjectLit();
      node7.isCase();
      node5.getSourceOffset();
      node3.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.isVarArgs();
      node0.getIndexOfChild(node1);
      node0.isFunction();
      Node node2 = new Node(15);
      node2.isComma();
      node2.isAdd();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      node2.isGetterDef();
      Node node3 = Node.newString(" *");
      node1.addChildAfter(node3, node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node2);
      String string0 = "*xkdSYoq_lc";
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      node0.setCharno((-1113));
      node0.isLabelName();
      node0.toString();
      node0.setChangeTime((-1));
      Node.mergeLineCharNo(1, 41);
      Node.mergeLineCharNo(57, 132);
      node0.isFromExterns();
      Node node1 = new Node(49, node0, node0, node0);
      node0.useSourceInfoFrom(node1);
      node1.useSourceInfoIfMissingFrom(node0);
      Node node2 = new Node(5533, 1772, 57);
      node2.isThrow();
      node1.isTypeOf();
      node0.toStringTree();
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      Node node1 = Node.newNumber((double) 56);
      Node node2 = node0.copyInformationFrom(node1);
      node1.putBooleanProp(15, false);
      Node.extractLineno(30);
      node0.setLineno(103);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isNot();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      Node node1 = new Node(46, node0, node0, node0, 123, 798);
      node1.isDelProp();
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isArrayLit();
      node0.getSourceFileName();
      node0.isNull();
      Node node2 = node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node2.isNumber();
      node2.srcrefTree(node1);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber((-810.0816748270202));
      node0.detachChildren();
      Node node1 = new Node(100, node0);
      node1.isContinue();
      Node node2 = new Node(46, (-1165), 49);
      node0.isBlock();
      node0.srcref(node1);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber(1051.0919843189631, 48, 49);
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      jSTypeRegistry0.getType("Not declared as a constructor");
      node0.setJSType((JSType) null);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = new Node(49, node0, node0);
      node1.isAdd();
      node0.isCatch();
      node0.getSourcePosition();
      node1.isVar();
      node1.isObjectLit();
      node1.isVar();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = 2424;
      Node node0 = new Node(8233);
      Node node1 = new Node(2424, node0, node0, node0, node0, 15, 3067);
      Node node2 = node1.removeChildAfter(node0);
      node2.getChildBefore(node0);
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.siblings();
      node0.putProp(43, "ocGV,{V6c<");
      node0.getIntProp(43);
      Node node1 = new Node(node0.IS_NAMESPACE, node0, node0.IS_DISPATCHER, node0.SIDE_EFFECTS_ALL);
      // Undeclared exception!
      try { 
        node0.addChildToFront(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.isAnd();
      node0.getChildCount();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.US;
      locale0.getScript();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.isCast();
      node0.isGetProp();
      Node node1 = node0.getLastSibling();
      Node node2 = node0.cloneNode();
      node2.removeChildAfter(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
      try {
        node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 291, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node((-2712), node0, node0, node0);
      node1.isSwitch();
      Node node2 = new Node(36, 56, 1);
      node0.toString(false, false, true);
      node1.isObjectLit();
      node1.isCall();
      node0.isIf();
      node0.isThrow();
      node0.isThis();
      node0.getIndexOfChild(node2);
      node0.removeFirstChild();
      Node node3 = new Node(1, node1, node2);
      node1.mayMutateArguments();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(121);
      node0.isDebugger();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.getBooleanProp(4600);
      node0.isWith();
      node1.getChildCount();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber((double) 576, 83, 83);
      Node node1 = new Node(576, node0, node0, node0, node0, 52, 39);
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 1, 1642);
      Node node3 = new Node(43, node1, 48, (-1160));
      node1.isNot();
      Node node4 = new Node(49, node2);
      node4.isOr();
      node4.isThrow();
      node0.isThis();
      node0.getIndexOfChild(node1);
      node4.getProp(51);
      node1.addChildrenToBack(node4);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.SimpleSourceFile", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      String string0 = "=xM>8==n^";
      Node node5 = enumElementType1.getPropertyNode(string0);
      node5.useSourceInfoIfMissingFrom(node1);
      node4.setSourceEncodedPosition(node0.OPT_ARG_NAME);
      // Undeclared exception!
      try { 
        node5.isFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString("UO");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 51, 16777216);
      node2.isEquivalentTo(node0);
      Node node3 = new Node(52, node2);
      node2.isEquivalentTo(node3, false, false, false);
      node1.getIndexOfChild(node0);
      node3.isDec();
      node0.removeProp(8);
      MockFile.createTempFile("Not declared as a type name", "NULL");
      node0.isOptionalArg();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node2.getExistingIntProp(4);
      node4.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.getBooleanProp(4600);
      node0.isThis();
      node1.getIndexOfChild(node0);
      Node node2 = node1.removeFirstChild();
      node0.getChildCount();
      node1.getChildCount();
      node0.isLabel();
      node1.isGetterDef();
      node1.addChildBefore((Node) null, (Node) null);
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node1.getBooleanProp(1325);
      node2.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("The existing child node of the parent should not be null.", node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) enumType1;
      JSType.toMaybeTemplateType(jSTypeArray0[0]);
      jSTypeArray0[2] = (JSType) null;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.getChildCount();
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString(45, "");
      node0.siblings();
      node0.putProp((-1), "");
      node0.isFunction();
      Node node1 = new Node(1);
      node0.isWith();
      node1.isAdd();
      node1.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("ab4P NdV");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.isInc();
      node1.isNot();
      Node node2 = new Node(113, node0);
      node1.isOr();
      Node node3 = Node.newNumber((double) 48);
      node3.getDouble();
      Node.newString(274, "ddE{%I#(wFH]5");
      node3.getSourcePosition();
      node2.isWith();
      node0.getChildCount();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "'A^Bg^|S5';T");
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.isScript();
      node2.getBooleanProp(4095);
      node1.isThis();
      node0.getIndexOfChild(node1);
      node1.removeFirstChild();
      node0.getChildCount();
      node0.isEquivalentToTyped((Node) null);
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      Node node5 = Node.newString(39, "", 42, 1591);
      Node node6 = new Node(52, node5, 5, 55);
      node6.isGetElem();
      node4.srcref(node2);
      node3.removeChild(node5);
      int int0 = 89;
      int int1 = (-2404);
      Node node7 = Node.newNumber((double) node4.EMPTY_BLOCK, int0, int1);
      node7.getLength();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node2.isEquivalentTo(node3);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isString();
      Node node5 = node2.clonePropsFrom(node4);
      Node.newNumber((-2114.1492113), (-1726), 42);
      node5.isEquivalentTo(node2, true, false, true);
      node4.isComma();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(12288, 12288, 12288);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node0.isFunction();
      Node node2 = new Node(2048);
      node0.isComma();
      node1.isAdd();
      node0.isArrayLit();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Error");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.mayMutateArguments();
      Node node3 = new Node(40, 16, (-3349));
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node1.getBooleanProp(1325);
      node2.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      MockFile.createTempFile("de} +xS#i(&M&7", (String) null);
      node1.isOptionalArg();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getExistingIntProp(119);
      Node node4 = node0.useSourceInfoFromForTree(node1);
      Node.newNumber((double) node4.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(121);
      node0.isDebugger();
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("GI}");
      node0.setJSType((JSType) null);
      Node node1 = Node.newString(53, "Object#Element", 1, 49);
      node1.isGetElem();
      Node node2 = new Node(38, node0);
      node2.srcref(node1);
      node1.removeChild(node2);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(256, 256, 256);
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isTrue();
      node0.isArrayLit();
      Node node1 = new Node(40);
      Node node2 = node1.removeChildren();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ASSIGN");
      node0.checkTreeEquals(node1);
      boolean boolean0 = true;
      node0.setVarArgs(boolean0);
      node0.getString();
      node0.isScript();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 256
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.extractCharno(3535);
      String string0 = "free_call";
      Node node0 = Node.newString("free_call", 45, 45);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 2434;
      Node node1 = Node.newString(42, "free_call");
      Node node2 = new Node(32, node0, node1, node1, node1, 0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[Zr:|)[LM3o");
      Node node3 = Node.newString("free_call", 260, 130);
      Node.newString(113, "n^O7I#S;>gm5Ye");
      node0.addChildrenAfter(node2, node3);
      Node node4 = new Node(int0);
      boolean boolean0 = false;
      node0.getString();
      node4.setWasEmptyNode(boolean0);
      node0.setString(string0);
      Node node5 = node4.cloneTree();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Node node6 = node0.srcref(node4);
      node6.getProp(node4.NO_SIDE_EFFECTS);
      node5.getFirstChild();
      // Undeclared exception!
      try { 
        node4.isNull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.isInc();
      node1.isNot();
      Node node2 = new Node(113, node0);
      node1.isOr();
      Node.mergeLineCharNo(55, 36);
      Node.mergeLineCharNo((-3247), 83);
      node2.isFromExterns();
      Node node3 = node2.useSourceInfoFrom(node1);
      Node node4 = new Node(15, node3, node1, node1);
      node4.useSourceInfoIfMissingFrom(node1);
      int int0 = (-159);
      Node node5 = new Node(node4.MAX_COLUMN_NUMBER, int0, node4.LENGTH);
      node5.isThrow();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "ocGV,{V6c<";
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.siblings();
      Node node1 = new Node(46, node0, 47, 0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.isOnlyModifiesArgumentsCall();
      node2.setQuotedString();
      node0.getAncestor((-1002));
      boolean boolean0 = true;
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.isTypeOf();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      node0.isRegExp();
      node0.setCharno(43);
      node0.isLabelName();
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isHook();
      Node node1 = new Node(1960);
      Node node2 = new Node(12, node0, node1, 52, 2);
      node2.isGetterDef();
      node0.isIn();
      node2.addSuppression("Not declared as a type name");
      node1.hasChild(node2);
      node0.isIf();
      node1.isVoid();
      Node node3 = new Node(42, 1, 46);
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)47);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(30, node1);
      node1.setLineno(43);
      node2.isQualifiedName();
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.removeProp((-426));
      Node node4 = node2.copyInformationFrom(node3);
      Node node5 = Node.newString(1, "UO", (-1889), 12);
      Node node6 = node5.cloneNode();
      node2.isQuotedString();
      node3.hasOneChild();
      node6.isGetElem();
      node6.setLength(1);
      node4.setSideEffectFlags(2086);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getChildCount();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node2.isTypeOf();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.isString();
      node1.isGetProp();
      node0.hasChild(node1);
      node2.getString();
      Node.newString("");
      node2.removeFirstChild();
      node1.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = 12288;
      Node node0 = new Node(12288, 12288, 12288);
      int int1 = 1023;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      node0.putProp((-2851), node0);
      Node node1 = new Node(246, node0);
      node0.isContinue();
      node1.addChildBefore(nodeArray0[2], node0);
      nodeArray0[3].getSourceOffset();
      nodeArray0[3] = node1;
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(1539, 132, 132);
      node0.isBlock();
      node0.isNumber();
      node0.getSourceOffset();
      Node node1 = new Node(51, node0, node0, 44, 48);
      Node node2 = node1.getLastSibling();
      node1.isVar();
      node0.isCast();
      node2.isDefaultCase();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node1.getBooleanProp(4600);
      node0.isThis();
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isHook();
      Node node2 = new Node(21);
      Node node3 = new Node(936, node2, node2, node1, node2, 1, 3602);
      node3.isGetterDef();
      node0.isIn();
      node0.addSuppression("");
      node1.isIf();
      node1.isVoid();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("UO");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 51, 16777216);
      node2.isEquivalentTo(node0);
      Node node3 = new Node(40, node1);
      node3.mayMutateArguments();
      node1.getIndexOfChild(node0);
      node3.isDec();
      node0.removeProp(8);
      MockFile.createTempFile("Not declared as a type name", "NULL");
      node0.isOptionalArg();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node4.removeFirstChild();
      node1.addChildrenToBack(node4);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 279, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(36, 56, 1);
      Node node2 = Node.newString(4095, "Not declared as a type name");
      Node node3 = node0.copyInformationFrom(node0);
      node2.setLineno(55);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.clonePropsFrom(node2);
      node1.isNew();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = new Node(29, node0, node0, node0);
      node1.getBooleanProp(4600);
      node0.isThis();
      node1.getIndexOfChild(node0);
      Node node2 = node1.removeFirstChild();
      node0.getChildCount();
      node1.getChildCount();
      node0.isLabel();
      node1.isGetterDef();
      node1.addChildBefore(node2, node2);
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "4G93\"B4?#";
      Node node0 = Node.newString("4G93\"B4?#", (-723), 100);
      node0.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2333);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(103, nodeArray0, 103, (-2711));
      Node node1 = node0.cloneTree();
      node1.addSuppression("RangeError");
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toString();
      node0.setIsSyntheticBlock(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      Node node1 = Node.newNumber((double) 30);
      node1.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      templateTypeMapReplacer0.caseNumberType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeRegistry2.getNativeType(jSTypeNative0);
      templateTypeMapReplacer0.caseNumberType();
      Node node2 = jSTypeRegistry2.createParameters(jSTypeArray0);
      node2.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node1.getBooleanProp(1325);
      node2.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      Node node4 = new Node((-166), 48, 36);
      node0.isThrow();
      node1.isTypeOf();
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("UO");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unknownType0).isEmptyType();
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 51, 16777216);
      node2.isEquivalentTo(node0);
      Node node3 = new Node(40, node1);
      node3.mayMutateArguments();
      node1.getIndexOfChild(node0);
      node3.isDec();
      node2.getProp(153);
      node1.putProp(305, (Object) null);
      Node node4 = node0.useSourceInfoFrom(node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) unknownType0;
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node5.getDirectives();
      node5.getAncestors();
      node4.isExprResult();
      Node node6 = new Node(30, node2, 43, 4095);
      node5.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString("eOD>Q3->\"cH", 714, 714);
      Node node1 = new Node(103, node0, 87, 87);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isCase();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.setChangeTime(4184);
      Node.mergeLineCharNo(1077, 57);
      Node.mergeLineCharNo((-76), 1035);
      node1.isFromExterns();
      Node node2 = new Node(15, (-1649), 54);
      Node node3 = new Node(2882, node0, node2, node0);
      node2.useSourceInfoFrom(node1);
      Node node4 = node0.useSourceInfoIfMissingFrom(node1);
      Node node5 = new Node(46, 42, 32);
      node0.isThrow();
      node3.isTypeOf();
      node5.toStringTree();
      node4.addChildrenAfter(node3, node5);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node3.isEquivalentTo(node1, true, false, true);
      node4.setLineno((-861));
      node3.setSourceEncodedPositionForTree(1);
      node2.isInstanceOf();
      node1.isOptionalArg();
      Node.newNumber((double) 29);
      Node.newNumber(53.0);
      node1.getSourcePosition();
      node4.isVar();
      node3.isObjectLit();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      int int0 = (-1714);
      Node.mergeLineCharNo((-1714), (-2392));
      node0.isStringKey();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", (-2392), 13);
      node0.setVarArgs(false);
      node0.isThrow();
      node0.isThis();
      node1.getIndexOfChild(node0);
      node1.getProp(4095);
      node1.addChildrenToBack(node0);
      node0.isVoid();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isFromExterns();
      node2.isEquivalentTo((Node) null);
      node1.getChildAtIndex(int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString("UO");
      Node node1 = new Node(4, node0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      UnknownType unknownType1 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 51, 16777216);
      node2.isEquivalentTo(node0);
      Node node3 = new Node(40, node1);
      node3.mayMutateArguments();
      node1.getIndexOfChild(node0);
      node3.isDec();
      node0.getBooleanProp(48);
      node3.isWith();
      node0.getChildCount();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=ng");
      node3.isLabel();
      node1.isGetterDef();
      node1.isStringKey();
      node1.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ZS:DTGb`#n", "ZS:DTGb`#n", 279, (-1171));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = node0.getAncestor(0);
      node0.setSideEffectFlags(43);
      node0.getJSDocInfo();
      node0.isDelProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isWith();
      // Undeclared exception!
      try { 
        node0.getChildCount();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFalse();
      node0.isScript();
      node0.isTypeOf();
      Node node1 = Node.newString("#8m*ivNI)zHDFRe", 51, 2086);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(31, (-2032), 8);
      Node.newString((-1115), "]Vyog'XPRb- K<m");
      Node node3 = node2.copyInformationFrom(node1);
      node2.setLineno(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.clonePropsFrom(node3);
      node3.isNew();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(12288, 12288, 12288);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(246, node0);
      node0.setCharno(12);
      node0.isLabelName();
      node1.toString();
      int int0 = 55;
      int int1 = (-1081);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isDec();
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node4 = node0.cloneTree();
      node1.isCatch();
      node3.wasEmptyNode();
      node0.isWhile();
      node3.getBooleanProp(31);
      Node.newString("Pl#fnY?pxeAf=&T", 12, 12);
      node3.getChildBefore(node4);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(12288, 12288, 12288);
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo(51, 53);
      node0.isStringKey();
      Node node1 = Node.newString("71!qa Dekan-@|l", 53, 208949);
      node0.isTypeOf();
      node1.getJsDocBuilderForNode();
      node0.isSetterDef();
      node0.isNoSideEffectsCall();
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)47);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(30, node1);
      node1.setLineno(43);
      node2.isQualifiedName();
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.removeProp((-426));
      Node node4 = node2.copyInformationFrom(node3);
      Node node5 = Node.newString(1, "UO", (-1889), 12);
      Node node6 = node5.cloneNode();
      node2.isQuotedString();
      node3.hasOneChild();
      node6.isGetElem();
      node6.setLength(1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("UO", false);
      node0.setLineno(1582);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node6, node0);
      node_NodeMismatch0.equals(node5);
      node6.hasMoreThanOneChild();
      Node node7 = new Node(0, node0, 52, 4037);
      node4.useSourceInfoIfMissingFrom(node7);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(98, 34, 34);
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber(1051.0919843189631, 48, 49);
      node0.isDelProp();
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      jSTypeRegistry0.getType("Not declared as a constructor");
      node0.setJSType((JSType) null);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = new Node(49, node0, node0);
      node1.isAdd();
      node1.getChildBefore(node0);
      node0.isCatch();
      int int0 = node0.getSourcePosition();
      node1.isVar();
      node1.isVar();
      node1.removeChildAfter(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getType("Named type with empty name component");
      node0.setJSType((JSType) null);
      Node node1 = Node.newString(0, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 40, 39);
      node0.isGetElem();
      Node node2 = node0.srcref(node1);
      node1.removeChild(node0);
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-1), 0, 38);
      node1.copyInformationFrom(node0);
      Node node2 = node1.cloneNode();
      node2.isQuotedString();
      Node node3 = new Node(50, node1, node2, 15, 40);
      node3.hasOneChild();
      node2.setLength(3420);
      node3.setSideEffectFlags(4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      node0.isDelProp();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      Node.extractLineno(4);
      node0.setLineno(57);
      node0.setSourceEncodedPositionForTree(51);
      node4.isInstanceOf();
      node0.isOptionalArg();
      Node node5 = Node.newNumber(1365.8);
      Node node6 = Node.newNumber((double) 12);
      node0.getSourcePosition();
      node5.isVar();
      node0.isObjectLit();
      node6.isVar();
      node5.getSideEffectFlags();
      node5.isWhile();
      node0.replaceChild(node4, node3);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(123);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.US;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      int int1 = Node.LENGTH;
      Node node1 = new Node(49);
      node0.isFromExterns();
      node0.getSourceFileName();
      node1.isNull();
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node((-1055), 0, 0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isDec();
      Node node3 = new Node(38, node1, node2, node1);
      node0.wasEmptyNode();
      Node node4 = node0.cloneTree();
      node1.isCatch();
      node3.wasEmptyNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Wx('VPM</,r#U");
      node_FileLevelJsDocBuilder0.append("<mGvEpkuRDd-D9#R/y");
      node4.addChildrenAfter(node2, node2);
      node4.isOptionalArg();
      Node node5 = node3.useSourceInfoFromForTree(node3);
      node5.getExistingIntProp(node2.IS_NAMESPACE);
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      Node node1 = new Node(47, node0, node0, 2, 57);
      node0.setType(0);
      node1.siblings();
      int int0 = Node.DIRECT_EVAL;
      Node node2 = node0.srcref(node1);
      node2.isNoSideEffectsCall();
      node1.isOnlyModifiesArgumentsCall();
      Node node3 = new Node((-1656), node2, 51, 1692);
      node3.isGetElem();
      int int1 = 112;
      Node node4 = new Node(int1, node1);
      Node node5 = node3.srcref(node0);
      // Undeclared exception!
      try { 
        node5.removeChildAfter(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      Node node0 = new Node(116);
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.getBooleanProp(37);
      node1.isWith();
      Node node2 = Node.newString((String) null, 56, 4095);
      node2.getChildCount();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = node0.copyInformationFrom(node0);
      Node node2 = node0.cloneNode();
      node2.isQuotedString();
      Node node3 = new Node(50, node0, node2, 15, 51);
      node3.hasOneChild();
      node3.getChildCount();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = new Node(120, 1493, (-608));
      node0.isBlock();
      Node node2 = Node.newNumber((double) 40);
      node2.isWhile();
      Node node3 = node2.getLastSibling();
      node3.getBooleanProp(55);
      node2.isWith();
      Node node4 = new Node(50, node1, node3, node0, node0);
      node2.type = 29;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node2.putBooleanProp(125, false);
      node4.isFromExterns();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("n9YXRDajl&=", 1688, 102);
      node0.isName();
      node0.isInstanceOf();
      Node node1 = new Node(12, 12, 51);
      node1.setType(8);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(1543, 40, 57);
      Node node3 = Node.newString(16, "UO");
      node3.setLineno(370);
      node2.setSourceEncodedPositionForTree(53);
      node3.isInstanceOf();
      node0.isOptionalArg();
      Node node4 = Node.newNumber((double) 52);
      Node node5 = Node.newNumber((double) 0);
      node4.getSourcePosition();
      node1.isVar();
      node1.isObjectLit();
      node5.isVar();
      node0.getLastChild();
      Node.extractCharno((-1904));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      Node node1 = new Node(32, node0, node0, node0);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(30, (-599), 3767);
      Node node3 = Node.newString(1, "wj}");
      Node node4 = node3.copyInformationFrom(node0);
      node4.putBooleanProp(47, false);
      Node.extractLineno(104);
      node4.setLineno(12);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.copyInformationFromForTree(node4);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node5 = new Node(4095, 35, 4095);
      node1.isTypeOf();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      Node node1 = new Node(32, node0, node0, node0);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(30, (-599), 3767);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wj}");
      Node node3 = Node.newString(1, "wj}");
      Node node4 = node3.copyInformationFrom(node0);
      node4.isEquivalentToShallow(node0);
      node0.isNull();
      Node node5 = node2.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node5.isNumber();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/bcNN%<");
      node0.putIntProp(112, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node2.isTypeOf();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.isString();
      node1.isGetProp();
      node0.hasChild(node1);
      node2.getString();
      node0.getChildCount();
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isWhile();
      Node.mergeLineCharNo(53, 1282);
      node0.isEmpty();
      Node.newString("", 113, (-24));
      node0.isGetterDef();
      node0.getLength();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(56);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.US;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      int int1 = Node.LENGTH;
      Node node1 = new Node(31);
      node1.isFromExterns();
      node1.getSourceFileName();
      Node node2 = new Node(35);
      node2.isNull();
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node node3 = new Node(39, node0, (-1732), 47);
      node3.setSideEffectFlags(node_SideEffectFlags2);
      node3.getString();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      Node node1 = Node.newString("Ef", 115, 4095);
      node0.isInstanceOf();
      Node node2 = new Node(147, 12256, 37);
      node1.setType(115);
      node0.siblings();
      node2.getLength();
      Node node3 = node0.srcref(node1);
      node3.isNoSideEffectsCall();
      node3.isOnlyModifiesArgumentsCall();
      Node node4 = new Node(957, node1, (-570), 36);
      Node node5 = new Node(1693, node4);
      Node node6 = Node.newString(57, "Ef");
      node3.removeChild(node1);
      node3.addChildToBack(node4);
      node6.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      Node node1 = new Node(32, node0, node0, node0);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(30, (-599), 3767);
      Node node3 = Node.newString(1, "wj}");
      Node node4 = node3.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M}");
      node4.putBooleanProp(47, false);
      node3.addChildrenToFront(node4);
      node3.isNE();
      node4.isLabel();
      node4.getStaticSourceFile();
      node3.getAncestor(898);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionType((JSType) functionType1, jSTypeArray0);
      jSTypeArray0[0] = (JSType) functionType2;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSType jSType0 = jSTypeRegistry1.createFunctionTypeWithVarArgs((ObjectType) functionType2, (JSType) functionType0, (List<JSType>) stack0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildToBack((Node) null);
      node0.isFor();
      String string0 = "X6pP%N'@Gw";
      // Undeclared exception!
      try { 
        node1.setSourceFileForTesting(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.getIndexOfChild(node1);
      node0.isFunction();
      Node node2 = new Node(15);
      node2.isComma();
      node2.isAdd();
      node0.isArrayLit();
      node1.isRegExp();
      node2.setCharno(100);
      node2.toString(true, true, true);
      node2.isReturn();
      node2.isCall();
      Node node3 = Node.newString("");
      Node node4 = new Node(1, node3, 43, 21);
      node4.isEquivalentTo(node2, true, false, false);
      node2.isDec();
      node0.hasChild(node1);
      node1.isDebugger();
      node3.isNumber();
      node1.srcrefTree(node4);
      node4.getLength();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("t4{)?5_NyEj!h~o0[9", 113, 32);
      Node node1 = new Node(55, node0, node0, 16384, 4096);
      Node node2 = new Node((-1631), node1);
      nodeArray0[0] = node2;
      Node node3 = new Node((-1631), nodeArray0);
      Node node4 = node3.getLastSibling();
      node4.addChildrenToFront(node3);
      node0.isNE();
      node2.isLabel();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      node0.isScript();
      node0.isInc();
      node0.isNot();
      Node node1 = new Node(1134, node0);
      node0.isOr();
      node0.getDouble();
      String string0 = "ddE{%I#(w\\FH]5";
      Node node2 = Node.newString(node0.INFERRED_FUNCTION, string0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      Node node1 = new Node(32, node0, node0, node0);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(30, (-599), 3767);
      Node node3 = Node.newString(1, "wj}");
      Node node4 = node3.copyInformationFrom(node0);
      node4.putBooleanProp(47, false);
      node3.srcref(node2);
      Node.extractLineno(104);
      node4.setLineno(12);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node node5 = node1.copyInformationFromForTree(node4);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isNot();
      node5.copyInformationFrom(node3);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      node1.wasEmptyNode();
      node1.getBooleanProp(1325);
      node0.isExprResult();
      Node node2 = Node.newNumber(3092.755443);
      node2.getDouble();
      Node node3 = node1.cloneTree();
      node3.removeProp(51);
      Node.newString("vph{KvK22sLC':", 57, 56);
      node0.getChildBefore(node2);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node2.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.getStaticSourceFile();
      node0.isRegExp();
      node2.srcref(node0);
      node0.removeChild(node1);
      node2.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("t4{)?5_NyEj!h~o0[9", 113, 32);
      Node node1 = new Node(55, node0, node0, 16384, 4096);
      Node node2 = new Node((-1631), node1);
      nodeArray0[0] = node2;
      Node node3 = new Node((-1631), nodeArray0);
      Node node4 = node3.getLastSibling();
      node4.isEquivalentToTyped(node2);
      node4.addChildrenToFront(node3);
      node0.isNE();
      node2.isLabel();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      node0.isScript();
      node0.isInc();
      node0.isNot();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = new Node(12, node0, node0);
      node0.cloneTree();
      node1.setLineno(1507);
      node0.isAdd();
      node1.isCatch();
      node1.getSourcePosition();
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(2976, 2976, (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(55, "");
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      node0.isScript();
      node1.isInc();
      Node node2 = new Node(49, node0, node1, node1, node0, 115, 1793);
      node2.isNot();
      Node node3 = new Node(54, node0);
      node0.isOr();
      node2.getDouble();
      String string0 = "2S!/U=wy7<V<";
      Node node4 = Node.newString(node2.IS_NAMESPACE, string0);
      // Undeclared exception!
      try { 
        node3.addChildrenToFront(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1792));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString("CiGz", (-2988), (-923));
      Node node1 = new Node(111, node0, 31, 9);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      Node node0 = Node.newString("jsdoc_info");
      Node node1 = new Node(0, node0, node0, 331, 47);
      node1.setWasEmptyNode(false);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node2.useSourceInfoIfMissingFrom(node0);
      node1.getBooleanProp(1325);
      node2.isEquivalentTo(node2, false, false, false);
      Node node3 = Node.newNumber((double) 40);
      node0.getDouble();
      node2.copyInformationFrom(node1);
      node0.getDirectives();
      int int0 = 125;
      node0.setLineno(int0);
      // Undeclared exception!
      try { 
        node3.isNew();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(42, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      node1.wasEmptyNode();
      node1.getBooleanProp(1325);
      node0.isExprResult();
      Node.newNumber(3092.755443);
      node0.isFromExterns();
      Node node2 = Node.newNumber((double) 52, 39, 57);
      Node node3 = new Node(113, node0, node2, node0);
      node2.useSourceInfoFrom(node0);
      node1.useSourceInfoIfMissingFrom(node3);
      Node node4 = new Node(15, 16, 130);
      node2.isThrow();
      node1.isTypeOf();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = new Node(50);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.US;
      locale0.getScript();
      node0.isDefaultCase();
      int int1 = Node.LENGTH;
      Node node1 = new Node(4);
      node0.isFromExterns();
      node1.isNull();
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.setSideEffectFlags(node_SideEffectFlags1);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got RETURN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node((byte)116, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node2.getStaticSourceFile();
      node0.isRegExp();
      Node node3 = new Node(57, node2, node1, node1, 38, 31);
      Node node4 = node1.srcref(node3);
      node1.isEquivalentToTyped(node0);
      node0.useSourceInfoFromForTree(node3);
      node4.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-11), 1281, (-570));
      Node node1 = new Node(30, node0);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(16, 54, 57);
      node1.checkTreeEquals(node2);
      Node node4 = new Node(39, node0, node3, node3, node1);
      node4.isAssign();
      node1.getJSType();
      // Undeclared exception!
      try { 
        node0.isDefaultCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      node0.toString();
      node0.addChildToBack(node0);
      node0.isFor();
      node0.setSourceFileForTesting("Va?iQ{'t374V<LCC~ ");
      Node node1 = node0.detachFromParent();
      jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      node1.setChangeTime((-4850));
      Node.mergeLineCharNo(262144, 57);
      node0.isAssign();
      node1.isTypeOf();
      node0.getDirectives();
      node1.isQuotedString();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      node0.isAssignAdd();
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node((-461), node1, node0, node0, node1);
      Node node3 = new Node(42, node2, 302, 50);
      Node node4 = new Node(15, node3, node1, node0, node2, 50, 103);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      UnknownType unknownType0 = null;
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0, unknownType0, unknownType0, unknownType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>(immutableList0);
      node0.isRegExp();
      // Undeclared exception!
      try { 
        node3.setCharno(node4.IS_NAMESPACE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node((byte)44, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node0.copyInformationFrom(node2);
      node2.setLineno(1);
      node0.isNew();
      node2.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = new Node(126, (-3435), 1998);
      node1.isBlock();
      node1.isWhile();
      Node node2 = node1.getLastSibling();
      node2.getBooleanProp(9);
      node2.isEquivalentTo(node1, false, false, true);
      Node.newNumber(1.0);
      node0.getDouble();
      node1.copyInformationFrom(node0);
      int int0 = (-1554);
      node0.setLineno(int0);
      node2.isNew();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isBreak();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getStaticSourceFile();
      node0.isRegExp();
      Node node3 = node2.srcref(node0);
      node1.useSourceInfoFromForTree(node3);
      node0.removeChild(node1);
      node2.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-465), node0, 49, 694);
      node1.replaceChild(node0, node0);
      int int0 = (-512);
      node1.setChangeTime(int0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node1.getBooleanProp(1325);
      node2.isEquivalentTo(node2, false, false, false);
      Node node3 = Node.newNumber((double) 40);
      node2.copyInformationFrom(node1);
      node0.setLineno(125);
      node3.isNew();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node(43, node0, node0);
      node1.useSourceInfoFromForTree(node0);
      Node node2 = null;
      try {
        node2 = new Node(42, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-750), 83, 83);
      Node node1 = new Node((-750), node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node((-750), node1, node1);
      node0.toStringTree();
      node2.isComma();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.setWasEmptyNode(false);
      Node node4 = new Node(1445, 1, 718);
      Node.newString((-1045), "]Vyog'XPRb- K<m");
      Node node5 = Node.newNumber((double) 32);
      Node node6 = node1.copyInformationFrom(node5);
      node3.setLineno(98);
      node6.isNew();
      node6.isFunction();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      node1.getBooleanProp(1325);
      node1.isEquivalentTo(node1, false, false, false);
      Node node2 = Node.newNumber((double) 40);
      node1.copyInformationFrom(node1);
      node1.siblings();
      node0.setLineno(125);
      node2.isNew();
      node1.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)47;
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node((byte)85, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = new Node((byte)44, node1, node1);
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node0.copyInformationFrom(node2);
      node1.cloneNode();
      node3.setLineno(1);
      Node.newNumber(1.0);
      node1.mayMutateArguments();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      node0.isAssignAdd();
      Node node1 = Node.newNumber(0.0);
      node1.isBlock();
      node0.isWhile();
      Node node2 = node0.getLastSibling();
      node0.getBooleanProp(54);
      node2.isOr();
      Node node3 = Node.newNumber((double) 53);
      node3.getDouble();
      Node node4 = node1.copyInformationFrom(node3);
      node1.setLineno(3588);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.clonePropsFrom(node3);
      node4.isUnscopedQualifiedName();
      Node node5 = Node.newNumber((-2395.5));
      node5.isBreak();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<:0,R k7,");
      node0.getStaticSourceFile();
      node0.isTypeOf();
      node0.isCall();
      node0.setLineno(3588);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(93);
      node1.clonePropsFrom(node0);
      node0.isUnscopedQualifiedName();
      Node.newNumber((-1.0));
      Node node2 = new Node(3159, node0, 49, 51);
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("t4{)?5_NyEj!h~o0[9", 113, 32);
      Node node1 = new Node(55, node0, node0, 16384, 4096);
      Node node2 = new Node((-1631), node1);
      nodeArray0[0] = node2;
      Node node3 = new Node((-1631), nodeArray0);
      node2.isIn();
      node2.addSuppression("t4{)?5_NyEj!h~o0[9");
      int int0 = Node.COLUMN_BITS;
      node3.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)44);
      Node node1 = new Node(30, node0);
      node0.setLineno(43);
      node1.isQualifiedName();
      node0.isBlock();
      Node node2 = Node.newNumber((double) 30);
      node2.isWhile();
      Node node3 = new Node(0, node1, node1, node1, node2, 54, 16);
      node3.getBooleanProp(55);
      node1.isVarArgs();
      Node.newString("duplicate child", 906, 8);
      Node node4 = Node.newString(130, "");
      node1.useSourceInfoFrom(node2);
      node4.isDo();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(102, node0);
      Node node2 = node1.cloneNode();
      node0.isQuotedString();
      Node node3 = new Node(1, node0, node2, 117, 61);
      node1.hasOneChild();
      node3.getChildCount();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString(1023, "", 1023, 1023);
      node0.isAdd();
      node0.isAssign();
      node0.isLocalResultCall();
      Locale locale0 = new Locale("", "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isFalse();
      node0.isReturn();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(57, node0, node0, 4095, 1671);
      Node node2 = new Node(57, node0, node1, node1, node0, 31, 36);
      node2.getLength();
      node0.copyInformationFromForTree(node2);
      node2.isDo();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newNumber(1.0);
      node1.setSourceEncodedPositionForTree(4);
      Node node3 = new Node(36, node2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.hasChildren();
      node2.removeProp(8192);
      Node node4 = Node.newNumber((double) 47, 57, 50);
      node1.toString(false, true, true);
      node0.isCall();
      node1.isUnscopedQualifiedName();
      node1.setVarArgs(false);
      node2.isThrow();
      Node.newNumber((-2084.11593));
      node4.mayMutateArguments();
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString("??");
      Node node1 = new Node(16, 4095, 34);
      node1.isBlock();
      node0.isWhile();
      node0.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getBooleanProp(36);
      node2.isExprResult();
      Node node3 = Node.newNumber(1051.0919843189631);
      Node node4 = Node.newString(32, "Object#Key");
      Node node5 = new Node(153, node1);
      node5.copyInformationFrom(node0);
      node1.setLineno((-2402));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node6 = new Node(1, node0, node1, 31, 54);
      node6.clonePropsFrom(node4);
      node4.isNew();
      Node node7 = new Node(node0.REFLECTED_OBJECT, node2, node6, node3, node4, node6.SIDE_EFFECT_FLAGS, node6.DECR_FLAG);
      node7.isBreak();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "'A^Bg^|S5';T");
      Node node2 = Node.newString("t4{)?5_NyEj!h~>0[9", 4095, 2);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = new Node(49, node0, node1);
      Node node4 = Node.newNumber((double) 1, (-1626), 43);
      node4.setLineno(247);
      node2.isAdd();
      node4.isCatch();
      node2.getSourcePosition();
      node3.removeChildAfter(node0);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)44);
      Node node1 = new Node(30, node0);
      node0.setLineno(43);
      node1.isQualifiedName();
      node0.isBlock();
      Node node2 = Node.newNumber((double) 30);
      node2.isWhile();
      Node node3 = new Node(0, node1, node1, node1, node2, 54, 16);
      node3.getBooleanProp(55);
      node1.isVarArgs();
      node0.addChildAfter(node1, node1);
      String string0 = "duplicate child";
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-750), 83, 83);
      Node node1 = new Node((-750), node0, node0, node0, node0, 52, 98);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node1.setIsSyntheticBlock(false);
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append(":T9#L");
      Node node2 = Node.newNumber((double) 53);
      node0.checkTreeEquals(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType1 = jSTypeRegistry2.getNativeType(jSTypeNative0);
      JSType jSType2 = templateTypeMapReplacer0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType1;
      jSTypeArray0[1] = jSType2;
      jSTypeArray0[2] = jSType2;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getChildAtIndex(1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      Node.mergeLineCharNo((-1714), (-2392));
      node0.isStringKey();
      node0.getJsDocBuilderForNode();
      node0.isVoid();
      Node node1 = Node.newString("J]]1GDu8h'M1t9");
      node1.setSourceEncodedPosition(21);
      node0.isFromExterns();
      node1.addChildToBack(node0);
      node1.isEquivalentTo(node0);
      node1.getChildAtIndex(1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(4095, node0);
      Node node2 = new Node(1);
      node1.addChildBefore(node2, node0);
      node0.putIntProp(55, 37);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      Node node3 = Node.newString(49, "I9X#");
      nodeArray0[2] = node3;
      Node node4 = new Node(32, nodeArray0);
      int int0 = (-1555);
      int int1 = 147;
      Node node5 = new Node(int0, nodeArray0[0], int1, node3.JSDOC_INFO_PROP);
      // Undeclared exception!
      try { 
        node5.isNoSideEffectsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      int int0 = (-618);
      Node node1 = new Node(120, 1493, (-618));
      node0.isBlock();
      Node node2 = Node.newNumber((double) 40);
      node2.isWhile();
      Node node3 = node2.getLastSibling();
      node2.addChildToBack(node1);
      node1.copyInformationFrom(node3);
      node1.removeChild(node3);
      node1.children();
      Node node4 = node3.clonePropsFrom(node1);
      node3.isLabelName();
      // Undeclared exception!
      try { 
        node4.isParamList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = new Node(126, (-3435), 1998);
      node1.isBlock();
      node1.isWhile();
      Node node2 = node1.getLastSibling();
      node2.getBooleanProp(9);
      node2.isEquivalentTo(node1, false, false, true);
      node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = new Node(57, 43, (-171));
      node2.isThrow();
      Node node4 = Node.newString("\u0004I8I)");
      node4.isTypeOf();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isCast();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(43, node0);
      Node node2 = new Node(1956, 126, 1);
      Node node3 = Node.newString(55, "Object#Key");
      Node node4 = node1.copyInformationFrom(node3);
      node1.setLineno(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node4.clonePropsFrom(node3);
      node3.isUnscopedQualifiedName();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)44);
      node0.setLineno(43);
      node0.isQualifiedName();
      node0.isBlock();
      node0.isBlock();
      node0.setIsSyntheticBlock(false);
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      Node node1 = Node.newNumber((double) 31);
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      templateTypeMapReplacer0.caseNumberType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isSetterDef();
      node0.isGetElem();
      node1.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString(33, "ocGV,{V6c<");
      node0.isQualifiedName();
      double double0 = 1486.543899664133;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(123);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.US;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      Node node1 = new Node(49);
      Node node2 = node1.cloneTree();
      node1.addSuppression("");
      node2.isOnlyModifiesArgumentsCall();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(2322, 103, 1);
      Node node1 = new Node(42, 2, 130);
      node0.isBlock();
      node0.isWhile();
      node0.wasEmptyNode();
      node1.getBooleanProp(130);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isExprResult();
      Node.newNumber((double) 4095);
      Node.newString(36, (String) null);
      int int0 = 923;
      int int1 = (-2711);
      int int2 = 1775;
      Node node2 = new Node(int0, int1, int2);
      int int3 = 116;
      // Undeclared exception!
      try { 
        node2.setLineno(int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(516);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 516, 15, 0);
      node0.isSwitch();
      Node node1 = new Node(21, node0, node0, 16, 2988);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wj}");
      node1.putBooleanProp(1, true);
      node1.addChildrenToFront(node2);
      node2.isNE();
      node0.detachFromParent();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node(4, 1610, (-2981));
      node0.isWhile();
      Node node1 = new Node(102, 57, 3216);
      node0.isBlock();
      node0.isWhile();
      Node node2 = node1.getLastSibling();
      node1.getBooleanProp(42);
      Node node3 = Node.newNumber(0.5);
      Node node4 = new Node(4095, node3, node1, node0, node3);
      Node node5 = Node.newString("xCA`Zt1b]rv", (-4736), (-1816));
      node4.isEquivalentTo(node5, true, false, false);
      Node.newNumber(1118.3446776972328);
      node4.isParamList();
      Node.newString("");
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node(121);
      Node node1 = new Node(42, 30, 522);
      Node node2 = new Node(9, 152, 8);
      node2.isBlock();
      node2.isWhile();
      node0.wasEmptyNode();
      node1.getBooleanProp(48);
      Node node3 = Node.newString(1601, "UO", 49, 102);
      node3.isExprResult();
      Node.newNumber(1787.55246609);
      Node.newString(37, "UO");
      Node node4 = new Node(2, 43, 36);
      node2.setLineno(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node5 = node1.clonePropsFrom(node3);
      node5.isNew();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0, 2, 56);
      Node node2 = new Node(57, node1, node1, node0, node1, 0, 262144);
      Node node3 = node1.copyInformationFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node4 = node3.clonePropsFrom(node1);
      node2.isTry();
      node0.isEquivalentTo(node4);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node4.useSourceInfoIfMissingFrom(node0);
      node3.isEquivalentTo(node1, true, false, true);
      node4.setLineno((-861));
      node3.setSourceEncodedPositionForTree(1);
      node2.isInstanceOf();
      node1.isOptionalArg();
      Node.newNumber((double) 29);
      Node.newNumber(53.0);
      node1.getSourcePosition();
      node4.isVar();
      node3.isObjectLit();
      node3.isVar();
      node4.getAncestors();
      Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", (-648), 1030);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-11), (-11), (-570));
      Node node1 = new Node(15, node0, node0);
      Node node2 = new Node(39);
      node0.copyInformationFromForTree(node2);
      node1.checkTreeEquals(node2);
      node1.isLocalResultCall();
      int int0 = (-1061);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.isFunction();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node(4, node1, node1);
      node0.isComma();
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node2.setWasEmptyNode(false);
      node1.addChildAfter(node2, node3);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node2.setLineno(57);
      node_NodeMismatch0.equals(node1);
      node3.hasMoreThanOneChild();
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)44);
      Node node1 = new Node(30, node0);
      node0.getDirectives();
      node0.setLineno(43);
      node1.isQualifiedName();
      node0.isBlock();
      Node node2 = Node.newNumber((double) 30);
      node2.isWhile();
      Node node3 = new Node(0, node1, node1, node1, node2, 54, 16);
      node3.getBooleanProp(55);
      node1.isVarArgs();
      Node.newString("duplicate child", 906, 8);
      node0.addSuppression("duplicate child");
      node3.isOnlyModifiesArgumentsCall();
      node1.isCall();
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = new Node(123);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.US;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      Node node1 = new Node(49);
      node1.cloneTree();
      Node.newString(53, "");
      Node node2 = Node.newString("J{kPYLkf&Po2L8", 4754, 3884);
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(42, 48, (-852));
      node1.isBlock();
      node1.isWhile();
      node1.wasEmptyNode();
      node1.getBooleanProp(1325);
      node0.isExprResult();
      Node node2 = Node.newNumber(3092.755443);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("*xkdSYoq_lc", false);
      node2.setLineno(2);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node2);
      node_NodeMismatch1.equals(node1);
      node2.hasMoreThanOneChild();
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node3.getType();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString("`", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Object#Key");
      Node node1 = Node.newNumber((-475.0));
      node1.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isGetElem();
      int int0 = Node.COLUMN_BITS;
      node0.addSuppression("Object#Element");
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      Node node0 = Node.newString("is_constant_name", (int) (byte)44, (int) (byte)44);
      Node node1 = new Node(43, node0);
      node1.isName();
      node1.isInstanceOf();
      Node node2 = new Node(2919, 49, 47);
      node2.isSwitch();
      node0.getJsDocBuilderForNode();
      node1.isQuotedString();
      Node node3 = node0.cloneTree();
      Node node4 = new Node(29, node2, node3, 45, 1544);
      node4.hasOneChild();
      node3.isFunction();
      Node.extractCharno(4095);
      node2.isFalse();
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFalse();
      node0.isString();
      Node node1 = Node.newString("#8m*ivNI)zHDFRe", 51, 48);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(31, (-2032), 8);
      Node node3 = new Node(0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node3.setLineno(46);
      Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeEqualsImpl(node2);
      node_NodeMismatch1.equals((Object) null);
      node2.hasMoreThanOneChild();
      node2.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = new Node(126, (-3435), 1998);
      node1.isBlock();
      node1.isWhile();
      Node node2 = node1.getLastSibling();
      node2.getBooleanProp(16);
      node2.isEquivalentTo(node1, false, false, false);
      Node node3 = Node.newNumber(1.0);
      node1.setLineno(52);
      node0.isString();
      Node node4 = node2.clonePropsFrom(node1);
      node3.isEquivalentTo(node4, false, false, true);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.getBooleanProp((-1));
      node0.isExprResult();
      Node node1 = Node.newNumber(3092.755443);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = Node.newString("Object#Key", 305, 56);
      Node node3 = new Node(2, node0, node2, node1);
      node3.replaceChild(node2, node2);
      node2.replaceChild(node3, node0);
      double double0 = 562.23733591;
      node1.setDouble(double0);
      int int0 = 805;
      node1.getExistingIntProp(int0);
      // Undeclared exception!
      try { 
        node0.isLocalResultCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString(48, "duplicate child");
      Node node1 = Node.newString(2, "duplicate child");
      Node node2 = new Node(52, 190, 4);
      node1.setLineno(36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.clonePropsFrom(node0);
      node0.isNew();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = new Node(138, 138, 138);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isDec();
      Node node2 = new Node(118, node1, node0, node0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      node1.wasEmptyNode();
      node2.cloneTree();
      node2.isCatch();
      node2.wasEmptyNode();
      Node node3 = Node.newString(33, "DP3Tx", 54, 39);
      node3.isGetElem();
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(15, node0, node0, 4095, 4095);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M}");
      node2.cloneNode();
      node2.putBooleanProp(47, false);
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node0.setVarArgs(true);
      Node node3 = Node.newString("M}");
      node3.isThrow();
      Node.newNumber((double) 42);
      node0.mayMutateArguments();
      node3.isVar();
      node0.setString("M}");
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.isContinue();
      Node node1 = new Node(516, node0, node0, node0);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node3.getJsDocBuilderForNode();
      node3.isWith();
      node1.getChildCount();
      node1.isFunction();
      node4.getSourcePosition();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("C7/]|5", 37, 115);
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabelName();
      node0.isWith();
      node0.setSourceFileForTesting("C7/]|5");
      node0.getSideEffectFlags();
      Node node1 = new Node(155);
      node0.toString();
      node0.setIsSyntheticBlock(false);
      node1.setLineno((-676));
      node0.setString("q");
      Node node2 = node1.useSourceInfoFrom(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ObjectType objectType0 = null;
      JSType.toMaybeFunctionType((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, immutableList0);
      node2.putProp(node0.DIRECT_EVAL, templatizedType0);
      node1.toString();
      node0.replaceChild(node1, node1);
      node1.isNE();
      node1.addChildToBack(node0);
      Node node3 = node0.getLastSibling();
      node3.isBreak();
      int int0 = 563;
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = new Node(120, 1493, (-618));
      node0.isBlock();
      Node node2 = Node.newNumber((double) 40);
      node2.isWhile();
      node0.srcrefTree(node1);
      Node node3 = new Node(1493, node0, node0, 52, 32);
      boolean boolean0 = node3.getBooleanProp(55);
      node1.isVoid();
      node3.isSwitch();
      Node node4 = Node.newString((String) null, 2146, 3052);
      node2.type = node0.JSDOC_INFO_PROP;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      int int0 = 125;
      node2.putBooleanProp(int0, boolean0);
      node4.isFromExterns();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isTypeOf();
      node0.getStaticSourceFile();
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      node0.toString();
      Node node1 = new Node(85, node0, node0, 1752, 43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.addChildToBack(node1);
      node1.isFor();
      node0.setSourceFileForTesting("Unknown class name");
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.newString("Object#Key");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("", 37, 57);
      Node node1 = new Node(55, node0);
      node1.isIf();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("Object#Key");
      node_SideEffectFlags2.areAllFlagsSet();
      node0.getLineno();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      node0.isWith();
      node0.getChildCount();
      node0.isFunction();
      Node node1 = node0.cloneNode();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      Node.newNumber((-596.4314248229));
      node0.getDouble();
      String string0 = "gwM-G7gbdmqoDX";
      Node.newString(node2.FLAG_NO_THROWS, string0);
      int int0 = null;
      try {  
      int0 = Node.REFLECTED_OBJECT;
      } catch(UnsupportedOperationException e) {}
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.isAnd();
      node1.isQuotedString();
      Node node2 = node0.cloneTree();
      node0.isCatch();
      node1.wasEmptyNode();
      int int0 = Node.FREE_CALL;
      Node node3 = new Node(1361, 117, 113);
      node3.isFromExterns();
      node0.getSourceFileName();
      node2.isTry();
      Node node4 = node3.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node4.setSideEffectFlags(node_SideEffectFlags1);
      node0.isNumber();
      node0.isLabel();
      int int1 = (-29);
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1361
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = node0.getAncestor(0);
      node1.setSideEffectFlags(8287);
      node0.getJSDocInfo();
      node0.isDelProp();
      // Undeclared exception!
      try { 
        node0.isWith();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INC
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      int int0 = (-656);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-656), "UO");
      node0.isReturn();
      node0.setWasEmptyNode(true);
      node0.toStringTree();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      node0.cloneTree();
      node1.isCatch();
      boolean boolean0 = node3.wasEmptyNode();
      int int0 = Node.FREE_CALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.hasChildren();
      node3.removeProp(46);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node4 = new Node(49, 40, 29);
      node4.toString(false, false, false);
      node3.isCall();
      node3.isUnscopedQualifiedName();
      node3.setVarArgs(boolean0);
      node2.isThrow();
      Node.newNumber((double) node3.FLAG_NO_THROWS);
      node1.mayMutateArguments();
      node2.isVar();
      Node.extractLineno(node1.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1325);
      node1.isBreak();
      node0.removeProp(1325);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node2 = new Node(37, 281, 36);
      node0.toString(true, false, true);
      node2.isCall();
      node0.isUnscopedQualifiedName();
      node1.setVarArgs(false);
      node0.isThrow();
      Node node3 = Node.newNumber((double) 281);
      node3.mayMutateArguments();
      node2.isVar();
      Node.extractLineno(0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(15, node0, node0, 4095, 4095);
      Node node2 = node1.copyInformationFrom(node0);
      node2.setSourceEncodedPosition(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M}");
      node2.cloneNode();
      node2.putBooleanProp(47, false);
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node0.setVarArgs(true);
      Node node3 = Node.newString("M}");
      node3.isThrow();
      Node.newNumber((double) 42);
      node0.mayMutateArguments();
      node3.isVar();
      node0.setString("M}");
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = new Node(102);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.JAPAN;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      Node node1 = new Node(33);
      Node node2 = node1.cloneTree();
      node1.addSuppression("");
      node2.isOnlyModifiesArgumentsCall();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node3.isEquivalentTo(node1, true, false, true);
      node1.useSourceInfoIfMissingFromForTree(node4);
      node4.setLineno((-861));
      node3.setSourceEncodedPositionForTree(1);
      node2.isInstanceOf();
      node1.isOptionalArg();
      Node.newNumber((double) 29);
      Node.newNumber(53.0);
      node1.getSourcePosition();
      node4.isVar();
      node3.isObjectLit();
      node3.isVar();
      node1.setLineno(27);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(102);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.JAPAN;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      Node node1 = new Node(33);
      Node node2 = node1.cloneTree();
      node1.addSuppression("");
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node0);
      node1.hasMoreThanOneChild();
      Node node3 = new Node(52, node1, node0, node0);
      node0.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = new Node(781, node0, node0);
      node0.isQualifiedName();
      node0.isVar();
      Node node2 = node0.getLastSibling();
      Node node3 = Node.newString(3839, "me", 56, 1565);
      node3.isEquivalentTo(node2, false, false, true);
      node2.copyInformationFrom(node0);
      node2.addChildrenToBack(node3);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isArrayLit();
      node0.getJsDocBuilderForNode();
      node0.isWith();
      node0.getChildCount();
      node0.isFunction();
      Node node1 = node0.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(118, 1361, 57);
      Node node2 = Node.newString(50, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node3.isEquivalentTo(node1, true, false, true);
      node4.setLineno((-861));
      node3.setSourceEncodedPositionForTree(1);
      node2.isInstanceOf();
      node1.isOptionalArg();
      Node.newNumber((double) 29);
      node2.mayMutateArguments();
      node4.isVar();
      node3.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("bn");
      Node node1 = new Node(15, node0);
      Node node2 = new Node(47);
      node0.addChildrenAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      node0.isEquivalentTo(node0, false, false, false);
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.getChildCount();
      node0.getStaticSourceFile();
      node0.isOptionalArg();
      Node node1 = new Node(50, (-1420), 85);
      node0.isGetterDef();
      node0.isString();
      Node node2 = node0.clonePropsFrom(node1);
      node0.isEquivalentTo(node2, true, false, true);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(154, "com.google.common.collect.Iterators$11", 154, 147);
      Node node1 = new Node(154, node0, node0, 2008, 147);
      node0.isVarArgs();
      node1.cloneNode();
      Node.newNumber((double) 0, 1, 63);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.wasEmptyNode();
      node0.isTypeOf();
      node0.isWhile();
      node0.isCatch();
      node0.isQualifiedName();
      Node node1 = new Node(53, node0, node0, node0, node0, 15, 12);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.removeProp(51);
      Node node3 = new Node(113, node2, node1);
      node0.isCall();
      // Undeclared exception!
      try { 
        node1.isString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node((-1055), node0, node0);
      Node node2 = new Node(36, 50, 57);
      node1.isDec();
      Node node3 = new Node(38, node1, node2, node1);
      node1.removeChild(node0);
      node0.wasEmptyNode();
      Node node4 = node0.cloneTree();
      node1.isCatch();
      node3.wasEmptyNode();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("not a StringNode", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isWhile();
      Node.newNumber((double) 52);
      node4.mayMutateGlobalStateOrThrow();
      node2.getNext();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node1.getStaticSourceFile();
      node0.isOptionalArg();
      Node node3 = new Node(4180, 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node3.isGetterDef();
      node2.isVarArgs();
      node4.wasEmptyNode();
      node0.hasChild(node1);
      node3.getSourcePosition();
      node4.getString();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = new Node(83);
      node0.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = node0.getAncestor(0);
      node1.isEquivalentTo(node0, true, true, true);
      node1.setLineno(31);
      node1.setSourceEncodedPositionForTree(2494);
      node1.isInstanceOf();
      Node node2 = new Node(256, node0, node1, node0, node0, 16, (-609));
      node2.isOptionalArg();
      Node node3 = Node.newNumber(0.7);
      Node.newNumber((-1276.0317632718138));
      node3.getSourcePosition();
      node3.isVar();
      node2.isObjectLit();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = new Node(143, (-1), (-1));
      node0.isStringKey();
      node0.getJsDocBuilderForNode();
      node0.isVoid();
      Node node1 = Node.newString("side_effect_flags");
      node1.setSourceEncodedPosition(1);
      Node node2 = Node.newNumber((double) 16, (-1947), 48);
      node2.isFromExterns();
      node1.addChildToBack(node0);
      node0.isQualifiedName();
      node2.isEquivalentTo(node1);
      node1.getChildAtIndex((-956));
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1325);
      node1.isOr();
      Node node2 = Node.newNumber(3092.755443);
      node2.isString();
      node0.isGetProp();
      node1.hasChild(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.clonePropsFrom(node0);
      node0.isNew();
      Node node3 = Node.newString(49, (String) null);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node3.isEquivalentTo(node1, true, false, true);
      node4.setLineno((-861));
      node3.setSourceEncodedPositionForTree(1);
      node2.isInstanceOf();
      node1.useSourceInfoFrom(node3);
      node1.isOptionalArg();
      Node.newNumber((double) 29);
      Node.newNumber(53.0);
      node1.getSourcePosition();
      node4.isVar();
      node3.isObjectLit();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      Node node1 = new Node(4095, node0);
      Node node2 = new Node(1);
      node1.addChildBefore(node2, node0);
      node0.putIntProp(55, 49);
      Node node3 = new Node(43, 1, 56);
      Node node4 = Node.newString("yp=", 47, 4034);
      Node node5 = node3.useSourceInfoIfMissingFrom(node1);
      node4.setWasEmptyNode(false);
      node5.isNew();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = new Node(102);
      int int0 = Node.OPT_ARG_NAME;
      Locale locale0 = Locale.JAPAN;
      locale0.getScript();
      node0.isCast();
      node0.isDefaultCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(33);
      Node node2 = node1.cloneTree();
      node1.addSuppression("");
      node2.isOnlyModifiesArgumentsCall();
      node1.isCall();
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(112, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node0.removeProp(1133);
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node.extractLineno(57);
      node3.isEquivalentTo(node1, false, false, false);
      node4.setLineno((-861));
      node3.isEquivalentToTyped(node1);
      node2.mayMutateArguments();
      node2.isHook();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1325);
      node0.isAssignAdd();
      Node node2 = node1.getLastSibling();
      Node node3 = new Node((-1314), node0, 2, 40);
      node0.isRegExp();
      Node node4 = node2.srcref((Node) null);
      node4.removeChild(node3);
      node2.addChildToBack(node3);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isContinue();
      node0.isDelProp();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      int int0 = Node.INFERRED_FUNCTION;
      node0.setLineno(57);
      node4.isInstanceOf();
      node0.isOptionalArg();
      Node node5 = node4.detachFromParent();
      Node node6 = Node.newNumber(1365.8);
      Node node7 = Node.newNumber((double) 12);
      node7.replaceChild(node5, node6);
      node0.getSourcePosition();
      node6.isVar();
      node0.isObjectLit();
      node6.getSideEffectFlags();
      node6.isWhile();
      node0.replaceChild(node4, node3);
      // Undeclared exception!
      try { 
        node3.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      Node node1 = new Node(4095, node0);
      Node node2 = new Node(1);
      node1.addChildBefore(node2, node0);
      node0.putIntProp(55, 49);
      Node node3 = new Node(43, 1, 56);
      node0.isQuotedString();
      node3.cloneTree();
      Node node4 = new Node(37, node0, node3, 1412, 57);
      node1.hasOneChild();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node3;
      int int0 = 30;
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node2.isTypeOf();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.toStringTree();
      // Undeclared exception!
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      node0.putIntProp(132, 132);
      Node node1 = new Node(44, 21, 32);
      Node node2 = Node.newString("yp=", 4, 12);
      node1.copyInformationFrom(node2);
      Node node3 = new Node(0);
      node3.setLineno(2);
      node2.isNew();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) null, jSTypeArray0);
      Vector<JSType> vector0 = new Vector<JSType>();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) vector0);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) functionType1, "q-)v,G}@xb; WZ", ",_M", 31, (-342));
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node1 = Node.newString("*5n1J?Xf]M$0i6-C[");
      Node node2 = Node.newNumber(1844.65063);
      Node node3 = new Node(1048576, node0);
      node2.setLineno(1);
      node2.isQualifiedName();
      node3.copyInformationFromForTree(node0);
      node3.removeProp((-1151));
      Node node4 = new Node(Integer.MIN_VALUE, node1, node2);
      node4.isCall();
      node0.isUnscopedQualifiedName();
      node1.getStaticSourceFile();
      node2.isRegExp();
      node4.removeChild(node1);
      node0.addChildToBack(node1);
      node4.isRegExp();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isDec();
      Node node2 = new Node(135, node1, node0, node0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      byte[] byteArray0 = new byte[4];
      node0.srcrefTree(node2);
      node2.getStaticSourceFile();
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      nodeArray0[3] = node1;
      Node node3 = new Node(50, nodeArray0);
      node3.wasEmptyNode();
      nodeArray0[3].isReturn();
      node1.isCall();
      node3.isTypeOf();
      nodeArray0[3].isSetterDef();
      node2.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isInc();
      node0.isString();
      Node node1 = Node.newString("#8m*ivNI)zHDFRe", 51, 48);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(31, (-2032), 8);
      Node.newString("]Vyog'XPRb- K<m", 42, 39);
      Node node3 = node2.cloneTree();
      node0.isString();
      node3.clonePropsFrom(node1);
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.isEquivalentTo(node0, false, false, false);
      node1.isOr();
      Node node2 = Node.newNumber(3092.755443);
      node2.isString();
      node2.isGetProp();
      node1.hasChild(node0);
      node0.getString();
      node0.getChildCount();
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "'A^Bg^|S5';T");
      Node node2 = Node.newString("t4{)?5_NyEj!h~>0[9", 4095, 2);
      Node node3 = new Node(49, node0, node1);
      Node node4 = Node.newNumber((double) 1, (-1626), 43);
      node4.setLineno(247);
      node2.isAdd();
      node4.isCatch();
      Node.newString("t4{)?5_NyEj!h~>0[9");
      node3.srcref(node4);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node1.getStaticSourceFile();
      node0.isOptionalArg();
      Node node3 = new Node(4180, 2, 16);
      Node node4 = node2.useSourceInfoFrom(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node5 = new Node(105, node3, node3, 4095, 50);
      node0.isGetterDef();
      node2.isVarArgs();
      node3.wasEmptyNode();
      Node.newString("gt");
      node2.hasChild(node0);
      node5.getSourcePosition();
      node5.getString();
      node4.children();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFalse();
      node0.isString();
      node0.getStaticSourceFile();
      node0.toString();
      Node node1 = new Node((-1064), node0, node0, 1558, 2545);
      node0.addChildToBack(node1);
      node1.isFor();
      node1.setSourceFileForTesting("first new child has existing parent");
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      Node node1 = Node.newString(42, "node is not a child");
      node1.isQualifiedName();
      Node node2 = Node.newNumber((double) 47);
      node1.hasChildren();
      node2.isGetterDef();
      node1.getSourceOffset();
      node2.addChildrenToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isAssign();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node0.isOptionalArg();
      Node node3 = new Node(49, 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node3.isGetterDef();
      node2.isVarArgs();
      node4.wasEmptyNode();
      node0.hasChild(node1);
      node4.isIf();
      node2.getDirectives();
      node2.isQuotedString();
      node3.cloneNode();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("`", 0, 0);
      Node node1 = new Node((-1146), node0, node0);
      Node node2 = node0.cloneTree();
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.checkTreeEquals(node2);
      node0.isGetterDef();
      node1.getSourceOffset();
      // Undeclared exception!
      try { 
        node3.addChildrenToFront(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      node0.isEquivalentTo(node0, false, false, false);
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.getChildCount();
      node0.getStaticSourceFile();
      node0.isOptionalArg();
      Node node1 = Node.newString(1, "");
      node0.useSourceInfoFromForTree(node1);
      Node node2 = new Node(50, (-1420), 85);
      node0.putIntProp((-903), 149);
      node0.isGetterDef();
      node2.isIn();
      node0.isParamList();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = new Node(4387, 46, 149);
      Node node1 = new Node(57, 1380, (-587));
      node0.isEmpty();
      Node node2 = new Node(46, node0, node1);
      node1.isWhile();
      Node node3 = node0.getLastSibling();
      node0.getBooleanProp(43);
      node3.getSideEffectFlags();
      Node node4 = new Node(49, node3);
      node4.isWith();
      String string0 = null;
      int int0 = 30;
      Node.newString(string0, int0, node3.FLAG_GLOBAL_STATE_UNMODIFIED);
      node2.isParamList();
      node3.getDouble();
      // Undeclared exception!
      try { 
        node4.isArrayLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node1.getStaticSourceFile();
      node0.isOptionalArg();
      Node node3 = new Node(4180, 2, 16);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node2.setLineno(55);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      InputId inputId0 = new InputId("spk");
      node_NodeMismatch0.equals(inputId0);
      node0.hasMoreThanOneChild();
      Node node4 = Node.newString((-2250), "side_effect_flags");
      node4.useSourceInfoIfMissingFrom((Node) null);
      node1.isLabelName();
      node3.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) hashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(302, node0, node1, node0, 888, 12);
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node1.getStaticSourceFile();
      node1.isOptionalArg();
      Node node3 = new Node(48, 105, 44);
      node3.isGetterDef();
      node0.isIn();
      node3.isParamList();
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node0.isEmpty();
      Node node1 = new Node(47, 45, 51);
      node1.useSourceInfoFrom(node0);
      node0.isEquivalentToTyped(node1);
      node0.removeChild(node1);
      int int1 = 54;
      node0.setLineno(int1);
      node0.isNew();
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isContinue();
      node0.isDelProp();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(516, node0, node0, node0);
      node1.isSwitch();
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 757, 54);
      Node node3 = Node.newString(38, "0uph");
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, true);
      int int0 = Node.INFERRED_FUNCTION;
      node0.setLineno(57);
      node4.isInstanceOf();
      node0.isOptionalArg();
      Node node5 = Node.newNumber(1365.8);
      Node.newNumber((double) 12);
      node0.getSourcePosition();
      node4.setStaticSourceFile(simpleSourceFile0);
      node5.isVar();
      node0.isObjectLit();
      node5.getSideEffectFlags();
      node5.isWhile();
      node0.replaceChild(node4, node3);
      node4.getAncestors();
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 34, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(15, node0, node0, 4095, 4095);
      node0.isOnlyModifiesThisCall();
      node0.putBooleanProp(47, false);
      node1.isNE();
      node0.hasOneChild();
      Node node2 = node1.srcref(node0);
      node2.addChildrenAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newString(102, "Qn9YXRD,jl&=");
      node0.isSwitch();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl((Node) null);
      node_NodeMismatch0.equals(node0);
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      JSType.toMaybeTemplatizedType((JSType) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getAncestor(0);
      node0.setSideEffectFlags(46);
      JSTypeRegistry jSTypeRegistry1 = null;
      try {
        jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got WHILE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(16);
      Node node2 = node1.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
      node2.removeProp((-1966));
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.setIsSyntheticBlock(true);
      node2.wasEmptyNode();
      Node node4 = node2.cloneTree();
      node4.isCatch();
      boolean boolean0 = node3.wasEmptyNode();
      node1.isWhile();
      node4.getBooleanProp(47);
      node0.getChildBefore(node4);
      int int0 = 1562;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(37, 43, 37);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1062);
      node1.isOr();
      Node node2 = Node.newNumber((-2321.8));
      node1.isString();
      node0.isGetProp();
      node1.hasChild(node2);
      node1.getString();
      node1.getChildCount();
      node1.isCase();
      node0.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(83);
      node0.removeProp(63);
      node0.toStringTree();
      Node node1 = new Node(147, node0, 49, 50);
      node0.isEquivalentTo(node1, true, false, true);
      node1.isDefaultCase();
      node1.isQualifiedName();
      node1.getChildCount();
      node1.getStaticSourceFile();
      node0.isOptionalArg();
      Node node2 = new Node(83, 38, 2);
      node1.isGetterDef();
      node0.isIn();
      node0.isParamList();
      node2.getDouble();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node1.isNoSideEffectsCall();
      node0.getBooleanProp(1325);
      node0.isAssignAdd();
      Node node2 = node1.getLastSibling();
      Node node3 = new Node((-1314), node0, 2, 40);
      node1.addChildrenToFront(node3);
      node0.isNE();
      node1.isDo();
      node3.checkTreeEqualsImpl(node2);
      node3.isVoid();
      node2.getLastChild();
      node1.checkTreeEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      int int0 = (-57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(52);
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node1.setInputId((InputId) null);
      node0.detachFromParent();
      Node node2 = new Node(int0, node0, node0, node0);
      int int1 = 13;
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(55, node0);
      node0.setSourceEncodedPosition(36);
      Node node2 = new Node(8);
      node2.addChildrenAfter((Node) null, (Node) null);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isWhile();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isOr();
      node1.toString();
      node1.addChildToBack(node0);
      node0.isFor();
      node0.setSourceFileForTesting("@9");
      Node node2 = node1.detachFromParent();
      node0.isOptionalArg();
      node2.toStringTree();
      node0.setSourceFileForTesting("UO");
      node0.setString("WHILE 113 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003]\n");
      node2.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = new Node(160, 63, 63);
      Node node1 = new Node(63, node0, node0, node0, node0);
      node1.isRegExp();
      node1.setCharno(48);
      node0.isLabelName();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isArrayLit();
      node0.isGetElem();
      node1.getChildCount();
      node0.isFunction();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node0.isOptionalArg();
      Node node3 = new Node(49, 2, 16);
      node2.copyInformationFromForTree(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node3.isGetterDef();
      node2.isVarArgs();
      node4.wasEmptyNode();
      node0.hasChild(node1);
      node4.isIf();
      node2.getDirectives();
      node2.isQuotedString();
      node3.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = new Node(143, (-1), (-1));
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(4095, node0, node0, (-4115), 1);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isOnlyModifiesThisCall();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(".", false);
      node0.setLineno(31);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
      node1.getInputId();
      node_NodeMismatch0.equals((Object) null);
      node2.hasMoreThanOneChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("UZ,?u", node2, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      String string0 = "com.google.javascript.rhino.jstype.SimpleSourceFile";
      Node node3 = enumElementType0.getPropertyNode(string0);
      node2.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isContinue();
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      int int0 = Node.FREE_CALL;
      node0.isFromExterns();
      node0.getSourceFileName();
      node0.isTry();
      node0.getStaticSourceFile();
      Node node1 = new Node(148, node0, node0, node0, node0, 2, 1);
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isWhile();
      node0.useSourceInfoFromForTree(node0);
      node0.isOr();
      Node node1 = Node.newString("UO");
      Node node2 = new Node(118, node1);
      Node node3 = new Node(38, node0, 98, 31);
      node1.getDirectives();
      node2.isQuotedString();
      node3.cloneNode();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      Node node1 = Node.newNumber((double) 53);
      Node node2 = node0.copyInformationFrom(node1);
      Node.extractLineno((-43));
      node2.setLineno(4);
      node1.isString();
      node0.clonePropsFrom(node1);
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(95);
      node0.isLocalResultCall();
      node0.removeProp(95);
      node0.addChildrenToFront((Node) null);
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(47);
      node0.isLocalResultCall();
      node0.removeProp(47);
      Node node1 = node0.cloneNode();
      node0.getSourceOffset();
      node0.addChildrenToFront(node1);
      node1.isAssign();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 34);
      node0.isSwitch();
      Node node1 = node0.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M}");
      node1.isCall();
      node1.isUnscopedQualifiedName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = new Node(56);
      Node node3 = new Node(16, node2, node0, 51, 4095);
      node0.isGetterDef();
      node2.isVarArgs();
      node1.wasEmptyNode();
      node0.hasChild(node2);
      node1.isIf();
      node3.getDirectives();
      node0.isQuotedString();
      node2.cloneNode();
      node3.getChildBefore(node1);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(37);
      JSType.toMaybeTemplatizedType((JSType) null);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(52, 37, 33);
      Node node3 = node1.clonePropsFrom(node0);
      node3.isTry();
      node1.isEquivalentTo(node2);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      Node.mergeLineCharNo((-1), 57);
      node0.isDelProp();
      node0.isRegExp();
      Node node1 = new Node(105, 1361, 57);
      Node node2 = Node.newString(63, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      Node node3 = Node.newString(54, "com.google.javascript.rhino.jstype.SimpleSourceFile");
      node3.addChildToFront(node1);
      Node node4 = node1.copyInformationFrom(node0);
      node3.putBooleanProp(2882, true);
      Node node5 = new Node(63, 0, 57);
      Node node6 = node1.clonePropsFrom(node0);
      node4.isTry();
      node0.isEquivalentTo(node6);
      node2.isVoid();
      node6.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(52);
      node0.getBooleanProp(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = node0.getAncestor(0);
      node0.setSideEffectFlags(43);
      node1.isIf();
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INSTANCEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node((byte)116, node0);
      node0.setLineno(0);
      node1.isQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp(12);
      Node node3 = new Node((byte)44, node1, node1);
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node3.getStaticSourceFile();
      node1.isEquivalentTo(node2, true, true, true);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(57, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node2.isTypeOf();
      node1.getProp(33);
      Node node3 = node2.copyInformationFrom(node0);
      node2.setLineno(53);
      node1.isNew();
      node3.getDouble();
      node3.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(25);
      node0.isComma();
      Node node1 = new Node(2);
      node0.isEquivalentTo(node1);
      Node node2 = Node.newString("var_args_name", 38, 51);
      node2.isArrayLit();
      Node node3 = new Node(120, node0, node0, node2, 37, 53);
      Node node4 = node3.removeChildren();
      node4.isWhile();
      node2.getBooleanProp(512);
      node2.isGetterDef();
      node1.isObjectLit();
      node2.isSetterDef();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(37, 43, 37);
      node0.isBlock();
      node0.isScript();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1062);
      node1.isOr();
      Node node2 = Node.newNumber((-2321.8));
      node1.isNull();
      node1.isFromExterns();
      node0.isEquivalentToTyped(node1);
      node1.isWhile();
      node1.addChildrenAfter(node0, node2);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 308);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isThis();
      node1.isDefaultCase();
      node0.isQualifiedName();
      node2.getChildCount();
      Node node3 = new Node(49, 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node3.isGetterDef();
      node2.isVarArgs();
      node4.wasEmptyNode();
      node0.hasChild(node1);
      node4.isIf();
      node2.getDirectives();
      node2.isQuotedString();
      Node node5 = node4.cloneNode();
      node5.isBlock();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node(16, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(38, node1, node2, node1);
      node3.isLocalResultCall();
      node0.cloneTree();
      node1.isCatch();
      node1.wasEmptyNode();
      int int0 = Node.FREE_CALL;
      node3.isFromExterns();
      node3.getSourceFileName();
      node2.getSourceFileName();
      node1.isTry();
      node3.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1891);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.getType();
      // Undeclared exception!
      try { 
        node0.isFunction();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1316);
      node1.isNew();
      Node node2 = node1.getLastSibling();
      Node node3 = new Node((-1314), node0, 2, 40);
      node1.addChildrenToFront(node3);
      node0.isNE();
      node1.isDo();
      node3.checkTreeEqualsImpl(node2);
      node3.isVoid();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = new Node(37, 43, 37);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1062);
      node1.isOr();
      Node node2 = new Node(52, node1, node0);
      node2.toStringTree();
      node0.isComma();
      Node node3 = node1.copyInformationFrom(node0);
      node0.setLineno(551);
      node1.addChildrenAfter(node2, node3);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, 57, 1);
      Node node2 = node1.copyInformationFrom(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(".", false);
      node2.addChildrenToFront(node1);
      node0.isNE();
      node2.getAncestor(55);
      node0.isLabel();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      Node node1 = new Node(0, node0, (-401), 39);
      node0.isGetElem();
      Node node2 = node0.srcref(node1);
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.removeChild(node2);
      node2.isGetterDef();
      int int0 = 23;
      // Undeclared exception!
      try { 
        node0.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      Node node1 = new Node(1, node0, 56, (-1555));
      Node node2 = node0.useSourceInfoFromForTree(node0);
      int int0 = 2175;
      Node node3 = new Node(49, node1, node0, node2);
      Node node4 = new Node(int0, node3, node3, node0);
      node0.isLocalResultCall();
      node4.cloneTree();
      // Undeclared exception!
      try { 
        node3.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 42, 42);
      Node node1 = new Node(42, node0, 76, 2);
      node0.isGetElem();
      Node node2 = node0.srcref(node1);
      node2.toString(true, false, true);
      node2.putBooleanProp(48, false);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(57, node0);
      node0.isFunction();
      Node node2 = new Node(15);
      Node node3 = new Node(40, node2, node2);
      node2.isAdd();
      node3.isCatch();
      node1.isEquivalentToTyped(node2);
      node0.setLineno(39);
      node3.clonePropsFrom(node0);
      node3.isEquivalentTo(node0, false, true, true);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      node0.isWith();
      Node node1 = new Node(126, (-3420), 1998);
      node0.addChildrenToFront(node1);
      Node node2 = new Node((-2134), node0, node0, node0);
      node2.isQualifiedName();
      node1.copyInformationFromForTree(node2);
      Node node3 = Node.newString("UO", 4, 47);
      node3.removeProp(16);
      Node node4 = new Node(42, node3, node2);
      node3.isCall();
      node4.isUnscopedQualifiedName();
      node0.getStaticSourceFile();
      node2.isRegExp();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newNumber((-1.0), 1361, 16500);
      node0.getProp(1361);
      node0.isCase();
      node0.addChildAfter((Node) null, (Node) null);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-1055), 0);
      Node node1 = new Node(55, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getAncestors();
      node0.getIndexOfChild(node2);
      node1.children();
      node1.isNull();
      Node node3 = node2.detachFromParent();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("C4WP98'4[8B!na");
      node1.setJSType((JSType) null);
      node0.isRegExp();
      node3.setCharno(50);
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(120, 202, 1610612736);
      Node node1 = Node.newString(1036, "NO_KEY_MATCH", 1073741824, 2);
      node0.useSourceInfoFrom(node1);
      Node node2 = node1.cloneTree();
      node2.getJsDocBuilderForNode();
      node0.setVarArgs(false);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.getAncestors();
      node1.getInputId();
      Node node3 = node0.copyInformationFromForTree(node1);
      node3.isOnlyModifiesThisCall();
      node3.putBooleanProp(8, false);
      Node.newString(49, "NO_KEY_MATCH", 47, 55);
      node0.getString();
      node1.getJsDocBuilderForNode();
      node3.isObjectLit();
      node0.removeFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = null;
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(objectType0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isScript();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(1325);
      node1.isBreak();
      node0.setSourceEncodedPosition(147);
      node1.getStaticSourceFile();
      node0.isSwitch();
      Node node2 = node0.copyInformationFrom(node1);
      node0.isEquivalentToTyped(node2);
      node2.getChangeTime();
      node2.isHook();
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = Node.newString(100, "'A^Bg^|S5';T");
      Node node1 = Node.newNumber((double) 0);
      node1.getDouble();
      node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(false);
      node1.getIntProp(48);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(31, (-2032), 8);
      node1.addChildToBack(node0);
      node0.isFor();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      Node node1 = node0.cloneNode();
      node1.setSourceEncodedPosition(50);
      node1.getStaticSourceFile();
      node0.isSwitch();
      node1.copyInformationFrom(node0);
      node0.isSetterDef();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 43, 43);
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = node0.cloneNode();
      node0.isGetterDef();
      node1.getSourceOffset();
      Node node2 = new Node(37, 46, 8199);
      Node node3 = node2.copyInformationFromForTree(node1);
      node1.checkTreeEquals(node0);
      node2.isGetterDef();
      node2.addChildrenToFront(node1);
      node3.isAssign();
      node3.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, 57, 1);
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = node1.copyInformationFrom(node0);
      node3.addChildrenToFront(node1);
      node0.isNE();
      node3.getAncestor(55);
      Node node4 = node2.getNext();
      node0.replaceChild(node4, node4);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString("=#go=[.K9)?", 83, 83);
      Node node1 = new Node(40, node0, 42, 29);
      node0.isGetElem();
      Node node2 = node1.srcref(node0);
      node0.removeChild(node1);
      node1.isGetterDef();
      int int0 = 827;
      // Undeclared exception!
      try { 
        node2.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newString("`", 8, 8);
      Node node1 = new Node((-1146), node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.checkTreeEquals(node2);
      node0.isGetterDef();
      node3.addChildrenToFront(node2);
      node2.isAssign();
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      node0.getJsDocBuilderForNode();
      node0.clonePropsFrom(node0);
      Node node1 = node0.copyInformationFrom(node0);
      node1.addChildrenToFront(node0);
      node0.isNE();
      node1.getAncestor(55);
      node0.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newString("Dij4s");
      node0.isString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(39, 31, 33);
      Node node2 = Node.newString("]Vyog'XPRb- K<m", 15, 120);
      Node node3 = node1.copyInformationFrom(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.setLineno((-989));
      node2.isNew();
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = new Node(132, (-1), (-1));
      node0.isWhile();
      Node node1 = Node.newNumber((double) 55, (-2902), 15);
      Node node2 = new Node(39, node1, node1, node1, node1);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isDefaultCase();
      node0.isQualifiedName();
      node1.isAnd();
      node2.getChildCount();
      node0.isOptionalArg();
      Node node3 = new Node(4180, 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node2.srcref(node4);
      node0.addChildrenAfter(node2, node3);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      node0.isCase();
      node0.isDefaultCase();
      node0.isQualifiedName();
      Node node1 = node0.getLastSibling();
      node0.addChildrenToFront(node1);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isNE();
      node1.isDo();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(57, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node1.getProp(33);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.isString();
      node1.isGetProp();
      node0.hasChild(node1);
      node0.putBooleanProp(12, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '$';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      charArray0[4] = '\\';
      charArray0[5] = '-';
      charArray0[6] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      node0.appendStringTree(charBuffer0);
      node2.getString();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node0.putProp(43, "ocGV,{V6c<");
      node0.addChildToFront(node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.setQuotedString();
      node0.toString(false, false, true);
      node0.isDebugger();
      node0.removeProp(43);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(85);
      node0.removeProp(85);
      node0.isDefaultCase();
      node0.children();
      Node node1 = Node.newString(52, "Object#Key");
      node1.getBooleanProp(37);
      node0.useSourceInfoFrom(node1);
      node1.isNull();
      node0.isTypeOf();
      node0.isSetterDef();
      node1.isIn();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 43, (-324));
      Node node1 = new Node(125, node0, node0);
      node1.cloneTree();
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newString("ocGV,{V6c<");
      node1.checkTreeEquals(node3);
      Node node4 = Node.newString(147, "ocGV,{V6c<");
      node4.isGetterDef();
      node4.addChildrenToFront(node2);
      node4.isAssign();
      node4.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(120, 132, (-1));
      node0.isContinue();
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node0.getLastSibling();
      Node.newNumber((-153.721));
      Node node1 = new Node(4, (-901), 0);
      node1.isParamList();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isBlock();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      Node.newString(37, "X^@9");
      Node node2 = new Node(5945, node1, node0, node1);
      node2.isDebugger();
      node1.removeProp(54);
      node1.isHook();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.setLineno(16);
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.removeProp((-1966));
      Node node3 = Node.newNumber((double) 4095, 39, 4);
      node0.setIsSyntheticBlock(true);
      node0.toString();
      Node node4 = Node.newNumber((-11.0));
      Node node5 = node2.copyInformationFrom(node1);
      node5.isOnlyModifiesThisCall();
      node3.putBooleanProp(2, true);
      node1.replaceChild(node4, node0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = Node.newString("", (-1228), 54);
      Node node2 = new Node(49, node1, node0);
      Node node3 = node2.cloneTree();
      Node node4 = node0.copyInformationFromForTree(node2);
      node0.checkTreeEquals((Node) null);
      node4.isGetterDef();
      node2.addChildrenToFront(node1);
      node0.isAssign();
      // Undeclared exception!
      try { 
        node3.getStaticSourceFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(41);
      node0.isSwitch();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.SimpleSourceFile", 2688, 43);
      Node node2 = node0.copyInformationFrom(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W'G");
      node2.isCall();
      node2.isUnscopedQualifiedName();
      node2.isDebugger();
      node1.isWhile();
      node2.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node(63, node0, node0, node0, node0);
      node1.isRegExp();
      node1.removeChildren();
      node1.setCharno(48);
      node0.isLabelName();
      node1.getIntProp(1941);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      node0.isEquivalentTo(node0, false, false, false);
      node0.isQualifiedName();
      Node node1 = new Node(8233, node0, node0, node0);
      node0.srcrefTree(node1);
      node0.getChildCount();
      node0.isOptionalArg();
      Node node2 = new Node(50, (-1420), 85);
      node2.isIn();
      node2.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      node0.isWith();
      Node node1 = new Node(0, node0, node0, node0, node0, 15, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.putBooleanProp(3860, false);
      Node.extractLineno(56);
      Node node3 = Node.newNumber(1.0);
      node3.isNE();
      node3.isLabel();
      node1.useSourceInfoIfMissingFrom(node3);
      node3.isCase();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      node0.isLocalResultCall();
      node0.removeProp(85);
      node0.isCase();
      node0.isDefaultCase();
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node0.toStringTree();
      node0.isComma();
      int int0 = Node.COLUMN_MASK;
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newString(926, "ocGV,{V6c<");
      node0.detachChildren();
      node0.isContinue();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(42, "ocGV,{V6c<", 52, 512);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = new Node(154, 154, 120);
      node0.isStringKey();
      node0.isWhile();
      Node node1 = node0.getLastSibling();
      Node node2 = new Node(38, node1, 43, 2976);
      Node node3 = new Node(4095, node2, node1, node1, (-86), 15);
      node3.isAnd();
      node0.isQuotedString();
      node2.isOr();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      int int0 = 43;
      String string0 = "ocGV,{V6c<";
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      node0.putProp(int0, string0);
      Node node1 = new Node(node0.LENGTH, int0, node0.IS_NAMESPACE);
      String string1 = "t4{)?5_NyEj!h~>0[9";
      Node node2 = Node.newString(string1, node1.COLUMN_MASK, node0.FLAG_THIS_UNMODIFIED);
      int int1 = 49;
      Node node3 = new Node(int1, node0, node1);
      double double0 = (-1.0);
      Node node4 = Node.newNumber(double0, node2.REFLECTED_OBJECT, node2.CHANGE_TIME);
      int int2 = (-181);
      node4.setLineno(int2);
      node2.isAdd();
      node3.isCatch();
      Node node5 = node3.removeChildAfter(node0);
      node5.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^e}1)X)JgP");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "In");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber(0.0);
      node0.getJsDocBuilderForNode();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(101, node0, 16, 108);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node2 = node1.cloneNode();
      node1.isGetElem();
      node1.isLabelName();
      node1.isOr();
      node2.isLocalResultCall();
      node1.isName();
      node2.isRegExp();
      node0.mayMutateArguments();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node2.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isStringKey();
      Node node1 = new Node(39);
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = node2.copyInformationFrom(node1);
      node2.addChildrenToFront(node0);
      node2.isNE();
      node2.getAncestor(42);
      Node node4 = Node.newNumber((-740.7531302808));
      node3.replaceChild(node4, node0);
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(148, 148, 148);
      Node node1 = new Node(148, node0, 1, 2);
      node1.putProp((-488), node0);
      Node node2 = Node.newString(893, "ThFuBSDz.<{");
      node2.addChildToFront(node1);
      Node node3 = new Node((-663), node2, 29, 1294);
      node1.isScript();
      node1.isLabelName();
      node0.isNot();
      node0.isOr();
      Node node4 = node2.copyInformationFrom(node0);
      node1.isSetterDef();
      node1.isNoSideEffectsCall();
      node4.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = new Node((-12), (-12), (-12));
      node0.isWith();
      Node node1 = new Node(126, 47, 1998);
      node1.isBlock();
      node1.copyInformationFrom(node0);
      node0.isSetterDef();
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node((-733), (-733), (-733));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<TemplateType> immutableList1 = immutableList0.reverse();
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList1, (ImmutableList<JSType>) null);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, templateTypeMap0);
      node0.getJSType();
      jSTypeArray0[1] = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], jSTypeArray0);
      JSType jSType0 = templateTypeMapReplacer0.caseFunctionType(functionType0);
      jSTypeArray0[2] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node1.isLocalResultCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node.newString("J");
      Node node0 = new Node(16, 1, 50);
      Node node1 = new Node(15);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node2 = new Node(40, node1, node1);
      node1.isAdd();
      node2.isFor();
      node2.getString();
      double double0 = (-2992.1364513636);
      Node.newNumber(double0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 132, 132);
      node0.putProp(132, "ocGV,{V6c<");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(37, nodeArray0, 9, 2);
      Node node2 = node1.cloneNode();
      node2.removeChildren();
      node1.isGetterDef();
      node0.getSourceOffset();
      node1.addChildrenToFront(node0);
      node0.isAssign();
      Node node3 = new Node(19, nodeArray0);
      node3.addSuppression("ocGV,{V6c<");
      node0.getStaticSourceFile();
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV {V6:<");
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node0.putProp(43, "ocGV {V6:<");
      Node node1 = new Node(46, node0, 47, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.addChildToFront(node1);
      Node node2 = Node.newNumber((-1097.57853114));
      Node node3 = new Node((-807), node2, 40, 0);
      node3.getIntProp(2);
      node3.isInc();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = new Node(2244, 152, 2244);
      Node node1 = new Node(47, node0, node0, node0);
      node1.isNE();
      node0.isLabel();
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isCase();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGH,{Vc<");
      node0.isName();
      node0.isInstanceOf();
      Node node1 = Node.newString("bm}0rtmQCudu");
      node1.putBooleanProp((-2112), true);
      node1.isNE();
      node0.useSourceInfoFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      Node node0 = Node.newNumber((-1.0));
      node0.setLineno(57);
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      node0.isQualifiedName();
      Node node2 = node0.copyInformationFromForTree(node0);
      node2.removeProp(57);
      Node node3 = new Node((byte)44, node0, node0);
      node2.isCall();
      node3.isUnscopedQualifiedName();
      node2.getBooleanProp(93);
      node3.isWith();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = new Node((-4463), (-2904), (-4463));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.isEquivalentToShallow((Node) null);
      node0.isBlock();
      int int0 = 446;
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newNumber((-6479.6));
      node0.detachChildren();
      Node node1 = Node.newNumber((-6479.6));
      Node node2 = new Node(42, node1);
      node2.isContinue();
      Node node3 = new Node(46, (-1165), 49);
      node0.isBlock();
      node0.srcref(node2);
      Node node4 = node2.copyInformationFromForTree(node0);
      node4.siblings();
      node2.getExistingIntProp(13);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(2182);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = node0.copyInformationFrom(node1);
      node0.addChildrenToFront(node3);
      node1.isNE();
      Node node4 = node2.getAncestor(112);
      node4.replaceChild(node1, node2);
      node1.isFromExterns();
      node4.isDebugger();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(43);
      Node node1 = new Node(53, node0, node0, 2, 1836);
      Node node2 = new Node(56);
      node2.isOnlyModifiesThisCall();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.putBooleanProp(32, false);
      node1.isNE();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = new Node(120, 1460, 120);
      node0.isVoid();
      Node node1 = node0.cloneNode();
      node1.setLength((-169));
      node1.isGetterDef();
      node1.isAssign();
      node1.getStaticSourceFile();
      Node.newNumber((-1647.54157518), 30, 4);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString(100, "missing prop: ");
      Node node1 = new Node(52, node0, 39, 113);
      node1.isScript();
      node0.isLabelName();
      node0.isNot();
      node0.isOr();
      Node node2 = node1.copyInformationFrom(node0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      node1.copyInformationFromForTree(node2);
      node1.setIsSyntheticBlock(false);
      node2.getBooleanProp(1);
      nodeArray0[6] = node2;
      nodeArray0[7] = node0;
      Node node3 = new Node((-2060), nodeArray0, 43, 52);
      node3.isSetterDef();
      node1.isNoSideEffectsCall();
      nodeArray0[5].isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = new Node(120, 120, 39);
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeRegistry0.getType("hQd($sWi&nm$O|an;nK");
      jSTypeArray0[0] = null;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = new Node(576, (-2096), 32);
      node2.getInputId();
      node2.getBooleanProp(57);
      node0.isWith();
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, 57, 1);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isCatch();
      node1.isEquivalentTo(node2, false, true, false);
      node0.isQualifiedName();
      node2.isOptionalArg();
      Node node3 = new Node((-143), 49, (-3416));
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node3;
      Node node4 = new Node((-2096), nodeArray0);
      node4.isIn();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      Node node1 = Node.newString(100, "ocGV,{V6c<");
      Node node2 = Node.newString("t4{)?5_NyEj!h~>0[9", 4095, 2);
      Node node3 = new Node(49, node0, node1);
      Node node4 = Node.newNumber((-1.0), 57, 56);
      node4.setLineno((-181));
      node2.clonePropsFrom(node3);
      node1.isTry();
      node1.getIntProp(2183);
      node3.hasMoreThanOneChild();
      Node node5 = new Node(40, node1, node4, node0, node3);
      node4.addChildrenAfter(node1, node5);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString("ocGV,{V6c<", 43, 43);
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString(48, "ocGV,{V6c<");
      node0.addChildToFront(node1);
      Node node2 = new Node(30, node0, 43, 1);
      node0.isScript();
      node2.useSourceInfoIfMissingFromForTree(node1);
      node2.isQualifiedName();
      node2.isOptionalArg();
      Node node3 = new Node(8, (-184), 506);
      node3.siblings();
      node1.isIn();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node(42, 42, 43);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node0.getBooleanProp(103);
      node1.isNull();
      node0.isTrue();
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newString("bm}0rtmQCudu");
      boolean boolean0 = node0.isNull();
      node0.setLineno((-622));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(63);
      JSType.toMaybeTemplatizedType((JSType) null);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 47, 50, 62);
      Node node2 = node0.clonePropsFrom(node1);
      node1.addChildBefore(node0, node2);
      node1.isTry();
      node1.isHook();
      // Undeclared exception!
      try { 
        node1.getLastSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node((-624));
      Node node1 = node0.srcrefTree((Node) null);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = new Node(256, 256, 256);
      node0.isWith();
      Node node1 = new Node(0, node0, node0, node0, node0, 15, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.putBooleanProp(3860, false);
      node1.setLineno((-184));
      Node node3 = node1.clonePropsFrom(node0);
      node1.isEquivalentTo(node3, false, true, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node3.setJSDocInfo(jSDocInfo0);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)0;
      Node node0 = new Node(155, (-2281), 3168);
      node0.isVoid();
      node0.getInputId();
      node0.getBooleanProp((byte)119);
      node0.putProp((-2281), (Object) null);
      node0.isWith();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(57, 9);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      Node node2 = node0.copyInformationFrom(node0);
      node1.getStaticSourceFile();
      node1.getProp(33);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isCall();
      node0.isString();
      node1.isGetProp();
      node1.setVarArgs(false);
      Node node3 = Node.newString("l~B'28M/c~N%<");
      node3.mayMutateArguments();
      node1.setString("G;H");
      node0.isUnscopedQualifiedName();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)116;
      Node node0 = Node.newNumber((-1.0));
      node0.setLineno(57);
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      node0.isQualifiedName();
      Node node2 = node0.copyInformationFromForTree(node0);
      node2.removeProp(57);
      Node node3 = new Node((byte)44, node0, node0);
      node2.isCall();
      node0.isString();
      node3.useSourceInfoIfMissingFrom(node0);
      node3.getStaticSourceFile();
      node3.setChangeTime((-2223));
      node3.isRegExp();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("bn");
      Node node1 = new Node(15, node0);
      Node node2 = new Node(47);
      node1.copyInformationFrom(node0);
      node0.addChildrenAfter(node1, (Node) null);
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(49, node0, node0);
      Node node2 = new Node(32);
      node1.addChildrenAfter(node2, (Node) null);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = Node.newNumber((-703.0));
      node1.setLineno(3714);
      Node node2 = new Node(38);
      node1.addChildrenToFront(node0);
      node2.isQualifiedName();
      node1.copyInformationFromForTree(node0);
      int int0 = 114;
      // Undeclared exception!
      try { 
        node0.removeProp(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = new Node(93);
      node0.isNE();
      node0.mayMutateArguments();
      Node node1 = new Node(52);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">VNnlaj");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.setSourceEncodedPosition(47);
      node1.addSuppression(">VNnlaj");
      node1.removeFirstChild();
      node2.putIntProp(152, 39);
      int int0 = (-2272);
      node1.addChildrenAfter((Node) null, node2);
      Node node3 = node1.cloneTree();
      node3.siblings();
      node2.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.setChangeTime(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node(93, 93, 93);
      node0.isLocalResultCall();
      node0.removeProp(93);
      Node node1 = new Node(32, node0, node0);
      node1.isEmpty();
      Node node2 = node1.srcref(node0);
      node2.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node.newString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = jSTypeRegistry0.createTemplateType("");
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType1, templateType0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType1;
      jSTypeArray0[4] = (JSType) templateType0;
      jSTypeArray0[5] = (JSType) templateType0;
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType1, (JSType) templateType1, (JSType) templateType1, (JSType) templateType0, (JSType) templateType1, (JSType) templateType0, jSTypeArray0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], jSTypeArray0);
      templateTypeMapReplacer0.caseFunctionType(functionType0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isLocalResultCall();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = Node.newNumber((double) 83);
      node0.setLineno((-1379));
      Node node1 = new Node(192);
      node1.addChildrenToFront(node0);
      node1.isQualifiedName();
      node1.removeProp((-2844));
      Node node2 = new Node(13, 56, 57);
      Node node3 = Node.newNumber((double) 52, 2444, (-1281));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "second new child has existing parent");
      node2.cloneTree();
      node2.isString();
      node1.clonePropsFrom(node3);
      node0.isThrow();
      node3.isEquivalentTo(node1, true, false, true);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      node0.isDec();
      int int0 = Node.EMPTY_BLOCK;
      Node node1 = new Node(30, node0, node0);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(305, (-1), (-1));
      Node node1 = Node.newNumber((double) 55, 2, (-5418));
      Node node2 = new Node(15, node0, node1);
      node0.isThis();
      node2.getChildCount();
      Node node3 = new Node(49, 2, 16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isGetProp();
      node3.isNoSideEffectsCall();
      Node node4 = Node.newString(122, "var_args_name");
      node4.isVoid();
      node3.isObjectLit();
      node4.isExprResult();
      node4.getInputId();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = Node.newString("l~B'28M/c~N%<");
      node0.putIntProp(57, 9);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("l~B'28M/c~N%<");
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node1 = Node.newString(135, ".", 93, 48);
      Node node2 = new Node(30, node0, node1);
      node0.toStringTree();
      node0.isNoSideEffectsCall();
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = new Node(143, (-1), (-1));
      Node node1 = new Node(120, 39, (-587));
      Node node2 = Node.newNumber((double) 39);
      node1.srcref(node2);
      Node node3 = Node.newNumber((double) 57, 53, 12);
      node3.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = new Node(98);
      node0.getJsDocBuilderForNode();
      Node node1 = node0.clonePropsFrom(node0);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node node0 = new Node(100);
      node0.isArrayLit();
      Node node1 = new Node((-1066), 55, 36);
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newNumber((double) 46);
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node(43, (-1), (-1));
      Node node1 = new Node(108, node0, node0, node0);
      node1.isNE();
      node0.isLabel();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isCase();
      node0.isWhile();
      Node node3 = Node.newString(4095, (String) null);
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = new Node(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = new Node(1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.addChildrenToFront(node2);
      node0.getAncestor(15);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = Node.newNumber(1506.241722, (-1219), (-1620));
      boolean boolean0 = node0.isNoSideEffectsCall();
      Node node1 = new Node((-1300), node0);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = node1.srcref(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "..h*");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node4 = Node.newNumber(1128.9);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#8m*ivNI)zHDFRe");
      node0.addChildBefore(node1, node1);
      node0.getQualifiedName();
      node4.children();
      Node node5 = node2.useSourceInfoFrom(node3);
      boolean boolean2 = true;
      node2.isEquivalentTo(node3, boolean0, boolean2, boolean1);
      node5.getSourceFileName();
      node2.cloneTree();
      // Undeclared exception!
      try { 
        node2.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(148, 148, 148);
      Node node1 = new Node(148, node0, 1, 2);
      Node.newString(893, "ThFuBSDz.<{");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.areAllFlagsSet();
      Node.newString("ThFuBSDz.<{");
      node1.isNoSideEffectsCall();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(117);
      node0.removeProp(117);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-710), 32, 31);
      node2.isGetterDef();
      node0.isAssign();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(148, 148, 148);
      Node node1 = new Node(1, node0, node0, node0, node0, 46, 56);
      Node node2 = node0.copyInformationFromForTree(node0);
      node2.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        node2.isEmpty();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(143, 143, 143);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.putBooleanProp(131072, false);
      node0.setLineno(31);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.toStringTree();
      node0.isComma();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = new Node(256, 256, 256);
      node0.isWith();
      Node node1 = new Node(0, node0, node0, node0, node0, 15, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node1.setCharno(12);
      node2.putBooleanProp(3860, false);
      node1.setLineno((-184));
      node1.clonePropsFrom(node0);
      node1.cloneNode();
      node0.setString("com.google.javascript.rhino.jstype.SimpleSourceFile");
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = Node.newString("bm}0rtmQCudu");
      node0.getString();
      Node node1 = new Node(47, 1, 38);
      Node node2 = Node.newNumber((-1593.1992), 49, 119);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ": ");
      Node node3 = node1.cloneTree();
      node3.isString();
      Node node4 = node1.clonePropsFrom(node2);
      node1.isThrow();
      node4.isLabel();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, 57, 1);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#8m*ivNI)zHDFRe");
      node2.isCatch();
      node0.getLastSibling();
      node1.isDebugger();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1%@\"vKHL|iT^SX");
      Node node0 = new Node(103);
      Node node1 = new Node(36, 40, 1);
      Node node2 = new Node(46);
      node0.addChildToFront(node1);
      Node node3 = node0.copyInformationFrom(node2);
      node3.putBooleanProp(53, false);
      node2.setLineno(77);
      node2.isInstanceOf();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(2, node0, node0, node0);
      node1.putBooleanProp(32, true);
      node0.setLineno(15);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(32, nodeArray0);
      node2.clonePropsFrom(node1);
      node1.isEquivalentTo(node1, true, false, true);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      node0.isWith();
      Node node1 = new Node(126, 47, 1998);
      node1.isBlock();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(37, 53, 37);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node0.isNull();
      node0.putBooleanProp(1962, true);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8fA#5KY", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isNE();
      node1.useSourceInfoFrom(node0);
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isString();
      Node node1 = Node.newString("#8m*ivNI)zHDFRe", 15, 39);
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(30, 31, 36);
      Node node3 = Node.newString("#8m*ivNI)zHDFRe", 1849, 110);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VPlJS");
      node0.cloneTree();
      node3.isString();
      node2.clonePropsFrom(node1);
      node0.isThrow();
      node3.isEquivalentTo(node0, false, false, false);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node(256, 256, 256);
      node0.isWith();
      Node node1 = new Node(38, node0, node0, node0, 57, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node1.setCharno(12);
      node2.putBooleanProp(3860, false);
      node1.setLineno((-184));
      node1.clonePropsFrom(node0);
      node1.cloneNode();
      node0.setString("com.google.javascript.rhino.jstype.SimpleSourceFile");
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = new Node(85);
      node0.putIntProp(493, 85);
      node0.removeProp(85);
      node0.getIntProp(493);
      Node node1 = new Node(46, (-669), (-1873));
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newNumber((double) 34, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(4, node0, node0, node0, node0, (-363), 3850);
      Node node2 = node0.cloneTree();
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.checkTreeEquals(node2);
      node0.isDebugger();
      node3.isWhile();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isLocalResultCall();
      Node node1 = new Node(56, node0, 42, 54);
      node0.isEquivalentTo(node1, false, false, false);
      node0.isQualifiedName();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isOptionalArg();
      Node node2 = new Node(52, 46, 50);
      node2.isEquivalentToTyped(node0);
      node2.isIn();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node0 = Node.newString(77, "P}");
      Node node1 = new Node(77, node0, node0, 1903, 55);
      node1.setChangeTime(43);
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = "ocGV,{V6c<";
      Node node0 = Node.newString(43, "ocGV,{V6c<");
      TreeSet<Node> treeSet0 = new TreeSet<Node>();
      node0.putProp(43, "ocGV,{V6c<");
      Node node1 = Node.newString("4?fN", 32, 57);
      Node node2 = new Node(32, node0, node1);
      Node node3 = node2.cloneTree();
      node2.copyInformationFromForTree(node3);
      Node node4 = null;
      node2.checkTreeEquals((Node) null);
      node2.addChildrenToFront(node4);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.base.Predicates$IsEqualToPredicate");
      Node node0 = Node.newNumber((-0.10853912745319517));
      node0.getLength();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.isInc();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getSourceOffset();
      node0.setChangeTime(111);
      node0.isFor();
      node0.setSourceFileForTesting("K,rit{ig7*O}(<|?o");
      node0.isSwitch();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K,rit{ig7*O}(<|?o");
      node0.getDirectives();
      node0.detachChildren();
      node0.setDouble((-0.10853912745319517));
      node0.isNot();
      node0.setSideEffectFlags(0);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = new Node(4413);
      node0.children();
      Node node1 = new Node(49, (-2792), 0);
      Node node2 = new Node(38, node1, node0, node1, node0);
      node1.useSourceInfoFromForTree(node2);
      node1.isParamList();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "StringNode: str is null");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node((-1), node0, 32, 43);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(37, 53, 37);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node0.isNull();
      node0.isWhile();
      node1.isEquivalentTo(node0, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("ASSIGN");
      jSTypeArray0[0] = (JSType) templateType0;
      TemplateType templateType1 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      jSTypeArray0[1] = (JSType) templateType1;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[2] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.srcref(node2);
      node0.addChildrenAfter(node1, node2);
      int int0 = (-203);
      int int1 = (-4530);
      Node.newNumber((double) node2.SLASH_V, int0, int1);
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(103);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString((-2645), "6aM{Qz");
      node1.setLineno(2);
      Node node2 = new Node((-3431), node0, node0, node1, 2425, (-2645));
      Node node3 = node0.clonePropsFrom(node2);
      node3.isEquivalentTo(node0, false, false, true);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = new Node(154, 154, 4413);
      node0.isWith();
      Node node1 = new Node(36, node0, node0, node0, node0, 154, 288);
      Node node2 = node1.copyInformationFrom(node0);
      node1.putBooleanProp(47, false);
      node0.setLineno(744);
      Node node3 = Node.newString("~@3TxoU~I>`R S", 41, 40);
      node1.getJsDocBuilderForNode();
      node3.setOptionalArg(true);
      Node node4 = new Node(79, node3, node1, node2, node2, (-2902), 47);
      Node node5 = new Node(41);
      Node node6 = node4.clonePropsFrom(node5);
      node6.isEquivalentTo(node1, true, true, false);
      node6.getAncestor(30);
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(55);
      node1.getSourceOffset();
      Node node2 = node0.copyInformationFrom(node1);
      node2.addChildrenToFront(node1);
      node0.getAncestor(111);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(40, 40, 40);
      node0.isLocalResultCall();
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = Node.newNumber(2001.553888986546);
      node1.isNull();
      Node.newString(47, "?6#xWt");
      node1.checkTreeEqualsImpl(node1);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVoid();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.getInputId();
      node0.getBooleanProp(120);
      node0.isDo();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString("*8|O2*]=U");
      Node node1 = new Node(15);
      Node node2 = new Node(40, node1, node1);
      node1.isAdd();
      node1.isWith();
      node2.isOptionalArg();
      node0.isIf();
      node2.addChildrenAfter(node0, node1);
      node0.putProp(57, (Object) null);
      Node node3 = node0.getParent();
      node3.setSideEffectFlags(1222);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = new Node(305, 18, 18);
      Node node1 = Node.newNumber((double) 55, 2, 53);
      Node node2 = new Node(15, node0, node1);
      node0.isThis();
      Node node3 = new Node(49, 2, 16);
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node2.isOnlyModifiesArgumentsCall();
      node2.addChildBefore(node0, node1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = new Node(305, (-1), (-1));
      Node node1 = Node.newNumber((double) 55, 2, 53);
      Node node2 = new Node(15, node0, node1);
      node0.isThis();
      Node node3 = new Node(49, 2, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node3.setJSDocInfo(jSDocInfo0);
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node4.isIf();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node3.addChildrenAfter(node0, node2);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      Node node1 = new Node(56, 152, 0);
      Node node2 = new Node(12, node1, node0, 50, 38);
      node1.isIf();
      node1.addChildrenAfter(node2, (Node) null);
      Node node3 = node2.getParent();
      node0.addChildBefore(node3, node3);
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(103);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
      Node node1 = Node.newString("~@3TxoU~I>`R S");
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node(1, node0);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isContinue();
      node0.isInstanceOf();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(471, node0, node0, node0);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(51, 1, 54);
      Node node3 = new Node(46);
      node0.addChildToFront(node2);
      Node node4 = node2.copyInformationFrom(node0);
      node4.putBooleanProp(8192, false);
      node0.setLineno(57);
      node3.isNoSideEffectsCall();
      node2.useSourceInfoFrom(node4);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = new Node(85);
      node0.cloneTree();
      node0.putIntProp(493, 85);
      node0.removeProp(85);
      node0.isAssign();
      node0.getSourceOffset();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(0);
      node0.children();
      Node node1 = new Node(16, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isParamList();
      node1.getSideEffectFlags();
      Node node3 = node0.useSourceInfoFrom(node2);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.isEquivalentTo(node1);
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isContinue();
      node0.isInstanceOf();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.putProp(713, "");
      node0.putIntProp((-802), 4850);
      node0.removeProp(2);
      node0.isAssign();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = new Node(52, node0, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node2 = new Node((-1991), 36, 2267);
      Node node3 = new Node(0);
      node1.addChildToFront(node3);
      node0.copyInformationFrom(node2);
      node3.putBooleanProp(726, false);
      node2.setLineno(885);
      node1.isInstanceOf();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVoid();
      node0.getInputId();
      node0.getBooleanProp(120);
      node0.isWith();
      Node node1 = Node.newString("Not(");
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = new Node(305, 305, 305);
      Node node1 = Node.newNumber((double) 55, 2, 53);
      Node node2 = new Node(53, node1, node1, 305, 39);
      Node node3 = new Node(49, 2, 16);
      Node node4 = new Node(105, node3, node3, 4095, 50);
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(103, nodeArray0, 103, (-2711));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(148, 148, 148);
      Node node1 = new Node(1, node0, node0, node0, node0, 46, 56);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.checkTreeEquals(node1);
      node1.isAssign();
      node0.isWhile();
      node1.isReturn();
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = new Node(43);
      Node node1 = new Node(57, node0, node0);
      boolean boolean0 = node0.isThis();
      Node node2 = new Node(725, 57, 2);
      boolean boolean1 = node0.isEmpty();
      Node node3 = node0.srcref(node2);
      node3.getSourceOffset();
      node3.detachFromParent();
      node3.toString();
      node1.getJsDocBuilderForNode();
      node3.setString("dpy\"9y@/:p0( (.Sv~/");
      node0.isEquivalentTo(node3, boolean1, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setIsSyntheticBlock(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("Not declared as a type name");
      Node node1 = Node.newNumber((double) 30);
      node1.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, (TemplateTypeMap) null);
      templateTypeMapReplacer0.caseNumberType();
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      templateTypeMapReplacer0.caseNumberType();
      Node node2 = Node.newString("Named type with empty name component");
      node2.getDirectives();
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(1.2, 34, 34);
      node0.isSwitch();
      Node node1 = new Node(49, node0, node0);
      InputId inputId0 = new InputId("\"Fk^");
      node0.setInputId(inputId0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append(",Z@bRm(`6_;G");
      Node.newNumber((double) 36);
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      templateTypeMapReplacer0.caseNumberType();
      Node node2 = Node.newString("vo");
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = Node.newString(103, "\rt<;AO", 4, 103);
      node0.isOptionalArg();
      Node node1 = new Node(103, node0, node0, node0, 1572, 1676);
      Node node2 = new Node(103, node1, 4, 1572);
      node1.mayMutateArguments();
      node2.getIntProp(4095);
      node2.isInc();
      node2.isOnlyModifiesArgumentsCall();
      node2.getChildAtIndex((-3563));
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(31, node0, node0, node0, 12, 43);
      node1.isStringKey();
      node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.setMutatesArguments();
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isSwitch();
      node0.appendStringTree((Appendable) null);
      Node node1 = node0.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node1.isGetElem();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(117, (-3333), (-852));
      node1.isBlock();
      node1.isWhile();
      Node node2 = node0.getLastSibling();
      node1.getBooleanProp((-506));
      node2.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      Node node4 = new Node((-166), 48, 36);
      node0.isThrow();
      node1.isTypeOf();
      node3.toStringTree();
      node3.getChildAtIndex(47);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = new Node(105, 2690, 1073741824);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node0.isEquivalentToTyped(node1);
      node0.isHook();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = Node.newString("leC");
      Node node1 = new Node(2, node0, 2, 8);
      node0.setLength(43);
      node0.setDouble(2);
      node1.isWith();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING leC [length: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      Node node1 = new Node(50);
      node1.copyInformationFrom(node0);
      node0.addChildrenToFront(node1);
      node0.removeFirstChild();
      node0.getAncestor(130);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = Node.newString("`", 8, 8);
      Node node1 = new Node((-1077), node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.checkTreeEquals(node2);
      node3.addChildrenToFront(node2);
      node3.removeChildAfter(node2);
      node1.isDo();
      node1.isEquivalentTo(node2, false, true, true);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      node0.getJsDocBuilderForNode();
      node0.isAssignAdd();
      Node node1 = new Node(39, (-1075), (-1489));
      node1.addChildToBack(node0);
      Node node2 = new Node(41, node1, 1, 2168);
      node0.isLabelName();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-1));
      node0.isWith();
      Node node1 = new Node(126, 47, 1998);
      Node node2 = new Node((-1), node1, node1, node1, 2760, 57);
      node2.isLocalResultCall();
      node1.useSourceInfoFromForTree(node2);
      node1.isBlock();
      Node.newNumber((double) 48, 48, (-285));
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(37, 53, 37);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      node1.isEquivalentToTyped(node0);
      node0.isHook();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isFromExterns();
      Node node1 = new Node(30, node0, node0, node0, node0);
      Node node2 = new Node((-981), 57, 43);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node2.isParamList();
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = new Node(51, 3, 46);
      Node node2 = new Node(32, 37, 39);
      node1.isBlock();
      Node node3 = node2.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType.cast((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("D3ij4s", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node4 = enumElementType1.getRootNode();
      // Undeclared exception!
      try { 
        node4.isEquivalentToTyped(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(305, (-32), (-32));
      Node node1 = Node.newNumber((double) 55, 2, 53);
      Node node2 = new Node(53, node1, node1, (-32), 39);
      Node node3 = new Node(49, 2, 16);
      Node node4 = new Node(105, node3, node3, 4095, 50);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDisposedParameter("=");
      node4.setJSDocInfo(jSDocInfo0);
      node2.getChangeTime();
      node4.isNE();
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = Node.newNumber((double) 34, 34, 34);
      Node node1 = Node.newString("cfw~88}T'kF&pP\"", 34, 0);
      Node node2 = new Node(37, node1, node1);
      Node node3 = node2.cloneTree();
      Node node4 = node2.copyInformationFromForTree(node3);
      node1.checkTreeEquals(node4);
      node4.addChildrenToFront(node0);
      node0.removeChildAfter(node4);
      double double0 = (-1763.80653);
      Node node5 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node5.isDo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = new Node(103);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString(40, "6aM{Qz");
      Node node2 = new Node(57, node0, node0, node1, 2425, 52);
      Node node3 = node0.clonePropsFrom(node2);
      node0.getSourceFileName();
      node2.removeChild(node1);
      node1.putBooleanProp(101, true);
      node2.isUnscopedQualifiedName();
      node1.addChildrenToBack(node0);
      node3.isSyntheticBlock();
      node3.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isAssignAdd();
      node0.setLineno(110);
      Node node1 = new Node(8, 1, 12);
      Node node2 = new Node(54, node0, node1, node0, 0, 51);
      node0.isNE();
      node0.getParent();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isAssignAdd();
      node0.setVarArgs(false);
      node0.cloneTree();
      node0.isDefaultCase();
      node0.isFalse();
      node0.isDo();
      node0.getString();
      int int0 = 26;
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(153);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(2, node2);
      node3.isGetElem();
      Node node4 = Node.newNumber((double) 30);
      node4.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = new Node(4413);
      node0.children();
      Node node1 = new Node(49, (-2792), 0);
      Node node2 = new Node(38, node1, node0, node1, node0);
      node1.useSourceInfoFromForTree(node2);
      node2.removeFirstChild();
      node1.isParamList();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node node0 = new Node(37, 53, 37);
      node0.isBlock();
      Node node1 = node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node1.isEquivalentToTyped(node0);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Node node1 = new Node(4095);
      Node node2 = node0.copyInformationFrom(node1);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(56, nodeArray0);
      node3.srcref(node0);
      node3.getAncestors();
      node3.isGetElem();
      node2.isEquivalentTo(node0);
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(100);
      node0.isArrayLit();
      node0.isWith();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(38, nodeArray0);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getChildCount();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = Node.newString("#8m*ivNI)zHDFRe", 48, 8);
      Node node1 = new Node(38, node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = node1.copyInformationFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry0.createParameters((JSType[]) null);
      node4.checkTreeEquals(node0);
      node4.addChildrenToFront(node2);
      Node node5 = node3.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        node5.isDo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(40, node0, node0, node0);
      node0.isLabel();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isCase();
      node2.isFor();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = new Node(82);
      node0.isLocalResultCall();
      Node node1 = new Node(56, node0, 42, 54);
      node1.isSetterDef();
      node0.isQualifiedName();
      node0.isOptionalArg();
      Node node2 = new Node(52, 46, 50);
      node2.isIn();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(100);
      Node node1 = Node.newString("empty_block", 16, 49);
      node0.isArrayLit();
      node0.isWith();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getChildCount();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = new Node(255, 255, 255);
      node0.mayMutateGlobalStateOrThrow();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(15, node0, node0, node0, 57, 4095);
      node0.copyInformationFrom(node1);
      node1.putBooleanProp(40, true);
      node1.setLineno((-184));
      Node node2 = new Node(31, 12, 51);
      node2.isEquivalentTo(node1);
      node1.toStringTree();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.isGetElem();
      node0.isComma();
      node0.isBreak();
      node0.getSourceOffset();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.isSwitch();
      Node node1 = node0.copyInformationFrom(node0);
      node0.isDec();
      Node node2 = new Node(4095, node0, node1, node0, node0, 0, 38);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = new Node(132);
      Node node1 = new Node(51, 3, 46);
      Node node2 = Node.newString("/79ZA=S", (-377), 16);
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.isCall();
      node0.isGetterDef();
      node1.cloneTree();
      node0.getStaticSourceFile();
      node2.isGetProp();
      Node node3 = Node.newString(63, "<s");
      node1.isVoid();
      node3.isObjectLit();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = Node.newString(125, "S,g5{[9Qi\"~*jPM");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.srcrefTree(node1);
      node0.isVoid();
      node0.getBooleanProp(529);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = node0.cloneTree();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.checkTreeEquals(node1);
      node0.addChildrenToFront(node2);
      node1.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node1.isDo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = new Node(37, 53, 37);
      node0.isBlock();
      Node node1 = Node.newString("pM`ZjGV^Q:v|7C4e55", 3, 57);
      node0.isRegExp();
      node1.isCase();
      node0.setSideEffectFlags(32);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      int int0 = (-633);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("ul[@<~l\"1< apBTH$V", (-633), (-633));
      Node node1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      node0.isEquivalentTo(node1);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(86, 86, 51);
      Node node1 = new Node(2);
      node0.copyInformationFrom(node1);
      node0.addChildrenToFront(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node2 = enumElementType0.getPropertyNode(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      int int0 = (-470);
      // Undeclared exception!
      try { 
        node2.getAncestor(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.isSwitch();
      Node node1 = node0.copyInformationFrom(node0);
      node0.isDec();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("var_args_name", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.isCall();
      node1.isGetProp();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      Node node1 = Node.newNumber((-747.93838));
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.clonePropsFrom(node1);
      node1.isGetElem();
      node1.getString();
      node3.isGetElem();
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isDec();
      Node.newNumber(2396.039, 43, 30);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 21);
      Node node1 = new Node(21, node0, (-150), 1529);
      Node node2 = node1.getLastSibling();
      node2.copyInformationFrom(node1);
      node0.setWasEmptyNode(false);
      node1.isEquivalentToTyped(node2);
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Node node0 = Node.newString(103, "\rt<;AO", 103, 103);
      Node node1 = new Node(103, node0, node0, node0, 1572, 1676);
      Node node2 = new Node(103, node1, 4, 1572);
      node1.toString();
      node0.addChildrenToBack(node2);
      node2.getIntProp(4095);
      node2.isInc();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = new Node((-3485));
      Node node1 = new Node(4044, node0, 37, 2147483645);
      node0.isArrayLit();
      node0.isWith();
      Node node2 = new Node(77, 2147483645, (-260));
      Node.newNumber(0.0, 29, 153);
      node2.isIn();
      node2.useSourceInfoFrom(node0);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(130, node0, node0, 8192, 114);
      node1.isFalse();
      node0.putBooleanProp((-1732), true);
      node0.isNE();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = Node.newString("QKa", 8, 8);
      Node node1 = new Node(86, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node1);
      node2.checkTreeEquals(node0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.isSwitch();
      Node node1 = node0.copyInformationFrom(node0);
      node0.isCatch();
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(105, node0, node2, node2, 15, 4);
      node1.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 47, 47, 47);
      node0.isName();
      Node node1 = Node.newString("6nX^rQn");
      Node node2 = Node.newNumber(788.0, 2213, 0);
      Node node3 = new Node(42, node0, node0, node2, node2);
      node3.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(1355, 47, 27);
      node1.isWith();
      Node node2 = new Node(42, 51, 40);
      node1.isIn();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      Node node1 = new Node(117, node0, node0);
      node0.cloneTree();
      node0.isNE();
      node1.isGetElem();
      node1.isBreak();
  }
}
